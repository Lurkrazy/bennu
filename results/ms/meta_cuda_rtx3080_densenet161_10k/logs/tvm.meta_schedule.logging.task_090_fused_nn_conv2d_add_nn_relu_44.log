2024-03-21 07:30:22 [INFO] [task_scheduler.cc:160] Initializing Task #90: "fused_nn_conv2d_add_nn_relu_44"
2024-03-21 07:30:22 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1104), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1104), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1104), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1104), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(1104), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:22 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:22 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1104), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1104), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1104), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1104), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(54096)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1104), rc_0 * T.int64(276) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(13248)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(276))
                                    v1 = T.axis.spatial(T.int64(1104), rc_0 * T.int64(276) + ax0_ax1_ax2_ax3_fused % T.int64(276))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(138), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(6) + ff_3 * T.int64(6) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1104), rc_0 * T.int64(276) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 8, 1, 6])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 138, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:22 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1104), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1104), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1104), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1104), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(54096)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1104), rc_0_ry_0_rx_0_fused * T.int64(276) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(13248)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(276))
                                    v1 = T.axis.spatial(T.int64(1104), rc_0_ry_0_rx_0_fused * T.int64(276) + ax0_ax1_ax2_ax3_fused % T.int64(276))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(138), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(6) + ff_3 * T.int64(6) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1104), rc_0_ry_0_rx_0_fused * T.int64(276) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 8, 1, 6])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 138, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:22 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1104), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1104), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1104), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1104), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(54096)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1104), rc_0_ry_0_rx_0_fused * T.int64(276) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(13248)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(276))
                                    v1 = T.axis.spatial(T.int64(1104), rc_0_ry_0_rx_0_fused * T.int64(276) + ax0_ax1_ax2_ax3_fused % T.int64(276))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(138), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(6) + ff_3 * T.int64(6) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1104), rc_0_ry_0_rx_0_fused * T.int64(276) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 8, 1, 6])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 138, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:14:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:14:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:14:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 479 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 08:14:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 964 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 08:14:35 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-03-21 08:14:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 08:14:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 08:14:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 08:14:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 08:14:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9977  0.9969  0.9962  0.9953  0.9927  0.9921  0.9914  0.9913  0.9909  0.9907  0.9906  0.9904  0.9902  0.9901  0.9899
[17 : 32]:	0.9896  0.9888  0.9862  0.9860  0.9839  0.9839  0.9835  0.9829  0.9826  0.9818  0.9804  0.9800  0.9793  0.9791  0.9763  0.9759
[33 : 48]:	0.9757  0.9748  0.9744  0.9744  0.9743  0.9734  0.9733  0.9725  0.9720  0.9714  0.9704  0.9703  0.9669  0.9648  0.9645  0.9631
[49 : 64]:	0.9614  0.9590  0.9589  0.9583  0.9583  0.9556  0.9544  0.9541  0.9539  0.9533  0.9531  0.9528  0.9504  0.9503  0.9483  0.9482
2024-03-21 08:14:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:14:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #1: GFLOPs: 17.0980. Time: 4864.1091 us. Best GFLOPs: 17.0980
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #2: GFLOPs: 737.0314. Time: 112.8401 us. Best GFLOPs: 737.0314
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #3: GFLOPs: 160.4744. Time: 518.2554 us. Best GFLOPs: 737.0314
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #4: GFLOPs: 48.3633. Time: 1719.6247 us. Best GFLOPs: 737.0314
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #5: GFLOPs: 2065.8105. Time: 40.2586 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #6: GFLOPs: 1247.8414. Time: 66.6485 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #7: GFLOPs: 172.0129. Time: 483.4912 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #8: GFLOPs: 863.0966. Time: 96.3585 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #9: GFLOPs: 936.3374. Time: 88.8213 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #10: GFLOPs: 349.6626. Time: 237.8485 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #11: GFLOPs: 1079.0142. Time: 77.0766 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #12: GFLOPs: 465.1312. Time: 178.8027 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #13: GFLOPs: 869.6361. Time: 95.6339 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #14: GFLOPs: 458.1919. Time: 181.5107 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #15: GFLOPs: 159.5645. Time: 521.2107 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #16: GFLOPs: 173.1222. Time: 480.3931 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #17: GFLOPs: 1332.3267. Time: 62.4222 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #18: GFLOPs: 203.7298. Time: 408.2207 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #19: GFLOPs: 159.7614. Time: 520.5684 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #20: GFLOPs: 1183.7513. Time: 70.2569 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #21: GFLOPs: 698.5147. Time: 119.0622 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #22: GFLOPs: 212.7127. Time: 390.9814 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:121] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1104), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1104), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1104), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(1104), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(12) + ff_3_init * T.int64(12) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(138), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(1104), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(98))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(49), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(1104), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(49) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1536))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(12) + ff_3 * T.int64(12) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(1104), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(12) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 16, 1, 1, 12])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[138, 4, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 49, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 49], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #24: GFLOPs: 510.0318. Time: 163.0618 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #25: GFLOPs: 235.2459. Time: 353.5310 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #26: GFLOPs: 370.8279. Time: 224.2731 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #27: GFLOPs: 14.1495. Time: 5877.7029 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #28: GFLOPs: 432.8752. Time: 192.1263 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #29: GFLOPs: 152.8065. Time: 544.2616 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #30: GFLOPs: 186.0710. Time: 446.9623 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #31: GFLOPs: 593.9872. Time: 140.0143 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #32: GFLOPs: 1414.3644. Time: 58.8015 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #33: GFLOPs: 716.7165. Time: 116.0385 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #34: GFLOPs: 73.5741. Time: 1130.3809 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #35: GFLOPs: 520.1932. Time: 159.8766 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #36: GFLOPs: 15.8566. Time: 5244.9280 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #37: GFLOPs: 186.4724. Time: 446.0001 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #38: GFLOPs: 935.5173. Time: 88.8992 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #39: GFLOPs: 111.1991. Time: 747.9081 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #40: GFLOPs: 21.5567. Time: 3858.0381 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #41: GFLOPs: 1112.4980. Time: 74.7567 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #42: GFLOPs: 538.0187. Time: 154.5796 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #43: GFLOPs: 402.6759. Time: 206.5352 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #44: GFLOPs: 241.6728. Time: 344.1295 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #45: GFLOPs: 471.9150. Time: 176.2324 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #46: GFLOPs: 279.5837. Time: 297.4663 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #47: GFLOPs: 210.9385. Time: 394.2701 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #48: GFLOPs: 21.2890. Time: 3906.5598 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #49: GFLOPs: 305.0171. Time: 272.6625 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #50: GFLOPs: 883.9463. Time: 94.0857 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #51: GFLOPs: 101.3599. Time: 820.5094 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #52: GFLOPs: 882.4319. Time: 94.2472 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #53: GFLOPs: 87.9103. Time: 946.0407 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #54: GFLOPs: 866.4818. Time: 95.9821 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #55: GFLOPs: 185.0047. Time: 449.5385 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #56: GFLOPs: 202.7124. Time: 410.2696 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #57: GFLOPs: 117.0855. Time: 710.3074 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #58: GFLOPs: 224.2837. Time: 370.8104 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #59: GFLOPs: 2000.3498. Time: 41.5761 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #60: GFLOPs: 173.3003. Time: 479.8994 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #61: GFLOPs: 143.8142. Time: 578.2927 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #62: GFLOPs: 186.2882. Time: 446.4411 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #63: GFLOPs: 55.4177. Time: 1500.7255 us. Best GFLOPs: 2065.8105
2024-03-21 09:10:49 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #64: GFLOPs: 606.8704. Time: 137.0420 us. Best GFLOPs: 2065.8105
2024-03-21 10:31:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 10:31:38 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-03-21 10:31:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 432 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 10:31:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 853 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 10:31:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 1282 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 10:31:40 [INFO] [evolutionary_search.cc:723] Sampled 65 candidate(s)
2024-03-21 10:31:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 10:31:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 10:31:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 10:31:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f6e0da18)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f40421a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f40422a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8e5346848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f27e3fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f59aa898)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ed6620e8)]: 0 failure(s)
2024-03-21 10:31:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1994  1.1973  1.1957  1.1656  1.1600  1.1596  1.1445  1.1385  1.1296  1.1231  1.1199  1.0984  1.0954  1.0950  1.0947  1.0943
[17 : 32]:	1.0929  1.0917  1.0911  1.0892  1.0879  1.0869  1.0854  1.0837  1.0825  1.0693  1.0670  1.0614  1.0612  1.0590  1.0560  1.0550
[33 : 48]:	1.0547  1.0521  1.0515  1.0442  1.0435  1.0415  1.0378  1.0309  1.0280  1.0278  1.0276  1.0271  1.0261  1.0254  1.0227  1.0219
[49 : 64]:	1.0195  1.0177  1.0147  1.0143  1.0134  1.0130  1.0110  1.0096  1.0082  1.0078  1.0072  1.0068  1.0065  1.0062  1.0038  1.0035
2024-03-21 10:31:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 10:31:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #65: GFLOPs: 983.2402. Time: 84.5843 us. Best GFLOPs: 2065.8105
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #66: GFLOPs: 717.9643. Time: 115.8368 us. Best GFLOPs: 2065.8105
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #67: GFLOPs: 2777.4551. Time: 29.9435 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #68: GFLOPs: 2758.7343. Time: 30.1467 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #69: GFLOPs: 1935.4549. Time: 42.9701 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #70: GFLOPs: 1610.9108. Time: 51.6271 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #71: GFLOPs: 2758.9189. Time: 30.1447 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #72: GFLOPs: 2753.3802. Time: 30.2053 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #73: GFLOPs: 1665.5001. Time: 49.9350 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #74: GFLOPs: 2023.0423. Time: 41.1097 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #75: GFLOPs: 2523.7377. Time: 32.9538 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #76: GFLOPs: 2142.5802. Time: 38.8162 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #77: GFLOPs: 2725.4105. Time: 30.5153 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #78: GFLOPs: 1826.9515. Time: 45.5221 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #79: GFLOPs: 2758.9978. Time: 30.1438 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #80: GFLOPs: 1660.7506. Time: 50.0778 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #81: GFLOPs: 2023.1902. Time: 41.1067 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #82: GFLOPs: 2725.6779. Time: 30.5123 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #83: GFLOPs: 1634.0818. Time: 50.8951 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #84: GFLOPs: 1803.7364. Time: 46.1080 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #85: GFLOPs: 1647.9142. Time: 50.4679 us. Best GFLOPs: 2777.4551
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #86: GFLOPs: 2878.9238. Time: 28.8881 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #87: GFLOPs: 2713.6721. Time: 30.6473 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #88: GFLOPs: 2772.4247. Time: 29.9978 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #89: GFLOPs: 1728.5793. Time: 48.1128 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #90: GFLOPs: 2076.8458. Time: 40.0447 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #91: GFLOPs: 1612.0568. Time: 51.5904 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #92: GFLOPs: 1638.1923. Time: 50.7674 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #93: GFLOPs: 1653.9543. Time: 50.2836 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #94: GFLOPs: 1719.4041. Time: 48.3695 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #95: GFLOPs: 1635.5107. Time: 50.8506 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #96: GFLOPs: 1831.4304. Time: 45.4108 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #97: GFLOPs: 1646.2441. Time: 50.5191 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #98: GFLOPs: 1653.8857. Time: 50.2857 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #99: GFLOPs: 2129.8518. Time: 39.0481 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #100: GFLOPs: 2673.0615. Time: 31.1129 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #101: GFLOPs: 2754.9309. Time: 30.1883 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #102: GFLOPs: 2589.5804. Time: 32.1159 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #103: GFLOPs: 2115.9585. Time: 39.3045 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #104: GFLOPs: 2134.6110. Time: 38.9611 us. Best GFLOPs: 2878.9238
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #105: GFLOPs: 2894.4651. Time: 28.7330 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #106: GFLOPs: 1645.7837. Time: 50.5332 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #107: GFLOPs: 2093.7790. Time: 39.7209 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #108: GFLOPs: 2669.5985. Time: 31.1533 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #109: GFLOPs: 1622.9355. Time: 51.2446 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #110: GFLOPs: 2168.1283. Time: 38.3588 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #111: GFLOPs: 1632.4656. Time: 50.9455 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #112: GFLOPs: 2162.1945. Time: 38.4640 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #113: GFLOPs: 1657.2092. Time: 50.1848 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #114: GFLOPs: 1971.7909. Time: 42.1783 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #115: GFLOPs: 1657.2309. Time: 50.1841 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #116: GFLOPs: 1631.7791. Time: 50.9669 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #117: GFLOPs: 2542.7481. Time: 32.7074 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #118: GFLOPs: 1656.3665. Time: 50.2103 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #119: GFLOPs: 1631.9565. Time: 50.9614 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #120: GFLOPs: 2167.7824. Time: 38.3649 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #121: GFLOPs: 1656.0349. Time: 50.2204 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #122: GFLOPs: 1642.9135. Time: 50.6215 us. Best GFLOPs: 2894.4651
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #123: GFLOPs: 2950.5018. Time: 28.1873 us. Best GFLOPs: 2950.5018
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #124: GFLOPs: 1565.8371. Time: 53.1133 us. Best GFLOPs: 2950.5018
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #125: GFLOPs: 2045.8050. Time: 40.6523 us. Best GFLOPs: 2950.5018
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #126: GFLOPs: 520.7740. Time: 159.6983 us. Best GFLOPs: 2950.5018
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #127: GFLOPs: 35.6858. Time: 2330.5250 us. Best GFLOPs: 2950.5018
2024-03-21 10:32:45 [INFO] [task_scheduler.cc:131] [Task #90: fused_nn_conv2d_add_nn_relu_44] Trial #128: GFLOPs: 1131.5744. Time: 73.4965 us. Best GFLOPs: 2950.5018
