2024-03-20 22:52:37 [INFO] [task_scheduler.cc:160] Initializing Task #123: "fused_nn_conv2d"
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(802816)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused % T.int64(256))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(28)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + xx_3 * T.int64(28) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(256) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 8, 1, 8, 2])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 2])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 28])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[1, 128, 2])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
sch.compute_inline(block=b0)
v98 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v98)
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(802816)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused % T.int64(256))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(28)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + xx_3 * T.int64(28) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 8, 1, 8, 2])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 2])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 28])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[1, 128, 2])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
l98 = sch.fuse(l53, l59, l65, preserve_unit_iters=True)
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(802816)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused % T.int64(256))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(128), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(28)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + xx_3 * T.int64(28) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(2), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 8, 1, 8, 2])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 2])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 28])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[1, 128, 2])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
l98 = sch.fuse(l53, l59, l65, preserve_unit_iters=True)
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
2024-03-21 00:03:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 00:03:21 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 00:03:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 498 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:03:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 988 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:03:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 1479 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:03:23 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-03-21 00:03:25 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:03:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:03:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:03:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:03:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9991  0.9989  0.9986  0.9985  0.9981  0.9971  0.9970  0.9956  0.9954  0.9946  0.9944  0.9942  0.9941  0.9939  0.9920
[17 : 32]:	0.9920  0.9909  0.9893  0.9891  0.9881  0.9879  0.9877  0.9876  0.9870  0.9869  0.9867  0.9866  0.9862  0.9855  0.9854  0.9853
[33 : 48]:	0.9850  0.9837  0.9837  0.9836  0.9835  0.9827  0.9820  0.9814  0.9797  0.9795  0.9764  0.9762  0.9756  0.9744  0.9741  0.9739
[49 : 64]:	0.9733  0.9730  0.9727  0.9727  0.9723  0.9719  0.9715  0.9695  0.9689  0.9680  0.9677  0.9671  0.9669  0.9668  0.9668  0.9661
2024-03-21 00:03:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:03:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #1: GFLOPs: 644.1236. Time: 319.0706 us. Best GFLOPs: 644.1236
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #2: GFLOPs: 547.8784. Time: 375.1214 us. Best GFLOPs: 644.1236
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #3: GFLOPs: 61.0965. Time: 3363.8740 us. Best GFLOPs: 644.1236
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #4: GFLOPs: 2423.9366. Time: 84.7881 us. Best GFLOPs: 2423.9366
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #5: GFLOPs: 1094.2953. Time: 187.8112 us. Best GFLOPs: 2423.9366
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #6: GFLOPs: 3443.9986. Time: 59.6751 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #7: GFLOPs: 228.2105. Time: 900.5760 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #8: GFLOPs: 105.2205. Time: 1953.2406 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #9: GFLOPs: 212.2878. Time: 968.1241 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #10: GFLOPs: 63.7378. Time: 3224.4736 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #11: GFLOPs: 92.9073. Time: 2212.1071 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #12: GFLOPs: 222.8591. Time: 922.2012 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #13: GFLOPs: 198.7676. Time: 1033.9761 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #14: GFLOPs: 303.4295. Time: 677.3267 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #15: GFLOPs: 104.6852. Time: 1963.2276 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #16: GFLOPs: 118.8374. Time: 1729.4301 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #17: GFLOPs: 2552.5982. Time: 80.5144 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #18: GFLOPs: 349.8818. Time: 587.4009 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #19: GFLOPs: 1659.4113. Time: 123.8517 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #20: GFLOPs: 2295.7913. Time: 89.5207 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #21: GFLOPs: 1445.3608. Time: 142.1935 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #22: GFLOPs: 107.1867. Time: 1917.4111 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #23: GFLOPs: 276.8031. Time: 742.4806 us. Best GFLOPs: 3443.9986
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #24: GFLOPs: 3855.8849. Time: 53.3006 us. Best GFLOPs: 3855.8849
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #25: GFLOPs: 2221.0443. Time: 92.5335 us. Best GFLOPs: 3855.8849
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #26: GFLOPs: 2113.8086. Time: 97.2278 us. Best GFLOPs: 3855.8849
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #27: GFLOPs: 195.7133. Time: 1050.1120 us. Best GFLOPs: 3855.8849
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #28: GFLOPs: 1486.7450. Time: 138.2355 us. Best GFLOPs: 3855.8849
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #29: GFLOPs: 3632.2123. Time: 56.5828 us. Best GFLOPs: 3855.8849
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #30: GFLOPs: 2339.0116. Time: 87.8666 us. Best GFLOPs: 3855.8849
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #31: GFLOPs: 4489.4117. Time: 45.7790 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #32: GFLOPs: 1999.3436. Time: 102.7942 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #33: GFLOPs: 2161.6996. Time: 95.0738 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #34: GFLOPs: 956.2975. Time: 214.9131 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #35: GFLOPs: 272.2984. Time: 754.7635 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #36: GFLOPs: 52.8227. Time: 3890.7667 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #37: GFLOPs: 186.2665. Time: 1103.3704 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #38: GFLOPs: 4234.3662. Time: 48.5364 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #39: GFLOPs: 2723.2155. Time: 75.4699 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #40: GFLOPs: 1102.9031. Time: 186.3454 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #41: GFLOPs: 1052.5432. Time: 195.2612 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #42: GFLOPs: 1093.0407. Time: 188.0268 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #43: GFLOPs: 394.0524. Time: 521.5573 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #44: GFLOPs: 3122.1978. Time: 65.8257 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #45: GFLOPs: 418.2871. Time: 491.3393 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #46: GFLOPs: 2835.3992. Time: 72.4839 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #47: GFLOPs: 1717.2055. Time: 119.6833 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #48: GFLOPs: 565.6074. Time: 363.3632 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #49: GFLOPs: 49.4243. Time: 4158.2962 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #50: GFLOPs: 271.5714. Time: 756.7841 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #51: GFLOPs: 212.7597. Time: 965.9766 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #52: GFLOPs: 1704.3155. Time: 120.5885 us. Best GFLOPs: 4489.4117
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #53: GFLOPs: 5961.2847. Time: 34.4759 us. Best GFLOPs: 5961.2847
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #54: GFLOPs: 297.7804. Time: 690.1760 us. Best GFLOPs: 5961.2847
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #55: GFLOPs: 199.3125. Time: 1031.1492 us. Best GFLOPs: 5961.2847
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:121] [Task #123: fused_nn_conv2d] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), conv2d_nchw: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(14)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + yy_3_init * T.int64(4) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + xx_3_init * T.int64(14) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(56))
                                        v3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(14)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + xx_3 * T.int64(14) + xx_4)
                                v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) // T.int64(2) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw[v0, v1, v2, v3])
                            conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 2, 32, 1, 2])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[7, 2, 1, 1, 4])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 14])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[64, 2, 2])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
l98 = sch.fuse(l53, l59, l65, preserve_unit_iters=True)
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l98, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104 = sch.get_loops(block=b72)
l105, l106, l107 = sch.split(loop=l104, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l107)
sch.bind(loop=l106, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch")
l108, l109, l110, l111, l112 = sch.get_loops(block=b85)
l113, l114, l115 = sch.split(loop=l112, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l115)
sch.bind(loop=l114, thread_axis="threadIdx.x")
b116 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b116, ann_key="meta_schedule.unroll_explicit")
b117, b118, b119, b120 = sch.get_child_blocks(b116)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b117)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b118)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b119)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b120)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #57: GFLOPs: 3219.6691. Time: 63.8329 us. Best GFLOPs: 5961.2847
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #58: GFLOPs: 19.6449. Time: 10461.7980 us. Best GFLOPs: 5961.2847
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #59: GFLOPs: 1235.1920. Time: 166.3878 us. Best GFLOPs: 5961.2847
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #60: GFLOPs: 52.8425. Time: 3889.3095 us. Best GFLOPs: 5961.2847
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #61: GFLOPs: 2700.9239. Time: 76.0928 us. Best GFLOPs: 5961.2847
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #62: GFLOPs: 167.5854. Time: 1226.3649 us. Best GFLOPs: 5961.2847
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #63: GFLOPs: 3129.8464. Time: 65.6649 us. Best GFLOPs: 5961.2847
2024-03-21 00:13:13 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #64: GFLOPs: 3795.4341. Time: 54.1495 us. Best GFLOPs: 5961.2847
2024-03-21 00:56:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 00:56:05 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-03-21 00:56:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 426 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:56:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 855 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:56:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 1283 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:56:07 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-03-21 00:56:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:56:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:56:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:56:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a09cfff8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a473a5a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a065e3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a2465b48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a65ed8c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39117c8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a34bd178)]: 0 failure(s)
2024-03-21 00:56:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.9118  1.8026  1.7972  1.7625  1.7613  1.7613  1.7445  1.7314  1.7194  1.7099  1.6801  1.6652  1.6570  1.6463  1.6411  1.6411
[17 : 32]:	1.6313  1.6209  1.6101  1.6093  1.6023  1.5913  1.5907  1.5887  1.5880  1.5860  1.5850  1.5844  1.5827  1.5807  1.5805  1.5796
[33 : 48]:	1.5791  1.5778  1.5774  1.5773  1.5750  1.5737  1.5733  1.5719  1.5697  1.5696  1.5696  1.5649  1.5643  1.5633  1.5631  1.5631
[49 : 64]:	1.5589  1.5586  1.5534  1.5526  1.5520  1.5494  1.5421  1.5415  1.5393  1.5351  1.5330  1.5305  1.5241  1.5234  1.5159  1.5157
2024-03-21 00:56:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:56:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #65: GFLOPs: 2477.7191. Time: 82.9476 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #66: GFLOPs: 3626.2820. Time: 56.6754 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #67: GFLOPs: 3008.4283. Time: 68.3150 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #68: GFLOPs: 5053.2528. Time: 40.6710 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #69: GFLOPs: 2811.1685. Time: 73.1087 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #70: GFLOPs: 2811.5189. Time: 73.0996 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #71: GFLOPs: 5081.7067. Time: 40.4433 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #72: GFLOPs: 5316.1657. Time: 38.6596 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #73: GFLOPs: 5042.1984. Time: 40.7602 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #74: GFLOPs: 3149.2961. Time: 65.2593 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #75: GFLOPs: 2761.8237. Time: 74.4149 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #76: GFLOPs: 2802.3616. Time: 73.3385 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #77: GFLOPs: 1339.9739. Time: 153.3768 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #78: GFLOPs: 3019.8002. Time: 68.0578 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #79: GFLOPs: 3044.2974. Time: 67.5101 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #80: GFLOPs: 3044.3719. Time: 67.5085 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #81: GFLOPs: 2081.5835. Time: 98.7330 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #82: GFLOPs: 2203.4015. Time: 93.2744 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #83: GFLOPs: 3387.0252. Time: 60.6789 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #84: GFLOPs: 4644.9729. Time: 44.2459 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #85: GFLOPs: 2386.5873. Time: 86.1150 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #86: GFLOPs: 2941.8393. Time: 69.8614 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #87: GFLOPs: 3462.0065. Time: 59.3647 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #88: GFLOPs: 3711.1487. Time: 55.3793 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #89: GFLOPs: 2273.0636. Time: 90.4158 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #90: GFLOPs: 2963.8758. Time: 69.3419 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #91: GFLOPs: 2988.5111. Time: 68.7703 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #92: GFLOPs: 3372.8530. Time: 60.9338 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #93: GFLOPs: 3579.5137. Time: 57.4159 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #94: GFLOPs: 2926.6565. Time: 70.2238 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #95: GFLOPs: 3041.2585. Time: 67.5776 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #96: GFLOPs: 3743.2882. Time: 54.9038 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #97: GFLOPs: 3727.5740. Time: 55.1353 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #98: GFLOPs: 2968.9042. Time: 69.2245 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #99: GFLOPs: 3390.4148. Time: 60.6182 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #100: GFLOPs: 2977.1591. Time: 69.0326 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #101: GFLOPs: 2184.5263. Time: 94.0803 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #102: GFLOPs: 2971.5288. Time: 69.1634 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #103: GFLOPs: 3390.3388. Time: 60.6196 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #104: GFLOPs: 2955.1484. Time: 69.5467 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #105: GFLOPs: 2948.4239. Time: 69.7053 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #106: GFLOPs: 2931.5426. Time: 70.1067 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #107: GFLOPs: 2933.0885. Time: 70.0698 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #108: GFLOPs: 2927.0280. Time: 70.2149 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #109: GFLOPs: 2996.9878. Time: 68.5758 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #110: GFLOPs: 2978.2852. Time: 69.0065 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #111: GFLOPs: 4073.8802. Time: 50.4484 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #112: GFLOPs: 3110.9986. Time: 66.0627 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #113: GFLOPs: 2997.1366. Time: 68.5724 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #114: GFLOPs: 2930.7548. Time: 70.1256 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #115: GFLOPs: 2916.7558. Time: 70.4622 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #116: GFLOPs: 3266.0173. Time: 62.9271 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #117: GFLOPs: 5449.1037. Time: 37.7165 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #118: GFLOPs: 2855.8495. Time: 71.9649 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #119: GFLOPs: 2825.2699. Time: 72.7438 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #120: GFLOPs: 3197.6852. Time: 64.2718 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #121: GFLOPs: 2813.5074. Time: 73.0479 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #122: GFLOPs: 3319.8666. Time: 61.9064 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #123: GFLOPs: 4133.8994. Time: 49.7160 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #124: GFLOPs: 3231.9526. Time: 63.5903 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #125: GFLOPs: 3243.5365. Time: 63.3632 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #126: GFLOPs: 193.0221. Time: 1064.7530 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #127: GFLOPs: 3306.9461. Time: 62.1482 us. Best GFLOPs: 5961.2847
2024-03-21 00:57:07 [INFO] [task_scheduler.cc:131] [Task #123: fused_nn_conv2d] Trial #128: GFLOPs: 114.1086. Time: 1801.0996 us. Best GFLOPs: 5961.2847
