2024-03-21 10:38:30 [INFO] [task_scheduler.cc:160] Initializing Task #112: "fused_nn_conv2d_add_nn_relu_55"
2024-03-21 10:38:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 10:38:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(512), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(64) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 1, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 4, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 10:38:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 1, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 4, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 10:38:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(512), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 1, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 4, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 11:34:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:34:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:34:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd473f568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6eebd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd51f2dc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd05ce148)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3f4c228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd42a67e8)]: 480 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5089468)]: 0 failure(s)
2024-03-21 11:34:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd473f568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6eebd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd51f2dc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd05ce148)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3f4c228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd42a67e8)]: 968 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5089468)]: 0 failure(s)
2024-03-21 11:34:11 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-03-21 11:34:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd473f568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6eebd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd51f2dc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd05ce148)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3f4c228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd42a67e8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5089468)]: 0 failure(s)
2024-03-21 11:34:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd473f568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6eebd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd51f2dc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd05ce148)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3f4c228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd42a67e8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5089468)]: 0 failure(s)
2024-03-21 11:34:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd473f568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6eebd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd51f2dc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd05ce148)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3f4c228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd42a67e8)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5089468)]: 0 failure(s)
2024-03-21 11:34:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd473f568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6eebd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd51f2dc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd05ce148)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3f4c228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd42a67e8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5089468)]: 0 failure(s)
2024-03-21 11:34:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9990  0.9988  0.9986  0.9985  0.9984  0.9979  0.9979  0.9968  0.9967  0.9959  0.9958  0.9949  0.9940  0.9934  0.9932  0.9919
[17 : 32]:	0.9905  0.9896  0.9892  0.9885  0.9861  0.9857  0.9844  0.9835  0.9829  0.9825  0.9825  0.9824  0.9820  0.9819  0.9814  0.9808
[33 : 48]:	0.9788  0.9788  0.9782  0.9780  0.9774  0.9773  0.9769  0.9764  0.9760  0.9741  0.9741  0.9701  0.9692  0.9685  0.9681  0.9680
[49 : 64]:	0.9676  0.9676  0.9669  0.9662  0.9662  0.9652  0.9648  0.9641  0.9641  0.9634  0.9627  0.9623  0.9600  0.9593  0.9578  0.9571
2024-03-21 11:34:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:34:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #1: GFLOPs: 197.1444. Time: 130.5657 us. Best GFLOPs: 197.1444
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #2: GFLOPs: 206.5487. Time: 124.6209 us. Best GFLOPs: 206.5487
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #3: GFLOPs: 23.0699. Time: 1115.7504 us. Best GFLOPs: 206.5487
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #4: GFLOPs: 326.6922. Time: 78.7906 us. Best GFLOPs: 326.6922
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #5: GFLOPs: 398.6651. Time: 64.5662 us. Best GFLOPs: 398.6651
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #6: GFLOPs: 296.6730. Time: 86.7632 us. Best GFLOPs: 398.6651
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #7: GFLOPs: 372.4168. Time: 69.1169 us. Best GFLOPs: 398.6651
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #8: GFLOPs: 953.7942. Time: 26.9873 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #9: GFLOPs: 781.3430. Time: 32.9436 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #10: GFLOPs: 231.7790. Time: 111.0553 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #11: GFLOPs: 41.0644. Time: 626.8274 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #12: GFLOPs: 74.1454. Time: 347.1597 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #13: GFLOPs: 26.0092. Time: 989.6624 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #14: GFLOPs: 746.8380. Time: 34.4657 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #15: GFLOPs: 31.7406. Time: 810.9577 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #16: GFLOPs: 147.0488. Time: 175.0459 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #17: GFLOPs: 788.3761. Time: 32.6498 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #18: GFLOPs: 31.6944. Time: 812.1393 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #19: GFLOPs: 93.6853. Time: 274.7527 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #20: GFLOPs: 98.3522. Time: 261.7154 us. Best GFLOPs: 953.7942
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #21: GFLOPs: 1049.7381. Time: 24.5207 us. Best GFLOPs: 1049.7381
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #22: GFLOPs: 161.5966. Time: 159.2873 us. Best GFLOPs: 1049.7381
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #23: GFLOPs: 219.5645. Time: 117.2334 us. Best GFLOPs: 1049.7381
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #24: GFLOPs: 451.0628. Time: 57.0659 us. Best GFLOPs: 1049.7381
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #25: GFLOPs: 227.0738. Time: 113.3565 us. Best GFLOPs: 1049.7381
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #26: GFLOPs: 493.7704. Time: 52.1301 us. Best GFLOPs: 1049.7381
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #27: GFLOPs: 1595.0548. Time: 16.1376 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #28: GFLOPs: 599.8482. Time: 42.9113 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #29: GFLOPs: 1.5315. Time: 16807.0830 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #30: GFLOPs: 335.2826. Time: 76.7719 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #31: GFLOPs: 1061.9489. Time: 24.2387 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #32: GFLOPs: 324.9568. Time: 79.2114 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #33: GFLOPs: 209.3961. Time: 122.9263 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #34: GFLOPs: 128.1743. Time: 200.8226 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #35: GFLOPs: 110.1701. Time: 233.6414 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #36: GFLOPs: 16.2048. Time: 1588.4353 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #37: GFLOPs: 233.6666. Time: 110.1582 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #38: GFLOPs: 460.4498. Time: 55.9025 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #39: GFLOPs: 135.1890. Time: 190.4023 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #40: GFLOPs: 92.0166. Time: 279.7351 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #41: GFLOPs: 299.1160. Time: 86.0545 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #42: GFLOPs: 84.8792. Time: 303.2579 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #43: GFLOPs: 1536.0384. Time: 16.7576 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #44: GFLOPs: 996.3338. Time: 25.8350 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #45: GFLOPs: 314.4865. Time: 81.8486 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #46: GFLOPs: 62.0488. Time: 414.8391 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #47: GFLOPs: 271.9056. Time: 94.6663 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #48: GFLOPs: 181.3653. Time: 141.9251 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #49: GFLOPs: 323.9238. Time: 79.4640 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #50: GFLOPs: 373.1107. Time: 68.9883 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #51: GFLOPs: 371.4929. Time: 69.2888 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #52: GFLOPs: 21.5214. Time: 1196.0301 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #53: GFLOPs: 552.9324. Time: 46.5523 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #54: GFLOPs: 379.2599. Time: 67.8698 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #55: GFLOPs: 418.5659. Time: 61.4964 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #56: GFLOPs: 182.0106. Time: 141.4219 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #57: GFLOPs: 556.8039. Time: 46.2286 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #58: GFLOPs: 135.0107. Time: 190.6537 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #59: GFLOPs: 1592.1439. Time: 16.1671 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #60: GFLOPs: 575.2755. Time: 44.7443 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #61: GFLOPs: 310.5801. Time: 82.8781 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #62: GFLOPs: 421.1453. Time: 61.1197 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #63: GFLOPs: 84.9030. Time: 303.1731 us. Best GFLOPs: 1595.0548
2024-03-21 12:22:33 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #64: GFLOPs: 1434.2168. Time: 17.9473 us. Best GFLOPs: 1595.0548
