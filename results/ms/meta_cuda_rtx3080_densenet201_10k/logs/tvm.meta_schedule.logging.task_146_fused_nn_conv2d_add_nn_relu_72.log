2024-03-21 13:42:30 [INFO] [task_scheduler.cc:160] Initializing Task #146: "fused_nn_conv2d_add_nn_relu_72"
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(480), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(480), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(12), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7840)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0 * T.int64(40) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(160)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(40))
                                    v1 = T.axis.spatial(T.int64(480), rc_0 * T.int64(40) + ax0_ax1_ax2_ax3_fused % T.int64(40))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0 * T.int64(40) + rc_1 * T.int64(10) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 4, 10])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(12), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7840)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(40) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(160)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(40))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(40) + ax0_ax1_ax2_ax3_fused % T.int64(40))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(40) + rc_1 * T.int64(10) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 4, 10])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(12), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7840)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(40) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(160)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(40))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(40) + ax0_ax1_ax2_ax3_fused % T.int64(40))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(40) + rc_1 * T.int64(10) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 4, 10])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 15:01:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:01:28 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 15:01:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f89c88c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f804fec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0982ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f9dd3c68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f56d6f18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d76ed8)]: 480 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8341fe8)]: 0 failure(s)
2024-03-21 15:01:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f89c88c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f804fec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0982ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f9dd3c68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f56d6f18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d76ed8)]: 957 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8341fe8)]: 0 failure(s)
2024-03-21 15:01:29 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-03-21 15:01:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f89c88c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f804fec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0982ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f9dd3c68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f56d6f18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d76ed8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8341fe8)]: 0 failure(s)
2024-03-21 15:01:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f89c88c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f804fec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0982ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f9dd3c68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f56d6f18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d76ed8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8341fe8)]: 0 failure(s)
2024-03-21 15:01:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f89c88c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f804fec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0982ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f9dd3c68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f56d6f18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d76ed8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8341fe8)]: 0 failure(s)
2024-03-21 15:01:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f89c88c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f804fec8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0982ff8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f9dd3c68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f56d6f18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d76ed8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8341fe8)]: 0 failure(s)
2024-03-21 15:01:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9981  0.9979  0.9975  0.9974  0.9968  0.9966  0.9966  0.9963  0.9960  0.9952  0.9947  0.9947  0.9943  0.9943  0.9928  0.9926
[17 : 32]:	0.9924  0.9920  0.9914  0.9904  0.9891  0.9886  0.9883  0.9878  0.9878  0.9865  0.9861  0.9854  0.9847  0.9834  0.9831  0.9825
[33 : 48]:	0.9824  0.9822  0.9818  0.9812  0.9805  0.9801  0.9791  0.9790  0.9789  0.9787  0.9785  0.9778  0.9777  0.9769  0.9768  0.9760
[49 : 64]:	0.9741  0.9741  0.9724  0.9719  0.9715  0.9714  0.9703  0.9680  0.9677  0.9673  0.9672  0.9667  0.9664  0.9662  0.9638  0.9586
2024-03-21 15:01:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:01:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #1: GFLOPs: 1045.0921. Time: 23.0933 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #2: GFLOPs: 356.2710. Time: 67.7424 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #3: GFLOPs: 512.1344. Time: 47.1256 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #4: GFLOPs: 363.3589. Time: 66.4210 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #5: GFLOPs: 763.1619. Time: 31.6246 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #6: GFLOPs: 276.5396. Time: 87.2738 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #7: GFLOPs: 218.4407. Time: 110.4861 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #8: GFLOPs: 37.4387. Time: 644.6448 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #9: GFLOPs: 33.5608. Time: 719.1333 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #10: GFLOPs: 451.6541. Time: 53.4361 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #11: GFLOPs: 355.0771. Time: 67.9702 us. Best GFLOPs: 1045.0921
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #12: GFLOPs: 1141.3583. Time: 21.1456 us. Best GFLOPs: 1141.3583
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #13: GFLOPs: 141.5885. Time: 170.4564 us. Best GFLOPs: 1141.3583
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #14: GFLOPs: 179.8129. Time: 134.2210 us. Best GFLOPs: 1141.3583
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #15: GFLOPs: 349.7533. Time: 69.0048 us. Best GFLOPs: 1141.3583
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #16: GFLOPs: 99.6740. Time: 242.1359 us. Best GFLOPs: 1141.3583
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #17: GFLOPs: 11.1949. Time: 2155.8685 us. Best GFLOPs: 1141.3583
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #18: GFLOPs: 148.2808. Time: 162.7631 us. Best GFLOPs: 1141.3583
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #19: GFLOPs: 1276.4497. Time: 18.9076 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #20: GFLOPs: 83.4762. Time: 289.1202 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #21: GFLOPs: 220.9821. Time: 109.2154 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #22: GFLOPs: 1197.0969. Time: 20.1610 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #23: GFLOPs: 33.5747. Time: 718.8343 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #24: GFLOPs: 353.0038. Time: 68.3694 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #25: GFLOPs: 139.6791. Time: 172.7864 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #26: GFLOPs: 605.3666. Time: 39.8678 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #27: GFLOPs: 59.0508. Time: 408.7097 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #28: GFLOPs: 754.6722. Time: 31.9803 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #29: GFLOPs: 130.6750. Time: 184.6923 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #30: GFLOPs: 578.9703. Time: 41.6855 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #31: GFLOPs: 198.7301. Time: 121.4444 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #32: GFLOPs: 454.1788. Time: 53.1391 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #33: GFLOPs: 881.7002. Time: 27.3729 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #34: GFLOPs: 351.1652. Time: 68.7274 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #35: GFLOPs: 166.3857. Time: 145.0525 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #36: GFLOPs: 318.0865. Time: 75.8745 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #37: GFLOPs: 886.7242. Time: 27.2178 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #38: GFLOPs: 73.9177. Time: 326.5070 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #39: GFLOPs: 269.0985. Time: 89.6871 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #40: GFLOPs: 155.8355. Time: 154.8726 us. Best GFLOPs: 1276.4497
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #41: GFLOPs: 1303.4886. Time: 18.5154 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #42: GFLOPs: 15.6840. Time: 1538.8082 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #43: GFLOPs: 98.2235. Time: 245.7116 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #44: GFLOPs: 465.5484. Time: 51.8413 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #45: GFLOPs: 149.5902. Time: 161.3384 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #46: GFLOPs: 226.3249. Time: 106.6372 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #47: GFLOPs: 451.7251. Time: 53.4277 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #48: GFLOPs: 73.6325. Time: 327.7718 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #49: GFLOPs: 188.5267. Time: 128.0172 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #50: GFLOPs: 655.2320. Time: 36.8338 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #51: GFLOPs: 48.6074. Time: 496.5227 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #52: GFLOPs: 200.6674. Time: 120.2719 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #53: GFLOPs: 568.4680. Time: 42.4556 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #54: GFLOPs: 266.3531. Time: 90.6115 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #55: GFLOPs: 16.9041. Time: 1427.7369 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #56: GFLOPs: 193.6856. Time: 124.6074 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #57: GFLOPs: 196.3795. Time: 122.8981 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #58: GFLOPs: 577.2520. Time: 41.8096 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #59: GFLOPs: 306.5367. Time: 78.7333 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #60: GFLOPs: 199.3459. Time: 121.0693 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #61: GFLOPs: 448.8549. Time: 53.7694 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #62: GFLOPs: 328.1370. Time: 73.5506 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #63: GFLOPs: 423.6717. Time: 56.9655 us. Best GFLOPs: 1303.4886
2024-03-21 15:49:19 [INFO] [task_scheduler.cc:131] [Task #146: fused_nn_conv2d_add_nn_relu_72] Trial #64: GFLOPs: 962.5142. Time: 25.0746 us. Best GFLOPs: 1303.4886
