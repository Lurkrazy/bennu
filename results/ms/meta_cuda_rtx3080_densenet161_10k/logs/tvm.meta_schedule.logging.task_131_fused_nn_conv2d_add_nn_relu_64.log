2024-03-21 07:30:25 [INFO] [task_scheduler.cc:160] Initializing Task #131: "fused_nn_conv2d_add_nn_relu_64"
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(528), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(528), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(528), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(528), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28), T.int64(528), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(528), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(528), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(528), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(528), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(6), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(44), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1344)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(528), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(528), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(528), rc_0 * T.int64(12) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 3, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[44, 4, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(528), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(528), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(528), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(528), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(6), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(44), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1344)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(528), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(528), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(528), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 3, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[44, 4, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(528), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(528), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(528), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(528), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(6), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(44), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1344)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(528), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(576)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(528), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(4), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(528), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 3, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[44, 4, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:39:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:39:22 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:39:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57d3838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ea6ab6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f01c0168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ec0a5178)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1632898)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e541e7d8)]: 489 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eddb41c8)]: 0 failure(s)
2024-03-21 08:39:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57d3838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ea6ab6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f01c0168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ec0a5178)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1632898)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e541e7d8)]: 975 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eddb41c8)]: 0 failure(s)
2024-03-21 08:39:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57d3838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ea6ab6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f01c0168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ec0a5178)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1632898)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e541e7d8)]: 1459 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eddb41c8)]: 0 failure(s)
2024-03-21 08:39:25 [INFO] [evolutionary_search.cc:723] Sampled 77 candidate(s)
2024-03-21 08:39:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57d3838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ea6ab6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f01c0168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ec0a5178)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1632898)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e541e7d8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eddb41c8)]: 0 failure(s)
2024-03-21 08:39:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57d3838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ea6ab6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f01c0168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ec0a5178)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1632898)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e541e7d8)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eddb41c8)]: 0 failure(s)
2024-03-21 08:39:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57d3838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ea6ab6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f01c0168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ec0a5178)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1632898)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e541e7d8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eddb41c8)]: 0 failure(s)
2024-03-21 08:39:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57d3838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ea6ab6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f01c0168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ec0a5178)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1632898)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e541e7d8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eddb41c8)]: 0 failure(s)
2024-03-21 08:39:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9992  0.9990  0.9988  0.9977  0.9968  0.9965  0.9961  0.9954  0.9954  0.9952  0.9943  0.9943  0.9927  0.9921  0.9917
[17 : 32]:	0.9913  0.9907  0.9906  0.9905  0.9889  0.9878  0.9875  0.9866  0.9864  0.9862  0.9857  0.9843  0.9828  0.9811  0.9789  0.9789
[33 : 48]:	0.9785  0.9784  0.9780  0.9780  0.9780  0.9779  0.9774  0.9769  0.9760  0.9756  0.9756  0.9754  0.9745  0.9744  0.9738  0.9733
[49 : 64]:	0.9729  0.9727  0.9725  0.9708  0.9705  0.9698  0.9690  0.9689  0.9677  0.9669  0.9666  0.9656  0.9650  0.9642  0.9640  0.9635
2024-03-21 08:39:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:39:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #1: GFLOPs: 476.4125. Time: 334.2872 us. Best GFLOPs: 476.4125
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #2: GFLOPs: 302.2367. Time: 526.9334 us. Best GFLOPs: 476.4125
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #3: GFLOPs: 54.3656. Time: 2929.4006 us. Best GFLOPs: 476.4125
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #4: GFLOPs: 163.5628. Time: 973.6848 us. Best GFLOPs: 476.4125
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #5: GFLOPs: 851.2878. Time: 187.0797 us. Best GFLOPs: 851.2878
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #6: GFLOPs: 70.7594. Time: 2250.7058 us. Best GFLOPs: 851.2878
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #7: GFLOPs: 54.9762. Time: 2896.8667 us. Best GFLOPs: 851.2878
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #8: GFLOPs: 2933.5412. Time: 54.2889 us. Best GFLOPs: 2933.5412
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #9: GFLOPs: 832.0453. Time: 191.4062 us. Best GFLOPs: 2933.5412
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #10: GFLOPs: 82.3694. Time: 1933.4695 us. Best GFLOPs: 2933.5412
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #11: GFLOPs: 1562.9461. Time: 101.8964 us. Best GFLOPs: 2933.5412
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #12: GFLOPs: 73.9649. Time: 2153.1643 us. Best GFLOPs: 2933.5412
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #13: GFLOPs: 11.0472. Time: 14416.1649 us. Best GFLOPs: 2933.5412
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #14: GFLOPs: 54.4342. Time: 2925.7078 us. Best GFLOPs: 2933.5412
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #15: GFLOPs: 56.9333. Time: 2797.2836 us. Best GFLOPs: 2933.5412
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #16: GFLOPs: 3057.7536. Time: 52.0835 us. Best GFLOPs: 3057.7536
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #17: GFLOPs: 12.9120. Time: 12334.1937 us. Best GFLOPs: 3057.7536
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #18: GFLOPs: 1291.1261. Time: 123.3486 us. Best GFLOPs: 3057.7536
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #19: GFLOPs: 20.1889. Time: 7888.4236 us. Best GFLOPs: 3057.7536
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #20: GFLOPs: 50.3468. Time: 3163.2299 us. Best GFLOPs: 3057.7536
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #21: GFLOPs: 3140.6607. Time: 50.7086 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #22: GFLOPs: 925.3789. Time: 172.1010 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #23: GFLOPs: 382.7919. Time: 416.0449 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #24: GFLOPs: 21.1557. Time: 7527.9383 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #25: GFLOPs: 945.3504. Time: 168.4652 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #26: GFLOPs: 84.7109. Time: 1880.0261 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #27: GFLOPs: 111.6334. Time: 1426.6222 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #28: GFLOPs: 41.0947. Time: 3875.4017 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #29: GFLOPs: 380.3954. Time: 418.6661 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #30: GFLOPs: 2739.6971. Time: 58.1300 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #31: GFLOPs: 905.0926. Time: 175.9584 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #32: GFLOPs: 990.5152. Time: 160.7836 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #33: GFLOPs: 1077.0021. Time: 147.8722 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #34: GFLOPs: 14.8256. Time: 10742.1699 us. Best GFLOPs: 3140.6607
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #35: GFLOPs: 3935.3161. Time: 40.4691 us. Best GFLOPs: 3935.3161
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #36: GFLOPs: 854.9353. Time: 186.2815 us. Best GFLOPs: 3935.3161
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #37: GFLOPs: 384.2076. Time: 414.5119 us. Best GFLOPs: 3935.3161
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #38: GFLOPs: 45.5149. Time: 3499.0434 us. Best GFLOPs: 3935.3161
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #39: GFLOPs: 760.0921. Time: 209.5254 us. Best GFLOPs: 3935.3161
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #40: GFLOPs: 1246.3418. Time: 127.7809 us. Best GFLOPs: 3935.3161
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #41: GFLOPs: 4361.8074. Time: 36.5121 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #42: GFLOPs: 33.1084. Time: 4810.2155 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #43: GFLOPs: 948.5955. Time: 167.8889 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #44: GFLOPs: 3225.7110. Time: 49.3716 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #45: GFLOPs: 2975.9558. Time: 53.5151 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #46: GFLOPs: 1455.5216. Time: 109.4169 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #47: GFLOPs: 710.9805. Time: 223.9986 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #48: GFLOPs: 42.2047. Time: 3773.4779 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #49: GFLOPs: 2580.1343. Time: 61.7249 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #50: GFLOPs: 53.7496. Time: 2962.9741 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #51: GFLOPs: 2464.7692. Time: 64.6140 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #52: GFLOPs: 1283.9357. Time: 124.0394 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #53: GFLOPs: 1886.3339. Time: 84.4276 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #54: GFLOPs: 3266.4859. Time: 48.7553 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #55: GFLOPs: 49.5114. Time: 3216.6080 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #56: GFLOPs: 1634.8540. Time: 97.4146 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #57: GFLOPs: 586.9129. Time: 271.3497 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #58: GFLOPs: 76.0666. Time: 2093.6746 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #59: GFLOPs: 141.7072. Time: 1123.8572 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #60: GFLOPs: 848.4074. Time: 187.7148 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #61: GFLOPs: 1.6720. Time: 95248.0467 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #62: GFLOPs: 1134.5035. Time: 140.3774 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #63: GFLOPs: 1236.3005. Time: 128.8187 us. Best GFLOPs: 4361.8074
2024-03-21 09:11:31 [INFO] [task_scheduler.cc:131] [Task #131: fused_nn_conv2d_add_nn_relu_64] Trial #64: GFLOPs: 2603.1558. Time: 61.1791 us. Best GFLOPs: 4361.8074
