2024-03-21 16:45:31 [INFO] [task_scheduler.cc:160] Initializing Task #40: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1"
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(27), T.int64(27)))
        input_tile = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(27), T.int64(27)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(64), T.int64(169), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps, v_p % T.int64(13) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps, v_p % T.int64(13) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(64), T.int64(169), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(96), T.int64(169), T.int64(64)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(96), T.int64(169), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(85), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(10816))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(10816))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(10816))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(13), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(26), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(12), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1664)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(416))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(416) // T.int64(104))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(104) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(3072))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(3072) // T.int64(768))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(6) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(6) // T.int64(3) * T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(13) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(3) * T.int64(16) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(8) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(6) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(6) // T.int64(3) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(13) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(3) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 3, 8, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 13, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 8, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(85), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(10816))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(10816))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(10816))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(13), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(26), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(12), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1664)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(416))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(416) // T.int64(104))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(104) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(3072))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(3072) // T.int64(768))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(6) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(6) // T.int64(3) * T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(13) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(3) * T.int64(16) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(8) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(6) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(6) // T.int64(3) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(13) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(3) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 3, 8, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 13, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 8, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(85), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(10816))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(10816))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(10816))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(13), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(26), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(12), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1664)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(416))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(416) // T.int64(104))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(104) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + ax0_ax1_ax2_ax3_fused % T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(3072))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(3072) // T.int64(768))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(768) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(2), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(6) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(6) // T.int64(3) * T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(13) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(3) * T.int64(16) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(8) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(6) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(6) // T.int64(3) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused // T.int64(13) * T.int64(48) + eps_2_nu_2_co_2_p_2_fused % T.int64(3) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + eps_1_nu_1_co_1_p_1_fused % T.int64(13) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 2, 3, 8, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 13, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[8, 8, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-03-21 17:14:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:14:50 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 17:14:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 483 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:14:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 967 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:14:56 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-03-21 17:15:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:15:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:15:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:15:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:15:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9996  0.9994  0.9990  0.9986  0.9985  0.9983  0.9958  0.9946  0.9944  0.9941  0.9915  0.9898  0.9895  0.9892  0.9891
[17 : 32]:	0.9888  0.9887  0.9879  0.9877  0.9875  0.9863  0.9861  0.9856  0.9851  0.9847  0.9842  0.9842  0.9840  0.9833  0.9799  0.9798
[33 : 48]:	0.9797  0.9795  0.9793  0.9790  0.9788  0.9776  0.9766  0.9764  0.9757  0.9753  0.9742  0.9742  0.9741  0.9730  0.9728  0.9721
[49 : 64]:	0.9712  0.9695  0.9685  0.9683  0.9678  0.9672  0.9671  0.9670  0.9667  0.9667  0.9652  0.9649  0.9648  0.9642  0.9639  0.9637
2024-03-21 17:15:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:15:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #1: GFLOPs: 707.3168. Time: 63.2933 us. Best GFLOPs: 707.3168
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #2: GFLOPs: 966.9493. Time: 46.2986 us. Best GFLOPs: 966.9493
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #3: GFLOPs: 834.8056. Time: 53.6274 us. Best GFLOPs: 966.9493
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #4: GFLOPs: 817.9400. Time: 54.7332 us. Best GFLOPs: 966.9493
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #5: GFLOPs: 434.3666. Time: 103.0661 us. Best GFLOPs: 966.9493
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #6: GFLOPs: 1342.3863. Time: 33.3499 us. Best GFLOPs: 1342.3863
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #7: GFLOPs: 2186.4908. Time: 20.4750 us. Best GFLOPs: 2186.4908
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #8: GFLOPs: 1470.3629. Time: 30.4472 us. Best GFLOPs: 2186.4908
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #9: GFLOPs: 716.1147. Time: 62.5157 us. Best GFLOPs: 2186.4908
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #10: GFLOPs: 128.4575. Time: 348.5079 us. Best GFLOPs: 2186.4908
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #11: GFLOPs: 47.6933. Time: 938.6731 us. Best GFLOPs: 2186.4908
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #12: GFLOPs: 1187.5045. Time: 37.6996 us. Best GFLOPs: 2186.4908
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #13: GFLOPs: 30.5098. Time: 1467.3455 us. Best GFLOPs: 2186.4908
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #14: GFLOPs: 1474.6810. Time: 30.3581 us. Best GFLOPs: 2186.4908
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #15: GFLOPs: 1385.1486. Time: 32.3203 us. Best GFLOPs: 2186.4908
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #16: GFLOPs: 2194.2542. Time: 20.4026 us. Best GFLOPs: 2194.2542
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #17: GFLOPs: 701.5396. Time: 63.8146 us. Best GFLOPs: 2194.2542
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #18: GFLOPs: 733.6447. Time: 61.0220 us. Best GFLOPs: 2194.2542
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #19: GFLOPs: 771.4401. Time: 58.0323 us. Best GFLOPs: 2194.2542
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #20: GFLOPs: 61.9410. Time: 722.7594 us. Best GFLOPs: 2194.2542
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #21: GFLOPs: 2208.9225. Time: 20.2671 us. Best GFLOPs: 2208.9225
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #22: GFLOPs: 2488.5716. Time: 17.9896 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #23: GFLOPs: 517.5064. Time: 86.5080 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #24: GFLOPs: 675.5986. Time: 66.2649 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #25: GFLOPs: 562.2459. Time: 79.6243 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #26: GFLOPs: 2089.3329. Time: 21.4271 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #27: GFLOPs: 922.4445. Time: 48.5324 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #28: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(11), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(10) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(10816))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(10816))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(10816))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(10) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(10816))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(13)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(3) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3_init * T.int64(13) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(3))
                                    v2 = T.axis.spatial(T.int64(64), ci_0)
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1 < T.int64(338))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(3))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(64))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(13)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(3) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3 * T.int64(13) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(12) // T.int64(3) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(3) * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[3, 4, 4, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 13, 1, 13])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 52], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #29: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(22), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(10816))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(10816))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(10816))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(10816))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(13), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(208), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(8) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(104) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(104) // T.int64(13) * T.int64(3) + co_3_init * T.int64(3) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(16)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(208), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1) // T.int64(208))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1) % T.int64(208) // T.int64(52))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1) % T.int64(52) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(208), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(832) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1536))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(832) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1536) // T.int64(384))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(832) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(832) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6144))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(3), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(8) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(104) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(104) // T.int64(13) * T.int64(3) + co_3 * T.int64(3) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(4) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(3), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(8) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(8) // T.int64(4) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(104) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(104) // T.int64(13) * T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 4, 8, 1, 3])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 1, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 2, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 208], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 208, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #30: GFLOPs: 2104.7577. Time: 21.2701 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #31: GFLOPs: 1999.7679. Time: 22.3868 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #32: GFLOPs: 1859.4099. Time: 24.0767 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #33: GFLOPs: 1791.0145. Time: 24.9961 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #34: GFLOPs: 142.0140. Time: 315.2397 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #35: GFLOPs: 210.6672. Time: 212.5079 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #36: GFLOPs: 304.6339. Time: 146.9582 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #37: GFLOPs: 317.7413. Time: 140.8959 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #38: GFLOPs: 1701.8192. Time: 26.3062 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #39: GFLOPs: 119.7452. Time: 373.8643 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #40: GFLOPs: 1482.7440. Time: 30.1930 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #41: GFLOPs: 120.0589. Time: 372.8873 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #42: GFLOPs: 22.6015. Time: 1980.7774 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #43: GFLOPs: 155.3608. Time: 288.1579 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #44: GFLOPs: 876.1537. Time: 51.0966 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #45: GFLOPs: 728.7097. Time: 61.4352 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #46: GFLOPs: 62.4783. Time: 716.5440 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #47: GFLOPs: 2355.3175. Time: 19.0074 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #48: GFLOPs: 2192.8951. Time: 20.4152 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #49: GFLOPs: 1359.5843. Time: 32.9280 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #50: GFLOPs: 556.5801. Time: 80.4349 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #51: GFLOPs: 1526.1896. Time: 29.3335 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #52: GFLOPs: 1797.2710. Time: 24.9091 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #53: GFLOPs: 1921.6264. Time: 23.2972 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #54: GFLOPs: 6.2047. Time: 7215.2503 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #55: GFLOPs: 495.0540. Time: 90.4315 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #56: GFLOPs: 21.9820. Time: 2036.5927 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #57: GFLOPs: 1457.7680. Time: 30.7103 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #58: GFLOPs: 63.0752. Time: 709.7627 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #59: GFLOPs: 980.7911. Time: 45.6452 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #60: GFLOPs: 1963.9166. Time: 22.7955 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #61: GFLOPs: 1155.4758. Time: 38.7446 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #62: GFLOPs: 878.1170. Time: 50.9823 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #63: GFLOPs: 2201.3321. Time: 20.3370 us. Best GFLOPs: 2488.5716
2024-03-21 17:36:18 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #64: GFLOPs: 1632.2224. Time: 27.4279 us. Best GFLOPs: 2488.5716
2024-03-21 17:54:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:54:16 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-03-21 17:54:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 433 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:54:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 868 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:54:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 1297 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:54:24 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 17:54:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:54:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:54:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 136 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:55:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 155 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 17:55:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.7655  2.6408  2.6400  2.6176  2.5809  2.5072  2.5003  2.4992  2.4858  2.4495  2.4281  2.4168  2.3741  2.3706  2.3679  2.3676
[17 : 32]:	2.3639  2.3581  2.3574  2.3482  2.3473  2.3473  2.3466  2.3438  2.3431  2.3420  2.3376  2.3347  2.3275  2.3268  2.3262  2.3198
[33 : 48]:	2.3167  2.3103  2.3076  2.3070  2.3068  2.3005  2.2905  2.2844  2.2771  2.2758  2.2492  2.2103  2.2092  2.1949  2.1949  2.1942
[49 : 64]:	2.1887  2.1779  2.1773  2.1759  2.1759  2.1752  2.1722  2.1710  2.1622  2.1614  2.1614  2.1595  2.1581  2.1580  2.1416  2.0904
2024-03-21 17:55:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:55:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #65: GFLOPs: 1734.4188. Time: 25.8118 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #66: GFLOPs: 1745.7086. Time: 25.6449 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #67: GFLOPs: 1735.3153. Time: 25.7985 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #68: GFLOPs: 1704.7675. Time: 26.2607 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #69: GFLOPs: 1231.6323. Time: 36.3489 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #70: GFLOPs: 872.2986. Time: 51.3224 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #71: GFLOPs: 1642.0884. Time: 27.2631 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #72: GFLOPs: 1640.6905. Time: 27.2863 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #73: GFLOPs: 1657.0440. Time: 27.0171 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #74: GFLOPs: 1251.4217. Time: 35.7741 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #75: GFLOPs: 1242.9870. Time: 36.0168 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #76: GFLOPs: 1028.3090. Time: 43.5360 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #77: GFLOPs: 1717.0693. Time: 26.0726 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #78: GFLOPs: 1337.4939. Time: 33.4719 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #79: GFLOPs: 1113.0359. Time: 40.2219 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #80: GFLOPs: 1384.3265. Time: 32.3395 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #81: GFLOPs: 1255.1414. Time: 35.6681 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #82: GFLOPs: 805.6968. Time: 55.5649 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #83: GFLOPs: 804.3212. Time: 55.6599 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #84: GFLOPs: 1022.4330. Time: 43.7862 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #85: GFLOPs: 1402.3174. Time: 31.9246 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #86: GFLOPs: 905.3369. Time: 49.4495 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #87: GFLOPs: 1377.1685. Time: 32.5076 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #88: GFLOPs: 1102.9828. Time: 40.5885 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #89: GFLOPs: 1116.8313. Time: 40.0852 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #90: GFLOPs: 1254.8562. Time: 35.6762 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #91: GFLOPs: 811.8858. Time: 55.1413 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #92: GFLOPs: 2197.3787. Time: 20.3736 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #93: GFLOPs: 1032.2201. Time: 43.3710 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #94: GFLOPs: 1010.8169. Time: 44.2894 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #95: GFLOPs: 1036.1088. Time: 43.2082 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #96: GFLOPs: 1478.5317. Time: 30.2790 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #97: GFLOPs: 1602.7307. Time: 27.9326 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #98: GFLOPs: 1390.4776. Time: 32.1965 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #99: GFLOPs: 1109.8881. Time: 40.3360 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #100: GFLOPs: 1022.2066. Time: 43.7959 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #101: GFLOPs: 1123.7769. Time: 39.8375 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #102: GFLOPs: 1524.8593. Time: 29.3591 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #103: GFLOPs: 1020.7639. Time: 43.8578 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #104: GFLOPs: 1582.8769. Time: 28.2830 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #105: GFLOPs: 1344.2054. Time: 33.3048 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #106: GFLOPs: 1415.3910. Time: 31.6297 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #107: GFLOPs: 1581.4899. Time: 28.3078 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #108: GFLOPs: 1649.1323. Time: 27.1467 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #109: GFLOPs: 873.9750. Time: 51.2239 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #110: GFLOPs: 1251.6111. Time: 35.7687 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #111: GFLOPs: 1107.0456. Time: 40.4396 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #112: GFLOPs: 1255.2661. Time: 35.6645 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #113: GFLOPs: 790.4319. Time: 56.6380 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #114: GFLOPs: 998.1978. Time: 44.8493 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #115: GFLOPs: 1166.4782. Time: 38.3792 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #116: GFLOPs: 988.5401. Time: 45.2874 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #117: GFLOPs: 888.3081. Time: 50.3974 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #118: GFLOPs: 1269.4644. Time: 35.2656 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #119: GFLOPs: 885.7258. Time: 50.5444 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #120: GFLOPs: 1550.3486. Time: 28.8764 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #121: GFLOPs: 1496.5418. Time: 29.9146 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #122: GFLOPs: 1503.4775. Time: 29.7766 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #123: GFLOPs: 1364.5829. Time: 32.8074 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #124: GFLOPs: 1968.5160. Time: 22.7422 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #125: GFLOPs: 1163.9762. Time: 38.4617 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #126: GFLOPs: 398.4394. Time: 112.3595 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #127: GFLOPs: 343.7083. Time: 130.2513 us. Best GFLOPs: 2488.5716
2024-03-21 17:56:02 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #128: GFLOPs: 115.4164. Time: 387.8862 us. Best GFLOPs: 2488.5716
2024-03-21 18:21:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 18:21:50 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 18:21:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:21:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 790 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:21:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 1186 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:21:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 1582 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:21:59 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 18:22:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 159 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:22:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 141 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:22:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:22:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 148 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:22:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.1238  2.0073  1.9646  1.8631  1.8102  1.8089  1.8009  1.8002  1.7999  1.7999  1.7899  1.7899  1.7899  1.7886  1.7756  1.7720
[17 : 32]:	1.7686  1.7653  1.7553  1.7553  1.7553  1.7533  1.7324  1.7318  1.7284  1.6225  1.6205  1.6175  1.6175  1.6161  1.6128  1.6064
[33 : 48]:	1.5990  1.5984  1.5687  1.5687  1.5611  1.5584  1.5221  1.5209  1.5079  1.5072  1.5044  1.5008  1.5008  1.4881  1.4837  1.4835
[49 : 64]:	1.4727  1.4596  1.4508  1.4360  1.4246  1.4239  1.4224  1.4146  1.4094  1.4087  1.3988  1.3921  1.3793  1.3770  1.3759  1.3656
2024-03-21 18:22:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 18:22:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #129: GFLOPs: 1402.4497. Time: 31.9216 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #130: GFLOPs: 1302.5836. Time: 34.3690 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #131: GFLOPs: 1577.2192. Time: 28.3844 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #132: GFLOPs: 31.3127. Time: 1429.7235 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #133: GFLOPs: 2440.2547. Time: 18.3458 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #134: GFLOPs: 2417.7028. Time: 18.5169 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #135: GFLOPs: 1239.8502. Time: 36.1080 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #136: GFLOPs: 2317.0040. Time: 19.3217 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #137: GFLOPs: 2309.4033. Time: 19.3853 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #138: GFLOPs: 2360.0608. Time: 18.9692 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #139: GFLOPs: 2235.4575. Time: 20.0265 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #140: GFLOPs: 2201.8497. Time: 20.3322 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #141: GFLOPs: 2265.0168. Time: 19.7652 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #142: GFLOPs: 2142.1442. Time: 20.8989 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #143: GFLOPs: 2383.0599. Time: 18.7861 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #144: GFLOPs: 2186.3042. Time: 20.4768 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #145: GFLOPs: 1235.7991. Time: 36.2263 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #146: GFLOPs: 2315.9740. Time: 19.3303 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #147: GFLOPs: 2149.3993. Time: 20.8284 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #148: GFLOPs: 2269.2080. Time: 19.7287 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #149: GFLOPs: 2209.5821. Time: 20.2610 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #150: GFLOPs: 2414.2390. Time: 18.5435 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #151: GFLOPs: 1911.5625. Time: 23.4198 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #152: GFLOPs: 1428.2591. Time: 31.3448 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #153: GFLOPs: 1738.2930. Time: 25.7543 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #154: GFLOPs: 1414.9129. Time: 31.6404 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #155: GFLOPs: 1364.4435. Time: 32.8108 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #156: GFLOPs: 1949.0407. Time: 22.9695 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #157: GFLOPs: 2357.4085. Time: 18.9905 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #158: GFLOPs: 1339.7465. Time: 33.4156 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #159: GFLOPs: 1406.0281. Time: 31.8404 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #160: GFLOPs: 1768.3726. Time: 25.3162 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #161: GFLOPs: 1358.8800. Time: 32.9451 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #162: GFLOPs: 1345.2896. Time: 33.2779 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #163: GFLOPs: 1879.3317. Time: 23.8215 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #164: GFLOPs: 1516.8160. Time: 29.5148 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #165: GFLOPs: 1232.0578. Time: 36.3363 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #166: GFLOPs: 1216.8595. Time: 36.7902 us. Best GFLOPs: 2488.5716
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #167: GFLOPs: 2648.1131. Time: 16.9058 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #168: GFLOPs: 2545.7937. Time: 17.5853 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #169: GFLOPs: 1900.1092. Time: 23.5610 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #170: GFLOPs: 1346.3401. Time: 33.2520 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #171: GFLOPs: 1702.4397. Time: 26.2966 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #172: GFLOPs: 1292.2839. Time: 34.6429 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #173: GFLOPs: 2254.0788. Time: 19.8611 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #174: GFLOPs: 1994.2817. Time: 22.4484 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #175: GFLOPs: 1303.1455. Time: 34.3541 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #176: GFLOPs: 2253.8713. Time: 19.8629 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #177: GFLOPs: 823.7950. Time: 54.3442 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #178: GFLOPs: 1955.0365. Time: 22.8990 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #179: GFLOPs: 1948.0461. Time: 22.9812 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #180: GFLOPs: 1789.7257. Time: 25.0141 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #181: GFLOPs: 2257.5294. Time: 19.8307 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #182: GFLOPs: 658.9968. Time: 67.9342 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #183: GFLOPs: 20.6050. Time: 2172.7004 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #184: GFLOPs: 934.4452. Time: 47.9091 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #185: GFLOPs: 1288.2417. Time: 34.7516 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #186: GFLOPs: 1725.6770. Time: 25.9425 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #187: GFLOPs: 1412.6043. Time: 31.6921 us. Best GFLOPs: 2648.1131
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #188: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(169), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(208), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(12) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13))
                                    v2 = T.axis.spatial(T.int64(64), ci_0)
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1 < T.int64(13))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13))
                                        v2 = T.axis.spatial(T.int64(64), ci_0)
                                        v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(12) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(12), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(12) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 8, 6, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 1, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 104], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 104, 2], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #189: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(338), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(104), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(13) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) * T.int64(24) + co_3_init * T.int64(6) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(104)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1352))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1352) // T.int64(338))
                                    v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) % T.int64(338) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(20)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(768))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(768) // T.int64(192))
                                        v2 = T.axis.spatial(T.int64(64), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3072))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(13) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) * T.int64(24) + co_3 * T.int64(6) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(24), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(13) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(52) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) * T.int64(24) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 4, 1, 4, 6])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 13, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 2, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 52], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 52, 3], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #190: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(338), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(156), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(13)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(8) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3_init * T.int64(13) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(156), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                                    v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0])
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1 < T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(156), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(468) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0])
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(468) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(156) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(13)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(8) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3 * T.int64(13) + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(8), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 13, 1, 13])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 156], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 156, 3], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #191: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(169), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(13), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(384), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(13), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(192) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(192) // T.int64(48) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(48) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(384), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1) // T.int64(104))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1) % T.int64(104) // T.int64(26))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1) % T.int64(26) // T.int64(13))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 < T.int64(416))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(384), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1536) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(768))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1536) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(768) // T.int64(192))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1536) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1536) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(13), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(192) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(192) // T.int64(48) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(48) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused * T.int64(2) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(192) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(192) // T.int64(48) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(48) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 48, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 1, 1, 13, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[32, 2, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 384], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 384, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 18:23:40 [INFO] [task_scheduler.cc:121] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #192: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(64), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(64), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(22), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(10816))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(10816))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(10816))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(64), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(10816))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(13), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(12) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(338))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(338) // T.int64(169))
                                        v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1352))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16) // T.int64(8))
                                    v2 = T.axis.spatial(T.int64(64), ci_0_fused)
                                    v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(12) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1 < T.int64(64))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(12) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(64), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(12) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(12) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[12, 1, 4, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 13, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145 = sch.split(loop=l143, factors=[None, 52], preserve_unit_iters=True)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b150)
l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 18:56:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 18:56:06 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 18:56:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:56:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 787 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:56:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 1180 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:56:13 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-03-21 18:56:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 159 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:56:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 148 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:56:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:56:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 18:57:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.2769  2.2617  2.2471  2.1871  2.1847  2.1833  2.1831  2.1570  2.1562  2.1412  2.1134  2.1117  2.0756  2.0504  2.0131  2.0052
[17 : 32]:	1.9811  1.9699  1.9665  1.9665  1.9393  1.9388  1.9257  1.8833  1.8810  1.8776  1.8741  1.8642  1.8468  1.8408  1.8394  1.8148
[33 : 48]:	1.8109  1.8074  1.8074  1.8026  1.7985  1.7978  1.7877  1.7822  1.7808  1.7798  1.7795  1.7784  1.7770  1.7767  1.7740  1.7711
[49 : 64]:	1.7701  1.7688  1.7682  1.7653  1.7653  1.7599  1.7538  1.7534  1.7488  1.7479  1.7454  1.7452  1.7443  1.7407  1.7407  1.7384
2024-03-21 18:57:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 18:57:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #193: GFLOPs: 2035.3046. Time: 21.9959 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #194: GFLOPs: 1994.6907. Time: 22.4438 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #195: GFLOPs: 2053.0632. Time: 21.8057 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #196: GFLOPs: 1862.7393. Time: 24.0337 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #197: GFLOPs: 1982.1650. Time: 22.5856 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #198: GFLOPs: 1458.5022. Time: 30.6948 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #199: GFLOPs: 1450.0329. Time: 30.8741 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #200: GFLOPs: 2026.8948. Time: 22.0872 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #201: GFLOPs: 2097.0221. Time: 21.3486 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #202: GFLOPs: 1017.8952. Time: 43.9814 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #203: GFLOPs: 2053.0686. Time: 21.8056 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #204: GFLOPs: 1376.7539. Time: 32.5174 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #205: GFLOPs: 1125.1817. Time: 39.7877 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #206: GFLOPs: 1329.7394. Time: 33.6671 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #207: GFLOPs: 1333.8243. Time: 33.5640 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #208: GFLOPs: 2164.3025. Time: 20.6849 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #209: GFLOPs: 2313.5926. Time: 19.3502 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #210: GFLOPs: 2260.6594. Time: 19.8033 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #211: GFLOPs: 1567.0825. Time: 28.5680 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #212: GFLOPs: 1571.8053. Time: 28.4822 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #213: GFLOPs: 2213.0303. Time: 20.2295 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #214: GFLOPs: 1620.8674. Time: 27.6201 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #215: GFLOPs: 1449.6057. Time: 30.8832 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #216: GFLOPs: 1649.4156. Time: 27.1420 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #217: GFLOPs: 1692.5541. Time: 26.4502 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #218: GFLOPs: 2479.2498. Time: 18.0573 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #219: GFLOPs: 2093.7632. Time: 21.3818 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #220: GFLOPs: 2115.4898. Time: 21.1622 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #221: GFLOPs: 2096.4194. Time: 21.3547 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #222: GFLOPs: 2170.1841. Time: 20.6289 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #223: GFLOPs: 2082.1182. Time: 21.5014 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #224: GFLOPs: 1706.2797. Time: 26.2375 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #225: GFLOPs: 2109.7778. Time: 21.2195 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #226: GFLOPs: 1986.2759. Time: 22.5389 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #227: GFLOPs: 1462.0182. Time: 30.6210 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #228: GFLOPs: 1463.8860. Time: 30.5819 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #229: GFLOPs: 1466.6613. Time: 30.5241 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #230: GFLOPs: 1605.7607. Time: 27.8799 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #231: GFLOPs: 2081.5858. Time: 21.5069 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #232: GFLOPs: 1433.7694. Time: 31.2243 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #233: GFLOPs: 1944.5909. Time: 23.0220 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #234: GFLOPs: 1618.3049. Time: 27.6638 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #235: GFLOPs: 2186.1364. Time: 20.4783 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #236: GFLOPs: 2070.0234. Time: 21.6270 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #237: GFLOPs: 754.7619. Time: 59.3147 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #238: GFLOPs: 1910.0002. Time: 23.4390 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #239: GFLOPs: 2081.3679. Time: 21.5091 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #240: GFLOPs: 2071.8398. Time: 21.6081 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #241: GFLOPs: 2125.0636. Time: 21.0669 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #242: GFLOPs: 2120.9891. Time: 21.1073 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #243: GFLOPs: 2127.0751. Time: 21.0470 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #244: GFLOPs: 2146.7798. Time: 20.8538 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #245: GFLOPs: 1764.5024. Time: 25.3717 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #246: GFLOPs: 2108.0169. Time: 21.2372 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #247: GFLOPs: 2056.7199. Time: 21.7669 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #248: GFLOPs: 2066.1657. Time: 21.6674 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #249: GFLOPs: 2119.0994. Time: 21.1262 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #250: GFLOPs: 1797.5554. Time: 24.9052 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #251: GFLOPs: 2082.5716. Time: 21.4967 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #252: GFLOPs: 757.6655. Time: 59.0874 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #253: GFLOPs: 2094.0984. Time: 21.3784 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #254: GFLOPs: 150.6217. Time: 297.2245 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #255: GFLOPs: 1581.6186. Time: 28.3055 us. Best GFLOPs: 2648.1131
2024-03-21 18:58:09 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #256: GFLOPs: 61.1451. Time: 732.1675 us. Best GFLOPs: 2648.1131
2024-03-21 19:25:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 19:25:31 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 19:25:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 386 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 19:25:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 780 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 19:25:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 1169 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 19:25:38 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-03-21 19:25:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 160 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 19:25:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 162 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 19:26:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 19:26:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c2a86f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b386c98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b386d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bd26a38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0714e66488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3aa8d8)]: 135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b389668)]: 0 failure(s)
2024-03-21 19:26:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.3536  2.3536  2.3051  2.2314  2.1589  2.1569  2.1525  2.1513  2.1503  2.1165  2.0814  2.0623  2.0275  2.0004  1.9296  1.9114
[17 : 32]:	1.9104  1.9089  1.9087  1.9085  1.9070  1.9048  1.8906  1.8662  1.8550  1.8527  1.8446  1.8250  1.8168  1.7826  1.7762  1.7747
[33 : 48]:	1.7721  1.7721  1.7666  1.7663  1.7592  1.7434  1.7431  1.7347  1.7300  1.7125  1.6772  1.6722  1.6722  1.6591  1.6575  1.6464
[49 : 64]:	1.6449  1.6443  1.6357  1.6347  1.6308  1.6245  1.6229  1.6160  1.6131  1.6019  1.5979  1.5908  1.5794  1.5780  1.5720  1.5698
2024-03-21 19:26:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 19:26:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #257: GFLOPs: 1776.5429. Time: 25.1998 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #258: GFLOPs: 1793.3047. Time: 24.9642 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #259: GFLOPs: 1750.0805. Time: 25.5808 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #260: GFLOPs: 1777.7734. Time: 25.1823 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #261: GFLOPs: 1795.0500. Time: 24.9399 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #262: GFLOPs: 1741.1706. Time: 25.7117 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #263: GFLOPs: 1782.4567. Time: 25.1161 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #264: GFLOPs: 1788.2746. Time: 25.0344 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #265: GFLOPs: 1787.5662. Time: 25.0444 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #266: GFLOPs: 1805.1102. Time: 24.8010 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #267: GFLOPs: 1767.9302. Time: 25.3225 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #268: GFLOPs: 1753.9818. Time: 25.5239 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #269: GFLOPs: 1800.5855. Time: 24.8633 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #270: GFLOPs: 1844.5296. Time: 24.2709 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #271: GFLOPs: 1842.7463. Time: 24.2944 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #272: GFLOPs: 1783.5240. Time: 25.1011 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #273: GFLOPs: 2427.2871. Time: 18.4438 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #274: GFLOPs: 2481.4271. Time: 18.0414 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #275: GFLOPs: 1734.0870. Time: 25.8167 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #276: GFLOPs: 1807.2776. Time: 24.7712 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #277: GFLOPs: 1824.4628. Time: 24.5379 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #278: GFLOPs: 1822.2294. Time: 24.5680 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #279: GFLOPs: 1819.4696. Time: 24.6052 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #280: GFLOPs: 2391.3720. Time: 18.7208 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #281: GFLOPs: 1734.0704. Time: 25.8170 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #282: GFLOPs: 1836.2831. Time: 24.3799 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #283: GFLOPs: 1838.1569. Time: 24.3551 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #284: GFLOPs: 1796.6070. Time: 24.9183 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #285: GFLOPs: 1784.0072. Time: 25.0943 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #286: GFLOPs: 2101.6815. Time: 21.3013 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #287: GFLOPs: 1901.2679. Time: 23.5466 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #288: GFLOPs: 1837.2557. Time: 24.3670 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #289: GFLOPs: 2184.1478. Time: 20.4970 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #290: GFLOPs: 2133.6654. Time: 20.9819 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #291: GFLOPs: 1825.1688. Time: 24.5284 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #292: GFLOPs: 1793.6778. Time: 24.9590 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #293: GFLOPs: 1994.0569. Time: 22.4509 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #294: GFLOPs: 2091.7548. Time: 21.4023 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #295: GFLOPs: 2492.8948. Time: 17.9584 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #296: GFLOPs: 1385.4518. Time: 32.3132 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #297: GFLOPs: 2169.3584. Time: 20.6367 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #298: GFLOPs: 2283.8711. Time: 19.6020 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #299: GFLOPs: 2168.6558. Time: 20.6434 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #300: GFLOPs: 2054.1208. Time: 21.7945 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #301: GFLOPs: 2047.1985. Time: 21.8682 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #302: GFLOPs: 1920.9128. Time: 23.3058 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #303: GFLOPs: 1849.5781. Time: 24.2047 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #304: GFLOPs: 1635.7046. Time: 27.3695 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #305: GFLOPs: 1394.7773. Time: 32.0972 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #306: GFLOPs: 1880.7458. Time: 23.8036 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #307: GFLOPs: 2226.6918. Time: 20.1054 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #308: GFLOPs: 2237.4950. Time: 20.0083 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #309: GFLOPs: 2467.2247. Time: 18.1453 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #310: GFLOPs: 1880.1901. Time: 23.8106 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #311: GFLOPs: 1761.3456. Time: 25.4172 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #312: GFLOPs: 1608.2390. Time: 27.8369 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #313: GFLOPs: 1779.7806. Time: 25.1539 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #314: GFLOPs: 1740.7066. Time: 25.7185 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #315: GFLOPs: 1876.0759. Time: 23.8628 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #316: GFLOPs: 2239.5211. Time: 19.9902 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #317: GFLOPs: 2087.0776. Time: 21.4503 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #318: GFLOPs: 119.4477. Time: 374.7955 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #319: GFLOPs: 1699.1293. Time: 26.3479 us. Best GFLOPs: 2648.1131
2024-03-21 19:27:22 [INFO] [task_scheduler.cc:131] [Task #40: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #320: GFLOPs: 203.9576. Time: 219.4988 us. Best GFLOPs: 2648.1131
