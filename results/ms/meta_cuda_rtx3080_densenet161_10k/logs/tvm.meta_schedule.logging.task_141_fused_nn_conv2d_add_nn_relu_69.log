2024-03-21 07:30:25 [INFO] [task_scheduler.cc:160] Initializing Task #141: "fused_nn_conv2d_add_nn_relu_69"
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(288), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28), T.int64(288), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(3), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8064)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6912)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(144))
                                    v1 = T.axis.spatial(T.int64(288), rc_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused % T.int64(144))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0 * T.int64(144) + rc_1 * T.int64(18) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 3, 1, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 8, 18])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(3), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8064)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(144) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6912)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(144))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(144) + ax0_ax1_ax2_ax3_fused % T.int64(144))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(144) + rc_1 * T.int64(18) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 3, 1, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 8, 18])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(3), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8064)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(144) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6912)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(144))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(144) + ax0_ax1_ax2_ax3_fused % T.int64(144))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(18), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(144) + rc_1 * T.int64(18) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 3, 1, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 8, 18])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:45:14 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:45:14 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:45:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eddf5dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f6df3cd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8e5d44778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f45630b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f22dd068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0bdb228)]: 475 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f12399f8)]: 0 failure(s)
2024-03-21 08:45:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eddf5dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f6df3cd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8e5d44778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f45630b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f22dd068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0bdb228)]: 958 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f12399f8)]: 0 failure(s)
2024-03-21 08:45:15 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-03-21 08:45:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eddf5dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f6df3cd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8e5d44778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f45630b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f22dd068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0bdb228)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f12399f8)]: 0 failure(s)
2024-03-21 08:45:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eddf5dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f6df3cd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8e5d44778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f45630b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f22dd068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0bdb228)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f12399f8)]: 0 failure(s)
2024-03-21 08:45:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eddf5dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f6df3cd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8e5d44778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f45630b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f22dd068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0bdb228)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f12399f8)]: 0 failure(s)
2024-03-21 08:45:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eddf5dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f6df3cd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8e5d44778)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f45630b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f22dd068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0bdb228)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f12399f8)]: 0 failure(s)
2024-03-21 08:45:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9967  0.9965  0.9964  0.9961  0.9956  0.9948  0.9936  0.9936  0.9930  0.9928  0.9927  0.9925  0.9924  0.9918  0.9914  0.9903
[17 : 32]:	0.9896  0.9890  0.9881  0.9878  0.9871  0.9859  0.9848  0.9846  0.9841  0.9833  0.9831  0.9826  0.9825  0.9822  0.9816  0.9810
[33 : 48]:	0.9804  0.9800  0.9796  0.9786  0.9776  0.9776  0.9770  0.9760  0.9760  0.9755  0.9749  0.9746  0.9741  0.9740  0.9735  0.9733
[49 : 64]:	0.9727  0.9726  0.9725  0.9719  0.9713  0.9712  0.9711  0.9706  0.9703  0.9700  0.9699  0.9693  0.9677  0.9675  0.9673  0.9672
2024-03-21 08:45:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:45:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #1: GFLOPs: 793.0507. Time: 109.7095 us. Best GFLOPs: 793.0507
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #2: GFLOPs: 2173.1115. Time: 40.0371 us. Best GFLOPs: 2173.1115
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #3: GFLOPs: 147.8713. Time: 588.3844 us. Best GFLOPs: 2173.1115
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #4: GFLOPs: 430.3718. Time: 202.1628 us. Best GFLOPs: 2173.1115
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #5: GFLOPs: 900.1178. Time: 96.6598 us. Best GFLOPs: 2173.1115
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #6: GFLOPs: 3240.7562. Time: 26.8472 us. Best GFLOPs: 3240.7562
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #7: GFLOPs: 73.4836. Time: 1184.0082 us. Best GFLOPs: 3240.7562
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #8: GFLOPs: 3724.6244. Time: 23.3595 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #9: GFLOPs: 1926.3457. Time: 45.1659 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #10: GFLOPs: 1208.9698. Time: 71.9664 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #11: GFLOPs: 2048.6467. Time: 42.4696 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #12: GFLOPs: 875.0686. Time: 99.4267 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #13: GFLOPs: 104.6734. Time: 831.2065 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #14: GFLOPs: 68.8793. Time: 1263.1552 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #15: GFLOPs: 197.6520. Time: 440.1939 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #16: GFLOPs: 737.5568. Time: 117.9640 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #17: GFLOPs: 926.0074. Time: 93.9573 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #18: GFLOPs: 2202.4280. Time: 39.5042 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #19: GFLOPs: 2540.5904. Time: 34.2460 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #20: GFLOPs: 1533.2616. Time: 56.7452 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #21: GFLOPs: 1360.5611. Time: 63.9480 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #22: GFLOPs: 1636.4745. Time: 53.1662 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #23: GFLOPs: 48.8104. Time: 1782.5145 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #24: GFLOPs: 1738.4570. Time: 50.0474 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #25: GFLOPs: 1748.1168. Time: 49.7708 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #26: GFLOPs: 382.0239. Time: 227.7480 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #27: GFLOPs: 2121.6807. Time: 41.0077 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #28: GFLOPs: 3078.5633. Time: 28.2616 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #29: GFLOPs: 384.4860. Time: 226.2896 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #30: GFLOPs: 393.2964. Time: 221.2204 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #31: GFLOPs: 1474.5033. Time: 59.0064 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #32: GFLOPs: 413.3080. Time: 210.5093 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #33: GFLOPs: 3065.3316. Time: 28.3836 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #34: GFLOPs: 1036.4894. Time: 83.9422 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #35: GFLOPs: 321.1971. Time: 270.8779 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #36: GFLOPs: 2146.2281. Time: 40.5386 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #37: GFLOPs: 1089.2169. Time: 79.8787 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #38: GFLOPs: 409.6289. Time: 212.4000 us. Best GFLOPs: 3724.6244
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #39: GFLOPs: 4399.5752. Time: 19.7758 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #40: GFLOPs: 70.8021. Time: 1228.8504 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #41: GFLOPs: 1711.8634. Time: 50.8248 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #42: GFLOPs: 1331.4619. Time: 65.3456 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #43: GFLOPs: 1617.5942. Time: 53.7868 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #44: GFLOPs: 75.2784. Time: 1155.7782 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #45: GFLOPs: 746.5177. Time: 116.5481 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #46: GFLOPs: 2418.0624. Time: 35.9814 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #47: GFLOPs: 132.9807. Time: 654.2690 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #48: GFLOPs: 63.9707. Time: 1360.0796 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #49: GFLOPs: 46.9013. Time: 1855.0707 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #50: GFLOPs: 1277.3496. Time: 68.1138 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #51: GFLOPs: 297.9821. Time: 291.9812 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #52: GFLOPs: 1540.6857. Time: 56.4717 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #53: GFLOPs: 59.5503. Time: 1461.0379 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #54: GFLOPs: 986.2075. Time: 88.2220 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #55: GFLOPs: 2564.3852. Time: 33.9283 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #56: GFLOPs: 1259.6960. Time: 69.0684 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #57: GFLOPs: 2969.0913. Time: 29.3036 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #58: GFLOPs: 146.1264. Time: 595.4105 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #59: GFLOPs: 2355.8678. Time: 36.9313 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #60: GFLOPs: 1313.3982. Time: 66.2443 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #61: GFLOPs: 790.9793. Time: 109.9968 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #62: GFLOPs: 1094.6099. Time: 79.4851 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #63: GFLOPs: 3262.9906. Time: 26.6642 us. Best GFLOPs: 4399.5752
2024-03-21 09:11:44 [INFO] [task_scheduler.cc:131] [Task #141: fused_nn_conv2d_add_nn_relu_69] Trial #64: GFLOPs: 253.8249. Time: 342.7764 us. Best GFLOPs: 4399.5752
