2024-03-21 13:42:29 [INFO] [task_scheduler.cc:160] Initializing Task #128: "fused_nn_conv2d_add_nn_relu_63"
2024-03-21 13:42:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(768), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(768), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(768), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:29 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(768), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(150528)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(49152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_fused % T.int64(768))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(768), rc_0 * T.int64(768) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 16, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 48, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:29 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(768), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(150528)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(49152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_fused % T.int64(768))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(768), rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 16, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 48, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:29 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(768), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(150528)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(49152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_fused % T.int64(768))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(768), rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 16, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 48, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 14:51:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 14:51:19 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 14:51:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9c7d5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f4b418f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f8a6c3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2eb2d8378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edad2748)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f3115598)]: 482 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f91f6ac8)]: 0 failure(s)
2024-03-21 14:51:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9c7d5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f4b418f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f8a6c3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2eb2d8378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edad2748)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f3115598)]: 970 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f91f6ac8)]: 0 failure(s)
2024-03-21 14:51:20 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-03-21 14:51:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9c7d5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f4b418f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f8a6c3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2eb2d8378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edad2748)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f3115598)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f91f6ac8)]: 0 failure(s)
2024-03-21 14:51:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9c7d5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f4b418f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f8a6c3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2eb2d8378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edad2748)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f3115598)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f91f6ac8)]: 0 failure(s)
2024-03-21 14:51:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9c7d5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f4b418f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f8a6c3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2eb2d8378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edad2748)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f3115598)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f91f6ac8)]: 0 failure(s)
2024-03-21 14:51:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9c7d5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f4b418f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f8a6c3f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2eb2d8378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edad2748)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f3115598)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f91f6ac8)]: 0 failure(s)
2024-03-21 14:51:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9997  0.9983  0.9972  0.9970  0.9956  0.9948  0.9936  0.9935  0.9918  0.9916  0.9914  0.9913  0.9907  0.9899  0.9883
[17 : 32]:	0.9883  0.9868  0.9862  0.9860  0.9855  0.9851  0.9850  0.9849  0.9845  0.9834  0.9833  0.9827  0.9826  0.9825  0.9821  0.9808
[33 : 48]:	0.9808  0.9800  0.9774  0.9770  0.9769  0.9750  0.9733  0.9725  0.9698  0.9692  0.9691  0.9683  0.9681  0.9676  0.9674  0.9673
[49 : 64]:	0.9661  0.9660  0.9659  0.9659  0.9655  0.9644  0.9632  0.9622  0.9612  0.9607  0.9605  0.9605  0.9603  0.9601  0.9600  0.9586
2024-03-21 14:51:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 14:51:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #1: GFLOPs: 548.8030. Time: 70.3082 us. Best GFLOPs: 548.8030
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #2: GFLOPs: 219.7682. Time: 175.5729 us. Best GFLOPs: 548.8030
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #3: GFLOPs: 512.4232. Time: 75.2998 us. Best GFLOPs: 548.8030
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #4: GFLOPs: 1067.0367. Time: 36.1612 us. Best GFLOPs: 1067.0367
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #5: GFLOPs: 296.7957. Time: 130.0064 us. Best GFLOPs: 1067.0367
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #6: GFLOPs: 772.6967. Time: 49.9360 us. Best GFLOPs: 1067.0367
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #7: GFLOPs: 1384.3307. Time: 27.8729 us. Best GFLOPs: 1384.3307
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #8: GFLOPs: 1574.8794. Time: 24.5005 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #9: GFLOPs: 387.9913. Time: 99.4490 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #10: GFLOPs: 271.8968. Time: 141.9117 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #11: GFLOPs: 30.3045. Time: 1273.2546 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #12: GFLOPs: 1199.0529. Time: 32.1799 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #13: GFLOPs: 161.4086. Time: 239.0539 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #14: GFLOPs: 746.5281. Time: 51.6864 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #15: GFLOPs: 729.2023. Time: 52.9145 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #16: GFLOPs: 541.8279. Time: 71.2133 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #17: GFLOPs: 565.7187. Time: 68.2059 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #18: GFLOPs: 842.6104. Time: 45.7926 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #19: GFLOPs: 643.2518. Time: 59.9848 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #20: GFLOPs: 1414.4655. Time: 27.2791 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #21: GFLOPs: 277.8032. Time: 138.8945 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #22: GFLOPs: 114.5305. Time: 336.9001 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #23: GFLOPs: 245.9240. Time: 156.8994 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #24: GFLOPs: 482.0344. Time: 80.0469 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #25: GFLOPs: 514.0890. Time: 75.0558 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #26: GFLOPs: 1287.8057. Time: 29.9621 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #27: GFLOPs: 48.8230. Time: 790.3111 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #28: GFLOPs: 369.2848. Time: 104.4867 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #29: GFLOPs: 329.0822. Time: 117.2514 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #30: GFLOPs: 16.5313. Time: 2334.0786 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #31: GFLOPs: 643.4260. Time: 59.9686 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #32: GFLOPs: 181.2578. Time: 212.8754 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #33: GFLOPs: 1055.4258. Time: 36.5590 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #34: GFLOPs: 1114.3828. Time: 34.6249 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #35: GFLOPs: 48.5575. Time: 794.6321 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #36: GFLOPs: 485.8900. Time: 79.4117 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #37: GFLOPs: 71.4725. Time: 539.8627 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #38: GFLOPs: 151.8644. Time: 254.0776 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #39: GFLOPs: 749.5210. Time: 51.4800 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #40: GFLOPs: 509.8891. Time: 75.6740 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #41: GFLOPs: 273.7084. Time: 140.9725 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #42: GFLOPs: 779.8711. Time: 49.4766 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #43: GFLOPs: 201.2013. Time: 191.7748 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #44: GFLOPs: 807.5955. Time: 47.7781 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #45: GFLOPs: 1070.8663. Time: 36.0319 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #46: GFLOPs: 337.3872. Time: 114.3652 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #47: GFLOPs: 746.9393. Time: 51.6579 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #48: GFLOPs: 151.0803. Time: 255.3963 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #49: GFLOPs: 482.4653. Time: 79.9754 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #50: GFLOPs: 471.0186. Time: 81.9189 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #51: GFLOPs: 17.5378. Time: 2200.1308 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #52: GFLOPs: 851.8324. Time: 45.2969 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #53: GFLOPs: 407.9939. Time: 94.5733 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #54: GFLOPs: 293.2999. Time: 131.5560 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #55: GFLOPs: 14.1212. Time: 2732.4472 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #56: GFLOPs: 768.8512. Time: 50.1857 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #57: GFLOPs: 209.1287. Time: 184.5053 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #58: GFLOPs: 135.0574. Time: 285.6960 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #59: GFLOPs: 811.1308. Time: 47.5698 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #60: GFLOPs: 200.5191. Time: 192.4273 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #61: GFLOPs: 512.1180. Time: 75.3446 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #62: GFLOPs: 553.9038. Time: 69.6607 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #63: GFLOPs: 552.9593. Time: 69.7797 us. Best GFLOPs: 1574.8794
2024-03-21 15:48:58 [INFO] [task_scheduler.cc:131] [Task #128: fused_nn_conv2d_add_nn_relu_63] Trial #64: GFLOPs: 421.5333. Time: 91.5357 us. Best GFLOPs: 1574.8794
