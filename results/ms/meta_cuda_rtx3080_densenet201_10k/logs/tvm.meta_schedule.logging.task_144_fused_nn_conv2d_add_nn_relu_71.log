2024-03-21 13:42:30 [INFO] [task_scheduler.cc:160] Initializing Task #144: "fused_nn_conv2d_add_nn_relu_71"
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(14336)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(512))
                                    v1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused % T.int64(512))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(512), rc_0 * T.int64(512) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 2, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 32, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(14336)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(512))
                                    v1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused % T.int64(512))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(512), rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 2, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 32, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(512), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(14336)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(512))
                                    v1 = T.axis.spatial(T.int64(512), ax0_ax1_ax2_ax3_fused % T.int64(512))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(512), rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 2, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 32, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 15:00:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:00:19 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 15:00:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68a10a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2fab7e008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2e539d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f39e6c08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f289acf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f60288a8)]: 485 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f81b3998)]: 0 failure(s)
2024-03-21 15:00:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68a10a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2fab7e008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2e539d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f39e6c08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f289acf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f60288a8)]: 955 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f81b3998)]: 0 failure(s)
2024-03-21 15:00:20 [INFO] [evolutionary_search.cc:723] Sampled 69 candidate(s)
2024-03-21 15:00:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68a10a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2fab7e008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2e539d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f39e6c08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f289acf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f60288a8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f81b3998)]: 0 failure(s)
2024-03-21 15:00:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68a10a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2fab7e008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2e539d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f39e6c08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f289acf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f60288a8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f81b3998)]: 0 failure(s)
2024-03-21 15:00:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68a10a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2fab7e008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2e539d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f39e6c08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f289acf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f60288a8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f81b3998)]: 0 failure(s)
2024-03-21 15:00:26 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68a10a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2fab7e008)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2e539d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f39e6c08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f289acf8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f60288a8)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f81b3998)]: 0 failure(s)
2024-03-21 15:00:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9986  0.9975  0.9975  0.9972  0.9971  0.9969  0.9968  0.9966  0.9965  0.9956  0.9948  0.9943  0.9936  0.9935  0.9931
[17 : 32]:	0.9931  0.9923  0.9920  0.9919  0.9917  0.9914  0.9908  0.9880  0.9880  0.9856  0.9850  0.9839  0.9836  0.9833  0.9831  0.9818
[33 : 48]:	0.9816  0.9800  0.9796  0.9796  0.9785  0.9776  0.9765  0.9750  0.9745  0.9721  0.9720  0.9707  0.9698  0.9697  0.9695  0.9694
[49 : 64]:	0.9693  0.9686  0.9683  0.9680  0.9676  0.9665  0.9662  0.9654  0.9653  0.9630  0.9626  0.9625  0.9621  0.9609  0.9602  0.9596
2024-03-21 15:00:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:00:26 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #1: GFLOPs: 105.1201. Time: 244.8656 us. Best GFLOPs: 105.1201
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #2: GFLOPs: 108.3436. Time: 237.5801 us. Best GFLOPs: 108.3436
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #3: GFLOPs: 1067.0857. Time: 24.1220 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #4: GFLOPs: 655.2762. Time: 39.2816 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #5: GFLOPs: 641.6765. Time: 40.1141 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #6: GFLOPs: 642.8934. Time: 40.0382 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #7: GFLOPs: 124.0176. Time: 207.5535 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #8: GFLOPs: 18.8808. Time: 1363.3033 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #9: GFLOPs: 102.1238. Time: 252.0498 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #10: GFLOPs: 852.8318. Time: 30.1821 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #11: GFLOPs: 148.6867. Time: 173.1176 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #12: GFLOPs: 871.6219. Time: 29.5315 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #13: GFLOPs: 111.8728. Time: 230.0853 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #14: GFLOPs: 316.9826. Time: 81.2041 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #15: GFLOPs: 102.7516. Time: 250.5098 us. Best GFLOPs: 1067.0857
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #16: GFLOPs: 1385.9779. Time: 18.5719 us. Best GFLOPs: 1385.9779
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #17: GFLOPs: 238.3706. Time: 107.9843 us. Best GFLOPs: 1385.9779
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #18: GFLOPs: 13.7638. Time: 1870.1435 us. Best GFLOPs: 1385.9779
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #19: GFLOPs: 1430.2555. Time: 17.9970 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #20: GFLOPs: 149.2804. Time: 172.4291 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #21: GFLOPs: 161.4539. Time: 159.4281 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #22: GFLOPs: 217.4823. Time: 118.3558 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #23: GFLOPs: 14.7471. Time: 1745.4433 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #24: GFLOPs: 17.4582. Time: 1474.3944 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #25: GFLOPs: 67.6396. Time: 380.5507 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #26: GFLOPs: 278.8099. Time: 92.3220 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #27: GFLOPs: 193.7201. Time: 132.8736 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #28: GFLOPs: 481.0972. Time: 53.5033 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #29: GFLOPs: 384.4620. Time: 66.9515 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #30: GFLOPs: 100.1099. Time: 257.1204 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #31: GFLOPs: 1325.9828. Time: 19.4122 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #32: GFLOPs: 1297.5709. Time: 19.8373 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #33: GFLOPs: 173.8005. Time: 148.1025 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #34: GFLOPs: 167.3824. Time: 153.7813 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #35: GFLOPs: 171.1091. Time: 150.4320 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #36: GFLOPs: 17.1130. Time: 1504.1338 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #37: GFLOPs: 736.5727. Time: 34.9460 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #38: GFLOPs: 321.6226. Time: 80.0326 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #39: GFLOPs: 451.8633. Time: 56.9648 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #40: GFLOPs: 195.9123. Time: 131.3868 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #41: GFLOPs: 1145.3814. Time: 22.4731 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #42: GFLOPs: 842.3669. Time: 30.5571 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #43: GFLOPs: 190.4452. Time: 135.1585 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #44: GFLOPs: 1308.0479. Time: 19.6784 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #45: GFLOPs: 189.2656. Time: 136.0009 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #46: GFLOPs: 335.3992. Time: 76.7452 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #47: GFLOPs: 62.4417. Time: 412.2294 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #48: GFLOPs: 175.1144. Time: 146.9913 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #49: GFLOPs: 82.4849. Time: 312.0605 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #50: GFLOPs: 512.0017. Time: 50.2738 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #51: GFLOPs: 15.6027. Time: 1649.7311 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #52: GFLOPs: 1386.7617. Time: 18.5614 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #53: GFLOPs: 25.1856. Time: 1022.0226 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #54: GFLOPs: 333.5153. Time: 77.1787 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #55: GFLOPs: 406.0292. Time: 63.3952 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #56: GFLOPs: 439.2257. Time: 58.6038 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #57: GFLOPs: 210.2149. Time: 122.4475 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #58: GFLOPs: 107.3069. Time: 239.8754 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #59: GFLOPs: 165.2104. Time: 155.8031 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #60: GFLOPs: 780.8626. Time: 32.9639 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #61: GFLOPs: 9.3908. Time: 2740.9989 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #62: GFLOPs: 35.0675. Time: 734.0211 us. Best GFLOPs: 1430.2555
2024-03-21 15:49:17 [INFO] [task_scheduler.cc:131] [Task #144: fused_nn_conv2d_add_nn_relu_71] Trial #63: GFLOPs: 230.0081. Time: 111.9103 us. Best GFLOPs: 1430.2555
