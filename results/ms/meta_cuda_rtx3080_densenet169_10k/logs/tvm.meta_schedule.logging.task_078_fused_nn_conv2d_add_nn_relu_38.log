2024-03-21 10:38:27 [INFO] [task_scheduler.cc:160] Initializing Task #78: "fused_nn_conv2d_add_nn_relu_38"
2024-03-21 10:38:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1056), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1056), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1056), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1056), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1056), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 10:38:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1056), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1056), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1056), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1056), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(22), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1056), rc_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(1056), rc_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1056), rc_0 * T.int64(48) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 2, 1, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[22, 48, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 10:38:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1056), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1056), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1056), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1056), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(22), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1056), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(1056), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1056), rc_0_ry_0_rx_0_fused * T.int64(48) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 2, 1, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[22, 48, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 10:38:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1056), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1056), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1056), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1056), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(22), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1056), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(1056), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1056), rc_0_ry_0_rx_0_fused * T.int64(48) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(14)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 2, 1, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[22, 48, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 11:14:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:14:56 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:14:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd453e208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd64da8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a146e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd310dfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd14d09d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd3fc8d38)]: 494 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd74a5748)]: 0 failure(s)
2024-03-21 11:14:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd453e208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd64da8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a146e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd310dfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd14d09d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd3fc8d38)]: 982 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd74a5748)]: 0 failure(s)
2024-03-21 11:14:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd453e208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd64da8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a146e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd310dfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd14d09d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd3fc8d38)]: 1474 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd74a5748)]: 0 failure(s)
2024-03-21 11:14:59 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-03-21 11:15:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd453e208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd64da8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a146e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd310dfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd14d09d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd3fc8d38)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd74a5748)]: 0 failure(s)
2024-03-21 11:15:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd453e208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd64da8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a146e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd310dfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd14d09d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd3fc8d38)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd74a5748)]: 0 failure(s)
2024-03-21 11:15:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd453e208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd64da8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a146e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd310dfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd14d09d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd3fc8d38)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd74a5748)]: 0 failure(s)
2024-03-21 11:15:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd453e208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd64da8a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a146e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd310dfc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd14d09d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd3fc8d38)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd74a5748)]: 0 failure(s)
2024-03-21 11:15:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9981  0.9974  0.9970  0.9967  0.9966  0.9966  0.9958  0.9954  0.9942  0.9931  0.9929  0.9928  0.9926  0.9924  0.9917
[17 : 32]:	0.9913  0.9906  0.9903  0.9901  0.9900  0.9881  0.9878  0.9877  0.9877  0.9876  0.9872  0.9871  0.9869  0.9868  0.9864  0.9860
[33 : 48]:	0.9844  0.9837  0.9826  0.9813  0.9793  0.9791  0.9770  0.9769  0.9764  0.9758  0.9758  0.9754  0.9752  0.9745  0.9740  0.9725
[49 : 64]:	0.9724  0.9720  0.9713  0.9706  0.9703  0.9699  0.9695  0.9694  0.9689  0.9670  0.9670  0.9666  0.9661  0.9657  0.9650  0.9650
2024-03-21 11:15:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:15:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #1: GFLOPs: 276.0771. Time: 192.1059 us. Best GFLOPs: 276.0771
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #2: GFLOPs: 21.2986. Time: 2490.1182 us. Best GFLOPs: 276.0771
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #3: GFLOPs: 131.7350. Time: 402.5965 us. Best GFLOPs: 276.0771
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #4: GFLOPs: 473.7704. Time: 111.9446 us. Best GFLOPs: 473.7704
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #5: GFLOPs: 1447.8567. Time: 36.6307 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #6: GFLOPs: 479.5587. Time: 110.5934 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #7: GFLOPs: 228.2444. Time: 232.3651 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #8: GFLOPs: 812.8044. Time: 65.2507 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #9: GFLOPs: 199.1722. Time: 266.2823 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #10: GFLOPs: 233.8716. Time: 226.7742 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #11: GFLOPs: 466.2483. Time: 113.7506 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #12: GFLOPs: 272.8636. Time: 194.3683 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #13: GFLOPs: 45.6074. Time: 1162.8826 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #14: GFLOPs: 774.2780. Time: 68.4974 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #15: GFLOPs: 638.4935. Time: 83.0643 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #16: GFLOPs: 569.9595. Time: 93.0523 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #17: GFLOPs: 334.7042. Time: 158.4564 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #18: GFLOPs: 366.0120. Time: 144.9024 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #19: GFLOPs: 22.1376. Time: 2395.7456 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #20: GFLOPs: 431.4213. Time: 122.9333 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #21: GFLOPs: 492.6226. Time: 107.6606 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #22: GFLOPs: 263.1295. Time: 201.5587 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #23: GFLOPs: 1102.1071. Time: 48.1224 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #24: GFLOPs: 43.3512. Time: 1223.4052 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #25: GFLOPs: 40.7124. Time: 1302.7009 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #26: GFLOPs: 48.3457. Time: 1097.0156 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #27: GFLOPs: 999.1195. Time: 53.0828 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #28: GFLOPs: 168.7446. Time: 314.2977 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #29: GFLOPs: 429.6404. Time: 123.4428 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #30: GFLOPs: 40.0357. Time: 1324.7192 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #31: GFLOPs: 325.2815. Time: 163.0466 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #32: GFLOPs: 674.3083. Time: 78.6525 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #33: GFLOPs: 371.8512. Time: 142.6270 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #34: GFLOPs: 198.5418. Time: 267.1277 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #35: GFLOPs: 21.1092. Time: 2512.4607 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #36: GFLOPs: 210.1959. Time: 252.3172 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #37: GFLOPs: 1015.6407. Time: 52.2193 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #38: GFLOPs: 375.5360. Time: 141.2276 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #39: GFLOPs: 104.1387. Time: 509.2825 us. Best GFLOPs: 1447.8567
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #40: GFLOPs: 1716.3100. Time: 30.9012 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #41: GFLOPs: 27.1493. Time: 1953.4966 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #42: GFLOPs: 847.9591. Time: 62.5455 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #43: GFLOPs: 21.3812. Time: 2480.5026 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #44: GFLOPs: 357.2683. Time: 148.4488 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #45: GFLOPs: 877.8191. Time: 60.4180 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #46: GFLOPs: 463.6856. Time: 114.3793 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #47: GFLOPs: 688.0198. Time: 77.0850 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #48: GFLOPs: 359.4325. Time: 147.5549 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #49: GFLOPs: 561.8067. Time: 94.4026 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #50: GFLOPs: 7.1773. Time: 7389.4031 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #51: GFLOPs: 439.7981. Time: 120.5918 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #52: GFLOPs: 341.1513. Time: 155.4619 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #53: GFLOPs: 563.1042. Time: 94.1851 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #54: GFLOPs: 480.0566. Time: 110.4787 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #55: GFLOPs: 805.5528. Time: 65.8381 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #56: GFLOPs: 213.5223. Time: 248.3864 us. Best GFLOPs: 1716.3100
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #57: GFLOPs: 1995.2907. Time: 26.5806 us. Best GFLOPs: 1995.2907
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #58: GFLOPs: 34.2344. Time: 1549.2017 us. Best GFLOPs: 1995.2907
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #59: GFLOPs: 1478.4330. Time: 35.8731 us. Best GFLOPs: 1995.2907
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #60: GFLOPs: 1473.4113. Time: 35.9954 us. Best GFLOPs: 1995.2907
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #61: GFLOPs: 163.6585. Time: 324.0652 us. Best GFLOPs: 1995.2907
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #62: GFLOPs: 1236.9878. Time: 42.8751 us. Best GFLOPs: 1995.2907
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #63: GFLOPs: 432.9444. Time: 122.5008 us. Best GFLOPs: 1995.2907
2024-03-21 12:22:03 [INFO] [task_scheduler.cc:131] [Task #78: fused_nn_conv2d_add_nn_relu_38] Trial #64: GFLOPs: 368.3920. Time: 143.9663 us. Best GFLOPs: 1995.2907
