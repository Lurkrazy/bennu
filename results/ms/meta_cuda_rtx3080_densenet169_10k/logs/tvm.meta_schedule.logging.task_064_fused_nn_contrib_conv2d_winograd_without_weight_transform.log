2024-03-21 10:38:26 [INFO] [task_scheduler.cc:160] Initializing Task #64: "fused_nn_contrib_conv2d_winograd_without_weight_transform"
2024-03-21 10:38:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(9), T.int64(9)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(9), T.int64(9)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(8) and T.int64(1) <= v_i3 and v_i3 < T.int64(8), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(16), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps, v_p % T.int64(4) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps, v_p % T.int64(4) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(128), T.int64(16), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(32), T.int64(16), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(32), T.int64(16), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(7)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
2024-03-21 10:38:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(8192))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(8192) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(8192))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(8192) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(2) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + p_3 * T.int64(8) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(128) + ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(16), T.int64(8)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(2) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 2])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 16, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 8])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[1, 16, 8])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
2024-03-21 10:38:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(8192))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(8192) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(8192))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(8192) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(2) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + p_3 * T.int64(8) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(16), T.int64(8)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(2) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 2])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 16, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 8])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[1, 16, 8])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-03-21 10:38:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax0)
                            v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(16))
                                        v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(16))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(16) + ci_p_fused_1 // T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(8192))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(8192) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(8192))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(8192) // T.int64(2048))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(2), T.int64(1), T.int64(16), T.int64(1), T.int64(8), T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(2) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + p_3 * T.int64(8) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_1 * T.int64(8) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(16), T.int64(8)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(2) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(16), eps_1_nu_1_co_1_p_1_fused * T.int64(8) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                            v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16))
                            v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                            T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 2])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 16, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 8])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[1, 16, 8])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-03-21 11:06:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:06:06 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:06:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 481 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 11:06:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 957 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 11:06:10 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-03-21 11:06:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 11:06:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 11:06:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 11:06:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 11:06:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9998  0.9991  0.9983  0.9980  0.9974  0.9950  0.9937  0.9931  0.9925  0.9919  0.9910  0.9908  0.9896  0.9889  0.9889
[17 : 32]:	0.9879  0.9878  0.9871  0.9868  0.9866  0.9859  0.9847  0.9846  0.9840  0.9836  0.9832  0.9830  0.9821  0.9810  0.9802  0.9797
[33 : 48]:	0.9788  0.9781  0.9778  0.9767  0.9765  0.9759  0.9744  0.9742  0.9733  0.9729  0.9721  0.9715  0.9714  0.9714  0.9713  0.9706
[49 : 64]:	0.9704  0.9696  0.9690  0.9675  0.9675  0.9673  0.9659  0.9650  0.9648  0.9635  0.9628  0.9626  0.9610  0.9604  0.9601  0.9586
2024-03-21 11:06:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:06:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #1: GFLOPs: 247.7464. Time: 15.2104 us. Best GFLOPs: 247.7464
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #2: GFLOPs: 156.6500. Time: 24.0557 us. Best GFLOPs: 247.7464
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #3: GFLOPs: 229.0722. Time: 16.4504 us. Best GFLOPs: 247.7464
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #4: GFLOPs: 101.4161. Time: 37.1570 us. Best GFLOPs: 247.7464
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #5: GFLOPs: 419.6631. Time: 8.9794 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #6: GFLOPs: 91.6130. Time: 41.1330 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #7: GFLOPs: 163.2659. Time: 23.0809 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #8: GFLOPs: 158.4303. Time: 23.7853 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #9: GFLOPs: 305.0651. Time: 12.3525 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #10: GFLOPs: 125.5382. Time: 30.0173 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #11: GFLOPs: 134.7776. Time: 27.9595 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #12: GFLOPs: 385.4839. Time: 9.7756 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #13: GFLOPs: 177.4537. Time: 21.2355 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #14: GFLOPs: 117.3248. Time: 32.1187 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #15: GFLOPs: 310.9275. Time: 12.1196 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #16: GFLOPs: 97.9746. Time: 38.4622 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #17: GFLOPs: 95.6434. Time: 39.3997 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #18: GFLOPs: 295.5123. Time: 12.7518 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #19: GFLOPs: 269.9772. Time: 13.9579 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #20: GFLOPs: 418.3429. Time: 9.0077 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #21: GFLOPs: 85.9947. Time: 43.8204 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #22: GFLOPs: 112.6022. Time: 33.4658 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #23: GFLOPs: 310.8677. Time: 12.1219 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #24: GFLOPs: 132.2477. Time: 28.4944 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #25: GFLOPs: 153.2514. Time: 24.5891 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #26: GFLOPs: 116.8223. Time: 32.2569 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #27: GFLOPs: 298.5702. Time: 12.6212 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #28: GFLOPs: 173.3611. Time: 21.7368 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #29: GFLOPs: 115.3603. Time: 32.6657 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #30: GFLOPs: 126.6819. Time: 29.7463 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #31: GFLOPs: 31.7185. Time: 118.8053 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #32: GFLOPs: 261.3465. Time: 14.4189 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #33: GFLOPs: 269.6248. Time: 13.9762 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #34: GFLOPs: 143.5679. Time: 26.2476 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #35: GFLOPs: 114.9175. Time: 32.7915 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #36: GFLOPs: 113.9822. Time: 33.0606 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #37: GFLOPs: 121.9220. Time: 30.9076 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #38: GFLOPs: 253.0394. Time: 14.8922 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #39: GFLOPs: 205.0241. Time: 18.3799 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #40: GFLOPs: 94.2696. Time: 39.9739 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #41: GFLOPs: 102.7069. Time: 36.6900 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #42: GFLOPs: 129.1050. Time: 29.1880 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #43: GFLOPs: 133.5299. Time: 28.2208 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #44: GFLOPs: 113.0549. Time: 33.3318 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #45: GFLOPs: 176.4305. Time: 21.3587 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #46: GFLOPs: 85.2144. Time: 44.2216 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #47: GFLOPs: 239.6956. Time: 15.7213 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #48: GFLOPs: 172.6553. Time: 21.8257 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #49: GFLOPs: 156.6131. Time: 24.0613 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #50: GFLOPs: 146.3984. Time: 25.7402 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #51: GFLOPs: 174.9804. Time: 21.5357 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #52: GFLOPs: 347.9360. Time: 10.8305 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #53: GFLOPs: 239.4836. Time: 15.7352 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #54: GFLOPs: 192.6883. Time: 19.5566 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #55: GFLOPs: 192.5937. Time: 19.5662 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #56: GFLOPs: 212.4755. Time: 17.7353 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #57: GFLOPs: 297.5554. Time: 12.6643 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #58: GFLOPs: 119.2625. Time: 31.5969 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #59: GFLOPs: 273.2332. Time: 13.7916 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #60: GFLOPs: 124.4606. Time: 30.2772 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #61: GFLOPs: 152.3447. Time: 24.7355 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #62: GFLOPs: 334.8667. Time: 11.2532 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #63: GFLOPs: 196.8771. Time: 19.1405 us. Best GFLOPs: 419.6631
2024-03-21 12:21:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #64: GFLOPs: 175.0955. Time: 21.5215 us. Best GFLOPs: 419.6631
2024-03-21 12:25:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:25:52 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 12:25:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 425 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:25:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 849 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:25:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 1274 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:25:57 [INFO] [evolutionary_search.cc:723] Sampled 70 candidate(s)
2024-03-21 12:26:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:26:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:26:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:26:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 66 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:26:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6498  1.6446  1.6342  1.6144  1.6122  1.5915  1.5785  1.5780  1.5662  1.5292  1.5245  1.5149  1.5102  1.4889  1.4686  1.4612
[17 : 32]:	1.4572  1.4041  1.3957  1.3821  1.3793  1.3790  1.3666  1.3609  1.3561  1.3478  1.3475  1.3438  1.3437  1.3415  1.3405  1.3383
[33 : 48]:	1.3381  1.3365  1.3360  1.3338  1.3319  1.3296  1.3277  1.3257  1.3239  1.3232  1.3217  1.3217  1.3186  1.3171  1.3144  1.3139
[49 : 64]:	1.3089  1.3005  1.2989  1.2982  1.2982  1.2944  1.2937  1.2936  1.2904  1.2822  1.2807  1.2782  1.2777  1.2775  1.2752  1.2722
2024-03-21 12:26:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:26:32 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #65: GFLOPs: 336.6308. Time: 11.1942 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #66: GFLOPs: 329.4033. Time: 11.4398 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #67: GFLOPs: 321.2281. Time: 11.7310 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #68: GFLOPs: 337.4137. Time: 11.1682 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #69: GFLOPs: 353.2714. Time: 10.6669 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #70: GFLOPs: 336.4375. Time: 11.2007 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #71: GFLOPs: 271.5995. Time: 13.8745 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #72: GFLOPs: 381.9520. Time: 9.8660 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #73: GFLOPs: 329.1885. Time: 11.4473 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #74: GFLOPs: 323.7620. Time: 11.6392 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #75: GFLOPs: 271.5464. Time: 13.8773 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #76: GFLOPs: 340.0126. Time: 11.0829 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #77: GFLOPs: 324.7013. Time: 11.6055 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #78: GFLOPs: 271.5688. Time: 13.8761 us. Best GFLOPs: 419.6631
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #79: GFLOPs: 505.4656. Time: 7.4551 us. Best GFLOPs: 505.4656
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #80: GFLOPs: 505.4783. Time: 7.4550 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #81: GFLOPs: 337.6339. Time: 11.1610 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #82: GFLOPs: 338.0482. Time: 11.1473 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #83: GFLOPs: 326.6737. Time: 11.5354 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #84: GFLOPs: 324.5834. Time: 11.6097 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #85: GFLOPs: 501.7344. Time: 7.5106 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #86: GFLOPs: 315.0110. Time: 11.9625 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #87: GFLOPs: 395.2122. Time: 9.5349 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #88: GFLOPs: 322.2505. Time: 11.6938 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #89: GFLOPs: 283.6806. Time: 13.2837 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #90: GFLOPs: 290.3591. Time: 12.9781 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #91: GFLOPs: 379.4460. Time: 9.9311 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #92: GFLOPs: 217.1837. Time: 17.3508 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #93: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  278: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  277: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  276: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  275: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  274: tvm::transform::Pass::operator()(tvm::IRModule) const
  273: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  272: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  271: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  270: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  269: _ZN3tvm7runtime13PackedFuncObj
  268: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  267: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  266: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  265: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  264: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  263: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  262: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  261: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  260: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  259: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  258: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  257: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  256: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  255: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  254: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  253: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  252: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  251: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  250: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  249: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  248: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  247: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  246: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  245: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  244: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  243: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  242: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  241: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  240: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  239: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  238: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  237: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  236: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  235: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  234: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  233: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  232: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  231: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  230: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  229: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  228: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  227: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  226: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  225: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  224: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  223: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  222: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  221: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  220: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  219: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  218: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  217: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  216: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  215: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  214: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  213: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  212: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  211: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  210: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  209: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  208: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  207: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  206: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  205: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  204: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  203: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  202: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  201: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  200: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  199: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  198: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  195: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  194: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  193: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  192: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  191: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  190: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  189: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  188: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  187: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  186: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  185: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  184: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  183: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  182: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  181: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  180: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  179: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  178: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  177: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  176: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  175: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  174: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  173: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  172: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  171: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  170: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  169: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  168: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  167: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  166: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  163: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  162: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  161: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  159: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  158: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  157: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  156: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  155: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  154: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  153: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  152: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  151: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  150: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  149: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  148: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  147: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  146: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  143: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  142: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  141: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  139: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  138: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  137: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  136: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  135: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  134: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  133: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  132: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  131: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  130: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  129: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  128: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  127: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  126: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  125: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  124: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  123: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  122: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  121: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  120: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  119: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  118: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  117: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  114: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  113: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  112: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  111: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  110: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  109: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  108: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  105: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  104: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  103: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  102: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  99: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  98: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  97: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  95: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  94: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  93: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  92: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  91: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  90: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  89: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  88: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  87: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  86: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  85: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  84: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  83: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  82: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  81: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  80: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  79: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  78: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  77: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  76: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  75: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  74: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  73: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  72: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  71: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  70: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  69: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  68: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  67: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  64: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  61: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  60: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  59: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  58: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  57: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  56: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  55: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  54: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  53: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  52: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  51: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  50: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  49: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  48: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  47: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  46: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  45: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  43: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  42: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  41: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  40: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  39: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  38: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  37: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  36: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  34: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  32: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  31: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  30: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  29: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  28: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  27: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  26: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  25: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  24: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  23: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  22: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  21: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  20: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  19: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  18: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  17: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  16: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  15: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  10: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  9: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  7: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  6: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  5: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  4: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  3: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS2_EE10InitVTableEvENUlRKNS_7ru
  2: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  1: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  0: tvm::tir::APIType(tvm::runtime::DataType)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(32) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(8)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(32) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(16) + ci_1 * T.int64(8) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(32) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 8, 2, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[8, 1, 2, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 2, 8])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 128, 2], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #94: GFLOPs: 283.5220. Time: 13.2911 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #95: GFLOPs: 326.0529. Time: 11.5574 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #96: GFLOPs: 270.4613. Time: 13.9329 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #97: GFLOPs: 379.4549. Time: 9.9309 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #98: GFLOPs: 313.9303. Time: 12.0037 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #99: GFLOPs: 320.2384. Time: 11.7672 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #100: GFLOPs: 270.7608. Time: 13.9175 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #101: GFLOPs: 449.7199. Time: 8.3793 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #102: GFLOPs: 334.9042. Time: 11.2519 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #103: GFLOPs: 322.6931. Time: 11.6777 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #104: GFLOPs: 305.0519. Time: 12.3530 us. Best GFLOPs: 505.4783
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #105: GFLOPs: 509.5613. Time: 7.3952 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #106: GFLOPs: 326.4294. Time: 11.5441 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #107: GFLOPs: 333.8490. Time: 11.2875 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #108: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  278: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  277: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  276: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  275: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  274: tvm::transform::Pass::operator()(tvm::IRModule) const
  273: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  272: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  271: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  270: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  269: _ZN3tvm7runtime13PackedFuncObj
  268: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  267: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  266: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  265: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  264: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  263: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  262: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  261: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  260: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  259: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  258: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  257: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  256: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  255: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  254: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  253: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  252: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  251: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  250: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  249: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  248: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  247: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  246: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  245: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  244: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  243: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  242: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  241: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  240: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  239: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  238: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  237: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  236: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  235: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  234: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  233: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  232: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  231: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  230: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  229: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  228: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  227: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  226: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  225: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  224: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  223: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  222: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  221: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  220: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  219: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  218: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  217: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  216: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  215: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  214: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  213: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  212: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  211: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  210: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  209: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  208: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  207: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  206: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  205: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  204: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  203: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  202: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  201: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  200: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  199: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  198: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  195: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  194: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  193: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  192: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  191: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  190: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  189: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  188: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  187: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  186: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  185: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  184: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  183: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  182: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  181: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  180: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  179: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  178: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  177: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  176: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  175: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  174: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  173: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  172: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  171: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  170: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  169: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  168: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  167: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  166: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  163: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  162: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  161: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  159: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  158: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  157: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  156: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  155: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  154: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  153: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  152: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  151: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  150: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  149: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  148: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  147: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  146: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  143: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  142: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  141: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  139: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  138: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  137: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  136: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  135: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  134: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  133: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  132: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  131: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  130: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  129: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  128: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  127: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  126: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  125: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  124: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  123: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  122: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  121: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  120: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  119: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  118: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  117: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  114: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  113: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  112: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  111: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  110: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  109: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  108: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  105: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  104: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  103: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  102: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  99: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  98: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  97: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  95: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  94: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  93: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  92: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  91: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  90: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  89: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  88: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  87: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  86: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  85: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  84: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  83: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  82: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  81: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  80: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  79: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  78: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  77: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  76: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  75: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  74: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  73: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  72: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  71: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  70: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  69: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  68: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  67: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  64: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  61: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  60: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  59: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  58: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  57: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  56: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  55: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  54: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  53: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  52: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  51: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  50: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  49: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  48: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  47: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  46: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  45: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  43: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  42: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  41: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  40: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  39: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  38: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  37: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  36: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  34: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  32: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  31: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  30: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  29: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  28: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  27: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  26: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  25: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  24: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  23: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  22: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  21: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  20: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  19: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  18: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  17: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  16: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  15: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  10: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  9: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  7: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  6: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  5: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  4: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  3: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS2_EE10InitVTableEvENUlRKNS_7ru
  2: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  1: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  0: tvm::tir::APIType(tvm::runtime::DataType)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(8) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(32) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(8)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(32) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(16) + ci_1 * T.int64(8) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(32) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(16) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 8, 2, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[8, 1, 2, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 2, 8])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #109: GFLOPs: 308.3870. Time: 12.2194 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #110: GFLOPs: 280.6467. Time: 13.4273 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #111: GFLOPs: 435.5012. Time: 8.6528 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #112: GFLOPs: 301.7860. Time: 12.4867 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #113: GFLOPs: 215.7712. Time: 17.4644 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #114: GFLOPs: 326.2761. Time: 11.5495 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #115: GFLOPs: 335.0566. Time: 11.2468 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #116: GFLOPs: 262.3320. Time: 14.3647 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #117: GFLOPs: 262.3255. Time: 14.3651 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #118: GFLOPs: 501.7441. Time: 7.5104 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #119: GFLOPs: 262.3317. Time: 14.3647 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #120: GFLOPs: 253.0163. Time: 14.8936 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #121: GFLOPs: 319.9451. Time: 11.7780 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #122: GFLOPs: 359.9578. Time: 10.4688 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #123: GFLOPs: 300.6207. Time: 12.5351 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #124: GFLOPs: 322.6457. Time: 11.6794 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #125: GFLOPs: 326.3074. Time: 11.5484 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #126: GFLOPs: 110.8110. Time: 34.0067 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #127: GFLOPs: 275.5884. Time: 13.6737 us. Best GFLOPs: 509.5613
2024-03-21 12:27:24 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #128: GFLOPs: 93.4147. Time: 40.3397 us. Best GFLOPs: 509.5613
2024-03-21 12:33:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:33:26 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 12:33:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 383 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:33:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 766 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:33:29 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-03-21 12:33:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:33:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 64 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:33:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 58 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:34:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:34:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3399  1.3399  1.3313  1.3271  1.3189  1.3076  1.2345  1.2262  1.2190  1.2117  1.2068  1.1924  1.1914  1.1812  1.1708  1.1536
[17 : 32]:	1.1376  1.1348  1.1348  1.1283  1.1267  1.1244  1.0919  1.0870  1.0782  1.0754  1.0750  1.0702  1.0665  1.0665  1.0575  1.0574
[33 : 48]:	1.0561  1.0561  1.0521  1.0503  1.0414  1.0404  1.0365  1.0347  1.0345  1.0309  1.0302  1.0301  1.0295  1.0292  1.0274  1.0271
[49 : 64]:	1.0225  1.0201  1.0189  1.0180  1.0156  1.0136  1.0132  1.0115  1.0077  1.0075  1.0070  1.0047  1.0043  1.0038  1.0018  1.0011
2024-03-21 12:34:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:34:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #129: GFLOPs: 294.1579. Time: 12.8105 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #130: GFLOPs: 289.4506. Time: 13.0189 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #131: GFLOPs: 244.2830. Time: 15.4260 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #132: GFLOPs: 248.1627. Time: 15.1849 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #133: GFLOPs: 346.1405. Time: 10.8867 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #134: GFLOPs: 354.9001. Time: 10.6180 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #135: GFLOPs: 39.9918. Time: 94.2272 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #136: GFLOPs: 319.3466. Time: 11.8001 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #137: GFLOPs: 315.3366. Time: 11.9502 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #138: GFLOPs: 369.5879. Time: 10.1960 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #139: GFLOPs: 319.4913. Time: 11.7947 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #140: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  278: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  277: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  276: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  275: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  274: tvm::transform::Pass::operator()(tvm::IRModule) const
  273: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  272: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  271: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  270: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  269: _ZN3tvm7runtime13PackedFuncObj
  268: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  267: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  266: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  265: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  264: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  263: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  262: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  261: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  260: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  259: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  258: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  257: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  256: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  255: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  254: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  253: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  252: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  251: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  250: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  249: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  248: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  247: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  246: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  245: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  244: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  243: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  242: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  241: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  240: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  239: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  238: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  237: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  236: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  235: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  234: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  233: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  232: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  231: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  230: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  229: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  228: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  227: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  226: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  225: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  224: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  223: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  222: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  221: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  220: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  219: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  218: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  217: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  216: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  215: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  214: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  213: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  212: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  211: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  210: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  209: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  208: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  207: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  206: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  205: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  204: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  203: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  202: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  201: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  200: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  199: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  198: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  195: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  194: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  193: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  192: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  191: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  190: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  189: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  188: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  187: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  186: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  185: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  184: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  183: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  182: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  181: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  180: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  179: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  178: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  177: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  176: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  175: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  174: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  173: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  172: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  171: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  170: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  169: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  168: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  167: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  166: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  163: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  162: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  161: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  159: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  158: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  157: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  156: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  155: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  154: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  153: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  152: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  151: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  150: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  149: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  148: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  147: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  146: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  143: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  142: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  141: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  139: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  138: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  137: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  136: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  135: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  134: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  133: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  132: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  131: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  130: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  129: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  128: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  127: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  126: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  125: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  124: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  123: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  122: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  121: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  120: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  119: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  118: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  117: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  114: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  113: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  112: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  111: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  110: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  109: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  108: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  105: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  104: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  103: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  102: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  99: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  98: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  97: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  95: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  94: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  93: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  92: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  91: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  90: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  89: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  88: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  87: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  86: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  85: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  84: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  83: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  82: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  81: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  80: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  79: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  78: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  77: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  76: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  75: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  74: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  73: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  72: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  71: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  70: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  69: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  68: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  67: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  64: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  61: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  60: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  59: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  58: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  57: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  56: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  55: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  54: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  53: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  52: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  51: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  50: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  49: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  48: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  47: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  46: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  45: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  43: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  42: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  41: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  40: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  39: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  38: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  37: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  36: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  34: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  32: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  31: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  30: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  29: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  28: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  27: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  26: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  25: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  24: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  23: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  22: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  21: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  20: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  19: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  18: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  17: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  16: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  15: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  10: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  9: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  7: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  6: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  5: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  4: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  3: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS2_EE10InitVTableEvENUlRKNS_7ru
  2: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  1: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  0: tvm::tir::APIType(tvm::runtime::DataType)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(64) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(64) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(8))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(8) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 8, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[8, 1, 2, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[16, 8, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b106)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #141: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  278: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  277: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  276: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  275: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  274: tvm::transform::Pass::operator()(tvm::IRModule) const
  273: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  272: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  271: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  270: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  269: _ZN3tvm7runtime13PackedFuncObj
  268: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  267: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  266: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  265: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  264: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  263: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  262: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  261: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  260: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  259: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  258: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  257: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  256: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  255: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  254: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  253: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  252: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  251: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  250: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  249: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  248: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  247: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  246: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  245: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  244: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  243: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  242: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  241: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  240: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  239: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  238: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  237: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  236: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  235: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  234: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  233: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  232: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  231: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  230: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  229: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  228: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  227: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  226: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  225: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  224: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  223: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  222: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  221: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  220: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  219: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  218: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  217: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  216: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  215: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  214: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  213: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  212: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  211: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  210: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  209: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  208: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  207: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  206: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  205: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  204: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  203: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  202: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  201: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  200: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  199: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  198: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  195: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  194: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  193: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  192: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  191: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  190: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  189: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  188: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  187: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  186: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  185: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  184: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  183: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  182: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  181: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  180: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  179: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  178: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  177: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  176: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  175: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  174: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  173: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  172: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  171: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  170: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  169: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  168: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  167: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  166: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  163: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  162: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  161: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  159: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  158: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  157: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  156: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  155: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  154: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  153: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  152: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  151: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  150: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  149: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  148: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  147: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  146: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  143: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  142: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  141: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  139: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  138: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  137: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  136: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  135: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  134: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  133: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  132: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  131: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  130: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  129: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  128: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  127: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  126: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  125: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  124: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  123: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  122: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  121: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  120: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  119: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  118: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  117: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  114: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  113: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  112: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  111: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  110: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  109: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  108: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  105: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  104: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  103: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  102: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  99: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  98: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  97: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  95: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  94: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  93: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  92: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  91: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  90: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  89: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  88: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  87: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  86: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  85: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  84: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  83: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  82: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  81: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  80: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  79: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  78: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  77: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  76: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  75: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  74: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  73: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  72: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  71: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  70: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  69: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  68: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  67: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  64: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  61: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  60: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  59: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  58: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  57: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  56: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  55: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  54: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  53: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  52: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  51: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  50: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  49: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  48: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  47: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  46: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  45: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  43: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  42: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  41: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  40: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  39: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  38: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  37: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  36: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  34: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  33: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  32: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  31: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  30: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  29: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  28: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  27: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  26: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  25: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  24: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  23: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  22: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  21: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  20: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  19: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  18: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  17: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  16: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  15: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AllocateNode const*)
  12: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  11: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  10: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  9: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  7: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  6: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  5: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  4: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  3: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS2_EE10InitVTableEvENUlRKNS_7ru
  2: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  1: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  0: tvm::tir::APIType(tvm::runtime::DataType)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(64) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(64) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(32))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32) // T.int64(16))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(8))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(8) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(8) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 8, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[8, 1, 2, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[16, 8, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b106)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #142: GFLOPs: 155.7261. Time: 24.1984 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #143: GFLOPs: 359.2435. Time: 10.4896 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #144: GFLOPs: 354.9996. Time: 10.6150 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #145: GFLOPs: 254.6137. Time: 14.8001 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #146: GFLOPs: 233.8125. Time: 16.1168 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #147: GFLOPs: 229.9732. Time: 16.3859 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #148: GFLOPs: 191.4565. Time: 19.6824 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #149: GFLOPs: 413.1156. Time: 9.1217 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #150: GFLOPs: 224.4151. Time: 16.7917 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #151: GFLOPs: 197.7641. Time: 19.0546 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #152: GFLOPs: 219.1852. Time: 17.1924 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #153: GFLOPs: 359.1438. Time: 10.4925 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #154: GFLOPs: 273.1466. Time: 13.7960 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #155: GFLOPs: 492.1549. Time: 7.6568 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #156: GFLOPs: 484.2889. Time: 7.7811 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #157: GFLOPs: 229.9764. Time: 16.3857 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #158: GFLOPs: 226.2747. Time: 16.6537 us. Best GFLOPs: 509.5613
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #159: GFLOPs: 570.6177. Time: 6.6039 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #160: GFLOPs: 503.1415. Time: 7.4896 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #161: GFLOPs: 224.4450. Time: 16.7895 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #162: GFLOPs: 226.2569. Time: 16.6550 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #163: GFLOPs: 224.4447. Time: 16.7895 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #164: GFLOPs: 260.1862. Time: 14.4832 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #165: GFLOPs: 29.5593. Time: 127.4835 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #166: GFLOPs: 174.2691. Time: 21.6236 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #167: GFLOPs: 421.0537. Time: 8.9497 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #168: GFLOPs: 260.2130. Time: 14.4817 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #169: GFLOPs: 29.9225. Time: 125.9359 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #170: GFLOPs: 469.6826. Time: 8.0231 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #171: GFLOPs: 477.5377. Time: 7.8911 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #172: GFLOPs: 126.5982. Time: 29.7660 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #173: GFLOPs: 131.8598. Time: 28.5782 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #174: GFLOPs: 389.3056. Time: 9.6796 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #175: GFLOPs: 127.1671. Time: 29.6328 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #176: GFLOPs: 475.7584. Time: 7.9207 us. Best GFLOPs: 570.6177
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #177: GFLOPs: 576.2812. Time: 6.5390 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #178: GFLOPs: 173.8109. Time: 21.6806 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #179: GFLOPs: 509.6038. Time: 7.3946 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #180: GFLOPs: 101.6863. Time: 37.0583 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #181: GFLOPs: 114.5364. Time: 32.9006 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #182: GFLOPs: 305.1206. Time: 12.3503 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #183: GFLOPs: 162.4542. Time: 23.1962 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #184: GFLOPs: 256.9443. Time: 14.6659 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #185: GFLOPs: 518.8849. Time: 7.2623 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #186: GFLOPs: 504.7577. Time: 7.4656 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #187: GFLOPs: 500.9440. Time: 7.5224 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #188: GFLOPs: 460.4376. Time: 8.1842 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #189: GFLOPs: 460.4279. Time: 8.1844 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #190: GFLOPs: 203.5014. Time: 18.5174 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #191: GFLOPs: 167.6173. Time: 22.4817 us. Best GFLOPs: 576.2812
2024-03-21 12:34:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #192: GFLOPs: 339.6479. Time: 11.0948 us. Best GFLOPs: 576.2812
2024-03-21 12:44:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:44:25 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 12:44:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 384 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:44:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 770 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:44:28 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-03-21 12:44:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:44:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:44:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:44:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:45:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1735  1.1473  1.1342  1.1217  1.0876  1.0600  1.0285  1.0220  1.0207  1.0101  1.0046  0.9903  0.9881  0.9881  0.9865  0.9864
[17 : 32]:	0.9833  0.9768  0.9738  0.9701  0.9665  0.9617  0.9568  0.9552  0.9498  0.9490  0.9474  0.9392  0.9348  0.9329  0.9326  0.9326
[33 : 48]:	0.9325  0.9317  0.9317  0.9301  0.9292  0.9290  0.9266  0.9257  0.9248  0.9240  0.9240  0.9240  0.9236  0.9232  0.9223  0.9138
[49 : 64]:	0.9137  0.9135  0.9125  0.9094  0.9057  0.9032  0.9021  0.9019  0.9004  0.8995  0.8952  0.8944  0.8927  0.8903  0.8901  0.8888
2024-03-21 12:45:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:45:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #193: GFLOPs: 274.0799. Time: 13.7490 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #194: GFLOPs: 276.9574. Time: 13.6061 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #195: GFLOPs: 282.6393. Time: 13.3326 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #196: GFLOPs: 269.0864. Time: 14.0041 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #197: GFLOPs: 182.3359. Time: 20.6669 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #198: GFLOPs: 307.2215. Time: 12.2658 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #199: GFLOPs: 399.0858. Time: 9.4424 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #200: GFLOPs: 226.1014. Time: 16.6665 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #201: GFLOPs: 464.0443. Time: 8.1206 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #202: GFLOPs: 575.9292. Time: 6.5430 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #203: GFLOPs: 377.2824. Time: 9.9881 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #204: GFLOPs: 479.6607. Time: 7.8562 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #205: GFLOPs: 574.3038. Time: 6.5615 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #206: GFLOPs: 573.8376. Time: 6.5669 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #207: GFLOPs: 576.0955. Time: 6.5411 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #208: GFLOPs: 268.9464. Time: 14.0114 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #209: GFLOPs: 202.1502. Time: 18.6412 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #210: GFLOPs: 387.1897. Time: 9.7325 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #211: GFLOPs: 538.3645. Time: 6.9996 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #212: GFLOPs: 574.9282. Time: 6.5544 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #213: GFLOPs: 528.4137. Time: 7.1314 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #214: GFLOPs: 327.6884. Time: 11.4997 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #215: GFLOPs: 576.1760. Time: 6.5402 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #216: GFLOPs: 574.9422. Time: 6.5543 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #217: GFLOPs: 215.9469. Time: 17.4502 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #218: GFLOPs: 558.9209. Time: 6.7421 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #219: GFLOPs: 574.7393. Time: 6.5566 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #220: GFLOPs: 536.0306. Time: 7.0300 us. Best GFLOPs: 576.2812
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #221: GFLOPs: 576.9196. Time: 6.5318 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #222: GFLOPs: 205.0987. Time: 18.3732 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #223: GFLOPs: 538.8491. Time: 6.9933 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #224: GFLOPs: 538.7924. Time: 6.9940 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #225: GFLOPs: 528.4214. Time: 7.1313 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #226: GFLOPs: 459.9902. Time: 8.1922 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #227: GFLOPs: 467.2236. Time: 8.0653 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #228: GFLOPs: 558.9255. Time: 6.7421 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #229: GFLOPs: 498.2733. Time: 7.5628 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #230: GFLOPs: 297.0632. Time: 12.6852 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #231: GFLOPs: 385.4029. Time: 9.7776 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #232: GFLOPs: 99.6525. Time: 37.8146 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #233: GFLOPs: 538.1658. Time: 7.0022 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #234: GFLOPs: 548.9900. Time: 6.8641 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #235: GFLOPs: 548.9789. Time: 6.8642 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #236: GFLOPs: 528.3263. Time: 7.1326 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #237: GFLOPs: 432.0177. Time: 8.7226 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #238: GFLOPs: 501.7302. Time: 7.5106 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #239: GFLOPs: 347.6076. Time: 10.8407 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #240: GFLOPs: 549.0447. Time: 6.8634 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #241: GFLOPs: 475.3301. Time: 7.9278 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #242: GFLOPs: 548.8943. Time: 6.8653 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #243: GFLOPs: 514.0186. Time: 7.3311 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #244: GFLOPs: 508.8001. Time: 7.4063 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #245: GFLOPs: 500.8665. Time: 7.5236 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #246: GFLOPs: 549.2951. Time: 6.8603 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #247: GFLOPs: 227.8734. Time: 16.5369 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #248: GFLOPs: 210.4390. Time: 17.9069 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #249: GFLOPs: 528.5028. Time: 7.1302 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #250: GFLOPs: 395.0558. Time: 9.5387 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #251: GFLOPs: 554.5499. Time: 6.7953 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #252: GFLOPs: 500.0555. Time: 7.5358 us. Best GFLOPs: 576.9196
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #253: GFLOPs: 577.3016. Time: 6.5275 us. Best GFLOPs: 577.3016
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #254: GFLOPs: 342.2651. Time: 11.0099 us. Best GFLOPs: 577.3016
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #255: GFLOPs: 236.4307. Time: 15.9384 us. Best GFLOPs: 577.3016
2024-03-21 12:45:51 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #256: GFLOPs: 24.0874. Time: 156.4436 us. Best GFLOPs: 577.3016
2024-03-21 12:48:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:48:27 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 12:48:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 382 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:48:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 767 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:48:30 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 12:48:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:48:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:48:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 66 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:49:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 12:49:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1777  1.1411  1.1241  1.1041  1.1038  1.0814  1.0650  1.0610  1.0555  1.0538  1.0506  1.0491  1.0474  1.0472  1.0467  1.0454
[17 : 32]:	1.0451  1.0445  1.0427  1.0412  1.0395  1.0360  1.0286  1.0280  1.0232  1.0214  1.0200  1.0198  1.0196  1.0193  1.0191  1.0191
[33 : 48]:	1.0189  1.0175  1.0172  1.0169  1.0156  1.0152  1.0152  1.0139  1.0131  1.0129  1.0123  1.0120  1.0120  1.0116  1.0110  1.0097
[49 : 64]:	1.0073  1.0072  1.0072  1.0057  1.0051  1.0044  1.0037  1.0035  1.0031  1.0028  1.0016  1.0016  0.9995  0.9990  0.9982  0.9980
2024-03-21 12:49:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:49:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #257: GFLOPs: 576.2611. Time: 6.5393 us. Best GFLOPs: 577.3016
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #258: GFLOPs: 584.4219. Time: 6.4479 us. Best GFLOPs: 584.4219
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #259: GFLOPs: 515.6740. Time: 7.3076 us. Best GFLOPs: 584.4219
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #260: GFLOPs: 583.7097. Time: 6.4558 us. Best GFLOPs: 584.4219
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #261: GFLOPs: 566.3277. Time: 6.6540 us. Best GFLOPs: 584.4219
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #262: GFLOPs: 511.3822. Time: 7.3689 us. Best GFLOPs: 584.4219
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #263: GFLOPs: 479.8941. Time: 7.8524 us. Best GFLOPs: 584.4219
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #264: GFLOPs: 584.9117. Time: 6.4425 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #265: GFLOPs: 524.0759. Time: 7.1904 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #266: GFLOPs: 479.8945. Time: 7.8524 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #267: GFLOPs: 504.1736. Time: 7.4743 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #268: GFLOPs: 581.6813. Time: 6.4783 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #269: GFLOPs: 582.4228. Time: 6.4701 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #270: GFLOPs: 579.6530. Time: 6.5010 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #271: GFLOPs: 583.5974. Time: 6.4571 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #272: GFLOPs: 584.2767. Time: 6.4495 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #273: GFLOPs: 581.8650. Time: 6.4763 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #274: GFLOPs: 583.8953. Time: 6.4538 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #275: GFLOPs: 520.0297. Time: 7.2464 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #276: GFLOPs: 583.8216. Time: 6.4546 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #277: GFLOPs: 506.2268. Time: 7.4439 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #278: GFLOPs: 548.7157. Time: 6.8675 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #279: GFLOPs: 584.3852. Time: 6.4483 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #280: GFLOPs: 505.5030. Time: 7.4546 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #281: GFLOPs: 573.8797. Time: 6.5664 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #282: GFLOPs: 584.4234. Time: 6.4479 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #283: GFLOPs: 548.0827. Time: 6.8755 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #284: GFLOPs: 578.4069. Time: 6.5150 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #285: GFLOPs: 581.9135. Time: 6.4757 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #286: GFLOPs: 573.0416. Time: 6.5760 us. Best GFLOPs: 584.9117
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #287: GFLOPs: 585.1631. Time: 6.4398 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #288: GFLOPs: 571.4019. Time: 6.5949 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #289: GFLOPs: 584.7830. Time: 6.4440 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #290: GFLOPs: 579.2501. Time: 6.5055 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #291: GFLOPs: 571.2854. Time: 6.5962 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #292: GFLOPs: 583.5730. Time: 6.4573 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #293: GFLOPs: 582.7070. Time: 6.4669 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #294: GFLOPs: 320.1420. Time: 11.7708 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #295: GFLOPs: 546.6097. Time: 6.8940 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #296: GFLOPs: 499.5528. Time: 7.5434 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #297: GFLOPs: 581.8537. Time: 6.4764 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #298: GFLOPs: 577.5462. Time: 6.5247 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #299: GFLOPs: 584.3941. Time: 6.4483 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #300: GFLOPs: 581.7049. Time: 6.4781 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #301: GFLOPs: 583.8363. Time: 6.4544 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #302: GFLOPs: 578.1820. Time: 6.5175 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #303: GFLOPs: 583.9739. Time: 6.4529 us. Best GFLOPs: 585.1631
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #304: GFLOPs: 585.3444. Time: 6.4378 us. Best GFLOPs: 585.3444
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #305: GFLOPs: 570.7603. Time: 6.6023 us. Best GFLOPs: 585.3444
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #306: GFLOPs: 500.8390. Time: 7.5240 us. Best GFLOPs: 585.3444
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #307: GFLOPs: 500.7898. Time: 7.5248 us. Best GFLOPs: 585.3444
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #308: GFLOPs: 508.8776. Time: 7.4052 us. Best GFLOPs: 585.3444
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #309: GFLOPs: 584.2028. Time: 6.4504 us. Best GFLOPs: 585.3444
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #310: GFLOPs: 568.7580. Time: 6.6255 us. Best GFLOPs: 585.3444
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #311: GFLOPs: 586.2598. Time: 6.4277 us. Best GFLOPs: 586.2598
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #312: GFLOPs: 584.6593. Time: 6.4453 us. Best GFLOPs: 586.2598
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #313: GFLOPs: 584.1743. Time: 6.4507 us. Best GFLOPs: 586.2598
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #314: GFLOPs: 584.1593. Time: 6.4508 us. Best GFLOPs: 586.2598
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #315: GFLOPs: 558.5430. Time: 6.7467 us. Best GFLOPs: 586.2598
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #316: GFLOPs: 584.0088. Time: 6.4525 us. Best GFLOPs: 586.2598
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #317: GFLOPs: 528.8968. Time: 7.1249 us. Best GFLOPs: 586.2598
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #318: GFLOPs: 38.6886. Time: 97.4013 us. Best GFLOPs: 586.2598
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #319: GFLOPs: 187.5652. Time: 20.0907 us. Best GFLOPs: 586.2598
2024-03-21 12:49:53 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #320: GFLOPs: 171.6892. Time: 21.9485 us. Best GFLOPs: 586.2598
2024-03-21 13:03:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 13:03:57 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 13:03:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 388 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:04:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 784 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:04:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 1162 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:04:02 [INFO] [evolutionary_search.cc:723] Sampled 68 candidate(s)
2024-03-21 13:04:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:04:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:04:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:04:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:04:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6307  1.2751  1.2715  1.2699  1.2687  1.2675  1.2411  1.2158  1.2121  1.1785  1.1658  1.1628  1.1048  1.0688  1.0583  1.0564
[17 : 32]:	1.0538  1.0521  1.0521  1.0448  1.0414  1.0407  1.0401  1.0389  1.0384  1.0357  1.0355  1.0337  1.0335  1.0334  1.0281  1.0255
[33 : 48]:	1.0182  1.0174  1.0161  1.0157  1.0157  1.0156  1.0149  1.0149  1.0147  1.0138  1.0109  1.0093  1.0084  1.0082  1.0049  1.0046
[49 : 64]:	1.0029  1.0028  1.0028  1.0023  1.0017  1.0006  1.0001  0.9998  0.9995  0.9994  0.9986  0.9985  0.9984  0.9973  0.9973  0.9968
2024-03-21 13:04:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 13:04:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:121] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #321: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(16), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(16), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(16)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(16)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(4) + ci_p_fused_1 // T.int64(16) + ax0)
                        v_p = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps and v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps < T.int64(8) and T.int64(1) <= v_p % T.int64(4) * T.int64(2) + v_nu and v_p % T.int64(4) * T.int64(2) + v_nu < T.int64(8), p0[v_p // T.int64(16), v_ci, v_p % T.int64(16) // T.int64(4) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(4) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(16))
                            v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(16))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(16))
                                    v_p = T.axis.spatial(T.int64(16), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(16))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), ci_p_fused_0 * T.int64(4) + ci_p_fused_1 // T.int64(16) + ax2)
                        v3 = T.axis.spatial(T.int64(16), ci_p_fused_1 % T.int64(16) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(64) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) // T.int64(32) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(8) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(16), eps_2_nu_2_co_2_p_2_fused % T.int64(8) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(8)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(16), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(4))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(512))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(64) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) // T.int64(32) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(8) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(16), eps_2_nu_2_co_2_p_2_fused % T.int64(8) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(16) + ci_1 * T.int64(16) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(64) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(8) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(64) // T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(8) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(32) // T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(16), eps_2_nu_2_co_2_p_2_fused % T.int64(8) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16) + ax0)
                                        v_p = T.axis.spatial(T.int64(16), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(16))
                        v_h = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(7), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(16) // T.int64(4) * T.int64(2) + h_1 < T.int64(7) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(4) * T.int64(2) + w_1 < T.int64(7))
                        T.reads(inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(16) + v_h // T.int64(2) * T.int64(4) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[8, 1, 4, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 8, 1, 2])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 1, 16])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 256, 4], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 256, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #322: GFLOPs: 442.6539. Time: 8.5130 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #323: GFLOPs: 391.0894. Time: 9.6354 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #324: GFLOPs: 452.7325. Time: 8.3235 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #325: GFLOPs: 445.6135. Time: 8.4565 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #326: GFLOPs: 428.9495. Time: 8.7850 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #327: GFLOPs: 452.4372. Time: 8.3289 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #328: GFLOPs: 517.0318. Time: 7.2884 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #329: GFLOPs: 402.2486. Time: 9.3681 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #330: GFLOPs: 479.6935. Time: 7.8557 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #331: GFLOPs: 186.9710. Time: 20.1546 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #332: GFLOPs: 120.7858. Time: 31.1984 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #333: GFLOPs: 448.5703. Time: 8.4007 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #334: GFLOPs: 449.3242. Time: 8.3866 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #335: GFLOPs: 398.5901. Time: 9.4541 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #336: GFLOPs: 584.7497. Time: 6.4443 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #337: GFLOPs: 576.2134. Time: 6.5398 us. Best GFLOPs: 586.2598
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #338: GFLOPs: 587.1830. Time: 6.4176 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #339: GFLOPs: 585.6595. Time: 6.4343 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #340: GFLOPs: 583.6470. Time: 6.4565 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #341: GFLOPs: 505.3092. Time: 7.4575 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #342: GFLOPs: 477.9185. Time: 7.8849 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #343: GFLOPs: 585.3205. Time: 6.4380 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #344: GFLOPs: 580.8849. Time: 6.4872 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #345: GFLOPs: 585.1733. Time: 6.4397 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #346: GFLOPs: 555.0543. Time: 6.7891 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #347: GFLOPs: 513.0833. Time: 7.3445 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #348: GFLOPs: 505.4083. Time: 7.4560 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #349: GFLOPs: 582.8782. Time: 6.4650 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #350: GFLOPs: 585.9443. Time: 6.4312 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #351: GFLOPs: 456.3985. Time: 8.2566 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #352: GFLOPs: 243.7008. Time: 15.4629 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #353: GFLOPs: 566.4158. Time: 6.6529 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #354: GFLOPs: 219.0680. Time: 17.2016 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #355: GFLOPs: 584.8251. Time: 6.4435 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #356: GFLOPs: 585.1103. Time: 6.4404 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #357: GFLOPs: 585.1884. Time: 6.4395 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #358: GFLOPs: 586.9424. Time: 6.4203 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #359: GFLOPs: 586.2746. Time: 6.4276 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #360: GFLOPs: 586.5818. Time: 6.4242 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #361: GFLOPs: 586.6640. Time: 6.4233 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #362: GFLOPs: 571.1710. Time: 6.5975 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #363: GFLOPs: 561.2686. Time: 6.7139 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #364: GFLOPs: 586.6541. Time: 6.4234 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #365: GFLOPs: 586.6837. Time: 6.4231 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #366: GFLOPs: 586.5506. Time: 6.4245 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #367: GFLOPs: 586.4273. Time: 6.4259 us. Best GFLOPs: 587.1830
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #368: GFLOPs: 587.2218. Time: 6.4172 us. Best GFLOPs: 587.2218
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #369: GFLOPs: 586.6206. Time: 6.4238 us. Best GFLOPs: 587.2218
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #370: GFLOPs: 471.6943. Time: 7.9889 us. Best GFLOPs: 587.2218
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #371: GFLOPs: 587.4970. Time: 6.4142 us. Best GFLOPs: 587.4970
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #372: GFLOPs: 560.6138. Time: 6.7218 us. Best GFLOPs: 587.4970
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #373: GFLOPs: 575.2236. Time: 6.5511 us. Best GFLOPs: 587.4970
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #374: GFLOPs: 588.3656. Time: 6.4047 us. Best GFLOPs: 588.3656
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #375: GFLOPs: 560.8375. Time: 6.7191 us. Best GFLOPs: 588.3656
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #376: GFLOPs: 583.9051. Time: 6.4537 us. Best GFLOPs: 588.3656
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #377: GFLOPs: 585.1389. Time: 6.4400 us. Best GFLOPs: 588.3656
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #378: GFLOPs: 571.8353. Time: 6.5899 us. Best GFLOPs: 588.3656
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #379: GFLOPs: 582.9003. Time: 6.4648 us. Best GFLOPs: 588.3656
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #380: GFLOPs: 584.1011. Time: 6.4515 us. Best GFLOPs: 588.3656
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #381: GFLOPs: 543.5689. Time: 6.9326 us. Best GFLOPs: 588.3656
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #382: GFLOPs: 149.5536. Time: 25.1971 us. Best GFLOPs: 588.3656
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #383: GFLOPs: 421.2996. Time: 8.9445 us. Best GFLOPs: 588.3656
2024-03-21 13:05:25 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #384: GFLOPs: 110.3952. Time: 34.1348 us. Best GFLOPs: 588.3656
2024-03-21 13:22:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 13:22:30 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 13:22:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 378 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:22:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 762 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:22:33 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 13:22:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:22:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:22:56 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:23:04 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:23:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.9793  1.9226  1.8682  1.6925  1.2153  1.2059  1.1834  1.1507  1.1427  1.1427  1.1382  1.1326  1.1253  1.1074  1.1064  1.0789
[17 : 32]:	1.0758  1.0715  1.0691  1.0674  1.0667  1.0635  1.0631  1.0613  1.0606  1.0492  1.0476  1.0394  1.0393  1.0376  1.0361  1.0351
[33 : 48]:	1.0348  1.0341  1.0313  1.0306  1.0299  1.0272  1.0272  1.0271  1.0268  1.0260  1.0258  1.0228  1.0212  1.0212  1.0199  1.0199
[49 : 64]:	1.0199  1.0199  1.0197  1.0187  1.0184  1.0176  1.0176  1.0176  1.0172  1.0169  1.0156  1.0153  1.0153  1.0150  1.0146  1.0146
2024-03-21 13:23:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 13:23:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #385: GFLOPs: 266.3964. Time: 14.1455 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #386: GFLOPs: 279.8643. Time: 13.4648 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #387: GFLOPs: 283.8213. Time: 13.2771 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #388: GFLOPs: 253.8973. Time: 14.8419 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #389: GFLOPs: 577.1798. Time: 6.5288 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #390: GFLOPs: 281.4804. Time: 13.3875 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #391: GFLOPs: 323.3189. Time: 11.6551 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #392: GFLOPs: 546.3733. Time: 6.8970 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #393: GFLOPs: 579.3000. Time: 6.5050 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #394: GFLOPs: 581.1962. Time: 6.4837 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #395: GFLOPs: 578.5627. Time: 6.5132 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #396: GFLOPs: 377.4401. Time: 9.9839 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #397: GFLOPs: 538.1282. Time: 7.0026 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #398: GFLOPs: 251.7172. Time: 14.9705 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #399: GFLOPs: 243.1253. Time: 15.4995 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #400: GFLOPs: 580.7505. Time: 6.4887 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #401: GFLOPs: 296.7445. Time: 12.6989 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #402: GFLOPs: 431.9972. Time: 8.7230 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #403: GFLOPs: 559.7576. Time: 6.7321 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #404: GFLOPs: 579.5454. Time: 6.5022 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #405: GFLOPs: 581.2930. Time: 6.4827 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #406: GFLOPs: 303.1115. Time: 12.4321 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #407: GFLOPs: 540.7997. Time: 6.9681 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #408: GFLOPs: 578.8454. Time: 6.5101 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #409: GFLOPs: 576.1972. Time: 6.5400 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #410: GFLOPs: 578.2418. Time: 6.5169 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #411: GFLOPs: 568.5262. Time: 6.6282 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #412: GFLOPs: 577.9900. Time: 6.5197 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #413: GFLOPs: 335.6411. Time: 11.2272 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #414: GFLOPs: 542.2456. Time: 6.9495 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #415: GFLOPs: 578.2343. Time: 6.5169 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #416: GFLOPs: 577.6532. Time: 6.5235 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #417: GFLOPs: 578.8354. Time: 6.5102 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #418: GFLOPs: 577.0591. Time: 6.5302 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #419: GFLOPs: 577.2346. Time: 6.5282 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #420: GFLOPs: 579.6110. Time: 6.5015 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #421: GFLOPs: 583.3748. Time: 6.4595 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #422: GFLOPs: 292.6090. Time: 12.8783 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #423: GFLOPs: 569.8619. Time: 6.6127 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #424: GFLOPs: 575.7318. Time: 6.5453 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #425: GFLOPs: 579.9038. Time: 6.4982 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #426: GFLOPs: 574.8860. Time: 6.5549 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #427: GFLOPs: 578.5563. Time: 6.5133 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #428: GFLOPs: 578.7955. Time: 6.5106 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #429: GFLOPs: 551.6754. Time: 6.8307 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #430: GFLOPs: 578.5507. Time: 6.5134 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #431: GFLOPs: 579.1750. Time: 6.5064 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #432: GFLOPs: 579.2692. Time: 6.5053 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #433: GFLOPs: 580.3165. Time: 6.4936 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #434: GFLOPs: 578.8627. Time: 6.5099 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #435: GFLOPs: 577.9127. Time: 6.5206 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #436: GFLOPs: 263.4491. Time: 14.3038 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #437: GFLOPs: 560.5296. Time: 6.7228 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #438: GFLOPs: 579.1899. Time: 6.5062 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #439: GFLOPs: 580.2637. Time: 6.4942 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #440: GFLOPs: 584.6242. Time: 6.4457 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #441: GFLOPs: 581.7211. Time: 6.4779 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #442: GFLOPs: 526.1018. Time: 7.1627 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #443: GFLOPs: 581.4871. Time: 6.4805 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #444: GFLOPs: 345.0716. Time: 10.9204 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #445: GFLOPs: 580.4420. Time: 6.4922 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #446: GFLOPs: 158.1967. Time: 23.8205 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #447: GFLOPs: 321.3817. Time: 11.7254 us. Best GFLOPs: 588.3656
2024-03-21 13:23:56 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #448: GFLOPs: 280.5836. Time: 13.4303 us. Best GFLOPs: 588.3656
2024-03-21 13:34:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 13:34:08 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 13:34:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 388 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:34:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 767 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:34:12 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 13:34:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:34:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:34:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:34:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6bd0288)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd77a0b08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd4428928)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd80e4438)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cced12688)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578ccee3d998)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd4d6e368)]: 0 failure(s)
2024-03-21 13:34:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.3251  1.3136  1.3036  1.2128  1.1614  1.1363  1.1337  1.0985  1.0901  1.0646  1.0607  1.0573  1.0532  1.0490  1.0489  1.0485
[17 : 32]:	1.0384  1.0369  1.0357  1.0322  1.0311  1.0284  1.0284  1.0264  1.0245  1.0236  1.0233  1.0231  1.0225  1.0213  1.0212  1.0211
[33 : 48]:	1.0207  1.0205  1.0202  1.0196  1.0192  1.0191  1.0191  1.0190  1.0187  1.0187  1.0185  1.0185  1.0177  1.0175  1.0154  1.0150
[49 : 64]:	1.0144  1.0141  1.0138  1.0135  1.0134  1.0133  1.0127  1.0127  1.0125  1.0107  1.0106  1.0100  1.0095  1.0090  1.0085  1.0084
2024-03-21 13:34:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 13:34:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #449: GFLOPs: 475.2797. Time: 7.9286 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #450: GFLOPs: 227.9463. Time: 16.5316 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #451: GFLOPs: 550.1519. Time: 6.8496 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #452: GFLOPs: 501.6195. Time: 7.5123 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #453: GFLOPs: 86.5287. Time: 43.5500 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #454: GFLOPs: 474.4220. Time: 7.9430 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #455: GFLOPs: 474.4536. Time: 7.9424 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #456: GFLOPs: 55.4820. Time: 67.9197 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #457: GFLOPs: 55.4832. Time: 67.9182 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #458: GFLOPs: 316.2846. Time: 11.9143 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #459: GFLOPs: 578.2870. Time: 6.5163 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #460: GFLOPs: 316.3140. Time: 11.9132 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #461: GFLOPs: 351.2857. Time: 10.7272 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #462: GFLOPs: 299.5884. Time: 12.5783 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #463: GFLOPs: 297.2714. Time: 12.6764 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #464: GFLOPs: 58.0261. Time: 64.9418 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #465: GFLOPs: 578.9443. Time: 6.5090 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #466: GFLOPs: 570.4722. Time: 6.6056 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #467: GFLOPs: 572.7098. Time: 6.5798 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #468: GFLOPs: 570.1320. Time: 6.6096 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #469: GFLOPs: 572.6030. Time: 6.5810 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #470: GFLOPs: 542.9694. Time: 6.9402 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #471: GFLOPs: 542.8771. Time: 6.9414 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #472: GFLOPs: 577.7460. Time: 6.5225 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #473: GFLOPs: 269.9772. Time: 13.9579 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #474: GFLOPs: 574.0955. Time: 6.5639 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #475: GFLOPs: 570.8223. Time: 6.6016 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #476: GFLOPs: 573.4922. Time: 6.5708 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #477: GFLOPs: 524.0555. Time: 7.1907 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #478: GFLOPs: 580.3003. Time: 6.4937 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #479: GFLOPs: 574.4642. Time: 6.5597 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #480: GFLOPs: 580.4227. Time: 6.4924 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #481: GFLOPs: 581.7709. Time: 6.4773 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #482: GFLOPs: 574.7812. Time: 6.5561 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #483: GFLOPs: 575.8532. Time: 6.5439 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #484: GFLOPs: 575.4875. Time: 6.5480 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #485: GFLOPs: 324.3057. Time: 11.6197 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #486: GFLOPs: 577.8933. Time: 6.5208 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #487: GFLOPs: 576.7623. Time: 6.5336 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #488: GFLOPs: 580.3358. Time: 6.4933 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #489: GFLOPs: 581.2793. Time: 6.4828 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #490: GFLOPs: 580.7016. Time: 6.4893 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #491: GFLOPs: 579.0692. Time: 6.5075 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #492: GFLOPs: 577.9932. Time: 6.5197 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #493: GFLOPs: 578.4580. Time: 6.5144 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #494: GFLOPs: 526.6904. Time: 7.1547 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #495: GFLOPs: 317.5034. Time: 11.8686 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #496: GFLOPs: 580.4951. Time: 6.4916 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #497: GFLOPs: 581.1187. Time: 6.4846 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #498: GFLOPs: 580.7503. Time: 6.4887 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #499: GFLOPs: 312.9001. Time: 12.0432 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #500: GFLOPs: 579.4588. Time: 6.5032 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #501: GFLOPs: 313.7318. Time: 12.0113 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #502: GFLOPs: 577.1869. Time: 6.5288 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #503: GFLOPs: 578.3857. Time: 6.5152 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #504: GFLOPs: 559.0187. Time: 6.7410 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #505: GFLOPs: 312.8865. Time: 12.0437 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #506: GFLOPs: 306.2749. Time: 12.3037 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #507: GFLOPs: 573.8934. Time: 6.5662 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #508: GFLOPs: 579.2071. Time: 6.5060 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #509: GFLOPs: 312.8436. Time: 12.0454 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #510: GFLOPs: 76.6085. Time: 49.1893 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #511: GFLOPs: 499.5640. Time: 7.5432 us. Best GFLOPs: 588.3656
2024-03-21 13:35:35 [INFO] [task_scheduler.cc:131] [Task #64: fused_nn_contrib_conv2d_winograd_without_weight_transform] Trial #512: GFLOPs: 251.5691. Time: 14.9793 us. Best GFLOPs: 588.3656
