2024-03-20 22:52:37 [INFO] [task_scheduler.cc:160] Initializing Task #119: "fused_nn_contrib_conv2d_winograd_without_weight_transform_3"
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(58), T.int64(58)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(58), T.int64(58)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(32), T.int64(196), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(32), T.int64(196), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(42), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(6), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(1792))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(896))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(2048))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(32) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(32), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 32, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[4, 16, 2])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(42), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(6), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(1792))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(896))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(2048))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(32) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(32), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 32, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[4, 16, 2])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(42), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(6), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(1792))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(896))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + ax0_ax1_ax2_ax3_fused // T.int64(2048))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(32), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(32) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(32), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(21) * T.int64(3) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused % T.int64(21) // T.int64(7) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[3, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 32, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[4, 16, 2])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-03-20 23:59:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-20 23:59:20 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-20 23:59:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 503 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-20 23:59:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 997 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-20 23:59:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1497 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-20 23:59:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2000 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-20 23:59:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2499 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-20 23:59:40 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-03-20 23:59:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:00:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 139 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:00:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:00:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 138 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:00:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9998  0.9996  0.9991  0.9989  0.9969  0.9955  0.9951  0.9947  0.9944  0.9944  0.9940  0.9938  0.9930  0.9914  0.9909
[17 : 32]:	0.9892  0.9891  0.9883  0.9882  0.9877  0.9874  0.9860  0.9856  0.9855  0.9852  0.9848  0.9846  0.9843  0.9834  0.9829  0.9818
[33 : 48]:	0.9818  0.9818  0.9816  0.9814  0.9796  0.9794  0.9788  0.9786  0.9774  0.9771  0.9766  0.9759  0.9745  0.9740  0.9735  0.9726
[49 : 64]:	0.9720  0.9718  0.9707  0.9699  0.9686  0.9681  0.9672  0.9664  0.9656  0.9655  0.9642  0.9638  0.9620  0.9611  0.9604  0.9601
2024-03-21 00:00:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:00:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #1: GFLOPs: 2092.0452. Time: 79.4356 us. Best GFLOPs: 2092.0452
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #2: GFLOPs: 2092.0829. Time: 79.4342 us. Best GFLOPs: 2092.0829
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #3: GFLOPs: 702.3366. Time: 236.6143 us. Best GFLOPs: 2092.0829
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #4: GFLOPs: 985.5170. Time: 168.6251 us. Best GFLOPs: 2092.0829
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #5: GFLOPs: 2930.3677. Time: 56.7106 us. Best GFLOPs: 2930.3677
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #6: GFLOPs: 1823.2522. Time: 91.1464 us. Best GFLOPs: 2930.3677
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #7: GFLOPs: 888.2663. Time: 187.0868 us. Best GFLOPs: 2930.3677
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #8: GFLOPs: 1179.7750. Time: 140.8598 us. Best GFLOPs: 2930.3677
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #9: GFLOPs: 25.2704. Time: 6576.1919 us. Best GFLOPs: 2930.3677
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #10: GFLOPs: 24.6540. Time: 6740.5929 us. Best GFLOPs: 2930.3677
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #11: GFLOPs: 2903.1395. Time: 57.2425 us. Best GFLOPs: 2930.3677
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #12: GFLOPs: 1362.2529. Time: 121.9912 us. Best GFLOPs: 2930.3677
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #13: GFLOPs: 3058.2526. Time: 54.3392 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #14: GFLOPs: 46.3264. Time: 3587.2184 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #15: GFLOPs: 2885.2510. Time: 57.5974 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #16: GFLOPs: 2301.2700. Time: 72.2136 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:121] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #17: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + p_3_init * T.int64(28) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + p_3 * T.int64(28) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(28)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(28) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused % T.int64(4) * T.int64(8) + eps_2_nu_2_co_2_p_2_fused % T.int64(28) // T.int64(7) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(7) * T.int64(28) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 2, 3, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[3, 2, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 4, 4, 2, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 28])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135, l136 = sch.split(loop=l133, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l136)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b106)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b150)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b152)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b154)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #18: GFLOPs: 29.7058. Time: 5594.2951 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #19: GFLOPs: 111.1925. Time: 1494.5509 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #20: GFLOPs: 1097.7861. Time: 151.3800 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #21: GFLOPs: 3044.9702. Time: 54.5762 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #22: GFLOPs: 2517.2730. Time: 66.0170 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #23: GFLOPs: 3011.3318. Time: 55.1859 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #24: GFLOPs: 536.2438. Time: 309.9018 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #25: GFLOPs: 155.4990. Time: 1068.7074 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #26: GFLOPs: 1251.2560. Time: 132.8129 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #27: GFLOPs: 269.0104. Time: 617.7565 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #28: GFLOPs: 2840.7781. Time: 58.4991 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #29: GFLOPs: 166.5256. Time: 997.9420 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #30: GFLOPs: 2721.2068. Time: 61.0696 us. Best GFLOPs: 3058.2526
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #31: GFLOPs: 3066.4170. Time: 54.1945 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #32: GFLOPs: 446.0386. Time: 372.5752 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #33: GFLOPs: 2408.3856. Time: 69.0018 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #34: GFLOPs: 1892.7032. Time: 87.8019 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #35: GFLOPs: 154.6962. Time: 1074.2536 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #36: GFLOPs: 2738.1690. Time: 60.6913 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #37: GFLOPs: 396.3718. Time: 419.2602 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #38: GFLOPs: 74.2889. Time: 2236.9827 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #39: GFLOPs: 511.8032. Time: 324.7008 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #40: GFLOPs: 1402.2019. Time: 118.5157 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #41: GFLOPs: 1203.2705. Time: 138.1094 us. Best GFLOPs: 3066.4170
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #42: GFLOPs: 3199.1699. Time: 51.9456 us. Best GFLOPs: 3199.1699
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #43: GFLOPs: 2013.3516. Time: 82.5404 us. Best GFLOPs: 3199.1699
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #44: GFLOPs: 1463.4315. Time: 113.5570 us. Best GFLOPs: 3199.1699
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #45: GFLOPs: 66.5894. Time: 2495.6378 us. Best GFLOPs: 3199.1699
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #46: GFLOPs: 3166.2703. Time: 52.4854 us. Best GFLOPs: 3199.1699
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #47: GFLOPs: 535.2534. Time: 310.4752 us. Best GFLOPs: 3199.1699
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #48: GFLOPs: 264.1287. Time: 629.1739 us. Best GFLOPs: 3199.1699
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #49: GFLOPs: 2819.3343. Time: 58.9440 us. Best GFLOPs: 3199.1699
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #50: GFLOPs: 1047.0528. Time: 158.7149 us. Best GFLOPs: 3199.1699
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #51: GFLOPs: 158.6575. Time: 1047.4315 us. Best GFLOPs: 3199.1699
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #52: GFLOPs: 3445.4051. Time: 48.2332 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #53: GFLOPs: 773.0911. Time: 214.9590 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #54: GFLOPs: 1305.5148. Time: 127.2930 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #55: GFLOPs: 1154.5360. Time: 143.9391 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #56: GFLOPs: 115.5627. Time: 1438.0324 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #57: GFLOPs: 3072.6585. Time: 54.0844 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #58: GFLOPs: 30.1881. Time: 5504.9177 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #59: GFLOPs: 1575.7336. Time: 105.4638 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #60: GFLOPs: 14.8223. Time: 11211.6690 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #61: GFLOPs: 291.2851. Time: 570.5164 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #62: GFLOPs: 1846.5093. Time: 89.9984 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #63: GFLOPs: 3018.2186. Time: 55.0599 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #64: GFLOPs: 50.4384. Time: 3294.7695 us. Best GFLOPs: 3445.4051
2024-03-21 00:13:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 00:13:34 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-03-21 00:13:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 436 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:13:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 878 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:13:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1315 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:13:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1751 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:13:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2187 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:13:52 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 00:14:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:14:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:14:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:14:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:14:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6355  1.6126  1.5021  1.4660  1.4467  1.4402  1.4377  1.4229  1.4093  1.3929  1.3785  1.3785  1.3711  1.3668  1.3659  1.3653
[17 : 32]:	1.3484  1.3391  1.3347  1.3201  1.3183  1.2934  1.2868  1.2815  1.2783  1.2778  1.2724  1.2697  1.2652  1.2581  1.2556  1.2522
[33 : 48]:	1.2434  1.2433  1.2402  1.2360  1.2347  1.2332  1.2332  1.2291  1.2199  1.2174  1.2166  1.2153  1.2141  1.2131  1.2120  1.2059
[49 : 64]:	1.2014  1.1970  1.1947  1.1939  1.1899  1.1858  1.1841  1.1841  1.1787  1.1777  1.1768  1.1741  1.1738  1.1728  1.1719  1.1688
2024-03-21 00:14:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:14:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #65: GFLOPs: 2197.3126. Time: 75.6301 us. Best GFLOPs: 3445.4051
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #66: GFLOPs: 2220.1461. Time: 74.8522 us. Best GFLOPs: 3445.4051
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #67: GFLOPs: 3458.4737. Time: 48.0509 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #68: GFLOPs: 2812.1312. Time: 59.0950 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #69: GFLOPs: 2745.2301. Time: 60.5351 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #70: GFLOPs: 3070.3615. Time: 54.1249 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #71: GFLOPs: 3171.4519. Time: 52.3996 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #72: GFLOPs: 2388.3142. Time: 69.5817 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #73: GFLOPs: 2956.2927. Time: 56.2133 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #74: GFLOPs: 2362.8281. Time: 70.3322 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #75: GFLOPs: 1887.6865. Time: 88.0352 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #76: GFLOPs: 1730.5617. Time: 96.0283 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #77: GFLOPs: 2956.0680. Time: 56.2176 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #78: GFLOPs: 2472.1534. Time: 67.2219 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #79: GFLOPs: 2557.8462. Time: 64.9699 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #80: GFLOPs: 2381.1146. Time: 69.7921 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #81: GFLOPs: 2143.3447. Time: 77.5344 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #82: GFLOPs: 2392.3315. Time: 69.4648 us. Best GFLOPs: 3458.4737
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #83: GFLOPs: 4135.2275. Time: 40.1871 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #84: GFLOPs: 3145.8395. Time: 52.8263 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #85: GFLOPs: 2258.8558. Time: 73.5695 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #86: GFLOPs: 2890.8662. Time: 57.4855 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #87: GFLOPs: 3454.6001. Time: 48.1048 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #88: GFLOPs: 3234.4359. Time: 51.3793 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #89: GFLOPs: 3405.1420. Time: 48.8035 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #90: GFLOPs: 2706.4546. Time: 61.4024 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #91: GFLOPs: 1869.3534. Time: 88.8986 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #92: GFLOPs: 1987.3577. Time: 83.6200 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #93: GFLOPs: 2710.3986. Time: 61.3131 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #94: GFLOPs: 2199.6805. Time: 75.5487 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #95: GFLOPs: 3791.8200. Time: 43.8267 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #96: GFLOPs: 2349.6730. Time: 70.7260 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #97: GFLOPs: 3329.8330. Time: 49.9073 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #98: GFLOPs: 2086.7144. Time: 79.6386 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #99: GFLOPs: 2087.1177. Time: 79.6232 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #100: GFLOPs: 3533.8327. Time: 47.0263 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #101: GFLOPs: 3352.8254. Time: 49.5650 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #102: GFLOPs: 3299.4998. Time: 50.3661 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #103: GFLOPs: 3299.3695. Time: 50.3681 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #104: GFLOPs: 3317.6989. Time: 50.0898 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #105: GFLOPs: 3267.2136. Time: 50.8638 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #106: GFLOPs: 3621.9353. Time: 45.8824 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #107: GFLOPs: 3082.7713. Time: 53.9070 us. Best GFLOPs: 4135.2275
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #108: GFLOPs: 5301.8069. Time: 31.3446 us. Best GFLOPs: 5301.8069
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #109: GFLOPs: 3343.6907. Time: 49.7004 us. Best GFLOPs: 5301.8069
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #110: GFLOPs: 2901.6811. Time: 57.2713 us. Best GFLOPs: 5301.8069
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #111: GFLOPs: 5498.1597. Time: 30.2252 us. Best GFLOPs: 5498.1597
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #112: GFLOPs: 1393.1416. Time: 119.2864 us. Best GFLOPs: 5498.1597
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #113: GFLOPs: 2204.7820. Time: 75.3739 us. Best GFLOPs: 5498.1597
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #114: GFLOPs: 2858.5605. Time: 58.1352 us. Best GFLOPs: 5498.1597
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #115: GFLOPs: 5649.0242. Time: 29.4180 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #116: GFLOPs: 2243.2533. Time: 74.0812 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #117: GFLOPs: 3185.2229. Time: 52.1731 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #118: GFLOPs: 2932.6622. Time: 56.6662 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #119: GFLOPs: 3158.3861. Time: 52.6164 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #120: GFLOPs: 3158.3103. Time: 52.6177 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #121: GFLOPs: 2527.0279. Time: 65.7622 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #122: GFLOPs: 3613.2021. Time: 45.9933 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #123: GFLOPs: 4237.8399. Time: 39.2141 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #124: GFLOPs: 3070.2266. Time: 54.1272 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #125: GFLOPs: 3217.9461. Time: 51.6425 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #126: GFLOPs: 2841.8629. Time: 58.4768 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #127: GFLOPs: 111.8400. Time: 1485.8993 us. Best GFLOPs: 5649.0242
2024-03-21 00:16:08 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #128: GFLOPs: 2976.5901. Time: 55.8300 us. Best GFLOPs: 5649.0242
2024-03-21 00:22:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 00:22:43 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 00:22:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 393 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:22:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 794 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:22:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1195 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:22:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1600 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:23:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2003 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:23:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2408 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:23:03 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-03-21 00:23:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:23:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:23:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:24:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:24:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8788  1.7555  1.7359  1.7255  1.7225  1.7193  1.7185  1.7077  1.7023  1.6897  1.6805  1.6797  1.6687  1.6656  1.6626  1.6626
[17 : 32]:	1.6607  1.6590  1.6471  1.6439  1.6378  1.6342  1.6299  1.6233  1.5972  1.5955  1.5870  1.5835  1.5815  1.5672  1.5654  1.5579
[33 : 48]:	1.5448  1.5177  1.5119  1.5043  1.5029  1.4681  1.4595  1.4497  1.4237  1.4151  1.4112  1.4068  1.4032  1.3889  1.3872  1.3842
[49 : 64]:	1.3810  1.3764  1.3755  1.3560  1.3549  1.3516  1.3515  1.3482  1.3436  1.3436  1.3431  1.3398  1.3384  1.3373  1.3364  1.3319
2024-03-21 00:24:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:24:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #129: GFLOPs: 3554.9170. Time: 46.7473 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #130: GFLOPs: 3453.3395. Time: 48.1224 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #131: GFLOPs: 3103.5456. Time: 53.5461 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #132: GFLOPs: 4410.8468. Time: 37.6760 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #133: GFLOPs: 4437.6373. Time: 37.4485 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #134: GFLOPs: 4491.4300. Time: 37.0000 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #135: GFLOPs: 4176.1101. Time: 39.7937 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #136: GFLOPs: 4179.8845. Time: 39.7578 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #137: GFLOPs: 4379.3920. Time: 37.9466 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #138: GFLOPs: 4061.2306. Time: 40.9193 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #139: GFLOPs: 3371.6968. Time: 49.2876 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #140: GFLOPs: 3967.5790. Time: 41.8852 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #141: GFLOPs: 4100.2115. Time: 40.5303 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #142: GFLOPs: 4107.9234. Time: 40.4542 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #143: GFLOPs: 3391.2048. Time: 49.0041 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #144: GFLOPs: 3390.9702. Time: 49.0075 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #145: GFLOPs: 1181.7484. Time: 140.6246 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #146: GFLOPs: 4081.8316. Time: 40.7128 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #147: GFLOPs: 3472.0369. Time: 47.8632 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #148: GFLOPs: 4370.3165. Time: 38.0254 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #149: GFLOPs: 3472.1223. Time: 47.8621 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #150: GFLOPs: 4329.4737. Time: 38.3841 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #151: GFLOPs: 4435.6006. Time: 37.4657 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #152: GFLOPs: 4381.2639. Time: 37.9304 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #153: GFLOPs: 4354.7820. Time: 38.1610 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #154: GFLOPs: 3009.3018. Time: 55.2231 us. Best GFLOPs: 5649.0242
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #155: GFLOPs: 6191.7948. Time: 26.8392 us. Best GFLOPs: 6191.7948
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #156: GFLOPs: 6012.0488. Time: 27.6416 us. Best GFLOPs: 6191.7948
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #157: GFLOPs: 3276.2134. Time: 50.7241 us. Best GFLOPs: 6191.7948
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #158: GFLOPs: 3919.2902. Time: 42.4013 us. Best GFLOPs: 6191.7948
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #159: GFLOPs: 6011.8183. Time: 27.6427 us. Best GFLOPs: 6191.7948
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #160: GFLOPs: 3064.5106. Time: 54.2282 us. Best GFLOPs: 6191.7948
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #161: GFLOPs: 6231.1240. Time: 26.6698 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #162: GFLOPs: 2177.2363. Time: 76.3275 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #163: GFLOPs: 2547.4614. Time: 65.2347 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #164: GFLOPs: 962.3759. Time: 172.6798 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #165: GFLOPs: 962.3466. Time: 172.6851 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #166: GFLOPs: 3638.4189. Time: 45.6745 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #167: GFLOPs: 3655.5160. Time: 45.4609 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #168: GFLOPs: 1903.7779. Time: 87.2911 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #169: GFLOPs: 3218.8715. Time: 51.6277 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #170: GFLOPs: 1996.3445. Time: 83.2436 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #171: GFLOPs: 2051.7038. Time: 80.9975 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #172: GFLOPs: 2558.1646. Time: 64.9618 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #173: GFLOPs: 3930.9797. Time: 42.2752 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #174: GFLOPs: 3467.5033. Time: 47.9258 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #175: GFLOPs: 5313.7769. Time: 31.2740 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #176: GFLOPs: 4531.8304. Time: 36.6702 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #177: GFLOPs: 2411.2912. Time: 68.9186 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #178: GFLOPs: 3146.5498. Time: 52.8143 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #179: GFLOPs: 2400.8098. Time: 69.2195 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #180: GFLOPs: 3633.2898. Time: 45.7390 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #181: GFLOPs: 4377.7697. Time: 37.9606 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #182: GFLOPs: 5317.8239. Time: 31.2502 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #183: GFLOPs: 3176.5505. Time: 52.3155 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #184: GFLOPs: 4306.2603. Time: 38.5910 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #185: GFLOPs: 5313.8529. Time: 31.2735 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #186: GFLOPs: 2958.6680. Time: 56.1682 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #187: GFLOPs: 3928.9486. Time: 42.2970 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #188: GFLOPs: 3280.8601. Time: 50.6522 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #189: GFLOPs: 2637.3680. Time: 63.0109 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #190: GFLOPs: 1491.2676. Time: 111.4374 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #191: GFLOPs: 5037.2325. Time: 32.9909 us. Best GFLOPs: 6231.1240
2024-03-21 00:25:12 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #192: GFLOPs: 522.5236. Time: 318.0390 us. Best GFLOPs: 6231.1240
2024-03-21 00:34:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 00:34:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 00:34:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:34:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 795 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:34:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1196 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:34:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1595 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:35:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1997 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:35:00 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 00:35:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:35:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:35:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:35:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:36:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.6142  2.3822  2.3235  2.3177  2.2499  2.1636  2.1466  2.1412  2.1176  2.1055  2.1054  2.0839  2.0664  2.0641  2.0456  2.0357
[17 : 32]:	2.0287  2.0184  2.0107  2.0097  2.0091  2.0085  1.9876  1.9812  1.9812  1.9719  1.9691  1.9669  1.9600  1.9582  1.9567  1.9509
[33 : 48]:	1.9467  1.9419  1.9409  1.9409  1.9371  1.8597  1.8488  1.8225  1.8022  1.8020  1.7854  1.7745  1.7672  1.7548  1.7503  1.7382
[49 : 64]:	1.7300  1.7213  1.7198  1.7176  1.7160  1.7159  1.7155  1.7125  1.7122  1.7093  1.7028  1.6994  1.6921  1.6907  1.6849  1.6776
2024-03-21 00:36:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:36:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #193: GFLOPs: 3087.6819. Time: 53.8213 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #194: GFLOPs: 415.2409. Time: 400.2084 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #195: GFLOPs: 2960.0367. Time: 56.1422 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #196: GFLOPs: 1653.6232. Time: 100.4962 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #197: GFLOPs: 2987.1241. Time: 55.6331 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #198: GFLOPs: 3338.4499. Time: 49.7785 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #199: GFLOPs: 2645.5067. Time: 62.8170 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #200: GFLOPs: 4506.3586. Time: 36.8774 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #201: GFLOPs: 4133.4223. Time: 40.2047 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #202: GFLOPs: 4506.6002. Time: 36.8755 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #203: GFLOPs: 2926.5791. Time: 56.7840 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #204: GFLOPs: 3033.0577. Time: 54.7906 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #205: GFLOPs: 2974.1331. Time: 55.8761 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #206: GFLOPs: 2943.8982. Time: 56.4500 us. Best GFLOPs: 6231.1240
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #207: GFLOPs: 6264.2334. Time: 26.5289 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #208: GFLOPs: 2943.7656. Time: 56.4525 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #209: GFLOPs: 4648.0065. Time: 35.7536 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #210: GFLOPs: 2871.8653. Time: 57.8658 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #211: GFLOPs: 4678.6780. Time: 35.5192 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #212: GFLOPs: 3908.3510. Time: 42.5200 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #213: GFLOPs: 4604.1550. Time: 36.0941 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #214: GFLOPs: 2438.4276. Time: 68.1517 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #215: GFLOPs: 2913.1956. Time: 57.0449 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #216: GFLOPs: 2282.0982. Time: 72.8202 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #217: GFLOPs: 2288.8307. Time: 72.6060 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #218: GFLOPs: 2974.0331. Time: 55.8780 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #219: GFLOPs: 4508.0889. Time: 36.8633 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #220: GFLOPs: 2732.1318. Time: 60.8254 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #221: GFLOPs: 4262.5830. Time: 38.9864 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #222: GFLOPs: 3506.4716. Time: 47.3932 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #223: GFLOPs: 3993.8789. Time: 41.6094 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #224: GFLOPs: 2225.5652. Time: 74.6700 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #225: GFLOPs: 4208.9187. Time: 39.4835 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #226: GFLOPs: 2834.1414. Time: 58.6361 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #227: GFLOPs: 2924.0798. Time: 56.8325 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #228: GFLOPs: 3503.5538. Time: 47.4327 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #229: GFLOPs: 3748.0251. Time: 44.3388 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #230: GFLOPs: 1391.9061. Time: 119.3923 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #231: GFLOPs: 1462.3356. Time: 113.6421 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #232: GFLOPs: 4117.5754. Time: 40.3594 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #233: GFLOPs: 4737.9335. Time: 35.0750 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #234: GFLOPs: 2846.7897. Time: 58.3755 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #235: GFLOPs: 3838.9322. Time: 43.2888 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #236: GFLOPs: 1266.8131. Time: 131.1819 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #237: GFLOPs: 3830.6931. Time: 43.3819 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #238: GFLOPs: 3781.6659. Time: 43.9444 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #239: GFLOPs: 1854.7320. Time: 89.5994 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #240: GFLOPs: 3623.5052. Time: 45.8625 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #241: GFLOPs: 3858.3811. Time: 43.0706 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #242: GFLOPs: 3950.2193. Time: 42.0693 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #243: GFLOPs: 3327.0008. Time: 49.9498 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #244: GFLOPs: 1534.3114. Time: 108.3111 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #245: GFLOPs: 3725.6510. Time: 44.6051 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #246: GFLOPs: 3862.2241. Time: 43.0278 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #247: GFLOPs: 3880.7681. Time: 42.8222 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #248: GFLOPs: 3849.0195. Time: 43.1754 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #249: GFLOPs: 1324.3473. Time: 125.4829 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #250: GFLOPs: 3607.5989. Time: 46.0647 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #251: GFLOPs: 2748.0859. Time: 60.4722 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #252: GFLOPs: 4264.6729. Time: 38.9673 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #253: GFLOPs: 3783.5212. Time: 43.9228 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #254: GFLOPs: 1015.0688. Time: 163.7159 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #255: GFLOPs: 2308.9651. Time: 71.9729 us. Best GFLOPs: 6264.2334
2024-03-21 00:37:06 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #256: GFLOPs: 289.0732. Time: 574.8817 us. Best GFLOPs: 6264.2334
2024-03-21 00:38:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 00:38:13 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 00:38:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:38:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:38:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1200 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:38:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1599 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:38:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1999 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:38:29 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-03-21 00:38:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:38:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:39:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:39:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:39:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.8784  2.7722  2.7722  2.7689  2.7522  2.7449  2.7364  2.7110  2.7037  2.6822  2.6690  2.6574  2.6565  2.6565  2.6460  2.6442
[17 : 32]:	2.6434  2.6386  2.6386  2.6255  2.6219  2.6170  2.5084  2.4665  2.4055  2.3881  2.3881  2.3811  2.3661  2.3661  2.3300  2.3273
[33 : 48]:	2.3086  2.3043  2.2848  2.2848  2.2819  2.2812  2.2796  2.2794  2.2716  2.2715  2.2715  2.2708  2.2699  2.2517  2.2515  2.2315
[49 : 64]:	2.2315  2.2246  2.2230  2.2109  2.1965  2.1719  2.1612  2.1590  2.1568  2.1568  2.1472  2.1472  2.1285  2.0987  2.0919  2.0755
2024-03-21 00:39:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:39:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #257: GFLOPs: 3179.2020. Time: 52.2719 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #258: GFLOPs: 3130.5767. Time: 53.0838 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #259: GFLOPs: 3664.6515. Time: 45.3475 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #260: GFLOPs: 3331.6038. Time: 49.8808 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #261: GFLOPs: 3235.8207. Time: 51.3573 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #262: GFLOPs: 2894.3653. Time: 57.4160 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #263: GFLOPs: 3292.1223. Time: 50.4790 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #264: GFLOPs: 3203.4750. Time: 51.8758 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #265: GFLOPs: 3228.8608. Time: 51.4680 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #266: GFLOPs: 2927.5024. Time: 56.7661 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #267: GFLOPs: 2731.8690. Time: 60.8312 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #268: GFLOPs: 1879.4861. Time: 88.4193 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #269: GFLOPs: 2171.6393. Time: 76.5242 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #270: GFLOPs: 3453.6952. Time: 48.1174 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #271: GFLOPs: 3461.2884. Time: 48.0119 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #272: GFLOPs: 1845.9002. Time: 90.0281 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #273: GFLOPs: 1826.2552. Time: 90.9965 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #274: GFLOPs: 2842.3552. Time: 58.4666 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #275: GFLOPs: 3436.9647. Time: 48.3516 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #276: GFLOPs: 2573.2880. Time: 64.5800 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #277: GFLOPs: 1901.7607. Time: 87.3837 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #278: GFLOPs: 3055.9526. Time: 54.3801 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #279: GFLOPs: 3435.8075. Time: 48.3679 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #280: GFLOPs: 3538.0582. Time: 46.9701 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #281: GFLOPs: 2943.8922. Time: 56.4501 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #282: GFLOPs: 1380.8257. Time: 120.3504 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #283: GFLOPs: 1693.6504. Time: 98.1211 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #284: GFLOPs: 1688.0390. Time: 98.4473 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #285: GFLOPs: 1690.9230. Time: 98.2794 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #286: GFLOPs: 1378.7799. Time: 120.5290 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #287: GFLOPs: 1862.5407. Time: 89.2238 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #288: GFLOPs: 2927.2011. Time: 56.7719 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #289: GFLOPs: 2408.3916. Time: 69.0016 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #290: GFLOPs: 2423.4857. Time: 68.5719 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #291: GFLOPs: 2817.8883. Time: 58.9743 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #292: GFLOPs: 3209.1921. Time: 51.7834 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #293: GFLOPs: 3214.9380. Time: 51.6909 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #294: GFLOPs: 3205.8726. Time: 51.8370 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #295: GFLOPs: 2420.5378. Time: 68.6554 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #296: GFLOPs: 2925.6303. Time: 56.8024 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #297: GFLOPs: 3120.4406. Time: 53.2562 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #298: GFLOPs: 2817.6335. Time: 58.9796 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #299: GFLOPs: 3021.6501. Time: 54.9974 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #300: GFLOPs: 3031.2339. Time: 54.8235 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #301: GFLOPs: 2974.7526. Time: 55.8644 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #302: GFLOPs: 993.0643. Time: 167.3436 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #303: GFLOPs: 1043.7792. Time: 159.2127 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #304: GFLOPs: 3076.5301. Time: 54.0163 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #305: GFLOPs: 1942.0060. Time: 85.5728 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #306: GFLOPs: 2526.6209. Time: 65.7728 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #307: GFLOPs: 6158.8083. Time: 26.9830 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #308: GFLOPs: 992.5714. Time: 167.4267 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #309: GFLOPs: 6148.3953. Time: 27.0287 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #310: GFLOPs: 4310.1432. Time: 38.5562 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #311: GFLOPs: 4338.7952. Time: 38.3016 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #312: GFLOPs: 2482.3770. Time: 66.9451 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #313: GFLOPs: 6188.2043. Time: 26.8548 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #314: GFLOPs: 6183.8367. Time: 26.8738 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #315: GFLOPs: 2839.3882. Time: 58.5277 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #316: GFLOPs: 3155.9914. Time: 52.6563 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #317: GFLOPs: 4506.9254. Time: 36.8728 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #318: GFLOPs: 925.2475. Time: 179.6091 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #319: GFLOPs: 2106.0846. Time: 78.9061 us. Best GFLOPs: 6264.2334
2024-03-21 00:40:42 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #320: GFLOPs: 3286.8803. Time: 50.5595 us. Best GFLOPs: 6264.2334
2024-03-21 00:58:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 00:58:07 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 00:58:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:58:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:58:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1202 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:58:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1600 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:58:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1999 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:58:23 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-03-21 00:58:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:58:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:59:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:59:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 00:59:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.0463  2.0291  1.9629  1.9467  1.9038  1.8969  1.8855  1.8160  1.7896  1.7704  1.7697  1.7617  1.7555  1.7477  1.7462  1.7012
[17 : 32]:	1.6762  1.6729  1.6709  1.6703  1.6000  1.5802  1.5630  1.5087  1.5078  1.5026  1.4686  1.4581  1.4321  1.4163  1.4127  1.4109
[33 : 48]:	1.4109  1.3662  1.3646  1.3584  1.3569  1.3453  1.3453  1.3388  1.3387  1.3382  1.3329  1.3294  1.3126  1.3120  1.3063  1.3057
[49 : 64]:	1.2854  1.2793  1.2736  1.2549  1.2542  1.2508  1.2491  1.2400  1.2381  1.2351  1.2295  1.2268  1.2203  1.2187  1.2123  1.2031
2024-03-21 00:59:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:59:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:121] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #321: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(8)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(42)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(24)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(16) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 7, 4, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 16, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:121] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #322: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(8)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(42)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(448))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(448) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(48)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(16) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 7, 4, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[8, 16, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142 = sch.split(loop=l140, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b143 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b143, ann_key="meta_schedule.unroll_explicit")
b144, b145, b146, b147, b148, b149, b150, b151, b152 = sch.get_child_blocks(b143)
l153, l154, l155, l156, l157, l158 = sch.get_loops(block=b144)
l159, l160, l161, l162, l163, l164 = sch.get_loops(block=b145)
sch.annotate(block_or_loop=l159, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l159, ann_key="pragma_unroll_explicit", ann_val=1)
l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b146)
l171, l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b147)
l178, l179, l180, l181, l182, l183 = sch.get_loops(block=b148)
l184, l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l184, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l184, ann_key="pragma_unroll_explicit", ann_val=1)
l198, l199, l200, l201, l202, l203, l204 = sch.get_loops(block=b150)
l205, l206, l207, l208, l209, l210, l211, l212 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l205, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l205, ann_key="pragma_unroll_explicit", ann_val=1)
l213, l214, l215, l216 = sch.get_loops(block=b152)
b217 = sch.get_block(name="data_pack", func_name="main")
l218, l219, l220, l221, l222, l223 = sch.get_loops(block=b217)
b224 = sch.decompose_reduction(block=b217, loop=l222)
b225 = sch.get_block(name="bgemm", func_name="main")
l226, l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239 = sch.get_loops(block=b225)
b240 = sch.decompose_reduction(block=b225, loop=l229)
b241 = sch.get_block(name="inverse", func_name="main")
l242, l243, l244, l245, l246, l247, l248, l249 = sch.get_loops(block=b241)
b250 = sch.decompose_reduction(block=b241, loop=l248)
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:121] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #323: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(4)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(84)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(896))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(896) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(48)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(512))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(512) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(32) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(7) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(14) // T.int64(7) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused % T.int64(7) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 2, 1, 3, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 8, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 7, 4, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[4, 16, 2])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #324: GFLOPs: 4238.3315. Time: 39.2095 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #325: GFLOPs: 3496.6677. Time: 47.5261 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #326: GFLOPs: 3519.1159. Time: 47.2229 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #327: GFLOPs: 2356.0668. Time: 70.5340 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #328: GFLOPs: 2842.3798. Time: 58.4661 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #329: GFLOPs: 2842.5372. Time: 58.4629 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #330: GFLOPs: 3318.7710. Time: 50.0736 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #331: GFLOPs: 2810.2544. Time: 59.1345 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #332: GFLOPs: 3423.4815. Time: 48.5421 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #333: GFLOPs: 3318.4489. Time: 50.0785 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #334: GFLOPs: 3422.3477. Time: 48.5582 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #335: GFLOPs: 3535.9110. Time: 46.9986 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #336: GFLOPs: 2844.8118. Time: 58.4161 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #337: GFLOPs: 2835.1359. Time: 58.6155 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #338: GFLOPs: 2843.1295. Time: 58.4507 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #339: GFLOPs: 2661.6401. Time: 62.4363 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #340: GFLOPs: 3025.6210. Time: 54.9252 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #341: GFLOPs: 4716.9752. Time: 35.2308 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #342: GFLOPs: 4373.3981. Time: 37.9986 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #343: GFLOPs: 3600.7698. Time: 46.1521 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #344: GFLOPs: 4005.4671. Time: 41.4890 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #345: GFLOPs: 4799.5331. Time: 34.6248 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #346: GFLOPs: 4787.1578. Time: 34.7143 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #347: GFLOPs: 5032.1277. Time: 33.0244 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #348: GFLOPs: 3044.2271. Time: 54.5895 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #349: GFLOPs: 4308.7177. Time: 38.5690 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #350: GFLOPs: 4564.9796. Time: 36.4039 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #351: GFLOPs: 3406.6943. Time: 48.7813 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #352: GFLOPs: 4571.8699. Time: 36.3490 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #353: GFLOPs: 4572.5834. Time: 36.3433 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #354: GFLOPs: 4926.4900. Time: 33.7325 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #355: GFLOPs: 5323.9794. Time: 31.2140 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #356: GFLOPs: 4926.7058. Time: 33.7310 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #357: GFLOPs: 4875.1325. Time: 34.0879 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #358: GFLOPs: 3441.5027. Time: 48.2879 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #359: GFLOPs: 4954.8410. Time: 33.5395 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #360: GFLOPs: 4801.0212. Time: 34.6141 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #361: GFLOPs: 3601.2270. Time: 46.1462 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #362: GFLOPs: 4527.2031. Time: 36.7076 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #363: GFLOPs: 3029.3826. Time: 54.8570 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #364: GFLOPs: 4598.4369. Time: 36.1390 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #365: GFLOPs: 4786.3978. Time: 34.7198 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #366: GFLOPs: 4525.7012. Time: 36.7198 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #367: GFLOPs: 4569.0230. Time: 36.3717 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #368: GFLOPs: 4475.6452. Time: 37.1305 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #369: GFLOPs: 5044.3442. Time: 32.9444 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #370: GFLOPs: 4747.8784. Time: 35.0015 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #371: GFLOPs: 4688.3743. Time: 35.4457 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #372: GFLOPs: 6066.5333. Time: 27.3934 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #373: GFLOPs: 6157.8198. Time: 26.9873 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #374: GFLOPs: 5520.3030. Time: 30.1039 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #375: GFLOPs: 3885.6693. Time: 42.7682 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #376: GFLOPs: 3117.7492. Time: 53.3022 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #377: GFLOPs: 3259.6283. Time: 50.9822 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #378: GFLOPs: 5242.3772. Time: 31.6999 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #379: GFLOPs: 4233.1196. Time: 39.2578 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #380: GFLOPs: 3051.3239. Time: 54.4626 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #381: GFLOPs: 896.2755. Time: 185.4150 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #382: GFLOPs: 745.8069. Time: 222.8230 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #383: GFLOPs: 1312.0950. Time: 126.6546 us. Best GFLOPs: 6264.2334
2024-03-21 01:00:47 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #384: GFLOPs: 88.3021. Time: 1881.9816 us. Best GFLOPs: 6264.2334
2024-03-21 01:10:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 01:10:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 01:10:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:10:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 801 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:10:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1206 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:10:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1602 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:10:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2008 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:10:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:10:52 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-03-21 01:11:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 130 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:11:20 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:11:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:11:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:11:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.6306  2.6167  2.6165  2.6112  2.6067  2.6036  2.6024  2.6022  2.5997  2.5984  2.5861  2.5846  2.5831  2.5760  2.5716  2.5707
[17 : 32]:	2.5692  2.5684  2.5542  2.5539  2.5538  2.5491  2.5487  2.5416  2.5413  2.5413  2.5377  2.5370  2.5335  2.5283  2.5114  2.5110
[33 : 48]:	2.5106  2.5042  2.4982  2.4937  2.4923  2.4888  2.4887  2.4862  2.4783  2.4622  2.4494  2.3661  2.3461  2.3452  2.3448  2.3427
[49 : 64]:	2.2981  2.2596  2.2454  2.2452  2.2242  2.2186  2.2184  2.2183  2.2181  2.2143  2.2003  2.1992  2.1979  2.1978  2.1957  2.1893
2024-03-21 01:11:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 01:11:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #385: GFLOPs: 2055.4868. Time: 80.8484 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #386: GFLOPs: 2873.9505. Time: 57.8239 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #387: GFLOPs: 2873.3248. Time: 57.8365 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #388: GFLOPs: 2692.3152. Time: 61.7249 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #389: GFLOPs: 2056.5681. Time: 80.8059 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #390: GFLOPs: 2848.5441. Time: 58.3396 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #391: GFLOPs: 2787.5077. Time: 59.6170 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #392: GFLOPs: 2833.0867. Time: 58.6579 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #393: GFLOPs: 2838.1167. Time: 58.5539 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #394: GFLOPs: 2722.0538. Time: 61.0506 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #395: GFLOPs: 2904.1201. Time: 57.2232 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #396: GFLOPs: 2842.8883. Time: 58.4557 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #397: GFLOPs: 2817.7906. Time: 58.9763 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #398: GFLOPs: 2023.4861. Time: 82.1270 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #399: GFLOPs: 2803.6460. Time: 59.2739 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #400: GFLOPs: 2817.2603. Time: 58.9874 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #401: GFLOPs: 2827.6406. Time: 58.7709 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #402: GFLOPs: 2912.0396. Time: 57.0675 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #403: GFLOPs: 2802.0905. Time: 59.3068 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #404: GFLOPs: 2827.9898. Time: 58.7636 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #405: GFLOPs: 2236.1781. Time: 74.3156 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #406: GFLOPs: 2779.6087. Time: 59.7864 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #407: GFLOPs: 2704.5563. Time: 61.4455 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #408: GFLOPs: 1958.1497. Time: 84.8673 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #409: GFLOPs: 3165.3557. Time: 52.5005 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #410: GFLOPs: 2999.7455. Time: 55.3990 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #411: GFLOPs: 2837.8547. Time: 58.5593 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #412: GFLOPs: 2781.4750. Time: 59.7463 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #413: GFLOPs: 2904.0218. Time: 57.2251 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #414: GFLOPs: 3009.4846. Time: 55.2197 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #415: GFLOPs: 2946.1748. Time: 56.4063 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #416: GFLOPs: 1594.3996. Time: 104.2291 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #417: GFLOPs: 3038.2732. Time: 54.6965 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #418: GFLOPs: 2825.8275. Time: 58.8086 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #419: GFLOPs: 2773.6200. Time: 59.9155 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #420: GFLOPs: 2953.2731. Time: 56.2708 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #421: GFLOPs: 3143.9259. Time: 52.8584 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #422: GFLOPs: 949.9040. Time: 174.9471 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #423: GFLOPs: 2049.6194. Time: 81.0799 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #424: GFLOPs: 2821.0082. Time: 58.9090 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #425: GFLOPs: 948.2019. Time: 175.2611 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #426: GFLOPs: 952.4183. Time: 174.4852 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #427: GFLOPs: 3021.7237. Time: 54.9961 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #428: GFLOPs: 2443.0317. Time: 68.0232 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #429: GFLOPs: 1345.5741. Time: 123.5034 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #430: GFLOPs: 2165.1006. Time: 76.7553 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #431: GFLOPs: 4596.9103. Time: 36.1510 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #432: GFLOPs: 4668.5963. Time: 35.5959 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #433: GFLOPs: 718.5204. Time: 231.2849 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #434: GFLOPs: 506.9533. Time: 327.8072 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #435: GFLOPs: 804.9713. Time: 206.4458 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #436: GFLOPs: 576.4071. Time: 288.3082 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #437: GFLOPs: 864.5574. Time: 192.2173 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #438: GFLOPs: 575.5482. Time: 288.7385 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #439: GFLOPs: 5523.4347. Time: 30.0869 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #440: GFLOPs: 914.6800. Time: 181.6842 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #441: GFLOPs: 493.9802. Time: 336.4161 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #442: GFLOPs: 3007.9924. Time: 55.2471 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #443: GFLOPs: 2631.5857. Time: 63.1493 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #444: GFLOPs: 827.9577. Time: 200.7142 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #445: GFLOPs: 2738.8747. Time: 60.6756 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #446: GFLOPs: 1870.5298. Time: 88.8427 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #447: GFLOPs: 3533.0835. Time: 47.0362 us. Best GFLOPs: 6264.2334
2024-03-21 01:13:15 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #448: GFLOPs: 56.7010. Time: 2930.8635 us. Best GFLOPs: 6264.2334
2024-03-21 01:19:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 01:19:40 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 01:19:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:19:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:19:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:19:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1603 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:19:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2001 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:19:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:19:59 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-03-21 01:20:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:20:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:20:43 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:20:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:21:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.8427  2.1727  2.1660  2.1502  2.1502  2.0954  2.0947  2.0947  2.0822  2.0673  2.0622  2.0530  2.0448  2.0397  2.0386  2.0233
[17 : 32]:	2.0183  2.0163  1.9996  1.9480  1.9403  1.9353  1.9291  1.9282  1.9272  1.9235  1.9225  1.9156  1.8976  1.8957  1.8753  1.8703
[33 : 48]:	1.8673  1.8669  1.8650  1.8631  1.8488  1.8467  1.8186  1.8184  1.8183  1.8057  1.8027  1.8025  1.8025  1.7976  1.7971  1.7955
[49 : 64]:	1.7952  1.7870  1.7823  1.7802  1.7792  1.7751  1.7715  1.7699  1.7695  1.7691  1.7634  1.7620  1.7617  1.7590  1.7590  1.7548
2024-03-21 01:21:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 01:21:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #449: GFLOPs: 3990.8587. Time: 41.6409 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #450: GFLOPs: 3321.5212. Time: 50.0322 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #451: GFLOPs: 2499.2601. Time: 66.4928 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #452: GFLOPs: 3304.3283. Time: 50.2925 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #453: GFLOPs: 3124.9362. Time: 53.1796 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #454: GFLOPs: 3909.9602. Time: 42.5025 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #455: GFLOPs: 4321.9272. Time: 38.4511 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #456: GFLOPs: 4380.7803. Time: 37.9345 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #457: GFLOPs: 3200.2779. Time: 51.9276 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #458: GFLOPs: 4761.1426. Time: 34.9040 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #459: GFLOPs: 3771.3554. Time: 44.0645 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #460: GFLOPs: 3411.5392. Time: 48.7120 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #461: GFLOPs: 5186.2756. Time: 32.0428 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #462: GFLOPs: 3459.5112. Time: 48.0365 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #463: GFLOPs: 4434.4962. Time: 37.4750 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #464: GFLOPs: 4812.5374. Time: 34.5312 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #465: GFLOPs: 5295.1046. Time: 31.3843 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #466: GFLOPs: 4805.4190. Time: 34.5824 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #467: GFLOPs: 4806.2142. Time: 34.5767 us. Best GFLOPs: 6264.2334
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #468: GFLOPs: 7642.1021. Time: 21.7457 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #469: GFLOPs: 6308.6367. Time: 26.3421 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #470: GFLOPs: 6183.0624. Time: 26.8771 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #471: GFLOPs: 4776.1373. Time: 34.7944 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #472: GFLOPs: 4633.5724. Time: 35.8650 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #473: GFLOPs: 4893.4982. Time: 33.9599 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #474: GFLOPs: 1571.1575. Time: 105.7710 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #475: GFLOPs: 3551.4628. Time: 46.7928 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #476: GFLOPs: 458.1736. Time: 362.7073 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #477: GFLOPs: 2761.5012. Time: 60.1785 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #478: GFLOPs: 6562.4786. Time: 25.3232 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #479: GFLOPs: 4303.7525. Time: 38.6135 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #480: GFLOPs: 1658.9679. Time: 100.1725 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #481: GFLOPs: 1715.7123. Time: 96.8594 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #482: GFLOPs: 2168.2342. Time: 76.6444 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #483: GFLOPs: 3517.6962. Time: 47.2420 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #484: GFLOPs: 2269.0325. Time: 73.2395 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #485: GFLOPs: 2756.0127. Time: 60.2983 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #486: GFLOPs: 2255.9130. Time: 73.6655 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #487: GFLOPs: 7628.1906. Time: 21.7854 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #488: GFLOPs: 5177.8287. Time: 32.0951 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #489: GFLOPs: 736.1729. Time: 225.7390 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #490: GFLOPs: 3768.0418. Time: 44.1033 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #491: GFLOPs: 938.8033. Time: 177.0157 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #492: GFLOPs: 934.0148. Time: 177.9232 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #493: GFLOPs: 939.8361. Time: 176.8212 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #494: GFLOPs: 2304.1882. Time: 72.1221 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #495: GFLOPs: 1315.5270. Time: 126.3242 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #496: GFLOPs: 941.4763. Time: 176.5131 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #497: GFLOPs: 917.5764. Time: 181.1107 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #498: GFLOPs: 595.0962. Time: 279.2538 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #499: GFLOPs: 757.7496. Time: 219.3111 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #500: GFLOPs: 738.2799. Time: 225.0947 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #501: GFLOPs: 736.7168. Time: 225.5723 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #502: GFLOPs: 4087.8642. Time: 40.6527 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #503: GFLOPs: 2273.7996. Time: 73.0860 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #504: GFLOPs: 749.7225. Time: 221.6592 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #505: GFLOPs: 749.7061. Time: 221.6641 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #506: GFLOPs: 2223.9263. Time: 74.7250 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #507: GFLOPs: 1228.6141. Time: 135.2605 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #508: GFLOPs: 1206.6484. Time: 137.7227 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #509: GFLOPs: 1298.5031. Time: 127.9804 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #510: GFLOPs: 203.4762. Time: 816.7191 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #511: GFLOPs: 4612.7395. Time: 36.0269 us. Best GFLOPs: 7642.1021
2024-03-21 01:22:20 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #512: GFLOPs: 653.7593. Time: 254.1959 us. Best GFLOPs: 7642.1021
2024-03-21 01:44:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 01:44:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 01:44:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:44:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 808 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:44:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1210 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:44:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 1609 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:44:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2012 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:45:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 2409 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:45:00 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-03-21 01:45:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:45:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:45:44 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:45:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a6a61838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a403c6d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a55bc0d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a53b5978)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a6b50708)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a473a998)]: 74 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a403c5d8)]: 0 failure(s)
2024-03-21 01:46:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.2034  1.9861  1.9030  1.7587  1.7587  1.7554  1.7341  1.7038  1.6937  1.6920  1.6701  1.6477  1.6450  1.6286  1.6245  1.6208
[17 : 32]:	1.5931  1.5695  1.5531  1.5201  1.5183  1.5066  1.4882  1.4790  1.4781  1.4683  1.4591  1.4526  1.4521  1.4458  1.4433  1.4423
[33 : 48]:	1.4418  1.4403  1.4396  1.4370  1.4282  1.4218  1.4193  1.4003  1.3926  1.3925  1.3924  1.3842  1.3804  1.3780  1.3674  1.3634
[49 : 64]:	1.3625  1.3621  1.3613  1.3600  1.3580  1.3576  1.3568  1.3516  1.3507  1.3506  1.3489  1.3485  1.3447  1.3431  1.3383  1.3320
2024-03-21 01:46:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 01:46:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:121] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #513: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), nu_3_init * T.int64(6) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(16)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(336))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(336) // T.int64(56))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2016))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(48)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1536))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1536) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(6) + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(8) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                            v1 = T.axis.spatial(T.int64(6), ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[16, 8, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 96, 4], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 96, 2], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:121] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #514: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(21), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(64) * T.int64(3) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(64) // T.int64(4) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(128)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(56))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(28))
                                        v2 = T.axis.spatial(T.int64(128), ci_0)
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(336))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(64))
                                        v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(32))
                                        v2 = T.axis.spatial(T.int64(128), ci_0)
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(64) * T.int64(3) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(64) // T.int64(4) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(3), T.int64(2), T.int64(2), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(64) * T.int64(3) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(64) // T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 2, 3, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 128, 2], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:121] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #515: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(12) * T.int64(2) + eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(12) // T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(672))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(672) // T.int64(112))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(36), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(384))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(384) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(16))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(16))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(12) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(12) // T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(4) + ci_1 * T.int64(4) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(16), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(12) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused % T.int64(12) // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused // T.int64(7) * T.int64(16) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(7) * T.int64(28) + eps_1_nu_1_co_1_p_1_fused * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 3, 1, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 8, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[7, 2, 2, 7, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[32, 1, 4])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 36, 4], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 36, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:121] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #516: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), nu_3_init * T.int64(6) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(16)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(336))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(336) // T.int64(56))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2016))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1536))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1536) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(6) + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(8) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                            v1 = T.axis.spatial(T.int64(6), ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[16, 8, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 96, 2], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 96, 3], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:121] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #517: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), nu_3_init * T.int64(6) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(16)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(336))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(336) // T.int64(56))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2016))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(48)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1536))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1536) // T.int64(256))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), nu_3 * T.int64(6) + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(8) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(2), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax0)
                            v1 = T.axis.spatial(T.int64(6), ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 6])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[16, 8, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 96, 2], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 96, 2], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #518: GFLOPs: 3253.6449. Time: 51.0759 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #519: GFLOPs: 3108.0917. Time: 53.4678 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #520: GFLOPs: 3316.5416. Time: 50.1073 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #521: GFLOPs: 3130.9147. Time: 53.0781 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #522: GFLOPs: 1874.8644. Time: 88.6373 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #523: GFLOPs: 3415.3161. Time: 48.6581 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #524: GFLOPs: 976.1871. Time: 170.2367 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #525: GFLOPs: 6012.9164. Time: 27.6377 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #526: GFLOPs: 6087.2608. Time: 27.3001 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #527: GFLOPs: 4130.6567. Time: 40.2316 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #528: GFLOPs: 2469.4708. Time: 67.2949 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #529: GFLOPs: 4071.0116. Time: 40.8210 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #530: GFLOPs: 3503.4573. Time: 47.4340 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #531: GFLOPs: 5949.0739. Time: 27.9342 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #532: GFLOPs: 4371.6414. Time: 38.0138 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #533: GFLOPs: 4332.4520. Time: 38.3577 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #534: GFLOPs: 3175.5227. Time: 52.3325 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #535: GFLOPs: 3337.5503. Time: 49.7919 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #536: GFLOPs: 3205.8519. Time: 51.8374 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #537: GFLOPs: 5242.8175. Time: 31.6973 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #538: GFLOPs: 4874.3586. Time: 34.0933 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #539: GFLOPs: 2947.3477. Time: 56.3839 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #540: GFLOPs: 4474.8220. Time: 37.1373 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #541: GFLOPs: 3672.0841. Time: 45.2557 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #542: GFLOPs: 3299.8431. Time: 50.3609 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #543: GFLOPs: 3205.7276. Time: 51.8394 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #544: GFLOPs: 3415.7878. Time: 48.6514 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #545: GFLOPs: 2486.0835. Time: 66.8453 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #546: GFLOPs: 4483.0744. Time: 37.0690 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #547: GFLOPs: 2517.3597. Time: 66.0148 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #548: GFLOPs: 3859.4865. Time: 43.0583 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #549: GFLOPs: 4840.3599. Time: 34.3328 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #550: GFLOPs: 4994.2136. Time: 33.2751 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #551: GFLOPs: 5242.0829. Time: 31.7017 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #552: GFLOPs: 5067.3648. Time: 32.7947 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #553: GFLOPs: 2585.2909. Time: 64.2802 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #554: GFLOPs: 4918.9747. Time: 33.7841 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #555: GFLOPs: 2500.2970. Time: 66.4653 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #556: GFLOPs: 2498.0195. Time: 66.5259 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #557: GFLOPs: 2357.1898. Time: 70.5004 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #558: GFLOPs: 2373.6153. Time: 70.0126 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #559: GFLOPs: 2556.7844. Time: 64.9968 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #560: GFLOPs: 4563.1477. Time: 36.4185 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #561: GFLOPs: 2433.3415. Time: 68.2941 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #562: GFLOPs: 2377.3086. Time: 69.9038 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #563: GFLOPs: 2424.3052. Time: 68.5487 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #564: GFLOPs: 3097.1351. Time: 53.6570 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #565: GFLOPs: 2296.7257. Time: 72.3564 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #566: GFLOPs: 2430.6108. Time: 68.3708 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #567: GFLOPs: 4900.5031. Time: 33.9114 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #568: GFLOPs: 2510.9361. Time: 66.1836 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #569: GFLOPs: 5772.4461. Time: 28.7890 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #570: GFLOPs: 4568.3454. Time: 36.3770 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #571: GFLOPs: 5715.2551. Time: 29.0771 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #572: GFLOPs: 2443.1749. Time: 68.0192 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #573: GFLOPs: 4604.2723. Time: 36.0932 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #574: GFLOPs: 4039.4387. Time: 41.1401 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #575: GFLOPs: 2953.8649. Time: 56.2595 us. Best GFLOPs: 7642.1021
2024-03-21 01:47:07 [INFO] [task_scheduler.cc:131] [Task #119: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #576: GFLOPs: 288.0705. Time: 576.8828 us. Best GFLOPs: 7642.1021
