2024-03-21 10:38:32 [INFO] [task_scheduler.cc:160] Initializing Task #151: "fused_nn_conv2d_add_nn_relu_74"
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(160), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(160), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(160), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(160), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(160), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(15680)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(40) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(640)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(40))
                                    v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(40) + ax0_ax1_ax2_ax3_fused % T.int64(40))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(160), rc_0 * T.int64(40) + rc_1 * T.int64(20) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 4, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 20])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(160), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(160), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(15680)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(40) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(640)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(40))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(40) + ax0_ax1_ax2_ax3_fused % T.int64(40))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(40) + rc_1 * T.int64(20) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 4, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 20])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(160), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(160), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(15680)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(40) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(640)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(40))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(40) + ax0_ax1_ax2_ax3_fused % T.int64(40))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(40) + rc_1 * T.int64(20) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(14) * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 4, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 20])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 11:57:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:57:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:57:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd60a4a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd61e47a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd7d17288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd831fa08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd46dca18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd8359f38)]: 475 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d17188)]: 0 failure(s)
2024-03-21 11:57:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd60a4a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd61e47a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd7d17288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd831fa08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd46dca18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd8359f38)]: 943 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d17188)]: 0 failure(s)
2024-03-21 11:57:53 [INFO] [evolutionary_search.cc:723] Sampled 81 candidate(s)
2024-03-21 11:57:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd60a4a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd61e47a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd7d17288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd831fa08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd46dca18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd8359f38)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d17188)]: 0 failure(s)
2024-03-21 11:57:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd60a4a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd61e47a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd7d17288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd831fa08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd46dca18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd8359f38)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d17188)]: 0 failure(s)
2024-03-21 11:57:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd60a4a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd61e47a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd7d17288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd831fa08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd46dca18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd8359f38)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d17188)]: 0 failure(s)
2024-03-21 11:57:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd60a4a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd61e47a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd7d17288)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd831fa08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd46dca18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd8359f38)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d17188)]: 0 failure(s)
2024-03-21 11:57:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9998  0.9994  0.9986  0.9986  0.9965  0.9964  0.9954  0.9951  0.9944  0.9941  0.9938  0.9938  0.9937  0.9934  0.9934
[17 : 32]:	0.9930  0.9928  0.9905  0.9902  0.9887  0.9875  0.9870  0.9870  0.9869  0.9862  0.9852  0.9852  0.9847  0.9845  0.9841  0.9841
[33 : 48]:	0.9821  0.9814  0.9810  0.9805  0.9804  0.9801  0.9792  0.9789  0.9778  0.9778  0.9775  0.9773  0.9772  0.9772  0.9768  0.9764
[49 : 64]:	0.9762  0.9748  0.9746  0.9745  0.9742  0.9741  0.9739  0.9729  0.9729  0.9725  0.9717  0.9706  0.9694  0.9687  0.9686  0.9684
2024-03-21 11:57:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:57:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #1: GFLOPs: 1517.2988. Time: 21.2966 us. Best GFLOPs: 1517.2988
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #2: GFLOPs: 1059.1960. Time: 30.5074 us. Best GFLOPs: 1517.2988
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #3: GFLOPs: 796.0958. Time: 40.5898 us. Best GFLOPs: 1517.2988
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #4: GFLOPs: 1893.7632. Time: 17.0630 us. Best GFLOPs: 1893.7632
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #5: GFLOPs: 1773.2474. Time: 18.2227 us. Best GFLOPs: 1893.7632
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #6: GFLOPs: 222.7421. Time: 145.0707 us. Best GFLOPs: 1893.7632
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #7: GFLOPs: 235.6364. Time: 137.1322 us. Best GFLOPs: 1893.7632
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #8: GFLOPs: 342.2482. Time: 94.4150 us. Best GFLOPs: 1893.7632
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #9: GFLOPs: 775.2729. Time: 41.6800 us. Best GFLOPs: 1893.7632
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #10: GFLOPs: 575.5446. Time: 56.1439 us. Best GFLOPs: 1893.7632
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #11: GFLOPs: 394.4222. Time: 81.9258 us. Best GFLOPs: 1893.7632
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #12: GFLOPs: 2828.8631. Time: 11.4227 us. Best GFLOPs: 2828.8631
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #13: GFLOPs: 2727.7384. Time: 11.8462 us. Best GFLOPs: 2828.8631
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #14: GFLOPs: 31.2069. Time: 1035.4540 us. Best GFLOPs: 2828.8631
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #15: GFLOPs: 3301.0836. Time: 9.7887 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #16: GFLOPs: 787.9048. Time: 41.0117 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #17: GFLOPs: 1910.3042. Time: 16.9153 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #18: GFLOPs: 1246.7236. Time: 25.9186 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #19: GFLOPs: 837.9641. Time: 38.5617 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #20: GFLOPs: 599.5031. Time: 53.9002 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #21: GFLOPs: 242.9912. Time: 132.9816 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #22: GFLOPs: 931.2603. Time: 34.6985 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #23: GFLOPs: 1075.8807. Time: 30.0343 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #24: GFLOPs: 426.6622. Time: 75.7352 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #25: GFLOPs: 683.0589. Time: 47.3068 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #26: GFLOPs: 39.0313. Time: 827.8828 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #27: GFLOPs: 3018.4963. Time: 10.7051 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #28: GFLOPs: 23.8487. Time: 1354.9319 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #29: GFLOPs: 34.3625. Time: 940.3669 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #30: GFLOPs: 3055.9559. Time: 10.5739 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #31: GFLOPs: 1908.1803. Time: 16.9341 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #32: GFLOPs: 181.1193. Time: 178.4091 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #33: GFLOPs: 17.8331. Time: 1811.9906 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #34: GFLOPs: 224.9772. Time: 143.6294 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #35: GFLOPs: 1899.2675. Time: 17.0136 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #36: GFLOPs: 1260.1183. Time: 25.6431 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #37: GFLOPs: 3138.2900. Time: 10.2965 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #38: GFLOPs: 693.1521. Time: 46.6180 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #39: GFLOPs: 985.6052. Time: 32.7853 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #40: GFLOPs: 167.1245. Time: 193.3490 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #41: GFLOPs: 371.0325. Time: 87.0903 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #42: GFLOPs: 635.6888. Time: 50.8320 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #43: GFLOPs: 124.1999. Time: 260.1720 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #44: GFLOPs: 30.8158. Time: 1048.5982 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #45: GFLOPs: 235.4959. Time: 137.2141 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #46: GFLOPs: 1761.5249. Time: 18.3440 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #47: GFLOPs: 185.5595. Time: 174.1401 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #48: GFLOPs: 2744.8610. Time: 11.7723 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #49: GFLOPs: 790.1581. Time: 40.8948 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #50: GFLOPs: 3065.4326. Time: 10.5412 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #51: GFLOPs: 61.3296. Time: 526.8803 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #52: GFLOPs: 395.6745. Time: 81.6665 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #53: GFLOPs: 1152.0205. Time: 28.0493 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #54: GFLOPs: 30.3792. Time: 1063.6661 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #55: GFLOPs: 261.4707. Time: 123.5830 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #56: GFLOPs: 1155.7851. Time: 27.9579 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #57: GFLOPs: 432.8876. Time: 74.6460 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #58: GFLOPs: 727.6877. Time: 44.4055 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #59: GFLOPs: 394.5540. Time: 81.8984 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #60: GFLOPs: 352.4416. Time: 91.6843 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #61: GFLOPs: 423.7530. Time: 76.2551 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #62: GFLOPs: 687.7536. Time: 46.9839 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #63: GFLOPs: 16.6770. Time: 1937.6049 us. Best GFLOPs: 3301.0836
2024-03-21 12:23:20 [INFO] [task_scheduler.cc:131] [Task #151: fused_nn_conv2d_add_nn_relu_74] Trial #64: GFLOPs: 159.2022. Time: 202.9705 us. Best GFLOPs: 3301.0836
