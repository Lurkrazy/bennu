2024-03-21 19:46:24 [INFO] [task_scheduler.cc:160] Initializing Task #6: "fused_nn_conv2d_add_nn_relu_4"
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(72), T.int64(58), T.int64(58)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(72), T.int64(56), T.int64(56), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(72), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(72), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(98), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(125280)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(1740))
                                    v2 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused % T.int64(1740) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(30))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(648)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(2)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(72), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                    v_i = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(4) + j_3 * T.int64(2) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(4)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(72), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 24, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 2, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(98), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(125280)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(1740))
                                    v2 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused % T.int64(1740) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(30))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(648)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(2)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(72), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                    v_i = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(4) + j_3 * T.int64(2) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(4)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(72), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 24, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 2, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(98), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(125280)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(1740))
                                    v2 = T.axis.spatial(T.int64(58), ax0_ax1_ax2_ax3_fused % T.int64(1740) // T.int64(30))
                                    v3 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(30))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(648)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(72), ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(2)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(72), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                    v_i = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(4) + j_3 * T.int64(2) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(4)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(72), b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(56), b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 24, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 2, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 7, 1, 2, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 19:52:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 19:52:53 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 19:52:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 496 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 19:52:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1002 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 19:52:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1496 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 19:52:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1994 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 19:52:58 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-03-21 19:53:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 136 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 19:53:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 19:53:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 19:53:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 19:53:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9986  0.9980  0.9978  0.9976  0.9976  0.9974  0.9970  0.9963  0.9947  0.9947  0.9938  0.9930  0.9928  0.9913  0.9906  0.9894
[17 : 32]:	0.9882  0.9879  0.9862  0.9851  0.9844  0.9839  0.9839  0.9827  0.9818  0.9813  0.9784  0.9784  0.9778  0.9772  0.9768  0.9767
[33 : 48]:	0.9765  0.9758  0.9757  0.9755  0.9749  0.9743  0.9739  0.9734  0.9733  0.9722  0.9722  0.9718  0.9717  0.9702  0.9689  0.9681
[49 : 64]:	0.9666  0.9659  0.9656  0.9649  0.9646  0.9631  0.9628  0.9607  0.9602  0.9599  0.9594  0.9592  0.9580  0.9576  0.9551  0.9536
2024-03-21 19:53:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 19:53:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #1: GFLOPs: 307.9232. Time: 14.6655 us. Best GFLOPs: 307.9232
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #2: GFLOPs: 547.1952. Time: 8.2527 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #3: GFLOPs: 204.2647. Time: 22.1078 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #4: GFLOPs: 63.5712. Time: 71.0359 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #5: GFLOPs: 51.8392. Time: 87.1124 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #6: GFLOPs: 242.0373. Time: 18.6576 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #7: GFLOPs: 202.4355. Time: 22.3076 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #8: GFLOPs: 444.3421. Time: 10.1630 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #9: GFLOPs: 325.8601. Time: 13.8582 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #10: GFLOPs: 229.9613. Time: 19.6374 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #11: GFLOPs: 140.2693. Time: 32.1941 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #12: GFLOPs: 78.9310. Time: 57.2125 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #13: GFLOPs: 334.0748. Time: 13.5175 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #14: GFLOPs: 117.9633. Time: 38.2817 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #15: GFLOPs: 226.1711. Time: 19.9665 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #16: GFLOPs: 436.2130. Time: 10.3524 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #17: GFLOPs: 541.3103. Time: 8.3424 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #18: GFLOPs: 467.5693. Time: 9.6581 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #19: GFLOPs: 276.9865. Time: 16.3035 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #20: GFLOPs: 42.8365. Time: 105.4205 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #21: GFLOPs: 225.8524. Time: 19.9947 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #22: GFLOPs: 521.6658. Time: 8.6566 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #23: GFLOPs: 203.9917. Time: 22.1374 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #24: GFLOPs: 309.2765. Time: 14.6013 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #25: GFLOPs: 318.9229. Time: 14.1597 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #26: GFLOPs: 352.1713. Time: 12.8229 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #27: GFLOPs: 466.8495. Time: 9.6730 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #28: GFLOPs: 154.2385. Time: 29.2783 us. Best GFLOPs: 547.1952
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #29: GFLOPs: 787.5399. Time: 5.7341 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #30: GFLOPs: 59.9785. Time: 75.2909 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #31: GFLOPs: 223.8875. Time: 20.1701 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #32: GFLOPs: 140.6152. Time: 32.1149 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #33: GFLOPs: 145.4933. Time: 31.0381 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #34: GFLOPs: 122.5281. Time: 36.8555 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #35: GFLOPs: 598.4039. Time: 7.5465 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #36: GFLOPs: 473.3491. Time: 9.5402 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #37: GFLOPs: 161.8435. Time: 27.9025 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #38: GFLOPs: 268.4078. Time: 16.8245 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #39: GFLOPs: 97.1311. Time: 46.4922 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #40: GFLOPs: 216.8896. Time: 20.8209 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #41: GFLOPs: 44.0152. Time: 102.5973 us. Best GFLOPs: 787.5399
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #42: GFLOPs: 829.7997. Time: 5.4421 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #43: GFLOPs: 359.8333. Time: 12.5498 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #44: GFLOPs: 198.5231. Time: 22.7472 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #45: GFLOPs: 287.2157. Time: 15.7228 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #46: GFLOPs: 694.8438. Time: 6.4991 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #47: GFLOPs: 528.1782. Time: 8.5498 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #48: GFLOPs: 806.9777. Time: 5.5960 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #49: GFLOPs: 285.0117. Time: 15.8444 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #50: GFLOPs: 399.3788. Time: 11.3072 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #51: GFLOPs: 237.5279. Time: 19.0118 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #52: GFLOPs: 450.3045. Time: 10.0284 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #53: GFLOPs: 167.2456. Time: 27.0012 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #54: GFLOPs: 564.3205. Time: 8.0023 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #55: GFLOPs: 105.6521. Time: 42.7425 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #56: GFLOPs: 307.8064. Time: 14.6710 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #57: GFLOPs: 630.3510. Time: 7.1640 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #58: GFLOPs: 487.6731. Time: 9.2600 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #59: GFLOPs: 147.8048. Time: 30.5527 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #60: GFLOPs: 132.6305. Time: 34.0483 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #61: GFLOPs: 817.3978. Time: 5.5247 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #62: GFLOPs: 309.6471. Time: 14.5838 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #63: GFLOPs: 351.9261. Time: 12.8318 us. Best GFLOPs: 829.7997
2024-03-21 20:21:51 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #64: GFLOPs: 318.0212. Time: 14.1998 us. Best GFLOPs: 829.7997
2024-03-21 20:35:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:35:10 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 20:35:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 440 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 880 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1322 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1762 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 2201 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 2639 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 3076 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:16 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-03-21 20:35:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:28 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 20:35:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0100  1.0008  0.9930  0.9922  0.9922  0.9912  0.9860  0.9857  0.9857  0.9857  0.9834  0.9818  0.9808  0.9804  0.9803  0.9800
[17 : 32]:	0.9797  0.9797  0.9795  0.9783  0.9783  0.9780  0.9775  0.9775  0.9775  0.9724  0.9724  0.9719  0.9719  0.9719  0.9714  0.9709
[33 : 48]:	0.9691  0.9691  0.9678  0.9650  0.9621  0.9613  0.9613  0.9613  0.9595  0.9578  0.9577  0.9576  0.9576  0.9541  0.9541  0.9527
[49 : 64]:	0.9524  0.9521  0.9511  0.9500  0.9499  0.9493  0.9485  0.9482  0.9473  0.9468  0.9446  0.9430  0.9429  0.9427  0.9426  0.9334
2024-03-21 20:35:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:35:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #65: GFLOPs: 795.2009. Time: 5.6789 us. Best GFLOPs: 829.7997
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #66: GFLOPs: 784.4258. Time: 5.7569 us. Best GFLOPs: 829.7997
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #67: GFLOPs: 906.4439. Time: 4.9819 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #68: GFLOPs: 829.9261. Time: 5.4413 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #69: GFLOPs: 829.8371. Time: 5.4418 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #70: GFLOPs: 900.5342. Time: 5.0146 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #71: GFLOPs: 806.5130. Time: 5.5992 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #72: GFLOPs: 825.9436. Time: 5.4675 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #73: GFLOPs: 825.3800. Time: 5.4712 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #74: GFLOPs: 897.9565. Time: 5.0290 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #75: GFLOPs: 805.5119. Time: 5.6062 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #76: GFLOPs: 806.1934. Time: 5.6014 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #77: GFLOPs: 877.6544. Time: 5.1454 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #78: GFLOPs: 797.6546. Time: 5.6614 us. Best GFLOPs: 906.4439
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #79: GFLOPs: 951.0467. Time: 4.7483 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #80: GFLOPs: 840.5069. Time: 5.3728 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #81: GFLOPs: 795.3847. Time: 5.6776 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #82: GFLOPs: 795.3909. Time: 5.6775 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #83: GFLOPs: 840.6080. Time: 5.3721 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #84: GFLOPs: 809.1166. Time: 5.5812 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #85: GFLOPs: 789.6226. Time: 5.7190 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #86: GFLOPs: 784.8887. Time: 5.7535 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #87: GFLOPs: 788.1446. Time: 5.7297 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #88: GFLOPs: 788.1882. Time: 5.7294 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #89: GFLOPs: 797.0749. Time: 5.6655 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #90: GFLOPs: 839.4780. Time: 5.3793 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #91: GFLOPs: 818.4007. Time: 5.5179 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #92: GFLOPs: 818.3366. Time: 5.5183 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #93: GFLOPs: 839.6704. Time: 5.3781 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #94: GFLOPs: 829.8289. Time: 5.4419 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #95: GFLOPs: 820.6219. Time: 5.5029 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #96: GFLOPs: 896.0111. Time: 5.0399 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #97: GFLOPs: 814.5615. Time: 5.5439 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #98: GFLOPs: 816.1395. Time: 5.5332 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #99: GFLOPs: 803.5965. Time: 5.6195 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #100: GFLOPs: 821.9985. Time: 5.4937 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #101: GFLOPs: 793.1816. Time: 5.6933 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #102: GFLOPs: 854.3403. Time: 5.2858 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #103: GFLOPs: 854.3161. Time: 5.2859 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #104: GFLOPs: 781.8607. Time: 5.7758 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #105: GFLOPs: 802.2409. Time: 5.6290 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #106: GFLOPs: 867.3706. Time: 5.2064 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #107: GFLOPs: 785.0061. Time: 5.7526 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #108: GFLOPs: 707.0991. Time: 6.3864 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #109: GFLOPs: 707.0892. Time: 6.3865 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #110: GFLOPs: 828.7202. Time: 5.4492 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #111: GFLOPs: 822.2375. Time: 5.4921 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #112: GFLOPs: 823.1634. Time: 5.4860 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #113: GFLOPs: 681.4577. Time: 6.6267 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #114: GFLOPs: 866.7977. Time: 5.2098 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #115: GFLOPs: 814.2823. Time: 5.5458 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #116: GFLOPs: 585.4375. Time: 7.7136 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #117: GFLOPs: 791.0387. Time: 5.7087 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #118: GFLOPs: 844.6020. Time: 5.3467 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #119: GFLOPs: 872.4679. Time: 5.1759 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #120: GFLOPs: 805.0879. Time: 5.6091 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #121: GFLOPs: 800.0846. Time: 5.6442 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #122: GFLOPs: 808.5945. Time: 5.5848 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #123: GFLOPs: 692.8378. Time: 6.5179 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #124: GFLOPs: 932.6184. Time: 4.8421 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #125: GFLOPs: 825.6465. Time: 5.4695 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #126: GFLOPs: 284.6449. Time: 15.8648 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #127: GFLOPs: 588.5358. Time: 7.6730 us. Best GFLOPs: 951.0467
2024-03-21 20:36:15 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #128: GFLOPs: 102.9903. Time: 43.8472 us. Best GFLOPs: 951.0467
2024-03-21 21:07:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 21:07:53 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 21:07:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:07:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 801 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:07:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1200 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:07:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1602 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:07:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 2002 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:07:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 2405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:07:58 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-03-21 21:08:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:08:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 57 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:08:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 49 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:08:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 37 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:08:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9647  0.9612  0.9578  0.9527  0.9495  0.9487  0.9427  0.9332  0.9305  0.9305  0.9305  0.9297  0.9244  0.9238  0.9209  0.9192
[17 : 32]:	0.9178  0.9173  0.9148  0.9142  0.9138  0.9136  0.9132  0.9132  0.9131  0.9104  0.9102  0.9084  0.9083  0.9082  0.9082  0.9082
[33 : 48]:	0.9078  0.9074  0.9071  0.9063  0.9052  0.9043  0.9029  0.9017  0.9014  0.9012  0.9004  0.9002  0.8976  0.8970  0.8970  0.8970
[49 : 64]:	0.8968  0.8966  0.8941  0.8940  0.8938  0.8936  0.8934  0.8932  0.8924  0.8894  0.8890  0.8878  0.8876  0.8864  0.8858  0.8858
2024-03-21 21:08:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 21:08:15 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #129: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(336), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(56) // T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(28) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(336), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) % T.int64(224) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(58), dj_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(336), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), dj_0)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(36))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(56) // T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(28) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(56) // T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(28) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 6, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[28, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 336], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 336, 2], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #130: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(126), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(896), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(112) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(28) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(896), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(3584) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(300))
                                        v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(3584) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(300) // T.int64(30))
                                        v3 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(3584) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(30))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2400))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(896), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1792) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1792) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1792) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(896) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(112) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(28) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(112) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(28) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[9, 1, 8, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 28, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 896, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 896, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #131: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(441), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(16) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(100))
                                        v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(100) // T.int64(10))
                                        v3 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(10))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(800))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(384) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(16) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[9, 1, 8, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 128, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #132: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(168), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(28) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1) // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1) % T.int64(224) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(58), dj_0 + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), dj_0)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(36))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(28) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(12) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_2_c_2_i_2_j_2_fused % T.int64(28) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 6, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[28, 1, 1, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 168], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 168, 2], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #133: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(441), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(16) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(100))
                                        v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(100) // T.int64(10))
                                        v3 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(10))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(800))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(16) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[9, 1, 8, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 128, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:121] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #134: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(72), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(56), T.int64(56)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(72), T.int64(58), T.int64(58)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(72), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(441), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(16) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(100))
                                        v2 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(100) // T.int64(10))
                                        v3 = T.axis.spatial(T.int64(58), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(10))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(800))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(57) and T.int64(1) <= v3 and v3 < T.int64(57), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(72))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(16) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(72), b_0_c_0_i_0_j_0_fused // T.int64(49) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(49) // T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(16) // T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[9, 1, 8, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 4, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 128, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 128, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #135: GFLOPs: 1087.7814. Time: 4.1514 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #136: GFLOPs: 857.3245. Time: 5.2674 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #137: GFLOPs: 877.3585. Time: 5.1471 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #138: GFLOPs: 873.4104. Time: 5.1704 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #139: GFLOPs: 872.8140. Time: 5.1739 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #140: GFLOPs: 876.1366. Time: 5.1543 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #141: GFLOPs: 917.4355. Time: 4.9222 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #142: GFLOPs: 824.6132. Time: 5.4763 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #143: GFLOPs: 901.4966. Time: 5.0093 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #144: GFLOPs: 948.6272. Time: 4.7604 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #145: GFLOPs: 846.4472. Time: 5.3351 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #146: GFLOPs: 851.7216. Time: 5.3020 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #147: GFLOPs: 829.5244. Time: 5.4439 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #148: GFLOPs: 896.7783. Time: 5.0356 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #149: GFLOPs: 828.1918. Time: 5.4526 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #150: GFLOPs: 828.9942. Time: 5.4474 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #151: GFLOPs: 917.0445. Time: 4.9243 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #152: GFLOPs: 916.9787. Time: 4.9247 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #153: GFLOPs: 871.7145. Time: 5.1804 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #154: GFLOPs: 970.3998. Time: 4.6536 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #155: GFLOPs: 1031.0962. Time: 4.3796 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #156: GFLOPs: 870.5694. Time: 5.1872 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #157: GFLOPs: 896.4253. Time: 5.0376 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #158: GFLOPs: 872.3918. Time: 5.1764 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #159: GFLOPs: 872.4722. Time: 5.1759 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #160: GFLOPs: 872.8278. Time: 5.1738 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #161: GFLOPs: 934.9359. Time: 4.8301 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #162: GFLOPs: 871.6039. Time: 5.1811 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #163: GFLOPs: 858.7074. Time: 5.2589 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #164: GFLOPs: 863.0381. Time: 5.2325 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #165: GFLOPs: 829.6181. Time: 5.4433 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #166: GFLOPs: 915.8042. Time: 4.9310 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #167: GFLOPs: 865.7921. Time: 5.2158 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #168: GFLOPs: 1072.0602. Time: 4.2123 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #169: GFLOPs: 828.5811. Time: 5.4501 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #170: GFLOPs: 922.3834. Time: 4.8958 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #171: GFLOPs: 963.0752. Time: 4.6890 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #172: GFLOPs: 953.6281. Time: 4.7354 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #173: GFLOPs: 819.7356. Time: 5.5089 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #174: GFLOPs: 853.6790. Time: 5.2899 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #175: GFLOPs: 853.6684. Time: 5.2899 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #176: GFLOPs: 853.5583. Time: 5.2906 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #177: GFLOPs: 896.3769. Time: 5.0379 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #178: GFLOPs: 911.7431. Time: 4.9530 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #179: GFLOPs: 927.3829. Time: 4.8694 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #180: GFLOPs: 855.6762. Time: 5.2775 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #181: GFLOPs: 849.5943. Time: 5.3153 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #182: GFLOPs: 1025.0104. Time: 4.4057 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #183: GFLOPs: 872.2881. Time: 5.1770 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #184: GFLOPs: 757.0919. Time: 5.9647 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #185: GFLOPs: 823.7612. Time: 5.4820 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #186: GFLOPs: 1077.2663. Time: 4.1919 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #187: GFLOPs: 922.2357. Time: 4.8966 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #188: GFLOPs: 709.1734. Time: 6.3678 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #189: GFLOPs: 953.1846. Time: 4.7376 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #190: GFLOPs: 384.0968. Time: 11.7570 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #191: GFLOPs: 152.7660. Time: 29.5605 us. Best GFLOPs: 1087.7814
2024-03-21 21:08:53 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #192: GFLOPs: 63.7654. Time: 70.8196 us. Best GFLOPs: 1087.7814
2024-03-21 21:44:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 21:44:43 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 21:44:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:44:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:44:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1201 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:44:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1599 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:44:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1992 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:44:47 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 21:44:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 47 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:44:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 37 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:44:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 41 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:45:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 40 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 21:45:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9784  0.9766  0.9723  0.9476  0.9451  0.9388  0.9352  0.9276  0.9256  0.9231  0.9190  0.9165  0.9098  0.9057  0.9049  0.9044
[17 : 32]:	0.9042  0.9031  0.9031  0.8982  0.8970  0.8945  0.8920  0.8842  0.8801  0.8772  0.8772  0.8748  0.8699  0.8690  0.8688  0.8681
[33 : 48]:	0.8668  0.8661  0.8660  0.8649  0.8648  0.8647  0.8645  0.8638  0.8631  0.8626  0.8619  0.8619  0.8619  0.8614  0.8613  0.8608
[49 : 64]:	0.8607  0.8607  0.8605  0.8597  0.8597  0.8597  0.8591  0.8591  0.8590  0.8590  0.8590  0.8590  0.8590  0.8585  0.8578  0.8565
2024-03-21 21:45:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 21:45:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #193: GFLOPs: 1178.3872. Time: 3.8322 us. Best GFLOPs: 1178.3872
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #194: GFLOPs: 1168.0269. Time: 3.8662 us. Best GFLOPs: 1178.3872
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #195: GFLOPs: 1082.5054. Time: 4.1717 us. Best GFLOPs: 1178.3872
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #196: GFLOPs: 1226.2414. Time: 3.6827 us. Best GFLOPs: 1226.2414
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #197: GFLOPs: 1257.1834. Time: 3.5920 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #198: GFLOPs: 1063.7217. Time: 4.2453 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #199: GFLOPs: 1114.0177. Time: 4.0537 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #200: GFLOPs: 984.2106. Time: 4.5883 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #201: GFLOPs: 1039.8480. Time: 4.3428 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #202: GFLOPs: 1082.2728. Time: 4.1726 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #203: GFLOPs: 978.4872. Time: 4.6151 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #204: GFLOPs: 1037.9274. Time: 4.3508 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #205: GFLOPs: 1034.4174. Time: 4.3656 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #206: GFLOPs: 1197.3784. Time: 3.7714 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #207: GFLOPs: 1031.4068. Time: 4.3783 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #208: GFLOPs: 1097.8866. Time: 4.1132 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #209: GFLOPs: 984.1688. Time: 4.5885 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #210: GFLOPs: 1112.2663. Time: 4.0600 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #211: GFLOPs: 983.0334. Time: 4.5938 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #212: GFLOPs: 1112.2891. Time: 4.0600 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #213: GFLOPs: 1195.1024. Time: 3.7786 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #214: GFLOPs: 983.4329. Time: 4.5919 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #215: GFLOPs: 1050.0343. Time: 4.3007 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #216: GFLOPs: 1084.1209. Time: 4.1654 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #217: GFLOPs: 784.6176. Time: 5.7555 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #218: GFLOPs: 918.3853. Time: 4.9172 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #219: GFLOPs: 918.5960. Time: 4.9160 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #220: GFLOPs: 1087.7009. Time: 4.1517 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #221: GFLOPs: 961.9817. Time: 4.6943 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #222: GFLOPs: 978.1802. Time: 4.6166 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #223: GFLOPs: 925.9664. Time: 4.8769 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #224: GFLOPs: 952.0687. Time: 4.7432 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #225: GFLOPs: 1217.6017. Time: 3.7088 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #226: GFLOPs: 976.5102. Time: 4.6245 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #227: GFLOPs: 966.4067. Time: 4.6728 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #228: GFLOPs: 1191.4747. Time: 3.7901 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #229: GFLOPs: 930.6529. Time: 4.8523 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #230: GFLOPs: 1101.9979. Time: 4.0979 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #231: GFLOPs: 915.5694. Time: 4.9323 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #232: GFLOPs: 896.1428. Time: 5.0392 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #233: GFLOPs: 893.2769. Time: 5.0554 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #234: GFLOPs: 835.6776. Time: 5.4038 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #235: GFLOPs: 963.7420. Time: 4.6857 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #236: GFLOPs: 963.8307. Time: 4.6853 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #237: GFLOPs: 963.6730. Time: 4.6861 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #238: GFLOPs: 877.8764. Time: 5.1440 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #239: GFLOPs: 917.4567. Time: 4.9221 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #240: GFLOPs: 924.8466. Time: 4.8828 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #241: GFLOPs: 889.7297. Time: 5.0755 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #242: GFLOPs: 889.7237. Time: 5.0756 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #243: GFLOPs: 926.3697. Time: 4.8748 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #244: GFLOPs: 954.2195. Time: 4.7325 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #245: GFLOPs: 954.2634. Time: 4.7323 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #246: GFLOPs: 954.1411. Time: 4.7329 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #247: GFLOPs: 917.1959. Time: 4.9235 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #248: GFLOPs: 917.3188. Time: 4.9229 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #249: GFLOPs: 1223.4097. Time: 3.6912 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #250: GFLOPs: 1223.2779. Time: 3.6916 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #251: GFLOPs: 969.8104. Time: 4.6564 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #252: GFLOPs: 969.7647. Time: 4.6566 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #253: GFLOPs: 969.6151. Time: 4.6574 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #254: GFLOPs: 331.9650. Time: 13.6034 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #255: GFLOPs: 140.6522. Time: 32.1064 us. Best GFLOPs: 1257.1834
2024-03-21 21:45:48 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #256: GFLOPs: 118.2479. Time: 38.1896 us. Best GFLOPs: 1257.1834
2024-03-21 22:12:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 22:12:40 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 22:12:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 22:12:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 800 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 22:12:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1198 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 22:12:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 1598 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 22:12:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 2000 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 22:12:44 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-03-21 22:12:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 56 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 22:12:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 50 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 22:12:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 50 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 22:12:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed536c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c5858)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b8078)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdd71e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed538858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7d6aa8)]: 53 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed8032b8)]: 0 failure(s)
2024-03-21 22:13:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9835  0.9835  0.9821  0.9808  0.9760  0.9758  0.9756  0.9752  0.9752  0.9737  0.9736  0.9733  0.9695  0.9682  0.9663  0.9645
[17 : 32]:	0.9636  0.9635  0.9608  0.9603  0.9585  0.9524  0.9516  0.9502  0.9435  0.9406  0.9400  0.9396  0.9389  0.9385  0.9379  0.9372
[33 : 48]:	0.9351  0.9346  0.9336  0.9325  0.9284  0.9284  0.9283  0.9281  0.9269  0.9245  0.9242  0.9240  0.9240  0.9238  0.9234  0.9231
[49 : 64]:	0.9231  0.9227  0.9223  0.9214  0.9214  0.9205  0.9179  0.9175  0.9173  0.9167  0.9162  0.9132  0.9132  0.9119  0.9119  0.9112
2024-03-21 22:13:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 22:13:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #257: GFLOPs: 1139.1452. Time: 3.9642 us. Best GFLOPs: 1257.1834
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #258: GFLOPs: 1265.0433. Time: 3.5697 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #259: GFLOPs: 1197.9669. Time: 3.7696 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #260: GFLOPs: 1206.4361. Time: 3.7431 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #261: GFLOPs: 1192.7875. Time: 3.7860 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #262: GFLOPs: 1219.7504. Time: 3.7023 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #263: GFLOPs: 1205.2790. Time: 3.7467 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #264: GFLOPs: 1193.3083. Time: 3.7843 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #265: GFLOPs: 1180.4145. Time: 3.8256 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #266: GFLOPs: 1230.0098. Time: 3.6714 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #267: GFLOPs: 1222.0886. Time: 3.6952 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #268: GFLOPs: 1263.5773. Time: 3.5739 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #269: GFLOPs: 1206.2617. Time: 3.7437 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #270: GFLOPs: 1181.6261. Time: 3.8217 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #271: GFLOPs: 1196.7338. Time: 3.7735 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #272: GFLOPs: 1204.2776. Time: 3.7498 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #273: GFLOPs: 1232.2219. Time: 3.6648 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #274: GFLOPs: 1196.7743. Time: 3.7733 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #275: GFLOPs: 1218.2080. Time: 3.7070 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #276: GFLOPs: 1173.9100. Time: 3.8468 us. Best GFLOPs: 1265.0433
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #277: GFLOPs: 1269.7888. Time: 3.5564 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #278: GFLOPs: 1205.0773. Time: 3.7473 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #279: GFLOPs: 1222.4563. Time: 3.6941 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #280: GFLOPs: 1200.2298. Time: 3.7625 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #281: GFLOPs: 1197.4770. Time: 3.7711 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #282: GFLOPs: 1246.2906. Time: 3.6234 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #283: GFLOPs: 1200.2243. Time: 3.7625 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #284: GFLOPs: 1132.2169. Time: 3.9885 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #285: GFLOPs: 1045.5832. Time: 4.3190 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #286: GFLOPs: 1044.0564. Time: 4.3253 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #287: GFLOPs: 1223.7249. Time: 3.6902 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #288: GFLOPs: 1170.6181. Time: 3.8577 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #289: GFLOPs: 1212.8869. Time: 3.7232 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #290: GFLOPs: 1214.6603. Time: 3.7178 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #291: GFLOPs: 1167.0586. Time: 3.8694 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #292: GFLOPs: 1189.9775. Time: 3.7949 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #293: GFLOPs: 1157.2125. Time: 3.9023 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #294: GFLOPs: 1164.3299. Time: 3.8785 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #295: GFLOPs: 1140.2106. Time: 3.9605 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #296: GFLOPs: 1169.8406. Time: 3.8602 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #297: GFLOPs: 1179.6812. Time: 3.8280 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #298: GFLOPs: 1252.3752. Time: 3.6058 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #299: GFLOPs: 1169.1362. Time: 3.8625 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #300: GFLOPs: 1171.8530. Time: 3.8536 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #301: GFLOPs: 1176.7844. Time: 3.8374 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #302: GFLOPs: 1123.8558. Time: 4.0182 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #303: GFLOPs: 1162.8506. Time: 3.8834 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #304: GFLOPs: 1144.7997. Time: 3.9447 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #305: GFLOPs: 1138.0140. Time: 3.9682 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #306: GFLOPs: 1160.5109. Time: 3.8913 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #307: GFLOPs: 1180.8472. Time: 3.8242 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #308: GFLOPs: 1165.2920. Time: 3.8753 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #309: GFLOPs: 1166.9671. Time: 3.8697 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #310: GFLOPs: 1082.7901. Time: 4.1706 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #311: GFLOPs: 1219.1728. Time: 3.7040 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #312: GFLOPs: 1041.5098. Time: 4.3359 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #313: GFLOPs: 1165.1557. Time: 3.8757 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #314: GFLOPs: 1226.3925. Time: 3.6822 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #315: GFLOPs: 1197.3182. Time: 3.7716 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #316: GFLOPs: 1200.1829. Time: 3.7626 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #317: GFLOPs: 1204.4218. Time: 3.7494 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #318: GFLOPs: 194.2101. Time: 23.2523 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #319: GFLOPs: 466.4944. Time: 9.6804 us. Best GFLOPs: 1269.7888
2024-03-21 22:13:41 [INFO] [task_scheduler.cc:131] [Task #6: fused_nn_conv2d_add_nn_relu_4] Trial #320: GFLOPs: 280.7252. Time: 16.0863 us. Best GFLOPs: 1269.7888
