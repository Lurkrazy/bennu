2024-03-21 13:42:33 [INFO] [task_scheduler.cc:160] Initializing Task #199: "fused_nn_contrib_conv2d_winograd_without_weight_transform_3"
2024-03-21 13:42:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(58), T.int64(58)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(58), T.int64(58)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(32), T.int64(196), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(32), T.int64(196), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
2024-03-21 13:42:33 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(24), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(896))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(2048))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(2), T.int64(1), T.int64(4), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(8) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(64) + ci_1 * T.int64(32) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(8) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 8, 1, 1, 4])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[2, 2, 32])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
2024-03-21 13:42:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(24), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(896))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(2048))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(2), T.int64(1), T.int64(4), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(8) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(64) + ci_1 * T.int64(32) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(8) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 8, 1, 1, 4])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[2, 2, 32])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-03-21 13:42:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(24), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(896))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(2048))
                                    v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(2048) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(32), T.int64(2), T.int64(1), T.int64(4), T.int64(7)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(8) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + p_3 * T.int64(7) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(64) + ci_1 * T.int64(32) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(4), T.int64(14)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(8) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused % T.int64(8) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[6, 1, 1, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 8, 1, 1, 4])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[2, 2, 32])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-03-21 15:35:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:35:21 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 15:35:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 503 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:35:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 1005 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:35:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 1507 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:35:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 2008 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:35:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 2512 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:35:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 3014 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:35:44 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 15:35:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 148 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:36:10 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:36:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:36:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:36:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9988  0.9982  0.9979  0.9979  0.9968  0.9968  0.9962  0.9947  0.9944  0.9943  0.9940  0.9930  0.9927  0.9922  0.9921  0.9919
[17 : 32]:	0.9903  0.9895  0.9892  0.9891  0.9889  0.9885  0.9867  0.9864  0.9847  0.9845  0.9843  0.9839  0.9837  0.9829  0.9828  0.9820
[33 : 48]:	0.9807  0.9801  0.9797  0.9794  0.9790  0.9783  0.9782  0.9782  0.9778  0.9775  0.9769  0.9768  0.9752  0.9745  0.9730  0.9729
[49 : 64]:	0.9724  0.9719  0.9714  0.9709  0.9706  0.9703  0.9697  0.9695  0.9686  0.9676  0.9673  0.9670  0.9670  0.9665  0.9659  0.9650
2024-03-21 15:36:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:36:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #1: GFLOPs: 3887.6348. Time: 42.7465 us. Best GFLOPs: 3887.6348
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #2: GFLOPs: 6800.7494. Time: 24.4360 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #3: GFLOPs: 658.3109. Time: 252.4383 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #4: GFLOPs: 460.1602. Time: 361.1414 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #5: GFLOPs: 194.7196. Time: 853.4471 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #6: GFLOPs: 1358.7557. Time: 122.3052 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #7: GFLOPs: 1908.9517. Time: 87.0545 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #8: GFLOPs: 1765.2642. Time: 94.1405 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #9: GFLOPs: 3506.3398. Time: 47.3950 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #10: GFLOPs: 1686.2119. Time: 98.5540 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #11: GFLOPs: 310.1238. Time: 535.8599 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #12: GFLOPs: 2619.4006. Time: 63.4431 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #13: GFLOPs: 3019.8024. Time: 55.0311 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #14: GFLOPs: 1871.3496. Time: 88.8038 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #15: GFLOPs: 1383.9321. Time: 120.0803 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #16: GFLOPs: 951.8479. Time: 174.5898 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #17: GFLOPs: 1547.5276. Time: 107.3861 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #18: GFLOPs: 1899.9318. Time: 87.4678 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #19: GFLOPs: 318.9682. Time: 521.0015 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #20: GFLOPs: 708.8610. Time: 234.4365 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #21: GFLOPs: 2366.4235. Time: 70.2253 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #22: GFLOPs: 70.7324. Time: 2349.4609 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #23: GFLOPs: 86.9763. Time: 1910.6681 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #24: GFLOPs: 3020.4618. Time: 55.0190 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #25: GFLOPs: 1769.8713. Time: 93.8955 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #26: GFLOPs: 2728.8576. Time: 60.8983 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #27: GFLOPs: 32.9319. Time: 5046.2654 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #28: GFLOPs: 98.9552. Time: 1679.3749 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #29: GFLOPs: 4667.2152. Time: 35.6064 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #30: GFLOPs: 3656.2775. Time: 45.4514 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #31: GFLOPs: 1922.7059. Time: 86.4318 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #32: GFLOPs: 3905.7127. Time: 42.5487 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #33: GFLOPs: 3135.9341. Time: 52.9931 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #34: GFLOPs: 120.1231. Time: 1383.4380 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #35: GFLOPs: 1316.5193. Time: 126.2290 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #36: GFLOPs: 152.5622. Time: 1089.2800 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #37: GFLOPs: 301.7800. Time: 550.6757 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #38: GFLOPs: 390.0211. Time: 426.0869 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #39: GFLOPs: 886.7913. Time: 187.3980 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #40: GFLOPs: 104.1399. Time: 1595.7658 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #41: GFLOPs: 415.7088. Time: 399.7580 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #42: GFLOPs: 1356.9318. Time: 122.4696 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #43: GFLOPs: 18.5128. Time: 8976.6400 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #44: GFLOPs: 2521.4074. Time: 65.9088 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #45: GFLOPs: 1455.6798. Time: 114.1617 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #46: GFLOPs: 101.7636. Time: 1633.0286 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #47: GFLOPs: 247.9547. Time: 670.2148 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #48: GFLOPs: 837.6022. Time: 198.4032 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #49: GFLOPs: 255.4724. Time: 650.4927 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #50: GFLOPs: 978.0798. Time: 169.9073 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #51: GFLOPs: 445.4702. Time: 373.0505 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #52: GFLOPs: 2010.5758. Time: 82.6544 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #53: GFLOPs: 849.4579. Time: 195.6341 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #54: GFLOPs: 294.6922. Time: 563.9203 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #55: GFLOPs: 134.1006. Time: 1239.2407 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #56: GFLOPs: 75.9807. Time: 2187.1729 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #57: GFLOPs: 1006.7943. Time: 165.0614 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #58: GFLOPs: 2679.8341. Time: 62.0124 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #59: GFLOPs: 2552.4600. Time: 65.1070 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #60: GFLOPs: 223.3990. Time: 743.8838 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #61: GFLOPs: 2737.0636. Time: 60.7158 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #62: GFLOPs: 600.9548. Time: 276.5315 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #63: GFLOPs: 3616.7757. Time: 45.9478 us. Best GFLOPs: 6800.7494
2024-03-21 15:50:41 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #64: GFLOPs: 317.1439. Time: 523.9985 us. Best GFLOPs: 6800.7494
2024-03-21 15:58:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:58:09 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 15:58:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 439 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:58:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 872 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:58:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 1305 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:58:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 1740 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:58:23 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-03-21 15:58:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:58:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 163 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:59:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 156 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:59:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 15:59:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5943  1.5895  1.5859  1.5183  1.5176  1.4571  1.4477  1.4448  1.4406  1.4341  1.4323  1.4174  1.4162  1.4104  1.4089  1.3998
[17 : 32]:	1.3978  1.3952  1.3939  1.3939  1.3869  1.3869  1.3730  1.3691  1.3662  1.3413  1.3399  1.3334  1.3317  1.3304  1.3269  1.3193
[33 : 48]:	1.3158  1.3134  1.3079  1.3022  1.2977  1.2902  1.2898  1.2776  1.2752  1.2721  1.2600  1.2597  1.2552  1.2530  1.2449  1.2446
[49 : 64]:	1.2254  1.2210  1.2104  1.2028  1.1992  1.1976  1.1965  1.1946  1.1901  1.1894  1.1816  1.1811  1.1803  1.1775  1.1654  1.1630
2024-03-21 15:59:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:59:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #65: GFLOPs: 2656.3913. Time: 62.5597 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #66: GFLOPs: 2613.9471. Time: 63.5755 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #67: GFLOPs: 2273.2300. Time: 73.1043 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #68: GFLOPs: 1933.6496. Time: 85.9426 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #69: GFLOPs: 1890.0451. Time: 87.9254 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #70: GFLOPs: 4332.1738. Time: 38.3602 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #71: GFLOPs: 3096.2994. Time: 53.6715 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #72: GFLOPs: 1836.1657. Time: 90.5054 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #73: GFLOPs: 1835.7335. Time: 90.5267 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #74: GFLOPs: 3477.6000. Time: 47.7867 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #75: GFLOPs: 1826.6160. Time: 90.9786 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #76: GFLOPs: 2967.8293. Time: 55.9948 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #77: GFLOPs: 3107.0677. Time: 53.4854 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #78: GFLOPs: 2310.1420. Time: 71.9362 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #79: GFLOPs: 3659.3903. Time: 45.4127 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #80: GFLOPs: 310.6770. Time: 534.9058 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #81: GFLOPs: 2220.5283. Time: 74.8394 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #82: GFLOPs: 1697.2833. Time: 97.9111 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #83: GFLOPs: 317.7747. Time: 522.9583 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #84: GFLOPs: 320.7043. Time: 518.1811 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #85: GFLOPs: 1858.3355. Time: 89.4257 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #86: GFLOPs: 1858.3514. Time: 89.4249 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #87: GFLOPs: 3072.1853. Time: 54.0927 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #88: GFLOPs: 2238.7776. Time: 74.2293 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #89: GFLOPs: 2684.1434. Time: 61.9128 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #90: GFLOPs: 3160.8049. Time: 52.5761 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #91: GFLOPs: 2804.8530. Time: 59.2483 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #92: GFLOPs: 2168.5407. Time: 76.6335 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #93: GFLOPs: 3364.2213. Time: 49.3971 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #94: GFLOPs: 3465.8112. Time: 47.9492 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #95: GFLOPs: 204.2376. Time: 813.6745 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #96: GFLOPs: 1935.9548. Time: 85.8403 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #97: GFLOPs: 439.8104. Time: 377.8512 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #98: GFLOPs: 3839.2572. Time: 43.2852 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #99: GFLOPs: 440.9265. Time: 376.8948 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #100: GFLOPs: 430.3044. Time: 386.1985 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #101: GFLOPs: 431.5978. Time: 385.0411 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #102: GFLOPs: 4173.7992. Time: 39.8157 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #103: GFLOPs: 434.9503. Time: 382.0733 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #104: GFLOPs: 436.6213. Time: 380.6111 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #105: GFLOPs: 331.2847. Time: 501.6318 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #106: GFLOPs: 479.9308. Time: 346.2643 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #107: GFLOPs: 477.4970. Time: 348.0292 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #108: GFLOPs: 1280.8327. Time: 129.7460 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #109: GFLOPs: 416.7685. Time: 398.7415 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #110: GFLOPs: 1407.4880. Time: 118.0706 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #111: GFLOPs: 5981.9636. Time: 27.7807 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #112: GFLOPs: 413.8188. Time: 401.5838 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #113: GFLOPs: 742.6375. Time: 223.7739 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #114: GFLOPs: 1117.0122. Time: 148.7745 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #115: GFLOPs: 2992.9477. Time: 55.5248 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #116: GFLOPs: 2733.1212. Time: 60.8033 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #117: GFLOPs: 4284.3745. Time: 38.7881 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #118: GFLOPs: 393.6812. Time: 422.1256 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #119: GFLOPs: 3120.9429. Time: 53.2477 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #120: GFLOPs: 5061.4945. Time: 32.8328 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #121: GFLOPs: 2613.8534. Time: 63.5777 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #122: GFLOPs: 1108.1174. Time: 149.9687 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #123: GFLOPs: 2874.3573. Time: 57.8157 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #124: GFLOPs: 3005.5479. Time: 55.2921 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #125: GFLOPs: 1443.4301. Time: 115.1306 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #126: GFLOPs: 271.9809. Time: 611.0095 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #127: GFLOPs: 1036.4496. Time: 160.3386 us. Best GFLOPs: 6800.7494
2024-03-21 16:00:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #128: GFLOPs: 2347.1099. Time: 70.8032 us. Best GFLOPs: 6800.7494
2024-03-21 16:12:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 16:12:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 16:12:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:12:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 797 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:12:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 1201 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:12:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 1602 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:13:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 2000 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:13:01 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-03-21 16:13:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:13:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:13:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:13:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:14:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.1106  2.0256  2.0256  1.9999  1.9999  1.9999  1.9409  1.9409  1.9396  1.9081  1.9078  1.8982  1.8906  1.8647  1.8532  1.8448
[17 : 32]:	1.8154  1.8093  1.7955  1.7955  1.7847  1.7847  1.7731  1.7333  1.7241  1.7151  1.7121  1.7009  1.6954  1.6943  1.6863  1.6844
[33 : 48]:	1.6800  1.6779  1.6730  1.6709  1.6667  1.6667  1.6651  1.6560  1.6527  1.6461  1.6453  1.6393  1.6393  1.6363  1.6362  1.6359
[49 : 64]:	1.6299  1.6179  1.6019  1.6019  1.5530  1.5499  1.5467  1.5467  1.5413  1.5344  1.5322  1.5285  1.5233  1.5228  1.5219  1.5213
2024-03-21 16:14:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 16:14:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #129: GFLOPs: 2033.4263. Time: 81.7256 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #130: GFLOPs: 2079.7210. Time: 79.9063 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #131: GFLOPs: 2075.7338. Time: 80.0598 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #132: GFLOPs: 2094.5851. Time: 79.3393 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #133: GFLOPs: 2094.2844. Time: 79.3507 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #134: GFLOPs: 2086.0431. Time: 79.6642 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #135: GFLOPs: 2025.9649. Time: 82.0265 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #136: GFLOPs: 2014.9853. Time: 82.4735 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #137: GFLOPs: 2010.4016. Time: 82.6615 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #138: GFLOPs: 353.0342. Time: 470.7275 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #139: GFLOPs: 346.7558. Time: 479.2505 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #140: GFLOPs: 346.9943. Time: 478.9212 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #141: GFLOPs: 473.2727. Time: 351.1357 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #142: GFLOPs: 374.9754. Time: 443.1836 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #143: GFLOPs: 352.2474. Time: 471.7790 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #144: GFLOPs: 5417.5348. Time: 30.6750 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #145: GFLOPs: 213.0037. Time: 780.1881 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #146: GFLOPs: 237.1753. Time: 700.6753 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #147: GFLOPs: 1119.4280. Time: 148.4534 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #148: GFLOPs: 1119.4570. Time: 148.4496 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #149: GFLOPs: 129.7307. Time: 1280.9833 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #150: GFLOPs: 129.8489. Time: 1279.8177 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #151: GFLOPs: 2742.3746. Time: 60.5982 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #152: GFLOPs: 133.2092. Time: 1247.5336 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #153: GFLOPs: 247.2157. Time: 672.2182 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #154: GFLOPs: 296.8149. Time: 559.8874 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #155: GFLOPs: 1842.3810. Time: 90.2001 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #156: GFLOPs: 581.4188. Time: 285.8231 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #157: GFLOPs: 1749.2584. Time: 95.0019 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #158: GFLOPs: 2224.9242. Time: 74.6915 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #159: GFLOPs: 5548.8882. Time: 29.9489 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #160: GFLOPs: 916.4776. Time: 181.3278 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #161: GFLOPs: 2225.2022. Time: 74.6822 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #162: GFLOPs: 2003.2063. Time: 82.9585 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #163: GFLOPs: 2140.0526. Time: 77.6537 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #164: GFLOPs: 5667.6173. Time: 29.3215 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #165: GFLOPs: 1995.9924. Time: 83.2583 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #166: GFLOPs: 2033.5818. Time: 81.7193 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #167: GFLOPs: 5678.9100. Time: 29.2632 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #168: GFLOPs: 2155.9410. Time: 77.0814 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #169: GFLOPs: 5593.7282. Time: 29.7088 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #170: GFLOPs: 2967.3855. Time: 56.0031 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #171: GFLOPs: 4279.5054. Time: 38.8323 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #172: GFLOPs: 1995.9646. Time: 83.2594 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #173: GFLOPs: 2012.2803. Time: 82.5844 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #174: GFLOPs: 2047.1777. Time: 81.1766 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #175: GFLOPs: 2968.2409. Time: 55.9870 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #176: GFLOPs: 732.3877. Time: 226.9057 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #177: GFLOPs: 5741.8081. Time: 28.9426 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #178: GFLOPs: 5402.1216. Time: 30.7625 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #179: GFLOPs: 2011.0428. Time: 82.6352 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #180: GFLOPs: 2012.1466. Time: 82.5899 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #181: GFLOPs: 1321.3153. Time: 125.7708 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #182: GFLOPs: 5781.5834. Time: 28.7435 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #183: GFLOPs: 2070.6005. Time: 80.2583 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #184: GFLOPs: 2068.3059. Time: 80.3474 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #185: GFLOPs: 1965.4342. Time: 84.5528 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #186: GFLOPs: 5354.0796. Time: 31.0386 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #187: GFLOPs: 3891.6872. Time: 42.7020 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #188: GFLOPs: 5663.3854. Time: 29.3434 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #189: GFLOPs: 198.3670. Time: 837.7546 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #190: GFLOPs: 4136.7222. Time: 40.1726 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #191: GFLOPs: 1253.2805. Time: 132.5983 us. Best GFLOPs: 6800.7494
2024-03-21 16:15:26 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #192: GFLOPs: 174.1305. Time: 954.3583 us. Best GFLOPs: 6800.7494
2024-03-21 16:29:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 16:29:13 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 16:29:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:29:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:29:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 1210 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:29:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 1613 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:29:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 2014 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:29:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 2412 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:29:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 2816 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:29:35 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-03-21 16:29:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:30:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:30:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:30:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f760ea38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f94f8d48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efdab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa0700b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3b276b8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6778008)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f833caf8)]: 0 failure(s)
2024-03-21 16:30:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.9022  1.7549  1.7044  1.6981  1.6841  1.6621  1.6422  1.6125  1.6038  1.6036  1.6019  1.5924  1.5884  1.5607  1.5584  1.5538
[17 : 32]:	1.5493  1.5327  1.5278  1.5250  1.5250  1.5187  1.4885  1.4857  1.4829  1.4797  1.4536  1.4535  1.4460  1.4328  1.4292  1.4268
[33 : 48]:	1.4239  1.4123  1.4003  1.3882  1.3813  1.3807  1.3779  1.3771  1.3763  1.3758  1.3747  1.3711  1.3631  1.3629  1.3566  1.3560
[49 : 64]:	1.3555  1.3543  1.3534  1.3528  1.3517  1.3515  1.3511  1.3498  1.3490  1.3474  1.3472  1.3431  1.3375  1.3335  1.3329  1.3327
2024-03-21 16:30:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 16:30:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #193: GFLOPs: 2766.0269. Time: 60.0800 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #194: GFLOPs: 4513.6025. Time: 36.8182 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #195: GFLOPs: 3715.4687. Time: 44.7273 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #196: GFLOPs: 1306.7138. Time: 127.1762 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #197: GFLOPs: 2868.9811. Time: 57.9240 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #198: GFLOPs: 2781.0849. Time: 59.7547 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #199: GFLOPs: 2980.9934. Time: 55.7475 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #200: GFLOPs: 2729.1838. Time: 60.8911 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #201: GFLOPs: 2765.4953. Time: 60.0916 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #202: GFLOPs: 2465.1809. Time: 67.4121 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #203: GFLOPs: 2742.2993. Time: 60.5998 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #204: GFLOPs: 3016.6317. Time: 55.0889 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #205: GFLOPs: 2978.6733. Time: 55.7909 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #206: GFLOPs: 6617.7398. Time: 25.1117 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #207: GFLOPs: 2777.5968. Time: 59.8297 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #208: GFLOPs: 2367.6448. Time: 70.1891 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #209: GFLOPs: 3282.4737. Time: 50.6273 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #210: GFLOPs: 3579.2685. Time: 46.4293 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #211: GFLOPs: 2762.9351. Time: 60.1472 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #212: GFLOPs: 4280.6150. Time: 38.8222 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #213: GFLOPs: 4278.3300. Time: 38.8429 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #214: GFLOPs: 2131.9906. Time: 77.9473 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #215: GFLOPs: 3583.0118. Time: 46.3808 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #216: GFLOPs: 3557.5976. Time: 46.7121 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #217: GFLOPs: 3354.6413. Time: 49.5382 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #218: GFLOPs: 3665.1612. Time: 45.3412 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #219: GFLOPs: 3558.4291. Time: 46.7012 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #220: GFLOPs: 3122.8928. Time: 53.2144 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #221: GFLOPs: 3683.2609. Time: 45.1184 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #222: GFLOPs: 2471.5716. Time: 67.2378 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #223: GFLOPs: 3683.1729. Time: 45.1195 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #224: GFLOPs: 3577.8147. Time: 46.4482 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #225: GFLOPs: 3381.2654. Time: 49.1481 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #226: GFLOPs: 3577.9055. Time: 46.4470 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #227: GFLOPs: 3421.4189. Time: 48.5713 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #228: GFLOPs: 3524.5389. Time: 47.1503 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #229: GFLOPs: 3618.3148. Time: 45.9283 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #230: GFLOPs: 3007.7720. Time: 55.2512 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #231: GFLOPs: 5537.0188. Time: 30.0131 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #232: GFLOPs: 2522.6606. Time: 65.8760 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #233: GFLOPs: 2849.7903. Time: 58.3141 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #234: GFLOPs: 4572.9050. Time: 36.3408 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #235: GFLOPs: 3671.7073. Time: 45.2604 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #236: GFLOPs: 5690.6116. Time: 29.2030 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #237: GFLOPs: 4466.0595. Time: 37.2102 us. Best GFLOPs: 6800.7494
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #238: GFLOPs: 6970.8058. Time: 23.8398 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #239: GFLOPs: 2568.0609. Time: 64.7114 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #240: GFLOPs: 2360.4340. Time: 70.4035 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #241: GFLOPs: 5444.8575. Time: 30.5211 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #242: GFLOPs: 2713.4580. Time: 61.2440 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #243: GFLOPs: 4183.9393. Time: 39.7192 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #244: GFLOPs: 1994.9640. Time: 83.3012 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #245: GFLOPs: 4085.2330. Time: 40.6789 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #246: GFLOPs: 3256.4724. Time: 51.0316 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #247: GFLOPs: 5640.7522. Time: 29.4611 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #248: GFLOPs: 2114.1417. Time: 78.6054 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #249: GFLOPs: 6877.7906. Time: 24.1623 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #250: GFLOPs: 3582.3077. Time: 46.3899 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #251: GFLOPs: 5736.6307. Time: 28.9687 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #252: GFLOPs: 4084.4436. Time: 40.6868 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #253: GFLOPs: 2269.0628. Time: 73.2386 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #254: GFLOPs: 323.5308. Time: 513.6541 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #255: GFLOPs: 5139.0377. Time: 32.3374 us. Best GFLOPs: 6970.8058
2024-03-21 16:31:40 [INFO] [task_scheduler.cc:131] [Task #199: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #256: GFLOPs: 697.1206. Time: 238.3848 us. Best GFLOPs: 6970.8058
