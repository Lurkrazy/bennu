2024-03-21 07:30:25 [INFO] [task_scheduler.cc:160] Initializing Task #133: "fused_nn_conv2d_add_nn_relu_65"
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(480), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28), T.int64(480), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1344), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(5), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(480), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0 * T.int64(96) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[96, 1, 1, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 14, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 4, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 3, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1344), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(5), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[96, 1, 1, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 14, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 4, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 3, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(480), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(480), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1344), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(5), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(480), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[96, 1, 1, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 14, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 4, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 3, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:40:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:40:32 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:40:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1208168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f0c0bda8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ea6ab388)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eb33f8c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f624a4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e5ba99f8)]: 492 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4888c18)]: 0 failure(s)
2024-03-21 08:40:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1208168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f0c0bda8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ea6ab388)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eb33f8c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f624a4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e5ba99f8)]: 974 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4888c18)]: 0 failure(s)
2024-03-21 08:40:33 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-03-21 08:40:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1208168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f0c0bda8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ea6ab388)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eb33f8c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f624a4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e5ba99f8)]: 135 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4888c18)]: 0 failure(s)
2024-03-21 08:40:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1208168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f0c0bda8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ea6ab388)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eb33f8c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f624a4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e5ba99f8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4888c18)]: 0 failure(s)
2024-03-21 08:40:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1208168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f0c0bda8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ea6ab388)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eb33f8c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f624a4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e5ba99f8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4888c18)]: 0 failure(s)
2024-03-21 08:40:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1208168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f0c0bda8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ea6ab388)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eb33f8c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f624a4d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8e5ba99f8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4888c18)]: 0 failure(s)
2024-03-21 08:40:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9996  0.9990  0.9990  0.9989  0.9986  0.9973  0.9962  0.9958  0.9957  0.9951  0.9944  0.9943  0.9932  0.9927  0.9921
[17 : 32]:	0.9920  0.9918  0.9912  0.9909  0.9907  0.9906  0.9904  0.9902  0.9895  0.9878  0.9865  0.9848  0.9846  0.9846  0.9845  0.9842
[33 : 48]:	0.9825  0.9825  0.9823  0.9820  0.9815  0.9812  0.9811  0.9794  0.9790  0.9789  0.9785  0.9782  0.9780  0.9772  0.9757  0.9749
[49 : 64]:	0.9746  0.9746  0.9744  0.9743  0.9740  0.9734  0.9725  0.9709  0.9692  0.9689  0.9685  0.9683  0.9676  0.9673  0.9649  0.9642
2024-03-21 08:40:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:40:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #1: GFLOPs: 73.8382. Time: 1961.1520 us. Best GFLOPs: 73.8382
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #2: GFLOPs: 824.4662. Time: 175.6384 us. Best GFLOPs: 824.4662
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #3: GFLOPs: 996.0958. Time: 145.3755 us. Best GFLOPs: 996.0958
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #4: GFLOPs: 1925.5359. Time: 75.2040 us. Best GFLOPs: 1925.5359
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #5: GFLOPs: 744.6108. Time: 194.4747 us. Best GFLOPs: 1925.5359
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #6: GFLOPs: 570.5402. Time: 253.8085 us. Best GFLOPs: 1925.5359
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #7: GFLOPs: 3141.3452. Time: 46.0974 us. Best GFLOPs: 3141.3452
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #8: GFLOPs: 1964.0658. Time: 73.7287 us. Best GFLOPs: 3141.3452
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #9: GFLOPs: 1488.3097. Time: 97.2969 us. Best GFLOPs: 3141.3452
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #10: GFLOPs: 1733.1964. Time: 83.5496 us. Best GFLOPs: 3141.3452
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #11: GFLOPs: 36.4270. Time: 3975.2898 us. Best GFLOPs: 3141.3452
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #12: GFLOPs: 2496.8359. Time: 57.9966 us. Best GFLOPs: 3141.3452
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #13: GFLOPs: 4787.7908. Time: 30.2453 us. Best GFLOPs: 4787.7908
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #14: GFLOPs: 93.6402. Time: 1546.4291 us. Best GFLOPs: 4787.7908
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #15: GFLOPs: 4228.6656. Time: 34.2444 us. Best GFLOPs: 4787.7908
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #16: GFLOPs: 27.9751. Time: 5176.3199 us. Best GFLOPs: 4787.7908
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #17: GFLOPs: 2246.9184. Time: 64.4473 us. Best GFLOPs: 4787.7908
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #18: GFLOPs: 933.5908. Time: 155.1086 us. Best GFLOPs: 4787.7908
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #19: GFLOPs: 2083.1533. Time: 69.5138 us. Best GFLOPs: 4787.7908
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #20: GFLOPs: 618.0954. Time: 234.2809 us. Best GFLOPs: 4787.7908
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #21: GFLOPs: 746.3422. Time: 194.0235 us. Best GFLOPs: 4787.7908
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #22: GFLOPs: 4882.1360. Time: 29.6608 us. Best GFLOPs: 4882.1360
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #23: GFLOPs: 118.9089. Time: 1217.8059 us. Best GFLOPs: 4882.1360
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #24: GFLOPs: 1105.0722. Time: 131.0393 us. Best GFLOPs: 4882.1360
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #25: GFLOPs: 5088.8571. Time: 28.4559 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #26: GFLOPs: 1074.5567. Time: 134.7606 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #27: GFLOPs: 1773.3680. Time: 81.6570 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #28: GFLOPs: 1427.3605. Time: 101.4516 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #29: GFLOPs: 2707.8519. Time: 53.4771 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #30: GFLOPs: 1505.1672. Time: 96.2072 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #31: GFLOPs: 106.7918. Time: 1355.9835 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #32: GFLOPs: 30.4593. Time: 4754.1528 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #33: GFLOPs: 40.6487. Time: 3562.4253 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #34: GFLOPs: 1425.9824. Time: 101.5496 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #35: GFLOPs: 2616.6742. Time: 55.3405 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #36: GFLOPs: 21.1681. Time: 6840.8661 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #37: GFLOPs: 319.8135. Time: 452.7887 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #38: GFLOPs: 288.8314. Time: 501.3581 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #39: GFLOPs: 2242.3569. Time: 64.5785 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #40: GFLOPs: 3818.5494. Time: 37.9222 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #41: GFLOPs: 990.8858. Time: 146.1399 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #42: GFLOPs: 1031.1452. Time: 140.4341 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #43: GFLOPs: 2152.1469. Time: 67.2853 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #44: GFLOPs: 1330.2749. Time: 108.8557 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #45: GFLOPs: 1300.2756. Time: 111.3671 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #46: GFLOPs: 118.1175. Time: 1225.9653 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #47: GFLOPs: 197.2939. Time: 733.9706 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #48: GFLOPs: 4196.3739. Time: 34.5079 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #49: GFLOPs: 3389.6643. Time: 42.7204 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #50: GFLOPs: 317.2285. Time: 456.4784 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #51: GFLOPs: 143.1711. Time: 1011.4328 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #52: GFLOPs: 811.4767. Time: 178.4499 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #53: GFLOPs: 3007.9500. Time: 48.1417 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #54: GFLOPs: 803.3555. Time: 180.2539 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #55: GFLOPs: 1558.7833. Time: 92.8981 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #56: GFLOPs: 108.6327. Time: 1333.0055 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #57: GFLOPs: 73.1483. Time: 1979.6486 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #58: GFLOPs: 3220.2440. Time: 44.9680 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #59: GFLOPs: 959.5016. Time: 150.9200 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #60: GFLOPs: 711.5086. Time: 203.5224 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #61: GFLOPs: 1027.9605. Time: 140.8692 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #62: GFLOPs: 1329.1097. Time: 108.9511 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #63: GFLOPs: 1702.7071. Time: 85.0457 us. Best GFLOPs: 5088.8571
2024-03-21 09:11:34 [INFO] [task_scheduler.cc:131] [Task #133: fused_nn_conv2d_add_nn_relu_65] Trial #64: GFLOPs: 75.9574. Time: 1906.4368 us. Best GFLOPs: 5088.8571
