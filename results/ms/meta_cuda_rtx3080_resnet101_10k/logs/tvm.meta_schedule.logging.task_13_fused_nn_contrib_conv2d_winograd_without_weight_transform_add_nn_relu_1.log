2024-03-22 00:52:26 [INFO] [task_scheduler.cc:160] Initializing Task #13: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1"
2024-03-22 00:52:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(30), T.int64(30)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(30), T.int64(30)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(196), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps, v_p % T.int64(14) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps, v_p % T.int64(14) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(128), T.int64(196), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(128), T.int64(196), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(128), T.int64(196), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-22 00:52:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-22 00:52:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(25088))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(25088) // T.int64(6272))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(6272) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(16384))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(16384) // T.int64(4096))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(49), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(128) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(128) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(98) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(32) + ci_1 * T.int64(16) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(98)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(128) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(128) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(98) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(392), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 128, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 1, 49, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[4, 2, 16])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-03-22 00:52:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(25088))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(25088) // T.int64(6272))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(6272) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(16384))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(16384) // T.int64(4096))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(49), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(128) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(128) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(98) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(32) + ci_1 * T.int64(16) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(98)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(128) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(128) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(98) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 128, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 1, 49, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[4, 2, 16])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-03-22 00:52:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(25088))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(25088) // T.int64(6272))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(6272) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(16384))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(16384) // T.int64(4096))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(4096) // T.int64(128))
                                    v3 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(49), T.int64(16), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(128) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(128) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(98) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(32) + ci_1 * T.int64(16) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(98)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(128) + ax0)
                                v1 = T.axis.spatial(T.int64(4), ax1)
                                v2 = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(128) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused * T.int64(98) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 128, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 1, 49, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[4, 2, 16])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-03-22 01:07:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 01:07:35 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-22 01:07:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 497 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 01:07:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 992 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 01:07:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 1487 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 01:07:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 1979 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 01:07:47 [INFO] [evolutionary_search.cc:723] Sampled 69 candidate(s)
2024-03-22 01:07:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 01:08:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 01:08:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 01:08:14 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 01:08:15 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9991  0.9985  0.9985  0.9984  0.9984  0.9982  0.9974  0.9970  0.9968  0.9957  0.9957  0.9946  0.9932  0.9927  0.9920
[17 : 32]:	0.9910  0.9909  0.9907  0.9866  0.9850  0.9849  0.9840  0.9838  0.9824  0.9820  0.9813  0.9801  0.9794  0.9792  0.9785  0.9779
[33 : 48]:	0.9779  0.9768  0.9766  0.9756  0.9753  0.9741  0.9740  0.9734  0.9721  0.9718  0.9712  0.9711  0.9702  0.9698  0.9691  0.9682
[49 : 64]:	0.9671  0.9670  0.9665  0.9662  0.9653  0.9642  0.9640  0.9635  0.9630  0.9619  0.9598  0.9593  0.9587  0.9579  0.9578  0.9577
2024-03-22 01:08:15 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 01:08:15 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #1: GFLOPs: 967.3066. Time: 131.3396 us. Best GFLOPs: 967.3066
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #2: GFLOPs: 60.2034. Time: 2110.2719 us. Best GFLOPs: 967.3066
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #3: GFLOPs: 51.1375. Time: 2484.3941 us. Best GFLOPs: 967.3066
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #4: GFLOPs: 17.7872. Time: 7142.5364 us. Best GFLOPs: 967.3066
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #5: GFLOPs: 181.0269. Time: 701.8052 us. Best GFLOPs: 967.3066
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #6: GFLOPs: 26.9250. Time: 4718.5076 us. Best GFLOPs: 967.3066
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #7: GFLOPs: 2856.6112. Time: 44.4742 us. Best GFLOPs: 2856.6112
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #8: GFLOPs: 128.6038. Time: 987.8843 us. Best GFLOPs: 2856.6112
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #9: GFLOPs: 636.1489. Time: 199.7105 us. Best GFLOPs: 2856.6112
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #10: GFLOPs: 2521.2768. Time: 50.3894 us. Best GFLOPs: 2856.6112
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #11: GFLOPs: 117.3479. Time: 1082.6412 us. Best GFLOPs: 2856.6112
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #12: GFLOPs: 2193.7257. Time: 57.9132 us. Best GFLOPs: 2856.6112
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #13: GFLOPs: 104.1244. Time: 1220.1327 us. Best GFLOPs: 2856.6112
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #14: GFLOPs: 642.6393. Time: 197.6935 us. Best GFLOPs: 2856.6112
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #15: GFLOPs: 147.3492. Time: 862.2080 us. Best GFLOPs: 2856.6112
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #16: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(256) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(60) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(196), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(32) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(98) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(32) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(98) * T.int64(2) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(128)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(13)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(128), ci_0)
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3136))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(512))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(512) // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(128), ci_0)
                                    v3 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(128))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(32) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(98) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(32) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(98) * T.int64(2) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(2), T.int64(4), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(32) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(98) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_2_nu_2_co_2_p_2_fused % T.int64(32) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(98) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 32, 1, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 98, 1, 2, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[128, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #17: GFLOPs: 1573.7604. Time: 80.7274 us. Best GFLOPs: 2856.6112
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #18: GFLOPs: 2991.5025. Time: 42.4688 us. Best GFLOPs: 2991.5025
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #19: GFLOPs: 807.5730. Time: 157.3178 us. Best GFLOPs: 2991.5025
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #20: GFLOPs: 1867.6407. Time: 68.0247 us. Best GFLOPs: 2991.5025
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #21: GFLOPs: 2453.6744. Time: 51.7777 us. Best GFLOPs: 2991.5025
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #22: GFLOPs: 189.9891. Time: 668.6997 us. Best GFLOPs: 2991.5025
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #23: GFLOPs: 5462.0826. Time: 23.2596 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #24: GFLOPs: 13.6975. Time: 9275.0924 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #25: GFLOPs: 50.0688. Time: 2537.4208 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #26: GFLOPs: 704.4321. Time: 180.3518 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #27: GFLOPs: 5002.4406. Time: 25.3967 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #28: GFLOPs: 75.3808. Time: 1685.3835 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #29: GFLOPs: 2397.1657. Time: 52.9983 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #30: GFLOPs: 716.9512. Time: 177.2026 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #31: GFLOPs: 16.1026. Time: 7889.7622 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #32: GFLOPs: 165.4577. Time: 767.8436 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #33: GFLOPs: 2454.7819. Time: 51.7543 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #34: GFLOPs: 126.6155. Time: 1003.3971 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #35: GFLOPs: 574.0009. Time: 221.3335 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #36: GFLOPs: 2234.2038. Time: 56.8639 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #37: GFLOPs: 57.6059. Time: 2205.4289 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #38: GFLOPs: 17.5675. Time: 7231.8534 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:121] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #39: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(128)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(49) * T.int64(8) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(4) + p_3_init * T.int64(4) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(64)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1568))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1568) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(196))
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) % T.int64(256) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused * T.int64(32) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1) % T.int64(32))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(98) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1024))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(49) * T.int64(8) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(4) + p_3 * T.int64(4) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(2) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(8), T.int64(4)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(4) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(4) // T.int64(2) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(128), eps_0_nu_0_co_0_p_0_fused * T.int64(32) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused // T.int64(49) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(49) * T.int64(4) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(128), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 2, 2, 4, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 49, 1, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[64, 1, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136, l137 = sch.split(loop=l134, factors=[None, 98, 4], preserve_unit_iters=True)
sch.vectorize(loop=l137)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 98], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b149)
l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #40: GFLOPs: 209.8849. Time: 605.3111 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #41: GFLOPs: 1819.9068. Time: 69.8089 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #42: GFLOPs: 687.1875. Time: 184.8777 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #43: GFLOPs: 32.5451. Time: 3903.6850 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #44: GFLOPs: 3134.7741. Time: 40.5278 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #45: GFLOPs: 673.1568. Time: 188.7311 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #46: GFLOPs: 755.6766. Time: 168.1217 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #47: GFLOPs: 1935.2888. Time: 65.6469 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #48: GFLOPs: 699.7776. Time: 181.5514 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #49: GFLOPs: 3200.4867. Time: 39.6957 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #50: GFLOPs: 828.7334. Time: 153.3010 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #51: GFLOPs: 139.2416. Time: 912.4116 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #52: GFLOPs: 71.5654. Time: 1775.2387 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #53: GFLOPs: 34.4033. Time: 3692.8343 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #54: GFLOPs: 998.5976. Time: 127.2241 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #55: GFLOPs: 1261.4989. Time: 100.7101 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #56: GFLOPs: 3623.2141. Time: 35.0643 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #57: GFLOPs: 52.3499. Time: 2426.8555 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #58: GFLOPs: 1887.2427. Time: 67.3181 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #59: GFLOPs: 401.8632. Time: 316.1415 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #60: GFLOPs: 2238.3726. Time: 56.7580 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #61: GFLOPs: 595.2998. Time: 213.4145 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #62: GFLOPs: 2775.2723. Time: 45.7777 us. Best GFLOPs: 5462.0826
2024-03-22 01:24:21 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #63: GFLOPs: 3172.3864. Time: 40.0473 us. Best GFLOPs: 5462.0826
2024-03-22 02:01:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 02:01:28 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-03-22 02:01:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 427 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:01:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 864 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:01:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 1301 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:01:36 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-03-22 02:01:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:01:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:02:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:02:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:02:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8568  1.6743  1.5740  1.5477  1.5460  1.5442  1.5216  1.5003  1.4997  1.4537  1.4424  1.4358  1.4310  1.4214  1.4070  1.4034
[17 : 32]:	1.4009  1.4004  1.3923  1.3807  1.3716  1.3711  1.3671  1.3666  1.3589  1.3562  1.3519  1.3439  1.3412  1.3396  1.3380  1.3306
[33 : 48]:	1.3199  1.3182  1.3043  1.2832  1.2783  1.2726  1.2406  1.2242  1.2229  1.2113  1.2113  1.2103  1.2042  1.2004  1.1902  1.1816
[49 : 64]:	1.1647  1.1561  1.1525  1.1447  1.1443  1.1440  1.1404  1.1402  1.1401  1.1384  1.1381  1.1371  1.1370  1.1369  1.1300  1.1264
2024-03-22 02:02:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 02:02:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #64: GFLOPs: 1657.6003. Time: 76.6443 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #65: GFLOPs: 1783.5751. Time: 71.2309 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #66: GFLOPs: 2600.4317. Time: 48.8556 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #67: GFLOPs: 3907.2874. Time: 32.5150 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #68: GFLOPs: 2892.7589. Time: 43.9185 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #69: GFLOPs: 2472.5147. Time: 51.3832 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #70: GFLOPs: 4193.5373. Time: 30.2956 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #71: GFLOPs: 3334.2740. Time: 38.1029 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #72: GFLOPs: 3947.3522. Time: 32.1850 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #73: GFLOPs: 2575.7199. Time: 49.3243 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #74: GFLOPs: 2157.3234. Time: 58.8904 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #75: GFLOPs: 2736.6818. Time: 46.4232 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #76: GFLOPs: 2704.0719. Time: 46.9831 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #77: GFLOPs: 2592.3039. Time: 49.0088 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #78: GFLOPs: 1622.1853. Time: 78.3176 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #79: GFLOPs: 3785.4673. Time: 33.5614 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #80: GFLOPs: 3785.1225. Time: 33.5645 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #81: GFLOPs: 2554.3126. Time: 49.7377 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #82: GFLOPs: 1684.9224. Time: 75.4015 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #83: GFLOPs: 3680.8337. Time: 34.5155 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #84: GFLOPs: 2260.0788. Time: 56.2129 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #85: GFLOPs: 3403.9681. Time: 37.3228 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #86: GFLOPs: 2553.2535. Time: 49.7583 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #87: GFLOPs: 3831.5565. Time: 33.1577 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #88: GFLOPs: 2702.3876. Time: 47.0124 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #89: GFLOPs: 3496.1763. Time: 36.3385 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #90: GFLOPs: 1684.6802. Time: 75.4123 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #91: GFLOPs: 4402.9482. Time: 28.8547 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #92: GFLOPs: 3479.9502. Time: 36.5079 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #93: GFLOPs: 3540.7725. Time: 35.8808 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #94: GFLOPs: 3704.0935. Time: 34.2987 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #95: GFLOPs: 4391.8802. Time: 28.9274 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #96: GFLOPs: 3077.1484. Time: 41.2868 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #97: GFLOPs: 4836.1317. Time: 26.2701 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #98: GFLOPs: 3862.3052. Time: 32.8937 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #99: GFLOPs: 3178.0068. Time: 39.9765 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #100: GFLOPs: 4525.1377. Time: 28.0755 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #101: GFLOPs: 3139.5802. Time: 40.4658 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #102: GFLOPs: 3944.5755. Time: 32.2077 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #103: GFLOPs: 1871.2494. Time: 67.8935 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #104: GFLOPs: 1690.2036. Time: 75.1659 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #105: GFLOPs: 1481.7699. Time: 85.7391 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #106: GFLOPs: 4082.7346. Time: 31.1178 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #107: GFLOPs: 1628.8648. Time: 77.9964 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #108: GFLOPs: 2415.5032. Time: 52.5959 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #109: GFLOPs: 3867.0590. Time: 32.8533 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #110: GFLOPs: 1757.4506. Time: 72.2897 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #111: GFLOPs: 4043.9716. Time: 31.4161 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #112: GFLOPs: 3582.4062. Time: 35.4638 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #113: GFLOPs: 2848.2063. Time: 44.6055 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #114: GFLOPs: 2651.9644. Time: 47.9062 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #115: GFLOPs: 2575.4340. Time: 49.3298 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #116: GFLOPs: 2427.3947. Time: 52.3383 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #117: GFLOPs: 2408.3183. Time: 52.7528 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #118: GFLOPs: 1962.5261. Time: 64.7358 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #119: GFLOPs: 3446.8352. Time: 36.8586 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #120: GFLOPs: 2215.0435. Time: 57.3558 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #121: GFLOPs: 4299.5725. Time: 29.5484 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #122: GFLOPs: 2583.1476. Time: 49.1825 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #123: GFLOPs: 1517.4863. Time: 83.7211 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #124: GFLOPs: 1971.4332. Time: 64.4433 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #125: GFLOPs: 154.0412. Time: 824.7512 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #126: GFLOPs: 293.4674. Time: 432.9122 us. Best GFLOPs: 5462.0826
2024-03-22 02:03:07 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #127: GFLOPs: 85.8969. Time: 1479.0475 us. Best GFLOPs: 5462.0826
2024-03-22 02:49:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 02:49:09 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-22 02:49:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:49:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 796 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:49:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 1188 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:49:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 1588 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:49:19 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-03-22 02:49:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:49:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 61 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:49:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 66 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:49:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 64 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 02:49:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.9664  1.9664  1.9213  1.9129  1.8846  1.8830  1.8824  1.7541  1.7241  1.6944  1.6542  1.6409  1.6342  1.6319  1.6289  1.6183
[17 : 32]:	1.6174  1.6127  1.6064  1.5985  1.5967  1.5878  1.5852  1.5833  1.5788  1.5768  1.5647  1.5609  1.5602  1.5590  1.5549  1.5416
[33 : 48]:	1.5045  1.5021  1.4831  1.4674  1.4431  1.4377  1.4186  1.4131  1.3882  1.3867  1.3747  1.3687  1.3591  1.3568  1.3461  1.3329
[49 : 64]:	1.3269  1.3181  1.3089  1.3054  1.3029  1.3010  1.2975  1.2965  1.2907  1.2879  1.2874  1.2838  1.2833  1.2761  1.2755  1.2734
2024-03-22 02:49:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 02:49:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #128: GFLOPs: 2681.5078. Time: 47.3784 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #129: GFLOPs: 2830.0413. Time: 44.8918 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #130: GFLOPs: 2893.0355. Time: 43.9143 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #131: GFLOPs: 3017.0599. Time: 42.1091 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #132: GFLOPs: 2598.4020. Time: 48.8938 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #133: GFLOPs: 2825.5607. Time: 44.9630 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #134: GFLOPs: 2987.6918. Time: 42.5230 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #135: GFLOPs: 3191.9164. Time: 39.8023 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #136: GFLOPs: 3230.4600. Time: 39.3274 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #137: GFLOPs: 3276.7955. Time: 38.7713 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #138: GFLOPs: 3121.2361. Time: 40.7036 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #139: GFLOPs: 3067.4620. Time: 41.4172 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #140: GFLOPs: 3222.8540. Time: 39.4202 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #141: GFLOPs: 3602.2417. Time: 35.2685 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #142: GFLOPs: 1347.5191. Time: 94.2811 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #143: GFLOPs: 2827.2321. Time: 44.9364 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #144: GFLOPs: 4362.7013. Time: 29.1209 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #145: GFLOPs: 1257.1323. Time: 101.0599 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #146: GFLOPs: 3184.3997. Time: 39.8963 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #147: GFLOPs: 4046.7196. Time: 31.3947 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #148: GFLOPs: 3350.6626. Time: 37.9166 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #149: GFLOPs: 3907.3828. Time: 32.5143 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #150: GFLOPs: 3219.0484. Time: 39.4668 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #151: GFLOPs: 3338.4634. Time: 38.0551 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #152: GFLOPs: 3348.2277. Time: 37.9441 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #153: GFLOPs: 3209.2645. Time: 39.5871 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #154: GFLOPs: 2608.4098. Time: 48.7062 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #155: GFLOPs: 3125.8843. Time: 40.6431 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #156: GFLOPs: 3410.4492. Time: 37.2519 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #157: GFLOPs: 3410.9411. Time: 37.2465 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #158: GFLOPs: 3418.9599. Time: 37.1591 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #159: GFLOPs: 3293.0208. Time: 38.5803 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #160: GFLOPs: 2870.1510. Time: 44.2644 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #161: GFLOPs: 3400.3217. Time: 37.3628 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #162: GFLOPs: 1199.3941. Time: 105.9248 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #163: GFLOPs: 2877.3440. Time: 44.1538 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #164: GFLOPs: 3895.7083. Time: 32.6117 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #165: GFLOPs: 3017.8071. Time: 42.0987 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #166: GFLOPs: 3175.6402. Time: 40.0063 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #167: GFLOPs: 2832.4091. Time: 44.8543 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #168: GFLOPs: 2661.9382. Time: 47.7267 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #169: GFLOPs: 2438.4735. Time: 52.1005 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #170: GFLOPs: 3375.4367. Time: 37.6383 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #171: GFLOPs: 2661.3327. Time: 47.7376 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #172: GFLOPs: 2573.8874. Time: 49.3594 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #173: GFLOPs: 3356.0981. Time: 37.8552 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #174: GFLOPs: 4949.7050. Time: 25.6673 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #175: GFLOPs: 3433.4835. Time: 37.0020 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #176: GFLOPs: 4672.0986. Time: 27.1924 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #177: GFLOPs: 2061.9590. Time: 61.6140 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #178: GFLOPs: 2463.5567. Time: 51.5700 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #179: GFLOPs: 3348.9971. Time: 37.9354 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #180: GFLOPs: 3250.8326. Time: 39.0810 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #181: GFLOPs: 4431.2936. Time: 28.6701 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #182: GFLOPs: 2556.7626. Time: 49.6900 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #183: GFLOPs: 4511.1836. Time: 28.1624 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #184: GFLOPs: 4302.3699. Time: 29.5292 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #185: GFLOPs: 4587.8599. Time: 27.6917 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #186: GFLOPs: 3911.8921. Time: 32.4768 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #187: GFLOPs: 1552.3121. Time: 81.8428 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #188: GFLOPs: 4414.1042. Time: 28.7817 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #189: GFLOPs: 344.4586. Time: 368.8270 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #190: GFLOPs: 1446.1497. Time: 87.8510 us. Best GFLOPs: 5462.0826
2024-03-22 02:50:59 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #191: GFLOPs: 1384.7464. Time: 91.7465 us. Best GFLOPs: 5462.0826
2024-03-22 03:25:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 03:25:07 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-22 03:25:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 03:25:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 789 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 03:25:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 1180 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 03:25:15 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-03-22 03:25:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 63 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 03:25:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 03:25:41 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 03:25:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 03:25:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.3661  2.3646  2.2711  2.2274  2.1608  2.1103  2.0862  2.0649  2.0522  1.9792  1.9764  1.9382  1.8688  1.8473  1.8298  1.8296
[17 : 32]:	1.8236  1.8236  1.7075  1.7029  1.7028  1.6872  1.6867  1.6801  1.6792  1.6730  1.6657  1.6650  1.6626  1.6313  1.6185  1.6182
[33 : 48]:	1.6175  1.6136  1.6050  1.6042  1.5775  1.5626  1.5557  1.5549  1.5341  1.5171  1.5138  1.5076  1.5031  1.4988  1.4867  1.4848
[49 : 64]:	1.4838  1.4750  1.4613  1.4587  1.4509  1.4461  1.4446  1.4432  1.4406  1.4375  1.4345  1.4331  1.4295  1.4196  1.4109  1.4104
2024-03-22 03:25:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 03:25:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #192: GFLOPs: 28.4699. Time: 4462.4552 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #193: GFLOPs: 25.9709. Time: 4891.8370 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #194: GFLOPs: 400.2981. Time: 317.3775 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #195: GFLOPs: 400.0543. Time: 317.5710 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #196: GFLOPs: 400.2529. Time: 317.4134 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #197: GFLOPs: 28.2749. Time: 4493.2231 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #198: GFLOPs: 342.3619. Time: 371.0858 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #199: GFLOPs: 28.1517. Time: 4512.9016 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #200: GFLOPs: 25.9301. Time: 4899.5488 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #201: GFLOPs: 14.9341. Time: 8507.0616 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #202: GFLOPs: 35.6913. Time: 3559.5653 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #203: GFLOPs: 4096.8275. Time: 31.0107 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #204: GFLOPs: 4511.7844. Time: 28.1586 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #205: GFLOPs: 5135.7477. Time: 24.7375 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #206: GFLOPs: 5022.8299. Time: 25.2936 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #207: GFLOPs: 4163.5037. Time: 30.5141 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #208: GFLOPs: 5072.6775. Time: 25.0451 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #209: GFLOPs: 5023.2477. Time: 25.2915 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #210: GFLOPs: 451.9825. Time: 281.0853 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #211: GFLOPs: 5023.6303. Time: 25.2896 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #212: GFLOPs: 496.2530. Time: 256.0098 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #213: GFLOPs: 2659.4595. Time: 47.7712 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #214: GFLOPs: 2073.4440. Time: 61.2728 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #215: GFLOPs: 486.4142. Time: 261.1882 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #216: GFLOPs: 4931.9180. Time: 25.7599 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #217: GFLOPs: 5009.0399. Time: 25.3633 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #218: GFLOPs: 4022.3741. Time: 31.5847 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #219: GFLOPs: 4898.7528. Time: 25.9343 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #220: GFLOPs: 4884.2912. Time: 26.0111 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #221: GFLOPs: 2576.1675. Time: 49.3157 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #222: GFLOPs: 662.9878. Time: 191.6259 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #223: GFLOPs: 1163.3667. Time: 109.2051 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #224: GFLOPs: 493.3575. Time: 257.5123 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #225: GFLOPs: 1124.1209. Time: 113.0178 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #226: GFLOPs: 3849.9158. Time: 32.9996 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #227: GFLOPs: 2526.1633. Time: 50.2919 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #228: GFLOPs: 5008.1809. Time: 25.3676 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #229: GFLOPs: 1700.3151. Time: 74.7189 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #230: GFLOPs: 1706.0443. Time: 74.4680 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #231: GFLOPs: 872.0869. Time: 145.6800 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #232: GFLOPs: 3805.9110. Time: 33.3811 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #233: GFLOPs: 2323.6639. Time: 54.6747 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #234: GFLOPs: 3095.4021. Time: 41.0433 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #235: GFLOPs: 28.5948. Time: 4442.9580 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #236: GFLOPs: 26.0934. Time: 4868.8776 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #237: GFLOPs: 2629.9370. Time: 48.3075 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #238: GFLOPs: 1725.3573. Time: 73.6344 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #239: GFLOPs: 28.7440. Time: 4419.8957 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #240: GFLOPs: 1069.3861. Time: 118.8024 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #241: GFLOPs: 1666.8028. Time: 76.2212 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #242: GFLOPs: 475.5783. Time: 267.1393 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #243: GFLOPs: 613.9874. Time: 206.9190 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #244: GFLOPs: 4694.5441. Time: 27.0624 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #245: GFLOPs: 744.6897. Time: 170.6021 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #246: GFLOPs: 26.4290. Time: 4807.0460 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #247: GFLOPs: 725.2191. Time: 175.1824 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #248: GFLOPs: 28.3432. Time: 4482.4043 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #249: GFLOPs: 4124.6424. Time: 30.8016 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #250: GFLOPs: 28.3165. Time: 4486.6336 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #251: GFLOPs: 28.9940. Time: 4381.7852 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #252: GFLOPs: 25.2620. Time: 5029.1199 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #253: GFLOPs: 3215.5313. Time: 39.5100 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #254: GFLOPs: 1100.8279. Time: 115.4092 us. Best GFLOPs: 5462.0826
2024-03-22 03:26:49 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #255: GFLOPs: 472.6012. Time: 268.8221 us. Best GFLOPs: 5462.0826
2024-03-22 04:11:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 04:11:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-22 04:11:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 390 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 04:11:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 790 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 04:11:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 1189 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 04:11:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 1587 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 04:11:54 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-22 04:12:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 04:12:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 04:12:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 04:12:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c885dc85988)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c886e1176c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d871f08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c885d4ed328)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8868db8a68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c885e3ed5b8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c886e1179c8)]: 0 failure(s)
2024-03-22 04:12:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.9928  1.8350  1.7985  1.7318  1.7274  1.6784  1.6623  1.6493  1.6493  1.6466  1.6464  1.6458  1.6317  1.6244  1.6230  1.6171
[17 : 32]:	1.6169  1.6060  1.6038  1.6038  1.5996  1.5935  1.5933  1.5908  1.5735  1.5686  1.5644  1.5559  1.5541  1.5456  1.5440  1.5413
[33 : 48]:	1.5308  1.5173  1.5173  1.5138  1.5040  1.4894  1.4847  1.4807  1.4797  1.4796  1.4705  1.4696  1.4681  1.4656  1.4635  1.4615
[49 : 64]:	1.4575  1.4553  1.4539  1.4438  1.4437  1.4397  1.4331  1.4314  1.4257  1.4249  1.4235  1.4187  1.4130  1.4104  1.4069  1.4054
2024-03-22 04:12:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 04:12:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #256: GFLOPs: 3796.3923. Time: 33.4648 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #257: GFLOPs: 4700.7284. Time: 27.0268 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #258: GFLOPs: 3927.4152. Time: 32.3484 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #259: GFLOPs: 2870.2689. Time: 44.2626 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #260: GFLOPs: 3837.4412. Time: 33.1069 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #261: GFLOPs: 3742.5618. Time: 33.9462 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #262: GFLOPs: 4989.7607. Time: 25.4613 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #263: GFLOPs: 3828.8602. Time: 33.1811 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #264: GFLOPs: 3832.3537. Time: 33.1508 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #265: GFLOPs: 3904.8268. Time: 32.5355 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #266: GFLOPs: 4865.5083. Time: 26.1115 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #267: GFLOPs: 3375.4857. Time: 37.6377 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #268: GFLOPs: 688.0454. Time: 184.6472 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #269: GFLOPs: 707.5979. Time: 179.5450 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #270: GFLOPs: 801.9910. Time: 158.4128 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #271: GFLOPs: 4487.2968. Time: 28.3123 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #272: GFLOPs: 804.4967. Time: 157.9194 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #273: GFLOPs: 2858.7897. Time: 44.4404 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #274: GFLOPs: 355.3417. Time: 357.5309 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #275: GFLOPs: 355.2993. Time: 357.5735 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #276: GFLOPs: 3636.0742. Time: 34.9403 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #277: GFLOPs: 444.6994. Time: 285.6888 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #278: GFLOPs: 391.0658. Time: 324.8702 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #279: GFLOPs: 3165.6512. Time: 40.1325 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #280: GFLOPs: 2694.4647. Time: 47.1506 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #281: GFLOPs: 539.6285. Time: 235.4317 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #282: GFLOPs: 4314.4555. Time: 29.4465 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #283: GFLOPs: 3510.3137. Time: 36.1921 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #284: GFLOPs: 2695.4922. Time: 47.1326 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #285: GFLOPs: 359.9140. Time: 352.9889 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #286: GFLOPs: 3201.9468. Time: 39.6776 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #287: GFLOPs: 4562.5103. Time: 27.8456 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #288: GFLOPs: 4670.0736. Time: 27.2042 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #289: GFLOPs: 2687.5385. Time: 47.2721 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #290: GFLOPs: 4775.4413. Time: 26.6040 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #291: GFLOPs: 4875.9892. Time: 26.0554 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #292: GFLOPs: 3996.2321. Time: 31.7914 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #293: GFLOPs: 3638.2193. Time: 34.9197 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #294: GFLOPs: 2722.6933. Time: 46.6617 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #295: GFLOPs: 374.2652. Time: 339.4535 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #296: GFLOPs: 2799.7188. Time: 45.3780 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #297: GFLOPs: 3992.8221. Time: 31.8185 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #298: GFLOPs: 4047.2192. Time: 31.3908 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #299: GFLOPs: 2853.7141. Time: 44.5194 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #300: GFLOPs: 2838.4835. Time: 44.7583 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #301: GFLOPs: 679.9586. Time: 186.8432 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #302: GFLOPs: 4528.3869. Time: 28.0554 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #303: GFLOPs: 4292.0439. Time: 29.6003 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #304: GFLOPs: 3848.5002. Time: 33.0117 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #305: GFLOPs: 3978.4276. Time: 31.9336 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #306: GFLOPs: 2701.2811. Time: 47.0316 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #307: GFLOPs: 3116.7210. Time: 40.7626 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #308: GFLOPs: 4143.7494. Time: 30.6596 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #309: GFLOPs: 4333.9031. Time: 29.3144 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #310: GFLOPs: 1502.4234. Time: 84.5605 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #311: GFLOPs: 3825.7755. Time: 33.2078 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #312: GFLOPs: 402.1576. Time: 315.9101 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #313: GFLOPs: 2848.4606. Time: 44.6015 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #314: GFLOPs: 3682.6444. Time: 34.4985 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #315: GFLOPs: 3981.6409. Time: 31.9079 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #316: GFLOPs: 4486.9062. Time: 28.3148 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #317: GFLOPs: 108.4588. Time: 1171.3726 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #318: GFLOPs: 3635.5263. Time: 34.9456 us. Best GFLOPs: 5462.0826
2024-03-22 04:13:37 [INFO] [task_scheduler.cc:131] [Task #13: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_1] Trial #319: GFLOPs: 241.9664. Time: 525.0548 us. Best GFLOPs: 5462.0826
