2024-03-20 22:52:36 [INFO] [task_scheduler.cc:160] Initializing Task #116: "fused_nn_conv2d_add_nn_relu_56"
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(96), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(96), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56), T.int64(96), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(96), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(96), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(448), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(16), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2688)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(96), rc_0 * T.int64(6) + ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(6))
                                    v1 = T.axis.spatial(T.int64(96), rc_0 * T.int64(6) + ax0_ax1_ax2_ax3_fused % T.int64(6))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(96), rc_0 * T.int64(6) + rc_1 * T.int64(6) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 1, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 56, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 1, 6])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(96), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(96), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(448), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2688)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(96), rc_0_ry_0_rx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(6))
                                    v1 = T.axis.spatial(T.int64(96), rc_0_ry_0_rx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused % T.int64(6))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(96), rc_0_ry_0_rx_0_fused * T.int64(6) + rc_1 * T.int64(6) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 1, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 56, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 1, 6])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(96), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(96), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(448), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2688)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(96), rc_0_ry_0_rx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(6))
                                    v1 = T.axis.spatial(T.int64(96), rc_0_ry_0_rx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused % T.int64(6))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(96), rc_0_ry_0_rx_0_fused * T.int64(6) + rc_1 * T.int64(6) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(8), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 1, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 56, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 1, 6])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 23:56:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-20 23:56:43 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-20 23:56:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a59694f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3794e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6013f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a36155a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299d4bcdb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a335cc68)]: 485 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6014358)]: 0 failure(s)
2024-03-20 23:56:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a59694f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3794e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6013f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a36155a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299d4bcdb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a335cc68)]: 971 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6014358)]: 0 failure(s)
2024-03-20 23:56:44 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-20 23:56:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a59694f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3794e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6013f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a36155a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299d4bcdb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a335cc68)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6014358)]: 0 failure(s)
2024-03-20 23:56:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a59694f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3794e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6013f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a36155a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299d4bcdb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a335cc68)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6014358)]: 0 failure(s)
2024-03-20 23:56:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a59694f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3794e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6013f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a36155a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299d4bcdb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a335cc68)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6014358)]: 0 failure(s)
2024-03-20 23:56:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a59694f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3794e08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6013f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a36155a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299d4bcdb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a335cc68)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6014358)]: 0 failure(s)
2024-03-20 23:56:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9991  0.9984  0.9975  0.9974  0.9973  0.9970  0.9970  0.9958  0.9951  0.9946  0.9940  0.9935  0.9935  0.9931  0.9915
[17 : 32]:	0.9908  0.9908  0.9904  0.9902  0.9902  0.9896  0.9893  0.9884  0.9844  0.9834  0.9817  0.9815  0.9797  0.9794  0.9793  0.9773
[33 : 48]:	0.9765  0.9764  0.9743  0.9743  0.9740  0.9739  0.9738  0.9735  0.9721  0.9704  0.9694  0.9691  0.9689  0.9684  0.9683  0.9682
[49 : 64]:	0.9679  0.9666  0.9665  0.9663  0.9660  0.9639  0.9636  0.9618  0.9616  0.9614  0.9613  0.9597  0.9592  0.9583  0.9558  0.9552
2024-03-20 23:56:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-20 23:56:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #1: GFLOPs: 2945.3416. Time: 26.4394 us. Best GFLOPs: 2945.3416
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #2: GFLOPs: 4246.0981. Time: 18.3399 us. Best GFLOPs: 4246.0981
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #3: GFLOPs: 1526.2313. Time: 51.0232 us. Best GFLOPs: 4246.0981
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #4: GFLOPs: 153.9779. Time: 505.7422 us. Best GFLOPs: 4246.0981
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #5: GFLOPs: 161.5974. Time: 481.8960 us. Best GFLOPs: 4246.0981
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #6: GFLOPs: 172.6682. Time: 450.9989 us. Best GFLOPs: 4246.0981
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #7: GFLOPs: 5078.7389. Time: 15.3332 us. Best GFLOPs: 5078.7389
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #8: GFLOPs: 158.0780. Time: 492.6247 us. Best GFLOPs: 5078.7389
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #9: GFLOPs: 356.0970. Time: 218.6852 us. Best GFLOPs: 5078.7389
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #10: GFLOPs: 2110.2283. Time: 36.9027 us. Best GFLOPs: 5078.7389
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #11: GFLOPs: 5526.3708. Time: 14.0912 us. Best GFLOPs: 5526.3708
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #12: GFLOPs: 3574.7899. Time: 21.7840 us. Best GFLOPs: 5526.3708
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #13: GFLOPs: 3748.9829. Time: 20.7718 us. Best GFLOPs: 5526.3708
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #14: GFLOPs: 364.3641. Time: 213.7234 us. Best GFLOPs: 5526.3708
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #15: GFLOPs: 1305.8966. Time: 59.6319 us. Best GFLOPs: 5526.3708
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #16: GFLOPs: 186.9212. Time: 416.6095 us. Best GFLOPs: 5526.3708
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #17: GFLOPs: 6589.1669. Time: 11.8184 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #18: GFLOPs: 282.1639. Time: 275.9855 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #19: GFLOPs: 3916.8682. Time: 19.8815 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #20: GFLOPs: 2391.3672. Time: 32.5643 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #21: GFLOPs: 1541.5202. Time: 50.5171 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #22: GFLOPs: 211.9344. Time: 367.4399 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #23: GFLOPs: 1131.8373. Time: 68.8024 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #24: GFLOPs: 2267.3737. Time: 34.3451 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #25: GFLOPs: 14.8358. Time: 5248.9899 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #26: GFLOPs: 3960.9181. Time: 19.6604 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #27: GFLOPs: 887.8638. Time: 87.7084 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #28: GFLOPs: 1688.1997. Time: 46.1279 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #29: GFLOPs: 190.7488. Time: 408.2497 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #30: GFLOPs: 3408.8986. Time: 22.8441 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #31: GFLOPs: 3146.6733. Time: 24.7478 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #32: GFLOPs: 2217.1370. Time: 35.1233 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #33: GFLOPs: 343.6807. Time: 226.5858 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #34: GFLOPs: 3617.5677. Time: 21.5264 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #35: GFLOPs: 1184.9880. Time: 65.7164 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #36: GFLOPs: 2016.7014. Time: 38.6141 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #37: GFLOPs: 2559.6285. Time: 30.4236 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #38: GFLOPs: 2886.9324. Time: 26.9744 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #39: GFLOPs: 32.1605. Time: 2421.3943 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #40: GFLOPs: 2219.7644. Time: 35.0817 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #41: GFLOPs: 552.3666. Time: 140.9809 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #42: GFLOPs: 2003.3834. Time: 38.8708 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #43: GFLOPs: 885.2024. Time: 87.9721 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #44: GFLOPs: 4427.4345. Time: 17.5888 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #45: GFLOPs: 4441.6581. Time: 17.5325 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #46: GFLOPs: 388.1881. Time: 200.6067 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #47: GFLOPs: 460.9381. Time: 168.9449 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #48: GFLOPs: 211.9470. Time: 367.4181 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #49: GFLOPs: 3275.2094. Time: 23.7765 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #50: GFLOPs: 510.6884. Time: 152.4866 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #51: GFLOPs: 4088.6024. Time: 19.0464 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #52: GFLOPs: 2106.5417. Time: 36.9673 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #53: GFLOPs: 3944.1083. Time: 19.7442 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #54: GFLOPs: 77.0725. Time: 1010.3881 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #55: GFLOPs: 2103.8243. Time: 37.0150 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #56: GFLOPs: 182.5164. Time: 426.6638 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #57: GFLOPs: 1310.8154. Time: 59.4082 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #58: GFLOPs: 1263.7170. Time: 61.6223 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #59: GFLOPs: 5304.1332. Time: 14.6816 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #60: GFLOPs: 535.7573. Time: 145.3515 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #61: GFLOPs: 883.4960. Time: 88.1421 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #62: GFLOPs: 141.1134. Time: 551.8481 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #63: GFLOPs: 2483.0582. Time: 31.3618 us. Best GFLOPs: 6589.1669
2024-03-21 00:13:04 [INFO] [task_scheduler.cc:131] [Task #116: fused_nn_conv2d_add_nn_relu_56] Trial #64: GFLOPs: 4374.3891. Time: 17.8021 us. Best GFLOPs: 6589.1669
