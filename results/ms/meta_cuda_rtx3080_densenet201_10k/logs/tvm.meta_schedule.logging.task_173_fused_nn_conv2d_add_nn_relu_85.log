2024-03-21 13:42:31 [INFO] [task_scheduler.cc:160] Initializing Task #173: "fused_nn_conv2d_add_nn_relu_85"
2024-03-21 13:42:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(320), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(320), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(125440)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(320), rc_0 * T.int64(160) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(20480)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(160))
                                    v1 = T.axis.spatial(T.int64(320), rc_0 * T.int64(160) + ax0_ax1_ax2_ax3_fused % T.int64(160))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(320), rc_0 * T.int64(160) + rc_1 * T.int64(10) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 4, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 28, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 16, 10])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(125440)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(160) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(20480)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(160))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(160) + ax0_ax1_ax2_ax3_fused % T.int64(160))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(160) + rc_1 * T.int64(10) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 4, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 28, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 16, 10])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(125440)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(160) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(20480)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(160))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(160) + ax0_ax1_ax2_ax3_fused % T.int64(160))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(160) + rc_1 * T.int64(10) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(4), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 4, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 28, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 16, 10])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 15:17:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:17:10 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 15:17:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2fab99cd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d5458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2fa39f368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6327eb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3855848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f83440c8)]: 480 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fab65ff8)]: 0 failure(s)
2024-03-21 15:17:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2fab99cd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d5458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2fa39f368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6327eb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3855848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f83440c8)]: 971 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fab65ff8)]: 0 failure(s)
2024-03-21 15:17:11 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 15:17:13 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2fab99cd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d5458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2fa39f368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6327eb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3855848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f83440c8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fab65ff8)]: 0 failure(s)
2024-03-21 15:17:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2fab99cd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d5458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2fa39f368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6327eb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3855848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f83440c8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fab65ff8)]: 0 failure(s)
2024-03-21 15:17:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2fab99cd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d5458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2fa39f368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6327eb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3855848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f83440c8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fab65ff8)]: 0 failure(s)
2024-03-21 15:17:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2fab99cd8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d5458)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2fa39f368)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6327eb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f3855848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f83440c8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fab65ff8)]: 0 failure(s)
2024-03-21 15:17:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9988  0.9979  0.9974  0.9967  0.9966  0.9960  0.9959  0.9956  0.9932  0.9929  0.9915  0.9913  0.9912  0.9908  0.9906
[17 : 32]:	0.9889  0.9888  0.9882  0.9868  0.9868  0.9850  0.9846  0.9844  0.9839  0.9838  0.9838  0.9832  0.9820  0.9816  0.9806  0.9806
[33 : 48]:	0.9805  0.9804  0.9798  0.9795  0.9788  0.9785  0.9779  0.9764  0.9757  0.9743  0.9741  0.9738  0.9732  0.9716  0.9709  0.9703
[49 : 64]:	0.9693  0.9667  0.9666  0.9650  0.9649  0.9643  0.9640  0.9637  0.9631  0.9614  0.9610  0.9610  0.9599  0.9598  0.9597  0.9592
2024-03-21 15:17:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:17:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #1: GFLOPs: 1209.6138. Time: 53.2616 us. Best GFLOPs: 1209.6138
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #2: GFLOPs: 239.1559. Time: 269.3890 us. Best GFLOPs: 1209.6138
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #3: GFLOPs: 4858.3428. Time: 13.2609 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #4: GFLOPs: 4523.8203. Time: 14.2415 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #5: GFLOPs: 479.7903. Time: 134.2795 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #6: GFLOPs: 3138.3226. Time: 20.5288 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #7: GFLOPs: 2102.6955. Time: 30.6397 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #8: GFLOPs: 1035.8391. Time: 62.1969 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #9: GFLOPs: 1125.9447. Time: 57.2195 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #10: GFLOPs: 393.0871. Time: 163.8975 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #11: GFLOPs: 1384.7249. Time: 46.5262 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #12: GFLOPs: 4490.1020. Time: 14.3484 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #13: GFLOPs: 1202.8372. Time: 53.5617 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #14: GFLOPs: 374.1784. Time: 172.1799 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #15: GFLOPs: 3343.5724. Time: 19.2686 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #16: GFLOPs: 2660.5924. Time: 24.2149 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #17: GFLOPs: 1358.5258. Time: 47.4235 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #18: GFLOPs: 2355.5552. Time: 27.3507 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #19: GFLOPs: 15.2310. Time: 4229.9305 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #20: GFLOPs: 2041.2315. Time: 31.5623 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #21: GFLOPs: 1750.6292. Time: 36.8016 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #22: GFLOPs: 202.0660. Time: 318.8364 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #23: GFLOPs: 2402.5898. Time: 26.8152 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #24: GFLOPs: 561.6385. Time: 114.7108 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #25: GFLOPs: 85.1010. Time: 757.0533 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #26: GFLOPs: 2245.9990. Time: 28.6848 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #27: GFLOPs: 66.4833. Time: 969.0556 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #28: GFLOPs: 69.6063. Time: 925.5774 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #29: GFLOPs: 1220.3519. Time: 52.7930 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #30: GFLOPs: 754.7607. Time: 85.3595 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #31: GFLOPs: 166.6890. Time: 386.5041 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #32: GFLOPs: 1540.4970. Time: 41.8216 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #33: GFLOPs: 23.9930. Time: 2685.1975 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #34: GFLOPs: 1018.3157. Time: 63.2672 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #35: GFLOPs: 3286.4953. Time: 19.6032 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #36: GFLOPs: 1460.4011. Time: 44.1153 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #37: GFLOPs: 166.8626. Time: 386.1020 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #38: GFLOPs: 1434.6579. Time: 44.9069 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #39: GFLOPs: 259.4675. Time: 248.3008 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #40: GFLOPs: 2242.9743. Time: 28.7235 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #41: GFLOPs: 34.3484. Time: 1875.6622 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #42: GFLOPs: 2041.2162. Time: 31.5625 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #43: GFLOPs: 466.3005. Time: 138.1641 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #44: GFLOPs: 183.7624. Time: 350.5939 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #45: GFLOPs: 416.5028. Time: 154.6832 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #46: GFLOPs: 92.4216. Time: 697.0880 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #47: GFLOPs: 213.2854. Time: 302.0646 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #48: GFLOPs: 847.8733. Time: 75.9854 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #49: GFLOPs: 44.3954. Time: 1451.1861 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #50: GFLOPs: 38.9055. Time: 1655.9591 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #51: GFLOPs: 37.9020. Time: 1699.8053 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #52: GFLOPs: 1224.9810. Time: 52.5935 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #53: GFLOPs: 2971.0702. Time: 21.6844 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #54: GFLOPs: 674.2399. Time: 95.5535 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #55: GFLOPs: 5.9021. Time: 10915.7279 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #56: GFLOPs: 180.7507. Time: 356.4356 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #57: GFLOPs: 194.6343. Time: 331.0104 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #58: GFLOPs: 15.4028. Time: 4182.7386 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #59: GFLOPs: 2218.1646. Time: 29.0447 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #60: GFLOPs: 1091.2408. Time: 59.0392 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #61: GFLOPs: 153.5422. Time: 419.5980 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #62: GFLOPs: 1127.4318. Time: 57.1440 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #63: GFLOPs: 2130.7699. Time: 30.2360 us. Best GFLOPs: 4858.3428
2024-03-21 15:49:58 [INFO] [task_scheduler.cc:131] [Task #173: fused_nn_conv2d_add_nn_relu_85] Trial #64: GFLOPs: 1722.6250. Time: 37.3999 us. Best GFLOPs: 4858.3428
