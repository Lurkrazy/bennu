2024-03-21 10:38:32 [INFO] [task_scheduler.cc:160] Initializing Task #149: "fused_nn_conv2d_add_nn_relu_73"
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(18816)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(28)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(64) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(28) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0 * T.int64(48) + rc_1 * T.int64(48) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 8, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 28])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 1, 48])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(18816)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(28)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(64) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(28) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + rc_1 * T.int64(48) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 8, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 28])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 1, 48])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(18816)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(2), T.int64(28)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(64) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(28) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + rc_1 * T.int64(48) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(14), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 8, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 28])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 1, 48])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 11:56:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:56:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:56:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd62ed728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd1a2ec88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6aa39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd07adcb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd25a1728)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1bd2fd8)]: 476 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd173c108)]: 0 failure(s)
2024-03-21 11:56:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd62ed728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd1a2ec88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6aa39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd07adcb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd25a1728)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1bd2fd8)]: 955 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd173c108)]: 0 failure(s)
2024-03-21 11:56:34 [INFO] [evolutionary_search.cc:723] Sampled 69 candidate(s)
2024-03-21 11:56:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd62ed728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd1a2ec88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6aa39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd07adcb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd25a1728)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1bd2fd8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd173c108)]: 0 failure(s)
2024-03-21 11:56:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd62ed728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd1a2ec88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6aa39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd07adcb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd25a1728)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1bd2fd8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd173c108)]: 0 failure(s)
2024-03-21 11:56:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd62ed728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd1a2ec88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6aa39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd07adcb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd25a1728)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1bd2fd8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd173c108)]: 0 failure(s)
2024-03-21 11:56:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd62ed728)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd1a2ec88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6aa39d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd07adcb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd25a1728)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1bd2fd8)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd173c108)]: 0 failure(s)
2024-03-21 11:56:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9989  0.9979  0.9977  0.9965  0.9952  0.9950  0.9941  0.9938  0.9937  0.9935  0.9926  0.9922  0.9908  0.9908  0.9906
[17 : 32]:	0.9902  0.9898  0.9889  0.9885  0.9878  0.9877  0.9873  0.9858  0.9857  0.9851  0.9846  0.9843  0.9842  0.9840  0.9831  0.9828
[33 : 48]:	0.9824  0.9798  0.9797  0.9791  0.9790  0.9783  0.9762  0.9750  0.9746  0.9735  0.9735  0.9717  0.9716  0.9712  0.9712  0.9681
[49 : 64]:	0.9679  0.9679  0.9676  0.9673  0.9671  0.9669  0.9668  0.9661  0.9657  0.9649  0.9632  0.9622  0.9613  0.9608  0.9603  0.9596
2024-03-21 11:56:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:56:40 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #1: GFLOPs: 988.1762. Time: 39.1994 us. Best GFLOPs: 988.1762
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #2: GFLOPs: 1864.0891. Time: 20.7801 us. Best GFLOPs: 1864.0891
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #3: GFLOPs: 1079.2909. Time: 35.8901 us. Best GFLOPs: 1864.0891
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #4: GFLOPs: 1554.9802. Time: 24.9108 us. Best GFLOPs: 1864.0891
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #5: GFLOPs: 78.0923. Time: 496.0266 us. Best GFLOPs: 1864.0891
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #6: GFLOPs: 756.0423. Time: 51.2351 us. Best GFLOPs: 1864.0891
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #7: GFLOPs: 41.8356. Time: 925.9069 us. Best GFLOPs: 1864.0891
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #8: GFLOPs: 972.7428. Time: 39.8213 us. Best GFLOPs: 1864.0891
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #9: GFLOPs: 1555.5388. Time: 24.9019 us. Best GFLOPs: 1864.0891
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #10: GFLOPs: 1018.5269. Time: 38.0313 us. Best GFLOPs: 1864.0891
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #11: GFLOPs: 3348.5987. Time: 11.5678 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #12: GFLOPs: 1276.5782. Time: 30.3435 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #13: GFLOPs: 1740.9020. Time: 22.2505 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #14: GFLOPs: 2107.2041. Time: 18.3826 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #15: GFLOPs: 22.7464. Time: 1702.9467 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #16: GFLOPs: 729.8339. Time: 53.0749 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #17: GFLOPs: 580.6165. Time: 66.7151 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #18: GFLOPs: 482.7703. Time: 80.2367 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #19: GFLOPs: 461.8762. Time: 83.8664 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #20: GFLOPs: 2977.7239. Time: 13.0086 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #21: GFLOPs: 305.7626. Time: 126.6861 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #22: GFLOPs: 1665.6942. Time: 23.2551 us. Best GFLOPs: 3348.5987
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #23: GFLOPs: 3359.2494. Time: 11.5311 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #24: GFLOPs: 1231.4612. Time: 31.4552 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #25: GFLOPs: 730.7520. Time: 53.0082 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #26: GFLOPs: 87.4690. Time: 442.8528 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #27: GFLOPs: 1870.6790. Time: 20.7069 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #28: GFLOPs: 1876.9236. Time: 20.6380 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #29: GFLOPs: 61.5103. Time: 629.7459 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #30: GFLOPs: 1413.2275. Time: 27.4095 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #31: GFLOPs: 1911.1353. Time: 20.2685 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #32: GFLOPs: 632.8890. Time: 61.2048 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #33: GFLOPs: 1594.4695. Time: 24.2939 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #34: GFLOPs: 118.5869. Time: 326.6455 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #35: GFLOPs: 43.8267. Time: 883.8414 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #36: GFLOPs: 2272.9684. Time: 17.0420 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #37: GFLOPs: 28.6752. Time: 1350.8472 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #38: GFLOPs: 1408.2258. Time: 27.5069 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #39: GFLOPs: 963.3353. Time: 40.2102 us. Best GFLOPs: 3359.2494
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #40: GFLOPs: 3383.5460. Time: 11.4483 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #41: GFLOPs: 242.3372. Time: 159.8428 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #42: GFLOPs: 757.9399. Time: 51.1068 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #43: GFLOPs: 1142.5262. Time: 33.9037 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #44: GFLOPs: 196.6765. Time: 196.9523 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #45: GFLOPs: 18.5439. Time: 2088.8740 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #46: GFLOPs: 1722.4064. Time: 22.4894 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #47: GFLOPs: 1141.1473. Time: 33.9447 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #48: GFLOPs: 37.3673. Time: 1036.6248 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #49: GFLOPs: 1509.9599. Time: 25.6536 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #50: GFLOPs: 128.7109. Time: 300.9525 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #51: GFLOPs: 1723.6310. Time: 22.4734 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #52: GFLOPs: 3.4120. Time: 11352.8603 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #53: GFLOPs: 15.2322. Time: 2543.0271 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #54: GFLOPs: 51.8383. Time: 747.2449 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #55: GFLOPs: 1270.3423. Time: 30.4925 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #56: GFLOPs: 2266.5732. Time: 17.0901 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #57: GFLOPs: 1460.1630. Time: 26.5285 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #58: GFLOPs: 2362.6531. Time: 16.3951 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #59: GFLOPs: 2482.4720. Time: 15.6037 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #60: GFLOPs: 242.3481. Time: 159.8357 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #61: GFLOPs: 1031.9388. Time: 37.5370 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #62: GFLOPs: 1298.6254. Time: 29.8284 us. Best GFLOPs: 3383.5460
2024-03-21 12:23:17 [INFO] [task_scheduler.cc:131] [Task #149: fused_nn_conv2d_add_nn_relu_73] Trial #63: GFLOPs: 2487.0607. Time: 15.5750 us. Best GFLOPs: 3383.5460
