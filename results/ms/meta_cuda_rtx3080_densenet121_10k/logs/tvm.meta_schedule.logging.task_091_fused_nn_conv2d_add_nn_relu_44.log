2024-03-20 22:52:35 [INFO] [task_scheduler.cc:160] Initializing Task #91: "fused_nn_conv2d_add_nn_relu_44"
2024-03-20 22:52:35 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(352), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(352), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(352), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(352), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(352), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-20 22:52:35 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-20 22:52:35 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(352), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(352), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(352), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(352), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(275968)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(352), ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5632)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(352))
                                    v1 = T.axis.spatial(T.int64(352), ax0_ax1_ax2_ax3_fused % T.int64(352))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(352), rc_0 * T.int64(352) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 11, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-20 22:52:35 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(352), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(352), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(352), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(352), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(275968)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(352), ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5632)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(352))
                                    v1 = T.axis.spatial(T.int64(352), ax0_ax1_ax2_ax3_fused % T.int64(352))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(352), rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 11, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 22:52:35 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(352), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(352), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(352), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(352), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(98), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(275968)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(352), ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5632)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(352))
                                    v1 = T.axis.spatial(T.int64(352), ax0_ax1_ax2_ax3_fused % T.int64(352))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(4), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(352), rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 11, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 23:39:48 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-20 23:39:48 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-20 23:39:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 489 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-20 23:39:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 970 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-20 23:39:49 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-03-20 23:39:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-20 23:39:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-20 23:39:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-20 23:39:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-20 23:39:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9963  0.9952  0.9951  0.9945  0.9943  0.9941  0.9934  0.9929  0.9926  0.9919  0.9903  0.9902  0.9887  0.9886  0.9885
[17 : 32]:	0.9880  0.9870  0.9870  0.9862  0.9850  0.9827  0.9821  0.9816  0.9806  0.9805  0.9803  0.9791  0.9786  0.9774  0.9767  0.9754
[33 : 48]:	0.9754  0.9746  0.9738  0.9735  0.9724  0.9716  0.9713  0.9700  0.9693  0.9691  0.9687  0.9677  0.9669  0.9663  0.9661  0.9643
[49 : 64]:	0.9635  0.9627  0.9620  0.9619  0.9617  0.9614  0.9613  0.9608  0.9608  0.9606  0.9604  0.9601  0.9594  0.9585  0.9584  0.9559
2024-03-20 23:39:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-20 23:39:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #1: GFLOPs: 33.9648. Time: 2085.9409 us. Best GFLOPs: 33.9648
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #2: GFLOPs: 382.4174. Time: 185.2649 us. Best GFLOPs: 382.4174
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #3: GFLOPs: 25.2074. Time: 2810.6267 us. Best GFLOPs: 382.4174
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #4: GFLOPs: 276.2899. Time: 256.4281 us. Best GFLOPs: 382.4174
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #5: GFLOPs: 824.4545. Time: 85.9338 us. Best GFLOPs: 824.4545
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #6: GFLOPs: 1196.5149. Time: 59.2124 us. Best GFLOPs: 1196.5149
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #7: GFLOPs: 421.2761. Time: 168.1759 us. Best GFLOPs: 1196.5149
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #8: GFLOPs: 43.3601. Time: 1633.9571 us. Best GFLOPs: 1196.5149
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #9: GFLOPs: 294.0654. Time: 240.9278 us. Best GFLOPs: 1196.5149
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #10: GFLOPs: 1382.5835. Time: 51.2436 us. Best GFLOPs: 1382.5835
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #11: GFLOPs: 2261.5109. Time: 31.3280 us. Best GFLOPs: 2261.5109
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #12: GFLOPs: 668.7735. Time: 105.9380 us. Best GFLOPs: 2261.5109
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #13: GFLOPs: 1217.6830. Time: 58.1831 us. Best GFLOPs: 2261.5109
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #14: GFLOPs: 38.5327. Time: 1838.6572 us. Best GFLOPs: 2261.5109
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #15: GFLOPs: 2504.2346. Time: 28.2915 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #16: GFLOPs: 390.8254. Time: 181.2792 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #17: GFLOPs: 212.1467. Time: 333.9600 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #18: GFLOPs: 2026.0032. Time: 34.9696 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #19: GFLOPs: 734.9532. Time: 96.3987 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #20: GFLOPs: 720.7415. Time: 98.2995 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #21: GFLOPs: 420.6813. Time: 168.4137 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #22: GFLOPs: 408.4370. Time: 173.4625 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #23: GFLOPs: 772.2233. Time: 91.7461 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #24: GFLOPs: 17.7355. Time: 3994.7266 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #25: GFLOPs: 41.5409. Time: 1705.5111 us. Best GFLOPs: 2504.2346
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #26: GFLOPs: 2951.4273. Time: 24.0048 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #27: GFLOPs: 2941.7495. Time: 24.0838 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #28: GFLOPs: 61.9800. Time: 1143.0865 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #29: GFLOPs: 10.9201. Time: 6487.8721 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #30: GFLOPs: 20.8603. Time: 3396.3348 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #31: GFLOPs: 61.8786. Time: 1144.9608 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #32: GFLOPs: 531.3897. Time: 133.3268 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #33: GFLOPs: 15.7650. Time: 4494.0242 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #34: GFLOPs: 1354.9397. Time: 52.2891 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #35: GFLOPs: 352.0995. Time: 201.2173 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #36: GFLOPs: 73.5997. Time: 962.6190 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #37: GFLOPs: 1165.7082. Time: 60.7772 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #38: GFLOPs: 1611.3712. Time: 43.9678 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #39: GFLOPs: 38.5578. Time: 1837.4627 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #40: GFLOPs: 1866.5949. Time: 37.9560 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #41: GFLOPs: 67.4861. Time: 1049.8240 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #42: GFLOPs: 1162.3574. Time: 60.9524 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #43: GFLOPs: 385.5577. Time: 183.7559 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #44: GFLOPs: 401.3813. Time: 176.5117 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #45: GFLOPs: 1200.6674. Time: 59.0076 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #46: GFLOPs: 495.2039. Time: 143.0694 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #47: GFLOPs: 1210.5332. Time: 58.5267 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #48: GFLOPs: 1681.7419. Time: 42.1281 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #49: GFLOPs: 63.0374. Time: 1123.9130 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #50: GFLOPs: 28.9033. Time: 2451.2258 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #51: GFLOPs: 26.7988. Time: 2643.7203 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #52: GFLOPs: 2087.7387. Time: 33.9355 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #53: GFLOPs: 1032.5247. Time: 68.6168 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #54: GFLOPs: 989.2825. Time: 71.6161 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #55: GFLOPs: 1063.7097. Time: 66.6051 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #56: GFLOPs: 220.1327. Time: 321.8446 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #57: GFLOPs: 2159.4635. Time: 32.8084 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #58: GFLOPs: 26.8946. Time: 2634.3057 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #59: GFLOPs: 481.1098. Time: 147.2606 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #60: GFLOPs: 317.4231. Time: 223.1990 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #61: GFLOPs: 91.3248. Time: 775.7863 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #62: GFLOPs: 1405.7688. Time: 50.3984 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #63: GFLOPs: 2185.3113. Time: 32.4203 us. Best GFLOPs: 2951.4273
2024-03-21 00:12:38 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #64: GFLOPs: 188.2595. Time: 376.3344 us. Best GFLOPs: 2951.4273
2024-03-21 01:15:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 01:15:59 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 01:16:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 431 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-21 01:16:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 856 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-21 01:16:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 1287 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-21 01:16:01 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-03-21 01:16:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-21 01:16:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-21 01:16:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-21 01:16:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x57299f723658)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a0488778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a45b5c18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a5874248)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a5571de8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x57299eff0c48)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a0488678)]: 0 failure(s)
2024-03-21 01:16:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5851  1.4641  1.3041  1.2971  1.2603  1.2331  1.2196  1.2085  1.2062  1.1869  1.1819  1.1814  1.1613  1.1592  1.1546  1.1416
[17 : 32]:	1.1391  1.1361  1.1339  1.1227  1.1212  1.1201  1.1169  1.1133  1.1124  1.1111  1.1056  1.1048  1.0912  1.0896  1.0860  1.0859
[33 : 48]:	1.0821  1.0749  1.0734  1.0731  1.0726  1.0712  1.0696  1.0673  1.0655  1.0593  1.0573  1.0561  1.0558  1.0551  1.0526  1.0504
[49 : 64]:	1.0480  1.0460  1.0359  1.0341  1.0293  1.0287  1.0284  1.0160  1.0134  1.0114  1.0077  1.0039  1.0003  0.9914  0.9903  0.9872
2024-03-21 01:16:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 01:16:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #65: GFLOPs: 1688.3844. Time: 41.9623 us. Best GFLOPs: 2951.4273
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #66: GFLOPs: 1705.1325. Time: 41.5501 us. Best GFLOPs: 2951.4273
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #67: GFLOPs: 4375.7391. Time: 16.1912 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #68: GFLOPs: 609.5410. Time: 116.2326 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #69: GFLOPs: 679.6333. Time: 104.2452 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #70: GFLOPs: 1883.4354. Time: 37.6166 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #71: GFLOPs: 2236.4537. Time: 31.6790 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #72: GFLOPs: 1181.2208. Time: 59.9791 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #73: GFLOPs: 2069.1195. Time: 34.2409 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #74: GFLOPs: 1234.0054. Time: 57.4135 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #75: GFLOPs: 1900.0740. Time: 37.2872 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #76: GFLOPs: 2010.8190. Time: 35.2337 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #77: GFLOPs: 788.7923. Time: 89.8190 us. Best GFLOPs: 4375.7391
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #78: GFLOPs: 4581.6445. Time: 15.4636 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #79: GFLOPs: 4457.6334. Time: 15.8938 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #80: GFLOPs: 1254.9367. Time: 56.4558 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #81: GFLOPs: 4350.2027. Time: 16.2863 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #82: GFLOPs: 2573.7146. Time: 27.5277 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #83: GFLOPs: 602.9658. Time: 117.5000 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #84: GFLOPs: 3287.3014. Time: 21.5522 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #85: GFLOPs: 1245.4532. Time: 56.8857 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #86: GFLOPs: 3614.9826. Time: 19.5986 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #87: GFLOPs: 1661.1695. Time: 42.6498 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #88: GFLOPs: 4351.0095. Time: 16.2832 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #89: GFLOPs: 4306.9877. Time: 16.4497 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #90: GFLOPs: 4341.6064. Time: 16.3185 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #91: GFLOPs: 1054.9306. Time: 67.1594 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #92: GFLOPs: 3317.2584. Time: 21.3575 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #93: GFLOPs: 4516.8687. Time: 15.6853 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #94: GFLOPs: 655.7513. Time: 108.0417 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #95: GFLOPs: 4324.9203. Time: 16.3815 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #96: GFLOPs: 672.5103. Time: 105.3493 us. Best GFLOPs: 4581.6445
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #97: GFLOPs: 4660.1923. Time: 15.2029 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #98: GFLOPs: 4564.5948. Time: 15.5213 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #99: GFLOPs: 3995.7883. Time: 17.7308 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #100: GFLOPs: 3405.4556. Time: 20.8044 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #101: GFLOPs: 966.8464. Time: 73.2779 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #102: GFLOPs: 4400.6972. Time: 16.0994 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #103: GFLOPs: 3904.6352. Time: 18.1447 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #104: GFLOPs: 3662.1344. Time: 19.3462 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #105: GFLOPs: 3366.7921. Time: 21.0433 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #106: GFLOPs: 3567.1942. Time: 19.8611 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #107: GFLOPs: 3562.6319. Time: 19.8866 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #108: GFLOPs: 4267.6633. Time: 16.6012 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #109: GFLOPs: 2625.2612. Time: 26.9872 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #110: GFLOPs: 3981.7806. Time: 17.7932 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #111: GFLOPs: 3950.4414. Time: 17.9343 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #112: GFLOPs: 2485.9739. Time: 28.4993 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #113: GFLOPs: 3780.7194. Time: 18.7394 us. Best GFLOPs: 4660.1923
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #114: GFLOPs: 4770.8042. Time: 14.8504 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #115: GFLOPs: 602.5039. Time: 117.5901 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #116: GFLOPs: 3202.9107. Time: 22.1200 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #117: GFLOPs: 2907.6400. Time: 24.3663 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #118: GFLOPs: 3268.1515. Time: 21.6785 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #119: GFLOPs: 2107.4654. Time: 33.6179 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #120: GFLOPs: 3268.7650. Time: 21.6744 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #121: GFLOPs: 4500.8774. Time: 15.7410 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #122: GFLOPs: 4509.6095. Time: 15.7106 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #123: GFLOPs: 786.8665. Time: 90.0388 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #124: GFLOPs: 2914.6496. Time: 24.3077 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #125: GFLOPs: 2396.7407. Time: 29.5604 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #126: GFLOPs: 2192.6529. Time: 32.3118 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #127: GFLOPs: 1063.8842. Time: 66.5942 us. Best GFLOPs: 4770.8042
2024-03-21 01:16:57 [INFO] [task_scheduler.cc:131] [Task #91: fused_nn_conv2d_add_nn_relu_44] Trial #128: GFLOPs: 1788.2914. Time: 39.6180 us. Best GFLOPs: 4770.8042
