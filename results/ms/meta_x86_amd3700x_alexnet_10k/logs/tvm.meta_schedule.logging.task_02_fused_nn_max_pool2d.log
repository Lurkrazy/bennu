2024-03-24 09:01:36 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_max_pool2d"
2024-03-24 09:01:36 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-03-24 09:01:36 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-24 09:01:36 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 512, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[9, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-03-24 09:01:36 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[9, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-03-24 09:01:36 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(55), T.int64(55), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(16), T.int64(27), T.int64(27), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-03-24 09:02:17 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-24 09:02:17 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-24 09:02:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dc7f0d68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dc9bfb78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dc87d168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dce907c8)]: 0 failure(s)
2024-03-24 09:02:17 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-24 09:02:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dc7f0d68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dc9bfb78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dc87d168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dce907c8)]: 0 failure(s)
2024-03-24 09:02:18 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dc7f0d68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dc9bfb78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dc87d168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dce907c8)]: 0 failure(s)
2024-03-24 09:02:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dc7f0d68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dc9bfb78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dc87d168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dce907c8)]: 0 failure(s)
2024-03-24 09:02:18 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dc7f0d68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dc9bfb78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dc87d168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dce907c8)]: 0 failure(s)
2024-03-24 09:02:18 [INFO] [evolutionary_search.cc:649] Scores of the best 42 candidates:
[1 : 16]:	0.9784  0.9325  0.9307  0.9251  0.8955  0.8613  0.8612  0.8014  0.8001  0.7476  0.7052  0.6971  0.6779  0.5807  0.5663  0.5554
[17 : 32]:	0.5347  0.5347  0.5288  0.4601  0.4578  0.4384  0.4189  0.4061  0.3458  0.3076  0.2685  0.2656  0.2459  0.2250  0.1991  0.1984
[33 : 42]:	0.1690  0.1618  0.1319  0.1223  0.1070  0.1056  0.0852  0.0770  0.0558  0.0272
2024-03-24 09:02:18 [INFO] [evolutionary_search.cc:727] Got 42 candidate(s) with evolutionary search
2024-03-24 09:02:18 [INFO] [evolutionary_search.cc:730] Sending 42 candidates(s) for measurement
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #1: GFLOPs: 12.5624. Time: 33.4254 us. Best GFLOPs: 12.5624
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #2: GFLOPs: 22.8501. Time: 18.3765 us. Best GFLOPs: 22.8501
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #3: GFLOPs: 77.1214. Time: 5.4447 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #4: GFLOPs: 12.6311. Time: 33.2436 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #5: GFLOPs: 12.3662. Time: 33.9557 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #6: GFLOPs: 43.2093. Time: 9.7179 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #7: GFLOPs: 24.8793. Time: 16.8777 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #8: GFLOPs: 25.1233. Time: 16.7137 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #9: GFLOPs: 24.8680. Time: 16.8853 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #10: GFLOPs: 23.7974. Time: 17.6449 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #11: GFLOPs: 30.5169. Time: 13.7597 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #12: GFLOPs: 42.5840. Time: 9.8606 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #13: GFLOPs: 12.1234. Time: 34.6357 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #14: GFLOPs: 42.4259. Time: 9.8973 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #15: GFLOPs: 15.5459. Time: 27.0107 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #16: GFLOPs: 19.6207. Time: 21.4010 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #17: GFLOPs: 11.9850. Time: 35.0358 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #18: GFLOPs: 29.9936. Time: 13.9998 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #19: GFLOPs: 45.1850. Time: 9.2930 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #20: GFLOPs: 20.0390. Time: 20.9544 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #21: GFLOPs: 23.1882. Time: 18.1085 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #22: GFLOPs: 75.8643. Time: 5.5349 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #23: GFLOPs: 18.8063. Time: 22.3279 us. Best GFLOPs: 77.1214
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #24: GFLOPs: 79.0351. Time: 5.3129 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #25: GFLOPs: 19.4433. Time: 21.5963 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #26: GFLOPs: 19.7151. Time: 21.2986 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #27: GFLOPs: 44.3272. Time: 9.4728 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #28: GFLOPs: 12.6020. Time: 33.3205 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #29: GFLOPs: 29.7765. Time: 14.1019 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #30: GFLOPs: 15.5729. Time: 26.9638 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #31: GFLOPs: 12.5164. Time: 33.5482 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #32: GFLOPs: 18.9357. Time: 22.1752 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #33: GFLOPs: 19.3034. Time: 21.7528 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #34: GFLOPs: 25.6542. Time: 16.3678 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #35: GFLOPs: 25.7297. Time: 16.3198 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #36: GFLOPs: 16.9439. Time: 24.7820 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #37: GFLOPs: 30.9131. Time: 13.5834 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #38: GFLOPs: 40.9647. Time: 10.2504 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #39: GFLOPs: 18.1850. Time: 23.0906 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #40: GFLOPs: 18.4727. Time: 22.7311 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #41: GFLOPs: 19.4543. Time: 21.5841 us. Best GFLOPs: 79.0351
2024-03-24 09:10:35 [INFO] [task_scheduler.cc:131] [Task #2: fused_nn_max_pool2d] Trial #42: GFLOPs: 25.7049. Time: 16.3356 us. Best GFLOPs: 79.0351
