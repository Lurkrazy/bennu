2024-03-21 10:38:31 [INFO] [task_scheduler.cc:160] Initializing Task #137: "fused_nn_conv2d_add_nn_relu_67"
2024-03-21 10:38:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(384), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(384), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 10:38:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(6), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(384), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(384), rc_0 * T.int64(64) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 2, 4, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 8, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 10:38:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 2, 4, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 8, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 10:38:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(4), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 2, 4, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 8, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 11:48:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:48:57 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:48:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd5beb608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5eee118)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd5352d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd82b9a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd6b2b5f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd579f308)]: 484 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5eee018)]: 0 failure(s)
2024-03-21 11:48:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd5beb608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5eee118)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd5352d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd82b9a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd6b2b5f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd579f308)]: 971 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5eee018)]: 0 failure(s)
2024-03-21 11:48:59 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 11:49:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd5beb608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5eee118)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd5352d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd82b9a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd6b2b5f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd579f308)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5eee018)]: 0 failure(s)
2024-03-21 11:49:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd5beb608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5eee118)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd5352d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd82b9a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd6b2b5f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd579f308)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5eee018)]: 0 failure(s)
2024-03-21 11:49:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd5beb608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5eee118)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd5352d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd82b9a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd6b2b5f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd579f308)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5eee018)]: 0 failure(s)
2024-03-21 11:49:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd5beb608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5eee118)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd5352d08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd82b9a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd6b2b5f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd579f308)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd5eee018)]: 0 failure(s)
2024-03-21 11:49:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9989  0.9988  0.9982  0.9973  0.9964  0.9957  0.9949  0.9946  0.9935  0.9916  0.9915  0.9899  0.9888  0.9883  0.9877  0.9876
[17 : 32]:	0.9864  0.9864  0.9859  0.9855  0.9842  0.9839  0.9837  0.9836  0.9831  0.9805  0.9798  0.9796  0.9789  0.9782  0.9775  0.9767
[33 : 48]:	0.9746  0.9744  0.9728  0.9728  0.9727  0.9720  0.9709  0.9702  0.9702  0.9701  0.9694  0.9690  0.9682  0.9677  0.9667  0.9666
[49 : 64]:	0.9666  0.9649  0.9646  0.9639  0.9636  0.9621  0.9612  0.9612  0.9605  0.9604  0.9579  0.9578  0.9572  0.9570  0.9568  0.9568
2024-03-21 11:49:05 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:49:05 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #1: GFLOPs: 25.9882. Time: 2973.3120 us. Best GFLOPs: 25.9882
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #2: GFLOPs: 115.9376. Time: 666.4884 us. Best GFLOPs: 115.9376
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #3: GFLOPs: 65.8091. Time: 1174.1693 us. Best GFLOPs: 115.9376
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #4: GFLOPs: 88.1549. Time: 876.5374 us. Best GFLOPs: 115.9376
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #5: GFLOPs: 513.9461. Time: 150.3485 us. Best GFLOPs: 513.9461
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #6: GFLOPs: 48.7089. Time: 1586.3840 us. Best GFLOPs: 513.9461
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #7: GFLOPs: 29.9076. Time: 2583.6571 us. Best GFLOPs: 513.9461
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #8: GFLOPs: 880.4733. Time: 87.7608 us. Best GFLOPs: 880.4733
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #9: GFLOPs: 77.7502. Time: 993.8376 us. Best GFLOPs: 880.4733
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #10: GFLOPs: 1936.3418. Time: 39.9057 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #11: GFLOPs: 818.8363. Time: 94.3669 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #12: GFLOPs: 38.6285. Time: 2000.3616 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #13: GFLOPs: 247.4710. Time: 312.2428 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #14: GFLOPs: 1621.7699. Time: 47.6461 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #15: GFLOPs: 30.1532. Time: 2562.6112 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #16: GFLOPs: 213.9822. Time: 361.1097 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #17: GFLOPs: 52.2837. Time: 1477.9181 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #18: GFLOPs: 1810.4512. Time: 42.6805 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #19: GFLOPs: 1052.9687. Time: 73.3840 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #20: GFLOPs: 60.5729. Time: 1275.6707 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #21: GFLOPs: 1332.8580. Time: 57.9739 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #22: GFLOPs: 423.4557. Time: 182.4773 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #23: GFLOPs: 53.1962. Time: 1452.5663 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #24: GFLOPs: 173.5954. Time: 445.1214 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #25: GFLOPs: 22.0423. Time: 3505.5758 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #26: GFLOPs: 217.2020. Time: 355.7565 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #27: GFLOPs: 224.8852. Time: 343.6021 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #28: GFLOPs: 1714.4778. Time: 45.0697 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #29: GFLOPs: 509.9977. Time: 151.5125 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #30: GFLOPs: 13.2028. Time: 5852.6153 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #31: GFLOPs: 890.3795. Time: 86.7844 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #32: GFLOPs: 667.4758. Time: 115.7660 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #33: GFLOPs: 45.3195. Time: 1705.0294 us. Best GFLOPs: 1936.3418
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #34: GFLOPs: 2081.0848. Time: 37.1302 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #35: GFLOPs: 648.9680. Time: 119.0676 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #36: GFLOPs: 82.4464. Time: 937.2280 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #37: GFLOPs: 82.3400. Time: 938.4391 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #38: GFLOPs: 1211.8381. Time: 63.7635 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #39: GFLOPs: 327.3527. Time: 236.0483 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #40: GFLOPs: 360.4369. Time: 214.3816 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #41: GFLOPs: 477.7590. Time: 161.7364 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #42: GFLOPs: 25.4136. Time: 3040.5352 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #43: GFLOPs: 183.4786. Time: 421.1447 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #44: GFLOPs: 307.3160. Time: 251.4384 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #45: GFLOPs: 492.3116. Time: 156.9555 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #46: GFLOPs: 811.3094. Time: 95.2424 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #47: GFLOPs: 29.7036. Time: 2601.4064 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #48: GFLOPs: 81.9520. Time: 942.8821 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #49: GFLOPs: 582.4170. Time: 132.6731 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #50: GFLOPs: 1189.5728. Time: 64.9570 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #51: GFLOPs: 433.0898. Time: 178.4181 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #52: GFLOPs: 78.6861. Time: 982.0160 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #53: GFLOPs: 23.2171. Time: 3328.1981 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #54: GFLOPs: 7.1227. Time: 10848.5763 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #55: GFLOPs: 1358.0221. Time: 56.8997 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #56: GFLOPs: 364.3158. Time: 212.0990 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #57: GFLOPs: 7.0760. Time: 10920.1408 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #58: GFLOPs: 1825.5498. Time: 42.3275 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #59: GFLOPs: 1620.4356. Time: 47.6853 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #60: GFLOPs: 964.6369. Time: 80.1038 us. Best GFLOPs: 2081.0848
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #61: GFLOPs: 4438.9987. Time: 17.4073 us. Best GFLOPs: 4438.9987
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #62: GFLOPs: 58.0587. Time: 1330.9123 us. Best GFLOPs: 4438.9987
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #63: GFLOPs: 1805.4623. Time: 42.7985 us. Best GFLOPs: 4438.9987
2024-03-21 12:23:01 [INFO] [task_scheduler.cc:131] [Task #137: fused_nn_conv2d_add_nn_relu_67] Trial #64: GFLOPs: 418.4890. Time: 184.6429 us. Best GFLOPs: 4438.9987
