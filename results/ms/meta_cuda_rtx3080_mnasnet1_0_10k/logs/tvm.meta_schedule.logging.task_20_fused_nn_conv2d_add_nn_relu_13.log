2024-03-21 19:46:25 [INFO] [task_scheduler.cc:160] Initializing Task #20: "fused_nn_conv2d_add_nn_relu_13"
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(16), T.int64(16)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(480), T.int64(16), T.int64(16)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(480), T.int64(14), T.int64(14), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(480), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(480), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(10), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(53760)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(16), di_0 + b_0_c_0_i_0_j_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1440)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(7)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(480), b_1_c_1_i_1_j_1_fused * T.int64(48) + c_3 * T.int64(12) + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + i_3 * T.int64(7) + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused * T.int64(7) + j_3 * T.int64(7) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(7), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(480), b_1_c_1_i_1_j_1_fused * T.int64(48) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 10, 1, 4, 12])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(10), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(53760)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(16), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1440)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(7)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(480), b_1_c_1_i_1_j_1_fused * T.int64(48) + c_3 * T.int64(12) + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + i_3 * T.int64(7) + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused * T.int64(7) + j_3 * T.int64(7) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(7), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(480), b_1_c_1_i_1_j_1_fused * T.int64(48) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 10, 1, 4, 12])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(480), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(480), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(480), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(10), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(53760)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(480), ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(16), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(16), ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1440)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(480), ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(7), T.int64(7)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(480), b_1_c_1_i_1_j_1_fused * T.int64(48) + c_3 * T.int64(12) + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + i_3 * T.int64(7) + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused * T.int64(7) + j_3 * T.int64(7) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(7), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(480), b_1_c_1_i_1_j_1_fused * T.int64(48) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 10, 1, 4, 12])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 7])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 20:08:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:08:41 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 20:08:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 499 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 20:08:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 996 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 20:08:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 1498 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 20:08:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 1999 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 20:08:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 2496 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 20:08:46 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-03-21 20:08:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 20:08:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 20:08:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 20:08:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 20:08:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9981  0.9972  0.9967  0.9962  0.9958  0.9947  0.9942  0.9942  0.9935  0.9929  0.9928  0.9928  0.9923  0.9916  0.9908
[17 : 32]:	0.9899  0.9894  0.9890  0.9889  0.9888  0.9876  0.9858  0.9836  0.9833  0.9824  0.9821  0.9806  0.9805  0.9801  0.9799  0.9794
[33 : 48]:	0.9790  0.9775  0.9771  0.9759  0.9757  0.9753  0.9751  0.9747  0.9738  0.9735  0.9732  0.9730  0.9718  0.9710  0.9706  0.9702
[49 : 64]:	0.9689  0.9688  0.9688  0.9687  0.9683  0.9680  0.9666  0.9664  0.9663  0.9660  0.9656  0.9655  0.9653  0.9648  0.9648  0.9644
2024-03-21 20:08:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:08:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #1: GFLOPs: 313.8605. Time: 5.9950 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #2: GFLOPs: 76.5119. Time: 24.5923 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #3: GFLOPs: 160.5561. Time: 11.7193 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #4: GFLOPs: 311.9579. Time: 6.0316 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #5: GFLOPs: 27.7449. Time: 67.8179 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #6: GFLOPs: 162.1530. Time: 11.6039 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #7: GFLOPs: 181.7401. Time: 10.3532 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #8: GFLOPs: 190.0159. Time: 9.9023 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #9: GFLOPs: 272.0733. Time: 6.9158 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #10: GFLOPs: 106.5365. Time: 17.6615 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #11: GFLOPs: 241.6391. Time: 7.7868 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #12: GFLOPs: 87.9221. Time: 21.4008 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #13: GFLOPs: 286.2024. Time: 6.5744 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #14: GFLOPs: 295.1320. Time: 6.3755 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #15: GFLOPs: 44.2777. Time: 42.4954 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #16: GFLOPs: 283.3254. Time: 6.6411 us. Best GFLOPs: 313.8605
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #17: GFLOPs: 369.9612. Time: 5.0859 us. Best GFLOPs: 369.9612
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #18: GFLOPs: 14.1971. Time: 132.5338 us. Best GFLOPs: 369.9612
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #19: GFLOPs: 55.7520. Time: 33.7495 us. Best GFLOPs: 369.9612
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #20: GFLOPs: 224.0242. Time: 8.3991 us. Best GFLOPs: 369.9612
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #21: GFLOPs: 487.9414. Time: 3.8562 us. Best GFLOPs: 487.9414
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #22: GFLOPs: 380.1149. Time: 4.9501 us. Best GFLOPs: 487.9414
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #23: GFLOPs: 259.6886. Time: 7.2456 us. Best GFLOPs: 487.9414
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #24: GFLOPs: 15.3018. Time: 122.9661 us. Best GFLOPs: 487.9414
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #25: GFLOPs: 244.0266. Time: 7.7106 us. Best GFLOPs: 487.9414
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #26: GFLOPs: 32.5556. Time: 57.7966 us. Best GFLOPs: 487.9414
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #27: GFLOPs: 173.8595. Time: 10.8225 us. Best GFLOPs: 487.9414
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #28: GFLOPs: 434.2546. Time: 4.3329 us. Best GFLOPs: 487.9414
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #29: GFLOPs: 671.8431. Time: 2.8007 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #30: GFLOPs: 558.4322. Time: 3.3694 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #31: GFLOPs: 199.7768. Time: 9.4185 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #32: GFLOPs: 184.2631. Time: 10.2115 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #33: GFLOPs: 396.3594. Time: 4.7472 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #34: GFLOPs: 113.3484. Time: 16.6001 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #35: GFLOPs: 76.0021. Time: 24.7572 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #36: GFLOPs: 16.6385. Time: 113.0872 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #37: GFLOPs: 33.8290. Time: 55.6210 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #38: GFLOPs: 83.7256. Time: 22.4734 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #39: GFLOPs: 132.6779. Time: 14.1817 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #40: GFLOPs: 243.7706. Time: 7.7187 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #41: GFLOPs: 173.1265. Time: 10.8684 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #42: GFLOPs: 188.4013. Time: 9.9872 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #43: GFLOPs: 206.0195. Time: 9.1331 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #44: GFLOPs: 356.0968. Time: 5.2840 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #45: GFLOPs: 198.3640. Time: 9.4856 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #46: GFLOPs: 411.3881. Time: 4.5738 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #47: GFLOPs: 93.8130. Time: 20.0569 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #48: GFLOPs: 115.9768. Time: 16.2239 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #49: GFLOPs: 239.3704. Time: 7.8606 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #50: GFLOPs: 170.1544. Time: 11.0582 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #51: GFLOPs: 121.2222. Time: 15.5219 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #52: GFLOPs: 289.4543. Time: 6.5005 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #53: GFLOPs: 70.4463. Time: 26.7097 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #54: GFLOPs: 197.1430. Time: 9.5443 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #55: GFLOPs: 29.5380. Time: 63.7009 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #56: GFLOPs: 122.3365. Time: 15.3805 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #57: GFLOPs: 140.8709. Time: 13.3569 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #58: GFLOPs: 268.2268. Time: 7.0150 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #59: GFLOPs: 158.8755. Time: 11.8432 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #60: GFLOPs: 314.6504. Time: 5.9800 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #61: GFLOPs: 455.1298. Time: 4.1342 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #62: GFLOPs: 241.6398. Time: 7.7868 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #63: GFLOPs: 65.0475. Time: 28.9266 us. Best GFLOPs: 671.8431
2024-03-21 20:21:57 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #64: GFLOPs: 189.5448. Time: 9.9269 us. Best GFLOPs: 671.8431
2024-03-21 21:40:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 21:40:58 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 21:40:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 434 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 21:41:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 873 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 21:41:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 1309 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 21:41:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 1742 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 21:41:01 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-03-21 21:41:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 21:41:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 21:41:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 21:41:15 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed84b168)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d4b18)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d3f98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521eba56408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed7ec2c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7f6588)]: 54 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d3998)]: 0 failure(s)
2024-03-21 21:41:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0207  1.0156  1.0045  0.9814  0.9722  0.9660  0.9656  0.9646  0.9622  0.9575  0.9520  0.9517  0.9515  0.9494  0.9481  0.9378
[17 : 32]:	0.9372  0.9251  0.9208  0.9206  0.9206  0.9206  0.9170  0.9140  0.9140  0.9133  0.9048  0.9047  0.9047  0.9041  0.9021  0.9007
[33 : 48]:	0.8982  0.8955  0.8954  0.8920  0.8911  0.8908  0.8907  0.8892  0.8885  0.8855  0.8846  0.8831  0.8820  0.8759  0.8716  0.8715
[49 : 64]:	0.8705  0.8704  0.8702  0.8701  0.8684  0.8680  0.8659  0.8659  0.8633  0.8632  0.8611  0.8585  0.8584  0.8576  0.8559  0.8545
2024-03-21 21:41:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 21:41:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #65: GFLOPs: 752.2984. Time: 2.5011 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #66: GFLOPs: 750.1750. Time: 2.5082 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #67: GFLOPs: 614.3926. Time: 3.0625 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #68: GFLOPs: 523.6379. Time: 3.5933 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #69: GFLOPs: 677.0585. Time: 2.7791 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #70: GFLOPs: 677.0599. Time: 2.7791 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #71: GFLOPs: 677.0446. Time: 2.7791 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #72: GFLOPs: 677.0711. Time: 2.7790 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #73: GFLOPs: 506.3551. Time: 3.7160 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #74: GFLOPs: 611.2429. Time: 3.0783 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #75: GFLOPs: 585.5298. Time: 3.2135 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #76: GFLOPs: 564.0971. Time: 3.3356 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #77: GFLOPs: 614.7357. Time: 3.0608 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #78: GFLOPs: 587.0541. Time: 3.2052 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #79: GFLOPs: 502.3048. Time: 3.7459 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #80: GFLOPs: 587.1697. Time: 3.2045 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #81: GFLOPs: 585.4613. Time: 3.2139 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #82: GFLOPs: 614.7432. Time: 3.0608 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #83: GFLOPs: 585.5736. Time: 3.2133 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #84: GFLOPs: 672.0001. Time: 2.8000 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #85: GFLOPs: 671.9846. Time: 2.8001 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #86: GFLOPs: 671.9939. Time: 2.8000 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #87: GFLOPs: 551.6654. Time: 3.4108 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #88: GFLOPs: 672.0999. Time: 2.7996 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #89: GFLOPs: 672.1280. Time: 2.7995 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #90: GFLOPs: 541.9835. Time: 3.4717 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #91: GFLOPs: 671.9379. Time: 2.8003 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #92: GFLOPs: 615.7561. Time: 3.0558 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #93: GFLOPs: 615.7929. Time: 3.0556 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #94: GFLOPs: 557.6352. Time: 3.3742 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #95: GFLOPs: 551.0276. Time: 3.4147 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #96: GFLOPs: 585.4337. Time: 3.2140 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #97: GFLOPs: 466.6732. Time: 4.0319 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #98: GFLOPs: 607.2819. Time: 3.0984 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #99: GFLOPs: 502.4342. Time: 3.7450 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #100: GFLOPs: 588.9574. Time: 3.1948 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #101: GFLOPs: 585.5963. Time: 3.2131 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #102: GFLOPs: 593.7596. Time: 3.1690 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #103: GFLOPs: 707.0579. Time: 2.6612 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #104: GFLOPs: 585.5503. Time: 3.2134 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #105: GFLOPs: 585.5145. Time: 3.2136 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #106: GFLOPs: 564.2293. Time: 3.3348 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #107: GFLOPs: 585.3875. Time: 3.2143 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #108: GFLOPs: 545.3929. Time: 3.4500 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #109: GFLOPs: 588.6998. Time: 3.1962 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #110: GFLOPs: 639.6324. Time: 2.9417 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #111: GFLOPs: 587.9090. Time: 3.2005 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #112: GFLOPs: 613.6668. Time: 3.0662 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #113: GFLOPs: 545.9021. Time: 3.4468 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #114: GFLOPs: 588.9395. Time: 3.1949 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #115: GFLOPs: 546.0143. Time: 3.4461 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #116: GFLOPs: 560.0388. Time: 3.3598 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #117: GFLOPs: 604.7280. Time: 3.1115 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #118: GFLOPs: 614.9553. Time: 3.0597 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #119: GFLOPs: 609.9831. Time: 3.0847 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #120: GFLOPs: 631.0575. Time: 2.9817 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #121: GFLOPs: 592.8933. Time: 3.1736 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #122: GFLOPs: 614.8775. Time: 3.0601 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #123: GFLOPs: 555.7274. Time: 3.3858 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #124: GFLOPs: 588.8679. Time: 3.1953 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #125: GFLOPs: 521.1602. Time: 3.6104 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #126: GFLOPs: 20.7224. Time: 90.8001 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #127: GFLOPs: 356.5787. Time: 5.2768 us. Best GFLOPs: 752.2984
2024-03-21 21:41:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_13] Trial #128: GFLOPs: 144.1763. Time: 13.0507 us. Best GFLOPs: 752.2984
