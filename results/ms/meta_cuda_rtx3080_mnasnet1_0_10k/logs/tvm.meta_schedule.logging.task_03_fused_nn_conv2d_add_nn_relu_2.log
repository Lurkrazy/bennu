2024-03-21 19:46:24 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_conv2d_add_nn_relu_2"
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(16), T.int64(112), T.int64(112)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(48), T.int64(112), T.int64(112), T.int64(16), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(112), T.int64(112)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(112), T.int64(112)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(48), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(16), rc_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(98) // T.int64(14) * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(96)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused // T.int64(98) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(16), rc_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused // T.int64(98) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(98) // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(16), rc_0 * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(8), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused // T.int64(98) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(98) // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 3, 2, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 4, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(48), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(98) // T.int64(14) * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(96)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused // T.int64(98) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused // T.int64(98) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(98) // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(8), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused // T.int64(98) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(98) // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 3, 2, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 4, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(48), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(98) // T.int64(14) * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(96)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused // T.int64(98) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused // T.int64(98) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(98) // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(8), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused // T.int64(98) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(98) // T.int64(14) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 3, 2, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 4, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 2, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 19:49:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 19:49:42 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 19:49:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 482 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 19:49:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 969 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 19:49:43 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-03-21 19:49:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 19:49:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 19:49:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 19:49:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 19:49:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9995  0.9994  0.9992  0.9991  0.9989  0.9986  0.9986  0.9979  0.9977  0.9975  0.9965  0.9954  0.9946  0.9935  0.9932
[17 : 32]:	0.9927  0.9927  0.9920  0.9919  0.9899  0.9896  0.9890  0.9882  0.9882  0.9878  0.9877  0.9867  0.9862  0.9858  0.9857  0.9855
[33 : 48]:	0.9826  0.9825  0.9822  0.9821  0.9813  0.9811  0.9811  0.9805  0.9800  0.9782  0.9778  0.9772  0.9766  0.9766  0.9765  0.9760
[49 : 64]:	0.9738  0.9737  0.9722  0.9714  0.9714  0.9697  0.9692  0.9689  0.9687  0.9686  0.9681  0.9677  0.9641  0.9624  0.9623  0.9620
2024-03-21 19:49:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 19:49:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #1: GFLOPs: 1346.2875. Time: 15.2061 us. Best GFLOPs: 1346.2875
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #2: GFLOPs: 363.0502. Time: 56.3884 us. Best GFLOPs: 1346.2875
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #3: GFLOPs: 1008.6474. Time: 20.2963 us. Best GFLOPs: 1346.2875
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #4: GFLOPs: 204.4746. Time: 100.1191 us. Best GFLOPs: 1346.2875
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #5: GFLOPs: 144.2527. Time: 141.9163 us. Best GFLOPs: 1346.2875
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #6: GFLOPs: 222.4150. Time: 92.0433 us. Best GFLOPs: 1346.2875
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #7: GFLOPs: 3159.0760. Time: 6.4803 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #8: GFLOPs: 1368.6943. Time: 14.9572 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #9: GFLOPs: 983.9762. Time: 20.8052 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #10: GFLOPs: 2439.3106. Time: 8.3925 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #11: GFLOPs: 1145.3972. Time: 17.8731 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #12: GFLOPs: 2059.9192. Time: 9.9382 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #13: GFLOPs: 802.0129. Time: 25.5255 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #14: GFLOPs: 94.7392. Time: 216.0859 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #15: GFLOPs: 602.4429. Time: 33.9813 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #16: GFLOPs: 757.6520. Time: 27.0201 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #17: GFLOPs: 1380.3724. Time: 14.8306 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #18: GFLOPs: 1141.1251. Time: 17.9400 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #19: GFLOPs: 624.0008. Time: 32.8073 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #20: GFLOPs: 1337.4042. Time: 15.3071 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #21: GFLOPs: 1968.5049. Time: 10.3997 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #22: GFLOPs: 751.1764. Time: 27.2530 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #23: GFLOPs: 330.0332. Time: 62.0295 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #24: GFLOPs: 93.7203. Time: 218.4352 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #25: GFLOPs: 498.7382. Time: 41.0472 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #26: GFLOPs: 132.5902. Time: 154.3991 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #27: GFLOPs: 107.8467. Time: 189.8232 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #28: GFLOPs: 989.7903. Time: 20.6830 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #29: GFLOPs: 2070.1039. Time: 9.8893 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #30: GFLOPs: 237.7124. Time: 86.1201 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #31: GFLOPs: 2188.4945. Time: 9.3543 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #32: GFLOPs: 328.6996. Time: 62.2812 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #33: GFLOPs: 964.3532. Time: 21.2285 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #34: GFLOPs: 369.1161. Time: 55.4617 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #35: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(48), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(48), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(84), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(48), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(16), rc_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(896))
                                        v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(896) // T.int64(112))
                                        v3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(16), rc_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(48), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(16), rc_0 * T.int64(4) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(48), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 12, 1, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 4, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 8, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 4, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119 = sch.split(loop=l117, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #36: GFLOPs: 1700.9348. Time: 12.0356 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #37: GFLOPs: 1806.2658. Time: 11.3338 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #38: GFLOPs: 241.8402. Time: 84.6501 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #39: GFLOPs: 1564.3395. Time: 13.0866 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #40: GFLOPs: 1735.1700. Time: 11.7982 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #41: GFLOPs: 986.6015. Time: 20.7498 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #42: GFLOPs: 1024.1729. Time: 19.9886 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #43: GFLOPs: 1324.0766. Time: 15.4612 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #44: GFLOPs: 345.5166. Time: 59.2499 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #45: GFLOPs: 729.9096. Time: 28.0470 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #46: GFLOPs: 327.7904. Time: 62.4540 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #47: GFLOPs: 1281.5356. Time: 15.9744 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #48: GFLOPs: 1523.7067. Time: 13.4355 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #49: GFLOPs: 217.6528. Time: 94.0572 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #50: GFLOPs: 1013.3719. Time: 20.2017 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #51: GFLOPs: 195.4265. Time: 104.7545 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #52: GFLOPs: 2267.2819. Time: 9.0292 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #53: GFLOPs: 2125.7805. Time: 9.6303 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #54: GFLOPs: 584.6059. Time: 35.0181 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #55: GFLOPs: 241.0473. Time: 84.9286 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #56: GFLOPs: 2833.8630. Time: 7.2240 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #57: GFLOPs: 2124.5050. Time: 9.6360 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #58: GFLOPs: 444.3995. Time: 46.0662 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #59: GFLOPs: 967.8765. Time: 21.1513 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #60: GFLOPs: 2439.7712. Time: 8.3909 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #61: GFLOPs: 2104.5855. Time: 9.7272 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #62: GFLOPs: 134.4527. Time: 152.2602 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #63: GFLOPs: 234.9796. Time: 87.1216 us. Best GFLOPs: 3159.0760
2024-03-21 20:21:50 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #64: GFLOPs: 71.4969. Time: 286.3313 us. Best GFLOPs: 3159.0760
2024-03-21 20:50:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:50:48 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-03-21 20:50:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 423 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 20:50:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 842 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 20:50:49 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-03-21 20:50:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 20:50:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 20:50:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 20:50:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 20:50:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1055  1.0811  1.0612  1.0582  1.0581  1.0351  1.0211  0.9932  0.9846  0.9846  0.9821  0.9801  0.9616  0.9303  0.9301  0.9299
[17 : 32]:	0.9274  0.9241  0.9211  0.9199  0.9169  0.9123  0.9075  0.9062  0.9062  0.9061  0.9033  0.9023  0.9018  0.9009  0.8963  0.8914
[33 : 48]:	0.8899  0.8880  0.8877  0.8831  0.8724  0.8723  0.8705  0.8676  0.8653  0.8637  0.8622  0.8608  0.8592  0.8488  0.8434  0.8406
[49 : 64]:	0.8404  0.8386  0.8356  0.8349  0.8297  0.8265  0.8245  0.8226  0.8204  0.8204  0.8194  0.8185  0.8185  0.8173  0.8143  0.8095
2024-03-21 20:50:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:50:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #65: GFLOPs: 2833.0957. Time: 7.2259 us. Best GFLOPs: 3159.0760
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #66: GFLOPs: 3178.5706. Time: 6.4406 us. Best GFLOPs: 3178.5706
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #67: GFLOPs: 3070.2149. Time: 6.6679 us. Best GFLOPs: 3178.5706
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #68: GFLOPs: 2560.6422. Time: 7.9948 us. Best GFLOPs: 3178.5706
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #69: GFLOPs: 3199.8486. Time: 6.3977 us. Best GFLOPs: 3199.8486
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #70: GFLOPs: 3067.2230. Time: 6.6744 us. Best GFLOPs: 3199.8486
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #71: GFLOPs: 3155.1271. Time: 6.4884 us. Best GFLOPs: 3199.8486
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #72: GFLOPs: 3286.8701. Time: 6.2284 us. Best GFLOPs: 3286.8701
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #73: GFLOPs: 1481.8466. Time: 13.8151 us. Best GFLOPs: 3286.8701
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #74: GFLOPs: 1481.5319. Time: 13.8180 us. Best GFLOPs: 3286.8701
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #75: GFLOPs: 1598.8213. Time: 12.8043 us. Best GFLOPs: 3286.8701
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #76: GFLOPs: 3210.7726. Time: 6.3760 us. Best GFLOPs: 3286.8701
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #77: GFLOPs: 3171.5059. Time: 6.4549 us. Best GFLOPs: 3286.8701
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #78: GFLOPs: 3208.3142. Time: 6.3809 us. Best GFLOPs: 3286.8701
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #79: GFLOPs: 3386.8162. Time: 6.0446 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #80: GFLOPs: 2393.0072. Time: 8.5548 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #81: GFLOPs: 3161.9145. Time: 6.4745 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #82: GFLOPs: 3288.3958. Time: 6.2255 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #83: GFLOPs: 3253.3418. Time: 6.2925 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #84: GFLOPs: 2848.1465. Time: 7.1878 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #85: GFLOPs: 3054.4826. Time: 6.7022 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #86: GFLOPs: 2969.7744. Time: 6.8934 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #87: GFLOPs: 2865.6169. Time: 7.1439 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #88: GFLOPs: 2902.2210. Time: 7.0538 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #89: GFLOPs: 2902.1784. Time: 7.0539 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #90: GFLOPs: 3041.5450. Time: 6.7307 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #91: GFLOPs: 3384.9209. Time: 6.0479 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #92: GFLOPs: 3080.2430. Time: 6.6462 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #93: GFLOPs: 2600.5962. Time: 7.8720 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #94: GFLOPs: 3059.6064. Time: 6.6910 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #95: GFLOPs: 2895.5600. Time: 7.0701 us. Best GFLOPs: 3386.8162
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #96: GFLOPs: 3540.4942. Time: 5.7822 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #97: GFLOPs: 3218.1902. Time: 6.3613 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #98: GFLOPs: 3307.1434. Time: 6.1902 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #99: GFLOPs: 2979.6298. Time: 6.8706 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #100: GFLOPs: 3380.1149. Time: 6.0565 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #101: GFLOPs: 1315.1469. Time: 15.5662 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #102: GFLOPs: 2444.0345. Time: 8.3762 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #103: GFLOPs: 2994.3219. Time: 6.8369 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #104: GFLOPs: 1466.4590. Time: 13.9600 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #105: GFLOPs: 3031.3641. Time: 6.7533 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #106: GFLOPs: 1550.7948. Time: 13.2008 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #107: GFLOPs: 3144.7863. Time: 6.5098 us. Best GFLOPs: 3540.4942
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #108: GFLOPs: 3731.0867. Time: 5.4868 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #109: GFLOPs: 1531.8838. Time: 13.3638 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #110: GFLOPs: 1717.2687. Time: 11.9211 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #111: GFLOPs: 2660.3970. Time: 7.6950 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #112: GFLOPs: 3167.5648. Time: 6.4629 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #113: GFLOPs: 3066.3992. Time: 6.6762 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #114: GFLOPs: 3384.9334. Time: 6.0479 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #115: GFLOPs: 3132.0130. Time: 6.5363 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #116: GFLOPs: 1425.6185. Time: 14.3599 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #117: GFLOPs: 3454.8226. Time: 5.9256 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #118: GFLOPs: 2864.5999. Time: 7.1465 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #119: GFLOPs: 3558.4699. Time: 5.7530 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #120: GFLOPs: 2649.8757. Time: 7.7256 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #121: GFLOPs: 1530.7545. Time: 13.3737 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #122: GFLOPs: 2329.9815. Time: 8.7863 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #123: GFLOPs: 717.2485. Time: 28.5421 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #124: GFLOPs: 2183.7575. Time: 9.3746 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #125: GFLOPs: 2193.8187. Time: 9.3316 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #126: GFLOPs: 111.0447. Time: 184.3565 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #127: GFLOPs: 1472.8588. Time: 13.8994 us. Best GFLOPs: 3731.0867
2024-03-21 20:51:41 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #128: GFLOPs: 3879.7118. Time: 5.2766 us. Best GFLOPs: 3879.7118
2024-03-21 21:48:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 21:48:29 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 21:48:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 385 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 21:48:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 778 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 21:48:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 1159 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 21:48:31 [INFO] [evolutionary_search.cc:723] Sampled 71 candidate(s)
2024-03-21 21:48:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 21:48:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 21:48:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 21:48:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec70e2b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed801d38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed526488)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ebdd5488)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7cdd88)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801c38)]: 0 failure(s)
2024-03-21 21:48:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9852  0.9468  0.9283  0.9244  0.9207  0.9196  0.9151  0.9140  0.9138  0.9118  0.9118  0.9112  0.9087  0.9079  0.9013  0.8996
[17 : 32]:	0.8968  0.8925  0.8884  0.8877  0.8863  0.8861  0.8842  0.8834  0.8806  0.8794  0.8774  0.8761  0.8758  0.8737  0.8697  0.8687
[33 : 48]:	0.8682  0.8654  0.8648  0.8635  0.8628  0.8627  0.8617  0.8564  0.8559  0.8551  0.8543  0.8541  0.8535  0.8522  0.8522  0.8514
[49 : 64]:	0.8512  0.8510  0.8509  0.8509  0.8503  0.8498  0.8498  0.8490  0.8489  0.8486  0.8483  0.8479  0.8475  0.8474  0.8472  0.8471
2024-03-21 21:48:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 21:48:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #129: GFLOPs: 3565.4635. Time: 5.7417 us. Best GFLOPs: 3879.7118
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #130: GFLOPs: 3734.3446. Time: 5.4820 us. Best GFLOPs: 3879.7118
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #131: GFLOPs: 3812.4346. Time: 5.3697 us. Best GFLOPs: 3879.7118
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #132: GFLOPs: 3669.5169. Time: 5.5789 us. Best GFLOPs: 3879.7118
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #133: GFLOPs: 3945.7265. Time: 5.1883 us. Best GFLOPs: 3945.7265
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #134: GFLOPs: 3845.8959. Time: 5.3230 us. Best GFLOPs: 3945.7265
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #135: GFLOPs: 3696.7980. Time: 5.5377 us. Best GFLOPs: 3945.7265
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #136: GFLOPs: 3634.7557. Time: 5.6322 us. Best GFLOPs: 3945.7265
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #137: GFLOPs: 3603.3029. Time: 5.6814 us. Best GFLOPs: 3945.7265
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #138: GFLOPs: 3602.8665. Time: 5.6821 us. Best GFLOPs: 3945.7265
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #139: GFLOPs: 3967.3938. Time: 5.1600 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #140: GFLOPs: 3633.8639. Time: 5.6336 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #141: GFLOPs: 3544.3337. Time: 5.7759 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #142: GFLOPs: 3570.1022. Time: 5.7342 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #143: GFLOPs: 3463.3550. Time: 5.9110 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #144: GFLOPs: 3446.2344. Time: 5.9403 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #145: GFLOPs: 3504.0414. Time: 5.8423 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #146: GFLOPs: 3450.3702. Time: 5.9332 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #147: GFLOPs: 3599.3619. Time: 5.6876 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #148: GFLOPs: 3540.7398. Time: 5.7818 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #149: GFLOPs: 3599.3966. Time: 5.6876 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #150: GFLOPs: 3493.6243. Time: 5.8598 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #151: GFLOPs: 3558.0568. Time: 5.7536 us. Best GFLOPs: 3967.3938
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #152: GFLOPs: 4352.7195. Time: 4.7032 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #153: GFLOPs: 3371.8314. Time: 6.0714 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #154: GFLOPs: 3650.9075. Time: 5.6073 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #155: GFLOPs: 3539.3310. Time: 5.7841 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #156: GFLOPs: 3538.3907. Time: 5.7856 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #157: GFLOPs: 3563.0812. Time: 5.7455 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #158: GFLOPs: 3701.6498. Time: 5.5305 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #159: GFLOPs: 3482.3562. Time: 5.8787 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #160: GFLOPs: 3855.9769. Time: 5.3091 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #161: GFLOPs: 3426.1765. Time: 5.9751 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #162: GFLOPs: 3359.1072. Time: 6.0944 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #163: GFLOPs: 3972.4804. Time: 5.1534 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #164: GFLOPs: 3957.0505. Time: 5.1735 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #165: GFLOPs: 2582.5428. Time: 7.9270 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #166: GFLOPs: 3292.3470. Time: 6.2180 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #167: GFLOPs: 3474.1528. Time: 5.8926 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #168: GFLOPs: 2754.8132. Time: 7.4313 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #169: GFLOPs: 3380.6163. Time: 6.0556 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #170: GFLOPs: 3554.0650. Time: 5.7601 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #171: GFLOPs: 3466.0149. Time: 5.9064 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #172: GFLOPs: 3542.3734. Time: 5.7791 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #173: GFLOPs: 4061.7568. Time: 5.0401 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #174: GFLOPs: 3406.6974. Time: 6.0093 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #175: GFLOPs: 3331.5327. Time: 6.1449 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #176: GFLOPs: 3474.2248. Time: 5.8925 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #177: GFLOPs: 3300.2256. Time: 6.2032 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #178: GFLOPs: 3383.3485. Time: 6.0508 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #179: GFLOPs: 3956.4856. Time: 5.1742 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #180: GFLOPs: 3934.4279. Time: 5.2032 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #181: GFLOPs: 3292.3562. Time: 6.2180 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #182: GFLOPs: 3654.7733. Time: 5.6014 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #183: GFLOPs: 3654.8279. Time: 5.6013 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #184: GFLOPs: 3400.2352. Time: 6.0207 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #185: GFLOPs: 3404.3121. Time: 6.0135 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #186: GFLOPs: 3626.4381. Time: 5.6452 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #187: GFLOPs: 3912.4239. Time: 5.2325 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #188: GFLOPs: 3925.2491. Time: 5.2154 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #189: GFLOPs: 3111.5776. Time: 6.5792 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #190: GFLOPs: 1100.6834. Time: 18.5992 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #191: GFLOPs: 960.5597. Time: 21.3124 us. Best GFLOPs: 4352.7195
2024-03-21 21:49:23 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_nn_relu_2] Trial #192: GFLOPs: 397.6188. Time: 51.4860 us. Best GFLOPs: 4352.7195
