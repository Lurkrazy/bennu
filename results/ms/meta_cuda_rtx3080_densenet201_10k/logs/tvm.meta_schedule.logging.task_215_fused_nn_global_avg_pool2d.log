2024-03-21 13:42:34 [INFO] [task_scheduler.cc:160] Initializing Task #215: "fused_nn_global_avg_pool2d"
2024-03-21 13:42:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1920), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(1920), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1920), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-03-21 13:42:34 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-03-21 13:42:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1920), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(30), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(60), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-03-21 13:42:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1920), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(1920), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(1920), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1920), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(128)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=5)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-03-21 15:45:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:45:35 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 15:45:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f5fd8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ef3ffd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f59dba38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2461d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f687f8e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f8f036b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8762ad8)]: 0 failure(s)
2024-03-21 15:45:35 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-21 15:45:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f5fd8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ef3ffd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f59dba38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2461d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f687f8e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f8f036b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8762ad8)]: 0 failure(s)
2024-03-21 15:45:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f5fd8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ef3ffd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f59dba38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2461d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f687f8e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f8f036b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8762ad8)]: 0 failure(s)
2024-03-21 15:45:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f5fd8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ef3ffd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f59dba38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2461d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f687f8e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f8f036b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8762ad8)]: 0 failure(s)
2024-03-21 15:45:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f5fd8f28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ef3ffd88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f59dba38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2461d58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f687f8e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f8f036b8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f8762ad8)]: 0 failure(s)
2024-03-21 15:45:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9973  0.9953  0.9918  0.9833  0.9812  0.9715  0.9672  0.9608  0.9580  0.9415  0.9397  0.9311  0.9306  0.9304  0.9157  0.9026
[17 : 32]:	0.8939  0.8901  0.8890  0.8866  0.8807  0.8772  0.8763  0.8734  0.8654  0.8640  0.8567  0.8548  0.8499  0.8477  0.8453  0.8316
[33 : 48]:	0.8106  0.8101  0.8052  0.8029  0.8017  0.8005  0.7981  0.7970  0.7969  0.7965  0.7876  0.7832  0.7822  0.7810  0.7594  0.7579
[49 : 64]:	0.7574  0.7528  0.7506  0.7474  0.7390  0.7387  0.7349  0.7337  0.7337  0.7278  0.7273  0.7239  0.7229  0.7225  0.7209  0.7123
2024-03-21 15:45:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:45:36 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 21.4848. Time: 4.4683 us. Best GFLOPs: 21.4848
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 18.8697. Time: 5.0875 us. Best GFLOPs: 21.4848
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 21.4240. Time: 4.4810 us. Best GFLOPs: 21.4848
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 21.6900. Time: 4.4260 us. Best GFLOPs: 21.6900
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 6.3003. Time: 15.2374 us. Best GFLOPs: 21.6900
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 34.1971. Time: 2.8073 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 21.4929. Time: 4.4666 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 28.8616. Time: 3.3262 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 21.9234. Time: 4.3789 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 12.6851. Time: 7.5680 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 13.1047. Time: 7.3256 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 18.3318. Time: 5.2368 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 18.2020. Time: 5.2741 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 21.4820. Time: 4.4689 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 13.1050. Time: 7.3255 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 18.2272. Time: 5.2669 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 32.9439. Time: 2.9140 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 21.5724. Time: 4.4501 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 10.7502. Time: 8.9301 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 6.2955. Time: 15.2490 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 21.6431. Time: 4.4356 us. Best GFLOPs: 34.1971
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 34.2012. Time: 2.8069 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 21.6857. Time: 4.4269 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 18.2009. Time: 5.2745 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 21.4744. Time: 4.4704 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 32.9444. Time: 2.9140 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 18.2019. Time: 5.2742 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 21.8545. Time: 4.3927 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 6.2965. Time: 15.2467 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 21.8204. Time: 4.3995 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 21.5601. Time: 4.4527 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 21.7072. Time: 4.4225 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 21.5835. Time: 4.4478 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 13.1042. Time: 7.3259 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 21.6847. Time: 4.4271 us. Best GFLOPs: 34.2012
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 34.2084. Time: 2.8063 us. Best GFLOPs: 34.2084
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 17.8938. Time: 5.3650 us. Best GFLOPs: 34.2084
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 34.4690. Time: 2.7851 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 13.1045. Time: 7.3257 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 21.5371. Time: 4.4574 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 18.2163. Time: 5.2700 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 13.0922. Time: 7.3326 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 6.3521. Time: 15.1131 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 21.6255. Time: 4.4392 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 18.2224. Time: 5.2682 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 6.3748. Time: 15.0592 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 21.9105. Time: 4.3815 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 21.7204. Time: 4.4198 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 13.1052. Time: 7.3253 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 21.7101. Time: 4.4219 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 6.2922. Time: 15.2570 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 6.2923. Time: 15.2567 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 34.2902. Time: 2.7996 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 18.3283. Time: 5.2378 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 28.8617. Time: 3.3262 us. Best GFLOPs: 34.4690
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 34.5184. Time: 2.7811 us. Best GFLOPs: 34.5184
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 21.5945. Time: 4.4456 us. Best GFLOPs: 34.5184
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 21.5913. Time: 4.4462 us. Best GFLOPs: 34.5184
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 21.5923. Time: 4.4460 us. Best GFLOPs: 34.5184
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 21.8401. Time: 4.3956 us. Best GFLOPs: 34.5184
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 32.9455. Time: 2.9139 us. Best GFLOPs: 34.5184
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 34.3102. Time: 2.7980 us. Best GFLOPs: 34.5184
2024-03-21 15:51:12 [INFO] [task_scheduler.cc:131] [Task #215: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 34.2252. Time: 2.8050 us. Best GFLOPs: 34.5184
