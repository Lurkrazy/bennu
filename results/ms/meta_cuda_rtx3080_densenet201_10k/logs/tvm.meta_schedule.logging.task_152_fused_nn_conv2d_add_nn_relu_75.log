2024-03-21 13:42:30 [INFO] [task_scheduler.cc:160] Initializing Task #152: "fused_nn_conv2d_add_nn_relu_75"
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(384), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(384), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(16), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(336)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), rc_0 * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(24))
                                    v1 = T.axis.spatial(T.int64(384), rc_0 * T.int64(24) + ax0_ax1_ax2_ax3_fused % T.int64(24))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(384), rc_0 * T.int64(24) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 4, 1, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 12, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(336)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(24))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(24) + ax0_ax1_ax2_ax3_fused % T.int64(24))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(24) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 4, 1, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 12, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(384), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(384), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(336)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(24))
                                    v1 = T.axis.spatial(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(24) + ax0_ax1_ax2_ax3_fused % T.int64(24))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(384), rc_0_ry_0_rx_0_fused * T.int64(24) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 4, 1, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 12, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 15:04:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:04:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 15:04:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f637e5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f8054998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efe038)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f4149268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edd41538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7041e68)]: 482 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2faa7cbb8)]: 0 failure(s)
2024-03-21 15:04:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f637e5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f8054998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efe038)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f4149268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edd41538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7041e68)]: 958 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2faa7cbb8)]: 0 failure(s)
2024-03-21 15:04:54 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-03-21 15:04:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f637e5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f8054998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efe038)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f4149268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edd41538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7041e68)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2faa7cbb8)]: 0 failure(s)
2024-03-21 15:04:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f637e5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f8054998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efe038)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f4149268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edd41538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7041e68)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2faa7cbb8)]: 0 failure(s)
2024-03-21 15:04:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f637e5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f8054998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efe038)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f4149268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edd41538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7041e68)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2faa7cbb8)]: 0 failure(s)
2024-03-21 15:04:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f637e5b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f8054998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9efe038)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f4149268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2edd41538)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7041e68)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2faa7cbb8)]: 0 failure(s)
2024-03-21 15:04:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9984  0.9982  0.9969  0.9962  0.9961  0.9959  0.9955  0.9950  0.9949  0.9943  0.9936  0.9927  0.9925  0.9919  0.9910
[17 : 32]:	0.9907  0.9907  0.9906  0.9897  0.9890  0.9871  0.9866  0.9859  0.9856  0.9856  0.9856  0.9847  0.9844  0.9820  0.9812  0.9811
[33 : 48]:	0.9801  0.9794  0.9784  0.9767  0.9742  0.9739  0.9738  0.9737  0.9719  0.9707  0.9701  0.9695  0.9695  0.9695  0.9685  0.9677
[49 : 64]:	0.9668  0.9653  0.9642  0.9637  0.9637  0.9632  0.9628  0.9611  0.9605  0.9568  0.9567  0.9561  0.9559  0.9550  0.9548  0.9535
2024-03-21 15:05:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:05:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #1: GFLOPs: 361.5871. Time: 53.4249 us. Best GFLOPs: 361.5871
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #2: GFLOPs: 142.2112. Time: 135.8385 us. Best GFLOPs: 361.5871
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #3: GFLOPs: 84.6469. Time: 228.2158 us. Best GFLOPs: 361.5871
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #4: GFLOPs: 257.7505. Time: 74.9475 us. Best GFLOPs: 361.5871
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #5: GFLOPs: 387.0603. Time: 49.9089 us. Best GFLOPs: 387.0603
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #6: GFLOPs: 203.6960. Time: 94.8362 us. Best GFLOPs: 387.0603
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #7: GFLOPs: 93.1534. Time: 207.3758 us. Best GFLOPs: 387.0603
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #8: GFLOPs: 1422.1843. Time: 13.5832 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #9: GFLOPs: 282.8637. Time: 68.2935 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #10: GFLOPs: 161.4852. Time: 119.6256 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #11: GFLOPs: 272.2515. Time: 70.9556 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #12: GFLOPs: 253.6521. Time: 76.1585 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #13: GFLOPs: 46.3372. Time: 416.8953 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #14: GFLOPs: 449.7060. Time: 42.9564 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #15: GFLOPs: 407.4164. Time: 47.4153 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #16: GFLOPs: 1073.3736. Time: 17.9972 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #17: GFLOPs: 181.4014. Time: 106.4918 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #18: GFLOPs: 632.1775. Time: 30.5575 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #19: GFLOPs: 291.1617. Time: 66.3472 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #20: GFLOPs: 496.2442. Time: 38.9279 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #21: GFLOPs: 710.3450. Time: 27.1949 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #22: GFLOPs: 11.2133. Time: 1722.7477 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #23: GFLOPs: 654.6179. Time: 29.5100 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #24: GFLOPs: 75.2191. Time: 256.8199 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #25: GFLOPs: 116.1545. Time: 166.3108 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #26: GFLOPs: 260.0918. Time: 74.2729 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #27: GFLOPs: 41.5056. Time: 465.4257 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #28: GFLOPs: 454.9412. Time: 42.4621 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #29: GFLOPs: 5.1980. Time: 3716.3614 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #30: GFLOPs: 206.3700. Time: 93.6074 us. Best GFLOPs: 1422.1843
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #31: GFLOPs: 1487.1253. Time: 12.9900 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #32: GFLOPs: 272.4253. Time: 70.9103 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #33: GFLOPs: 545.6171. Time: 35.4053 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #34: GFLOPs: 190.7519. Time: 101.2717 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #35: GFLOPs: 184.8361. Time: 104.5129 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #36: GFLOPs: 331.2019. Time: 58.3262 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #37: GFLOPs: 53.7348. Time: 359.5017 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #38: GFLOPs: 101.3027. Time: 190.6934 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #39: GFLOPs: 631.8367. Time: 30.5740 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #40: GFLOPs: 198.6946. Time: 97.2234 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #41: GFLOPs: 550.1922. Time: 35.1109 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #42: GFLOPs: 378.3331. Time: 51.0602 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #43: GFLOPs: 977.5815. Time: 19.7608 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #44: GFLOPs: 207.8875. Time: 92.9241 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #45: GFLOPs: 125.7659. Time: 153.6010 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #46: GFLOPs: 226.1668. Time: 85.4138 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #47: GFLOPs: 303.0161. Time: 63.7516 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #48: GFLOPs: 144.1648. Time: 133.9977 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #49: GFLOPs: 76.5278. Time: 252.4281 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #50: GFLOPs: 10.2146. Time: 1891.1927 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #51: GFLOPs: 291.0516. Time: 66.3723 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #52: GFLOPs: 782.8931. Time: 24.6748 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #53: GFLOPs: 475.7631. Time: 40.6037 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #54: GFLOPs: 618.5551. Time: 31.2305 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #55: GFLOPs: 10.4148. Time: 1854.8433 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #56: GFLOPs: 251.6516. Time: 76.7639 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #57: GFLOPs: 255.8474. Time: 75.5050 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #58: GFLOPs: 55.7977. Time: 346.2109 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #59: GFLOPs: 380.5873. Time: 50.7578 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #60: GFLOPs: 652.0324. Time: 29.6270 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #61: GFLOPs: 718.2546. Time: 26.8954 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #62: GFLOPs: 679.9450. Time: 28.4108 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #63: GFLOPs: 16.8451. Time: 1146.7869 us. Best GFLOPs: 1487.1253
2024-03-21 15:49:27 [INFO] [task_scheduler.cc:131] [Task #152: fused_nn_conv2d_add_nn_relu_75] Trial #64: GFLOPs: 536.4803. Time: 36.0083 us. Best GFLOPs: 1487.1253
