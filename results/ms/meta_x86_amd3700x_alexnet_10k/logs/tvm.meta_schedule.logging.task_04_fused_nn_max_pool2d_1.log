2024-03-24 09:01:36 [INFO] [task_scheduler.cc:160] Initializing Task #4: "fused_nn_max_pool2d_1"
2024-03-24 09:01:36 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-03-24 09:01:36 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-24 09:01:36 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[9, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-03-24 09:01:36 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4), T.int64(9), T.int64(1)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[9, 1])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-03-24 09:01:36 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(48), T.int64(27), T.int64(27), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 16, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(48), T.int64(13), T.int64(13), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-03-24 09:03:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-24 09:03:38 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-24 09:03:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dcec4f48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dc9b3748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dc67fc78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dc6cc5c8)]: 0 failure(s)
2024-03-24 09:03:39 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-24 09:03:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dcec4f48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dc9b3748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dc67fc78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dc6cc5c8)]: 0 failure(s)
2024-03-24 09:03:39 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dcec4f48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dc9b3748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dc67fc78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dc6cc5c8)]: 0 failure(s)
2024-03-24 09:03:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dcec4f48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dc9b3748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dc67fc78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dc6cc5c8)]: 0 failure(s)
2024-03-24 09:03:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dcec4f48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dc9b3748)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dc67fc78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dc6cc5c8)]: 0 failure(s)
2024-03-24 09:03:40 [INFO] [evolutionary_search.cc:649] Scores of the best 42 candidates:
[1 : 16]:	0.9874  0.9857  0.9638  0.9366  0.9313  0.9280  0.9272  0.9231  0.9110  0.8543  0.7723  0.7453  0.6801  0.6783  0.6292  0.6051
[17 : 32]:	0.5688  0.4938  0.4890  0.4695  0.4608  0.4524  0.4326  0.3153  0.3094  0.3075  0.2977  0.2397  0.2275  0.1844  0.1669  0.1205
[33 : 42]:	0.0912  0.0832  0.0656  0.0648  0.0409  0.0407  0.0375  0.0256  0.0197  0.0035
2024-03-24 09:03:40 [INFO] [evolutionary_search.cc:727] Got 42 candidate(s) with evolutionary search
2024-03-24 09:03:40 [INFO] [evolutionary_search.cc:730] Sending 42 candidates(s) for measurement
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #1: GFLOPs: 11.9198. Time: 24.4998 us. Best GFLOPs: 11.9198
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #2: GFLOPs: 11.5493. Time: 25.2857 us. Best GFLOPs: 11.9198
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #3: GFLOPs: 21.0072. Time: 13.9016 us. Best GFLOPs: 21.0072
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #4: GFLOPs: 33.5229. Time: 8.7114 us. Best GFLOPs: 33.5229
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 32.5971. Time: 8.9588 us. Best GFLOPs: 33.5229
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 21.9175. Time: 13.3241 us. Best GFLOPs: 33.5229
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #7: GFLOPs: 21.4125. Time: 13.6384 us. Best GFLOPs: 33.5229
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 33.4530. Time: 8.7296 us. Best GFLOPs: 33.5229
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 11.5738. Time: 25.2321 us. Best GFLOPs: 33.5229
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 16.6287. Time: 17.5620 us. Best GFLOPs: 33.5229
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #11: GFLOPs: 32.1610. Time: 9.0803 us. Best GFLOPs: 33.5229
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 19.8570. Time: 14.7067 us. Best GFLOPs: 33.5229
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 60.9570. Time: 4.7908 us. Best GFLOPs: 60.9570
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 12.0606. Time: 24.2137 us. Best GFLOPs: 60.9570
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 13.8266. Time: 21.1210 us. Best GFLOPs: 60.9570
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 22.1374. Time: 13.1918 us. Best GFLOPs: 60.9570
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 11.7031. Time: 24.9534 us. Best GFLOPs: 60.9570
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 63.3833. Time: 4.6074 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 31.7096. Time: 9.2096 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #20: GFLOPs: 58.9886. Time: 4.9507 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 17.1602. Time: 17.0180 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 16.7862. Time: 17.3971 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 16.4479. Time: 17.7549 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 58.8369. Time: 4.9634 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 32.9594. Time: 8.8604 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 21.2774. Time: 13.7250 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 31.6794. Time: 9.2184 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 21.0756. Time: 13.8564 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 19.4546. Time: 15.0110 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 19.5433. Time: 14.9429 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 60.3987. Time: 4.8351 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 22.8581. Time: 12.7759 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #33: GFLOPs: 14.3775. Time: 20.3118 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 17.4359. Time: 16.7489 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 22.7293. Time: 12.8483 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 17.4576. Time: 16.7281 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 16.9950. Time: 17.1835 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #38: GFLOPs: 19.8876. Time: 14.6842 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 16.3020. Time: 17.9139 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 34.7246. Time: 8.4099 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 16.6450. Time: 17.5447 us. Best GFLOPs: 63.3833
2024-03-24 09:10:36 [INFO] [task_scheduler.cc:131] [Task #4: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 11.7372. Time: 24.8810 us. Best GFLOPs: 63.3833
