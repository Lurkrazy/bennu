2024-03-21 16:45:32 [INFO] [task_scheduler.cc:160] Initializing Task #50: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5"
2024-03-21 16:45:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)))
        input_tile = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(80), T.int64(54), T.int64(54)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for ci, p, eps, nu in T.grid(T.int64(80), T.int64(676), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(80), T.int64(676), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(192), T.int64(676), T.int64(80)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(192), T.int64(676), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(192), T.int64(52), T.int64(52)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(52), T.int64(52)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(52), T.int64(52)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 16:45:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 16:45:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
            inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(845), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676) + ax0)
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676))
                                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676) + ax2)
                            v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(48), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(416), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(13), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(216320)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(54080))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(54080) // T.int64(13520))
                                    v2 = T.axis.spatial(T.int64(80), ci_0 * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(13520) // T.int64(676))
                                    v3 = T.axis.spatial(T.int64(676), ax0_ax1_ax2_ax3_fused % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1280)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(320))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(320) // T.int64(80))
                                    v2 = T.axis.spatial(T.int64(80), ci_0 * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(80) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(208) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(208) // T.int64(52) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(52) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3 * T.int64(4) + p_4)
                                    v_ci = T.axis.reduce(T.int64(80), ci_0 * T.int64(20) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(208) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(208) // T.int64(52) + ax1)
                                v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) + ax2)
                                v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(52) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                            v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(676))
                            v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(129792))
                            T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[48, 4, 1, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 13, 13, 1, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[4, 20, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-03-21 16:45:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
            inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(845), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676) + ax0)
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676))
                                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676) + ax2)
                            v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(48), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(416), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(13), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(216320)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(54080))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(54080) // T.int64(13520))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(13520) // T.int64(676))
                                    v3 = T.axis.spatial(T.int64(676), ax0_ax1_ax2_ax3_fused % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1280)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(320))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(320) // T.int64(80))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(80) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(208) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(208) // T.int64(52) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(52) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3 * T.int64(4) + p_4)
                                    v_ci = T.axis.reduce(T.int64(80), ci_0_fused * T.int64(20) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(208) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(208) // T.int64(52) + ax1)
                                v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) + ax2)
                                v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(52) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1014), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                            v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(676))
                            v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[48, 4, 1, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 13, 13, 1, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[4, 20, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-03-21 16:45:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
            inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(845), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676) + ax0)
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676))
                                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(676) + ax2)
                            v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(676) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(48), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(416), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(13), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(216320)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(54080))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(54080) // T.int64(13520))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(13520) // T.int64(676))
                                    v3 = T.axis.spatial(T.int64(676), ax0_ax1_ax2_ax3_fused % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1280)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(320))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(320) // T.int64(80))
                                    v2 = T.axis.spatial(T.int64(80), ci_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(80) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(20), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(208) * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(208) // T.int64(52) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(52) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + p_3 * T.int64(4) + p_4)
                                    v_ci = T.axis.reduce(T.int64(80), ci_0_fused * T.int64(20) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(208) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(208) // T.int64(52) + ax1)
                                v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + eps_1_nu_1_co_1_p_1_fused % T.int64(52) // T.int64(13) + ax2)
                                v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(52) + eps_2_nu_2_co_2_p_2_fused * T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1014), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                            v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(676))
                            v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 4, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[48, 4, 1, 1, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 13, 13, 1, 4])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[4, 20, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-03-21 17:25:05 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:25:05 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 17:25:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 501 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:25:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 1007 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:25:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 1514 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:25:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 2011 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:25:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 2513 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:25:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 3011 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:25:21 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-03-21 17:25:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 142 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:25:33 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 133 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:25:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:25:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:25:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9971  0.9947  0.9944  0.9938  0.9925  0.9912  0.9910  0.9910  0.9904  0.9893  0.9892  0.9890  0.9868  0.9860  0.9856
[17 : 32]:	0.9852  0.9852  0.9848  0.9836  0.9830  0.9821  0.9819  0.9813  0.9812  0.9812  0.9798  0.9794  0.9782  0.9777  0.9773  0.9768
[33 : 48]:	0.9759  0.9756  0.9753  0.9752  0.9740  0.9738  0.9733  0.9732  0.9717  0.9711  0.9698  0.9695  0.9686  0.9682  0.9680  0.9679
[49 : 64]:	0.9676  0.9670  0.9665  0.9662  0.9662  0.9660  0.9650  0.9639  0.9636  0.9632  0.9616  0.9614  0.9604  0.9601  0.9600  0.9592
2024-03-21 17:25:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:25:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #1: GFLOPs: 837.3782. Time: 477.3940 us. Best GFLOPs: 837.3782
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #2: GFLOPs: 364.1923. Time: 1097.6601 us. Best GFLOPs: 837.3782
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #3: GFLOPs: 388.9222. Time: 1027.8645 us. Best GFLOPs: 837.3782
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #4: GFLOPs: 56.5586. Time: 7068.0577 us. Best GFLOPs: 837.3782
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #5: GFLOPs: 346.7228. Time: 1152.9651 us. Best GFLOPs: 837.3782
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #6: GFLOPs: 36.7862. Time: 10867.0974 us. Best GFLOPs: 837.3782
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #7: GFLOPs: 4135.7102. Time: 96.6604 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #8: GFLOPs: 769.3238. Time: 519.6243 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #9: GFLOPs: 13.1853. Time: 30318.5920 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #10: GFLOPs: 396.3833. Time: 1008.5171 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #11: GFLOPs: 3217.4680. Time: 124.2466 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #12: GFLOPs: 3940.1964. Time: 101.4567 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #13: GFLOPs: 3452.1045. Time: 115.8016 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #14: GFLOPs: 345.5166. Time: 1156.9905 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #15: GFLOPs: 2290.2650. Time: 174.5472 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #16: GFLOPs: 87.3178. Time: 4578.2110 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #17: GFLOPs: 453.7713. Time: 880.9709 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #18: GFLOPs: 359.7219. Time: 1111.3013 us. Best GFLOPs: 4135.7102
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #19: GFLOPs: 4844.8689. Time: 82.5119 us. Best GFLOPs: 4844.8689
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #20: GFLOPs: 4115.1266. Time: 97.1439 us. Best GFLOPs: 4844.8689
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #21: GFLOPs: 4260.0603. Time: 93.8389 us. Best GFLOPs: 4844.8689
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #22: GFLOPs: 314.0996. Time: 1272.7153 us. Best GFLOPs: 4844.8689
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #23: GFLOPs: 2138.0719. Time: 186.9719 us. Best GFLOPs: 4844.8689
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #24: GFLOPs: 3149.2924. Time: 126.9362 us. Best GFLOPs: 4844.8689
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #25: GFLOPs: 4901.2578. Time: 81.5626 us. Best GFLOPs: 4901.2578
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #26: GFLOPs: 44.2393. Time: 9036.2879 us. Best GFLOPs: 4901.2578
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #27: GFLOPs: 803.3976. Time: 497.5859 us. Best GFLOPs: 4901.2578
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #28: GFLOPs: 6019.9607. Time: 66.4056 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #29: GFLOPs: 2625.0184. Time: 152.2882 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #30: GFLOPs: 3476.1355. Time: 115.0011 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #31: GFLOPs: 209.1146. Time: 1911.6764 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #32: GFLOPs: 1327.5195. Time: 301.1326 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #33: GFLOPs: 906.1107. Time: 441.1816 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #34: GFLOPs: 98.3766. Time: 4063.5596 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #35: GFLOPs: 43.6279. Time: 9162.9264 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #36: GFLOPs: 392.7640. Time: 1017.8107 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #37: GFLOPs: 2486.1980. Time: 160.7914 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #38: GFLOPs: 192.7988. Time: 2073.4538 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #39: GFLOPs: 3007.5865. Time: 132.9170 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #40: GFLOPs: 153.3023. Time: 2607.6537 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #41: GFLOPs: 3898.4224. Time: 102.5439 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #42: GFLOPs: 5580.2757. Time: 71.6379 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #43: GFLOPs: 36.8773. Time: 10840.2687 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #44: GFLOPs: 4381.9038. Time: 91.2296 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #45: GFLOPs: 164.0440. Time: 2436.9028 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #46: GFLOPs: 3322.5739. Time: 120.3162 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #47: GFLOPs: 3429.0157. Time: 116.5814 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #48: GFLOPs: 1440.0629. Time: 277.5985 us. Best GFLOPs: 6019.9607
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #49: GFLOPs: 6102.9022. Time: 65.5032 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #50: GFLOPs: 4935.2710. Time: 81.0005 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #51: GFLOPs: 443.8701. Time: 900.6223 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #52: GFLOPs: 3657.7208. Time: 109.2919 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #53: GFLOPs: 34.1917. Time: 11691.6910 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #54: GFLOPs: 252.0576. Time: 1585.9840 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #55: GFLOPs: 315.2692. Time: 1267.9936 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #56: GFLOPs: 19.5712. Time: 20425.9322 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #57: GFLOPs: 2397.9285. Time: 166.7103 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #58: GFLOPs: 3301.4966. Time: 121.0843 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #59: GFLOPs: 335.8142. Time: 1190.4181 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #60: GFLOPs: 215.5462. Time: 1854.6346 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #61: GFLOPs: 4330.1691. Time: 92.3196 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #62: GFLOPs: 322.8802. Time: 1238.1044 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #63: GFLOPs: 2989.0945. Time: 133.7393 us. Best GFLOPs: 6102.9022
2024-03-21 17:36:28 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #64: GFLOPs: 9.5786. Time: 41734.8277 us. Best GFLOPs: 6102.9022
2024-03-21 17:56:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:56:58 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 17:57:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 439 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 881 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 1319 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 1758 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 2198 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 2639 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 3082 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:14 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-03-21 17:57:20 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 126 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 17:57:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.7928  1.7596  1.6913  1.6806  1.6593  1.6209  1.6062  1.5984  1.5984  1.5481  1.5338  1.5194  1.5165  1.5165  1.5105  1.5090
[17 : 32]:	1.4899  1.4895  1.4801  1.4801  1.4781  1.4541  1.4394  1.4390  1.4275  1.4205  1.4108  1.3983  1.3975  1.3953  1.3953  1.3934
[33 : 48]:	1.3934  1.3922  1.3903  1.3734  1.3670  1.3611  1.3581  1.3554  1.3532  1.3525  1.3464  1.3461  1.3452  1.3432  1.3373  1.3357
[49 : 64]:	1.3351  1.3341  1.3260  1.3229  1.3203  1.3119  1.3058  1.2963  1.2959  1.2949  1.2949  1.2935  1.2921  1.2881  1.2819  1.2819
2024-03-21 17:57:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:57:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #65: GFLOPs: 5648.9514. Time: 70.7670 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #66: GFLOPs: 5446.9332. Time: 73.3916 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #67: GFLOPs: 5615.5835. Time: 71.1875 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #68: GFLOPs: 5709.8422. Time: 70.0123 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #69: GFLOPs: 5712.4088. Time: 69.9809 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #70: GFLOPs: 5411.9130. Time: 73.8666 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #71: GFLOPs: 3096.7491. Time: 129.0900 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #72: GFLOPs: 2601.5808. Time: 153.6602 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #73: GFLOPs: 2602.4686. Time: 153.6078 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #74: GFLOPs: 2675.8840. Time: 149.3934 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #75: GFLOPs: 5572.6668. Time: 71.7357 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #76: GFLOPs: 4014.9707. Time: 99.5672 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #77: GFLOPs: 5733.8868. Time: 69.7187 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #78: GFLOPs: 4109.6042. Time: 97.2744 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #79: GFLOPs: 5574.5506. Time: 71.7115 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #80: GFLOPs: 5475.3085. Time: 73.0113 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #81: GFLOPs: 3641.3402. Time: 109.7836 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #82: GFLOPs: 3057.4394. Time: 130.7497 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #83: GFLOPs: 3057.5646. Time: 130.7444 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #84: GFLOPs: 3058.2377. Time: 130.7156 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #85: GFLOPs: 4059.0959. Time: 98.4848 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #86: GFLOPs: 2731.2295. Time: 146.3661 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #87: GFLOPs: 3837.2301. Time: 104.1791 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #88: GFLOPs: 31.6554. Time: 12628.4799 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #89: GFLOPs: 2648.4809. Time: 150.9391 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #90: GFLOPs: 2730.4204. Time: 146.4095 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #91: GFLOPs: 3065.4547. Time: 130.4079 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #92: GFLOPs: 4210.6162. Time: 94.9408 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #93: GFLOPs: 2659.0928. Time: 150.3367 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #94: GFLOPs: 2729.3569. Time: 146.4665 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #95: GFLOPs: 2729.2332. Time: 146.4731 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #96: GFLOPs: 3977.7289. Time: 100.4994 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #97: GFLOPs: 3077.1301. Time: 129.9131 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #98: GFLOPs: 2723.0062. Time: 146.8081 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #99: GFLOPs: 2859.2596. Time: 139.8122 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #100: GFLOPs: 2435.7353. Time: 164.1227 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #101: GFLOPs: 5506.9559. Time: 72.5917 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #102: GFLOPs: 2588.8294. Time: 154.4170 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #103: GFLOPs: 3038.7483. Time: 131.5540 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #104: GFLOPs: 1878.1507. Time: 212.8473 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #105: GFLOPs: 3612.4292. Time: 110.6622 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #106: GFLOPs: 3619.7096. Time: 110.4396 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #107: GFLOPs: 2169.9830. Time: 184.2223 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #108: GFLOPs: 2495.9057. Time: 160.1660 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #109: GFLOPs: 2169.7425. Time: 184.2428 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #110: GFLOPs: 3571.0012. Time: 111.9460 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #111: GFLOPs: 2436.4623. Time: 164.0737 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #112: GFLOPs: 2766.4183. Time: 144.5043 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #113: GFLOPs: 3958.7557. Time: 100.9811 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #114: GFLOPs: 2422.1414. Time: 165.0438 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #115: GFLOPs: 2727.7458. Time: 146.5530 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #116: GFLOPs: 2720.6086. Time: 146.9375 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #117: GFLOPs: 2454.1739. Time: 162.8896 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #118: GFLOPs: 2609.9905. Time: 153.1651 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #119: GFLOPs: 2016.6783. Time: 198.2266 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #120: GFLOPs: 2865.5007. Time: 139.5077 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #121: GFLOPs: 2428.7973. Time: 164.5915 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #122: GFLOPs: 2648.5600. Time: 150.9346 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #123: GFLOPs: 2653.8511. Time: 150.6337 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #124: GFLOPs: 5177.4300. Time: 77.2119 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #125: GFLOPs: 5659.2159. Time: 70.6386 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #126: GFLOPs: 2360.3326. Time: 169.3657 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #127: GFLOPs: 2690.3368. Time: 148.5908 us. Best GFLOPs: 6102.9022
2024-03-21 17:58:32 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #128: GFLOPs: 2829.8735. Time: 141.2640 us. Best GFLOPs: 6102.9022
2024-03-21 18:30:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 18:30:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 18:30:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 18:30:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 801 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 18:30:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 1201 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 18:30:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 1600 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 18:30:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 2004 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 18:30:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 2401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 18:30:45 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-03-21 18:30:52 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 18:31:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 18:31:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 18:31:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 18:31:19 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.7767  1.7468  1.6877  1.6785  1.6152  1.6110  1.6108  1.6049  1.5985  1.5846  1.5821  1.5719  1.5695  1.5695  1.5652  1.5652
[17 : 32]:	1.5571  1.5326  1.5326  1.5312  1.4977  1.4934  1.4925  1.4895  1.4740  1.4636  1.4528  1.4503  1.4257  1.4244  1.4242  1.4179
[33 : 48]:	1.4160  1.4077  1.3977  1.3970  1.3968  1.3961  1.3900  1.3899  1.3896  1.3896  1.3855  1.3821  1.3709  1.3693  1.3668  1.3598
[49 : 64]:	1.3576  1.3571  1.3563  1.3554  1.3534  1.3516  1.3512  1.3479  1.3451  1.3422  1.3397  1.3384  1.3367  1.3359  1.3359  1.3329
2024-03-21 18:31:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 18:31:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #129: GFLOPs: 555.0719. Time: 720.1938 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #130: GFLOPs: 617.5292. Time: 647.3530 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #131: GFLOPs: 1.5581. Time: 256569.6817 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #132: GFLOPs: 950.9635. Time: 420.3730 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #133: GFLOPs: 2560.0871. Time: 156.1507 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #134: GFLOPs: 31.9285. Time: 12520.4476 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #135: GFLOPs: 33.1098. Time: 12073.7567 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #136: GFLOPs: 33.3318. Time: 11993.3158 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #137: GFLOPs: 2936.6357. Time: 136.1283 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #138: GFLOPs: 2568.9559. Time: 155.6116 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #139: GFLOPs: 1559.7151. Time: 256.3028 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #140: GFLOPs: 1958.0439. Time: 204.1626 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #141: GFLOPs: 25.5570. Time: 15641.8924 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #142: GFLOPs: 33.4613. Time: 11946.9154 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #143: GFLOPs: 35.0720. Time: 11398.2578 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #144: GFLOPs: 35.1400. Time: 11376.1850 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #145: GFLOPs: 2249.1666. Time: 177.7367 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #146: GFLOPs: 3766.6222. Time: 106.1321 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #147: GFLOPs: 3753.0122. Time: 106.5169 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #148: GFLOPs: 3588.4833. Time: 111.4006 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #149: GFLOPs: 5431.7554. Time: 73.5967 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #150: GFLOPs: 2277.5938. Time: 175.5183 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #151: GFLOPs: 2647.1758. Time: 151.0135 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #152: GFLOPs: 3158.1443. Time: 126.5805 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #153: GFLOPs: 5107.2892. Time: 78.2723 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #154: GFLOPs: 2366.1201. Time: 168.9514 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #155: GFLOPs: 4243.6282. Time: 94.2023 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #156: GFLOPs: 2690.4487. Time: 148.5846 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #157: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(423), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(128) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(52), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(26) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(26) // T.int64(13) * T.int64(2) + nu_3_init * T.int64(2) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(26) * T.int64(32) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(52) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) * T.int64(2) + p_3_init * T.int64(2) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(80)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(104)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2704))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2704) // T.int64(676))
                                    v2 = T.axis.spatial(T.int64(80), ci_0)
                                    v3 = T.axis.spatial(T.int64(676), (ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1) % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(256))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(256) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(80), ci_0)
                                        v3 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1024))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(2)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(26) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(26) // T.int64(13) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(26) * T.int64(32) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(52) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) * T.int64(2) + p_3 * T.int64(2) + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0 + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(32), T.int64(2)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(26) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(26) // T.int64(13) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_0_nu_0_co_0_p_0_fused * T.int64(64) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(26) * T.int64(32) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(13) * T.int64(52) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) * T.int64(2) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(1014), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 2])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[3, 1, 2, 8, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 13, 26, 1, 2])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[80, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l130, l131, l132, l133, l134 = sch.get_loops(block=b97)
l135, l136 = sch.split(loop=l134, factors=[None, 104], preserve_unit_iters=True)
sch.bind(loop=l136, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l137, l138, l139, l140, l141 = sch.get_loops(block=b108)
l142, l143, l144 = sch.split(loop=l141, factors=[None, 104, 2], preserve_unit_iters=True)
sch.vectorize(loop=l144)
sch.bind(loop=l143, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b150)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b152)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b154)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #158: GFLOPs: 3099.2216. Time: 128.9870 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #159: GFLOPs: 4460.3670. Time: 89.6248 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #160: GFLOPs: 39.7246. Time: 10063.2575 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #161: GFLOPs: 1788.5330. Time: 223.5124 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #162: GFLOPs: 1911.6208. Time: 209.1206 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #163: GFLOPs: 3165.7426. Time: 126.2766 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #164: GFLOPs: 2618.0886. Time: 152.6913 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #165: GFLOPs: 2531.2266. Time: 157.9311 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #166: GFLOPs: 2129.5797. Time: 187.7175 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #167: GFLOPs: 3286.9333. Time: 121.6208 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #168: GFLOPs: 2166.5156. Time: 184.5172 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #169: GFLOPs: 1918.2114. Time: 208.4021 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #170: GFLOPs: 1917.3871. Time: 208.4917 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #171: GFLOPs: 1099.4733. Time: 363.5917 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #172: GFLOPs: 3168.1025. Time: 126.1826 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #173: GFLOPs: 692.7906. Time: 577.0277 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #174: GFLOPs: 2545.8238. Time: 157.0255 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #175: GFLOPs: 2133.6611. Time: 187.3584 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #176: GFLOPs: 1816.5266. Time: 220.0680 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #177: GFLOPs: 1814.4800. Time: 220.3162 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #178: GFLOPs: 1817.9423. Time: 219.8966 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #179: GFLOPs: 2517.5440. Time: 158.7894 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #180: GFLOPs: 2258.0512. Time: 177.0373 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #181: GFLOPs: 1100.0189. Time: 363.4113 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #182: GFLOPs: 2232.9945. Time: 179.0239 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #183: GFLOPs: 2490.7005. Time: 160.5008 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #184: GFLOPs: 1100.2498. Time: 363.3351 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #185: GFLOPs: 1985.5624. Time: 201.3331 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #186: GFLOPs: 1099.9673. Time: 363.4284 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #187: GFLOPs: 2210.5533. Time: 180.8413 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #188: GFLOPs: 1101.1922. Time: 363.0242 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #189: GFLOPs: 1107.2711. Time: 361.0312 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #190: GFLOPs: 128.2556. Time: 3116.8955 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #191: GFLOPs: 34.4898. Time: 11590.6558 us. Best GFLOPs: 6102.9022
2024-03-21 18:32:41 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #192: GFLOPs: 31.0307. Time: 12882.6875 us. Best GFLOPs: 6102.9022
2024-03-21 18:59:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 18:59:59 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 19:00:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 405 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:00:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 809 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:00:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 1204 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:00:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 1602 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:00:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 2005 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:00:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 2408 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:00:12 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-03-21 19:00:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:00:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:00:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:00:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:00:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5353  1.5353  1.5353  1.4243  1.3578  1.3048  1.3012  1.2974  1.2973  1.2902  1.2852  1.2635  1.2559  1.2405  1.2396  1.2289
[17 : 32]:	1.2249  1.2229  1.2221  1.2170  1.2144  1.2124  1.2048  1.1948  1.1907  1.1861  1.1823  1.1743  1.1716  1.1692  1.1688  1.1674
[33 : 48]:	1.1651  1.1624  1.1561  1.1538  1.1460  1.1445  1.1440  1.1332  1.1309  1.1309  1.1274  1.1274  1.1267  1.1186  1.1180  1.1180
[49 : 64]:	1.1179  1.1115  1.1037  1.1013  1.1001  1.0965  1.0945  1.0928  1.0914  1.0839  1.0804  1.0663  1.0633  1.0623  1.0585  1.0583
2024-03-21 19:00:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 19:00:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #193: GFLOPs: 3931.2992. Time: 101.6863 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #194: GFLOPs: 3930.9729. Time: 101.6948 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #195: GFLOPs: 3910.2177. Time: 102.2346 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #196: GFLOPs: 3886.3061. Time: 102.8636 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #197: GFLOPs: 2810.1330. Time: 142.2564 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #198: GFLOPs: 1964.6924. Time: 203.4717 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #199: GFLOPs: 1922.9778. Time: 207.8856 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #200: GFLOPs: 3371.0072. Time: 118.5875 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #201: GFLOPs: 3915.2223. Time: 102.1039 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #202: GFLOPs: 1957.1156. Time: 204.2595 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #203: GFLOPs: 2019.2287. Time: 197.9763 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #204: GFLOPs: 3848.3899. Time: 103.8770 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #205: GFLOPs: 1829.5514. Time: 218.5013 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #206: GFLOPs: 1859.0190. Time: 215.0378 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #207: GFLOPs: 1833.0489. Time: 218.0844 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #208: GFLOPs: 1830.0383. Time: 218.4432 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #209: GFLOPs: 1834.8896. Time: 217.8656 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #210: GFLOPs: 1932.6853. Time: 206.8414 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #211: GFLOPs: 4370.9014. Time: 91.4592 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #212: GFLOPs: 1834.8918. Time: 217.8654 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #213: GFLOPs: 1340.4665. Time: 298.2240 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #214: GFLOPs: 1895.5524. Time: 210.8933 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #215: GFLOPs: 1960.8272. Time: 203.8728 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #216: GFLOPs: 5253.9871. Time: 76.0869 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #217: GFLOPs: 2788.5562. Time: 143.3571 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #218: GFLOPs: 1871.3539. Time: 213.6204 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #219: GFLOPs: 3899.7098. Time: 102.5100 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #220: GFLOPs: 4790.5342. Time: 83.4478 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #221: GFLOPs: 614.3251. Time: 650.7294 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #222: GFLOPs: 2764.4407. Time: 144.6077 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #223: GFLOPs: 5407.5676. Time: 73.9259 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #224: GFLOPs: 3118.0214. Time: 128.2093 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #225: GFLOPs: 4737.2132. Time: 84.3870 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #226: GFLOPs: 5084.1189. Time: 78.6290 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #227: GFLOPs: 3125.2439. Time: 127.9130 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #228: GFLOPs: 5855.9243. Time: 68.2658 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #229: GFLOPs: 3500.7650. Time: 114.1920 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #230: GFLOPs: 5127.3259. Time: 77.9664 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #231: GFLOPs: 4795.5053. Time: 83.3613 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #232: GFLOPs: 3884.4207. Time: 102.9135 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #233: GFLOPs: 4992.2122. Time: 80.0766 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #234: GFLOPs: 5563.2174. Time: 71.8576 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #235: GFLOPs: 5876.1997. Time: 68.0303 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #236: GFLOPs: 4991.2842. Time: 80.0915 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #237: GFLOPs: 5349.7217. Time: 74.7253 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #238: GFLOPs: 1868.0722. Time: 213.9957 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #239: GFLOPs: 5159.3957. Time: 77.4818 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #240: GFLOPs: 5004.7611. Time: 79.8758 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #241: GFLOPs: 1723.5175. Time: 231.9439 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #242: GFLOPs: 4898.3573. Time: 81.6109 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #243: GFLOPs: 1935.1733. Time: 206.5755 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #244: GFLOPs: 1608.3436. Time: 248.5535 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #245: GFLOPs: 1303.2345. Time: 306.7440 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #246: GFLOPs: 3273.6517. Time: 122.1142 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #247: GFLOPs: 2492.9513. Time: 160.3559 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #248: GFLOPs: 1869.1724. Time: 213.8697 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #249: GFLOPs: 1655.2224. Time: 241.5140 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #250: GFLOPs: 1335.2536. Time: 299.3883 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #251: GFLOPs: 2876.3170. Time: 138.9831 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #252: GFLOPs: 1687.9445. Time: 236.8320 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #253: GFLOPs: 450.2777. Time: 887.8063 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #254: GFLOPs: 182.3878. Time: 2191.8094 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #255: GFLOPs: 2075.8269. Time: 192.5784 us. Best GFLOPs: 6102.9022
2024-03-21 19:01:31 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #256: GFLOPs: 2047.3450. Time: 195.2575 us. Best GFLOPs: 6102.9022
2024-03-21 19:34:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 19:34:54 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 19:34:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:34:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 808 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:35:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 1203 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:35:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 1605 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:35:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 2005 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:35:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 2407 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:35:07 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 19:35:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:35:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:35:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:35:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07168ed3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071c0726b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07192d4958)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071be27cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b6a1e78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071c483aa8)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd4c378)]: 0 failure(s)
2024-03-21 19:35:42 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.4760  2.4528  2.4510  2.4508  2.4482  2.4443  2.4323  2.4309  2.4186  2.3893  2.2498  2.2334  2.2221  2.2189  2.2141  2.2116
[17 : 32]:	2.1908  2.1843  2.1804  2.1804  2.1769  2.1744  2.1732  2.1610  2.1610  2.1433  2.1397  2.1293  2.1293  1.9315  1.8768  1.8715
[33 : 48]:	1.7737  1.6619  1.6525  1.6246  1.6238  1.6203  1.6174  1.6161  1.6103  1.5977  1.5896  1.5138  1.4946  1.4946  1.4216  1.3683
[49 : 64]:	1.2841  1.2534  1.2320  1.2318  1.2271  1.2170  1.2127  1.2033  1.2032  1.1892  1.1860  1.1750  1.1687  1.1253  1.1185  1.1144
2024-03-21 19:35:42 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 19:35:42 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #257: GFLOPs: 5312.3174. Time: 75.2514 us. Best GFLOPs: 6102.9022
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #258: GFLOPs: 4570.4955. Time: 87.4652 us. Best GFLOPs: 6102.9022
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #259: GFLOPs: 4739.0657. Time: 84.3540 us. Best GFLOPs: 6102.9022
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #260: GFLOPs: 4697.9705. Time: 85.0919 us. Best GFLOPs: 6102.9022
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #261: GFLOPs: 5711.7330. Time: 69.9892 us. Best GFLOPs: 6102.9022
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #262: GFLOPs: 5944.1222. Time: 67.2529 us. Best GFLOPs: 6102.9022
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #263: GFLOPs: 4658.5166. Time: 85.8126 us. Best GFLOPs: 6102.9022
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #264: GFLOPs: 4672.9148. Time: 85.5482 us. Best GFLOPs: 6102.9022
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #265: GFLOPs: 4710.3505. Time: 84.8683 us. Best GFLOPs: 6102.9022
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #266: GFLOPs: 6299.8176. Time: 63.4557 us. Best GFLOPs: 6299.8176
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #267: GFLOPs: 7251.4234. Time: 55.1284 us. Best GFLOPs: 7251.4234
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #268: GFLOPs: 6954.2951. Time: 57.4838 us. Best GFLOPs: 7251.4234
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #269: GFLOPs: 7263.0883. Time: 55.0399 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #270: GFLOPs: 6037.1410. Time: 66.2167 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #271: GFLOPs: 6107.2994. Time: 65.4560 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #272: GFLOPs: 6035.2617. Time: 66.2373 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #273: GFLOPs: 6029.4178. Time: 66.3015 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #274: GFLOPs: 6156.6268. Time: 64.9316 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #275: GFLOPs: 5660.9664. Time: 70.6168 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #276: GFLOPs: 5665.0525. Time: 70.5659 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #277: GFLOPs: 6013.8695. Time: 66.4729 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #278: GFLOPs: 5994.4665. Time: 66.6881 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #279: GFLOPs: 5166.5815. Time: 77.3741 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #280: GFLOPs: 5942.3173. Time: 67.2733 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #281: GFLOPs: 5971.1103. Time: 66.9489 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #282: GFLOPs: 5602.7605. Time: 71.3504 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #283: GFLOPs: 5939.3588. Time: 67.3068 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #284: GFLOPs: 5755.1350. Time: 69.4613 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #285: GFLOPs: 5754.2027. Time: 69.4726 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #286: GFLOPs: 4502.7108. Time: 88.7819 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #287: GFLOPs: 6932.1477. Time: 57.6675 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #288: GFLOPs: 102.0545. Time: 3917.1151 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #289: GFLOPs: 7229.4443. Time: 55.2960 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #290: GFLOPs: 3602.7972. Time: 110.9581 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #291: GFLOPs: 60.6450. Time: 6591.7940 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #292: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(53), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(192), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(4) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) // T.int64(676))
                                    v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                    v3 = T.axis.spatial(T.int64(676), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(192))
                                        v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                        v3 = T.axis.spatial(T.int64(192), (ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(4) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 96, 1, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 338, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[80, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 338], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 338, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #293: GFLOPs: 3165.4085. Time: 126.2900 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #294: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(53), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(192), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(4) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) // T.int64(676))
                                    v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                    v3 = T.axis.spatial(T.int64(676), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) // T.int64(192))
                                    v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                    v3 = T.axis.spatial(T.int64(192), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) % T.int64(192))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1 < T.int64(768))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(4) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 96, 1, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 338, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[80, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 338], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 338], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #295: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(53), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(192), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(4) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) // T.int64(676))
                                    v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                    v3 = T.axis.spatial(T.int64(676), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(192))
                                        v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                        v3 = T.axis.spatial(T.int64(192), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(4) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 96, 1, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 338, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[80, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 338], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 338, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #296: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(53), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(192), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(4) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(676))
                                        v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                        v3 = T.axis.spatial(T.int64(676), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(676))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(192))
                                        v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                        v3 = T.axis.spatial(T.int64(192), (ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(4) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 96, 1, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 338, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[80, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 338, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 338, 2], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #297: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(53), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(192), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(4) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) // T.int64(676))
                                    v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                    v3 = T.axis.spatial(T.int64(676), (ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) % T.int64(676))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1014) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(192))
                                        v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                        v3 = T.axis.spatial(T.int64(192), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1014) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(4) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 96, 1, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 338, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[80, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 338], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 338, 3], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
sch.annotate(block_or_loop=l162, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l162, ann_key="pragma_unroll_explicit", ann_val=1)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l187, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l187, ann_key="pragma_unroll_explicit", ann_val=1)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
sch.annotate(block_or_loop=l208, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l208, ann_key="pragma_unroll_explicit", ann_val=1)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #298: GFLOPs: 5959.6844. Time: 67.0773 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #299: GFLOPs: 5050.6420. Time: 79.1502 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #300: GFLOPs: 5006.4194. Time: 79.8494 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #301: GFLOPs: 5726.3268. Time: 69.8108 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #302: GFLOPs: 5753.2195. Time: 69.4845 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #303: GFLOPs: 4938.7713. Time: 80.9431 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #304: GFLOPs: 4713.4037. Time: 84.8133 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:121] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #305: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(80), T.int64(54), T.int64(54)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(52), T.int64(52)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(80), T.int64(676), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)))
        inverse_local = T.alloc_buffer((T.int64(192), T.int64(676), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(192), T.int64(676)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(676)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(80), T.int64(192)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(53), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax0)
                        v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = p0[v_p // T.int64(676), v_ci, v_p % T.int64(676) // T.int64(26) * T.int64(2) + v_eps, v_p % T.int64(26) * T.int64(2) + v_nu]
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                            v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676))
                                    v_p = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(676))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(80), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(676) + ax2)
                        v3 = T.axis.spatial(T.int64(676), (ci_p_fused_0 * T.int64(348) + ci_p_fused_1) % T.int64(676) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(54080))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(192), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_3_init * T.int64(2) + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(676))
                                        v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                        v3 = T.axis.spatial(T.int64(676), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1352) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(676))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(338), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(192))
                                        v1, v2 = T.axis.remap("SS", [eps_0_nu_0_co_0_p_0_fused, ci_0_fused])
                                        v3 = T.axis.spatial(T.int64(192), (ax0_ax1_ax2_ax3_fused_0 * T.int64(676) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(192))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(338) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(768))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_3 * T.int64(2) + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(80), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused + ax1)
                            v2 = T.axis.spatial(T.int64(192), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(676), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(338) + eps_2_nu_2_co_2_p_2_fused + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676) + ax0)
                                        v_p = T.axis.spatial(T.int64(676), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(192), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(676))
                        v_h = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(676) // T.int64(26) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(52), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(26) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(676) + v_h // T.int64(2) * T.int64(26) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 96, 1, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 2, 338, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[80, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 338, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 338, 2], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #306: GFLOPs: 4814.2680. Time: 83.0364 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #307: GFLOPs: 5536.1289. Time: 72.2092 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #308: GFLOPs: 5538.9713. Time: 72.1721 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #309: GFLOPs: 5544.2899. Time: 72.1029 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #310: GFLOPs: 4146.4460. Time: 96.4101 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #311: GFLOPs: 4051.2005. Time: 98.6768 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #312: GFLOPs: 3252.9345. Time: 122.8919 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #313: GFLOPs: 4170.7174. Time: 95.8491 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #314: GFLOPs: 4059.7234. Time: 98.4696 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #315: GFLOPs: 4934.9402. Time: 81.0059 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #316: GFLOPs: 62.9141. Time: 6354.0478 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #317: GFLOPs: 4184.8853. Time: 95.5246 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #318: GFLOPs: 3116.4860. Time: 128.2725 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #319: GFLOPs: 1803.2048. Time: 221.6938 us. Best GFLOPs: 7263.0883
2024-03-21 19:37:00 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_5] Trial #320: GFLOPs: 3715.1326. Time: 107.6030 us. Best GFLOPs: 7263.0883
