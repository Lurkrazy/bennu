2024-03-21 13:42:28 [INFO] [task_scheduler.cc:160] Initializing Task #112: "fused_nn_conv2d_add_nn_relu_55"
2024-03-21 13:42:28 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1024), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1024), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:28 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:28 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(128), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1024), rc_0 * T.int64(8) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 4, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 8, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:28 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 4, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 8, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:28 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(32)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(256)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 4, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 8, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 14:41:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 14:41:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 14:41:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68d2518)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f2e68488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f7906148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f0bc0888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f4f48db8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d91a98)]: 485 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa38d698)]: 0 failure(s)
2024-03-21 14:41:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68d2518)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f2e68488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f7906148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f0bc0888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f4f48db8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d91a98)]: 970 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa38d698)]: 0 failure(s)
2024-03-21 14:41:52 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-03-21 14:41:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68d2518)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f2e68488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f7906148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f0bc0888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f4f48db8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d91a98)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa38d698)]: 0 failure(s)
2024-03-21 14:41:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68d2518)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f2e68488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f7906148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f0bc0888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f4f48db8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d91a98)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa38d698)]: 0 failure(s)
2024-03-21 14:41:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68d2518)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f2e68488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f7906148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f0bc0888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f4f48db8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d91a98)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa38d698)]: 0 failure(s)
2024-03-21 14:41:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f68d2518)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f2e68488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f7906148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f0bc0888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f4f48db8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f9d91a98)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa38d698)]: 0 failure(s)
2024-03-21 14:41:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9999  0.9994  0.9987  0.9969  0.9948  0.9940  0.9921  0.9915  0.9911  0.9899  0.9892  0.9884  0.9881  0.9880  0.9879
[17 : 32]:	0.9879  0.9879  0.9865  0.9851  0.9851  0.9849  0.9832  0.9828  0.9818  0.9816  0.9806  0.9797  0.9795  0.9783  0.9775  0.9764
[33 : 48]:	0.9762  0.9760  0.9756  0.9745  0.9739  0.9737  0.9719  0.9717  0.9709  0.9698  0.9698  0.9698  0.9684  0.9678  0.9677  0.9675
[49 : 64]:	0.9673  0.9665  0.9652  0.9644  0.9635  0.9633  0.9630  0.9623  0.9622  0.9592  0.9584  0.9584  0.9574  0.9568  0.9549  0.9540
2024-03-21 14:41:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 14:41:58 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #1: GFLOPs: 308.5476. Time: 166.6854 us. Best GFLOPs: 308.5476
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #2: GFLOPs: 240.6964. Time: 213.6733 us. Best GFLOPs: 308.5476
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #3: GFLOPs: 17.3390. Time: 2966.1665 us. Best GFLOPs: 308.5476
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #4: GFLOPs: 749.4527. Time: 68.6239 us. Best GFLOPs: 749.4527
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #5: GFLOPs: 263.5084. Time: 195.1756 us. Best GFLOPs: 749.4527
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #6: GFLOPs: 421.6594. Time: 121.9714 us. Best GFLOPs: 749.4527
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #7: GFLOPs: 477.4154. Time: 107.7267 us. Best GFLOPs: 749.4527
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #8: GFLOPs: 813.5562. Time: 63.2168 us. Best GFLOPs: 813.5562
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #9: GFLOPs: 77.3182. Time: 665.1783 us. Best GFLOPs: 813.5562
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #10: GFLOPs: 121.7657. Time: 422.3719 us. Best GFLOPs: 813.5562
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #11: GFLOPs: 25.9948. Time: 1978.4884 us. Best GFLOPs: 813.5562
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #12: GFLOPs: 489.2589. Time: 105.1190 us. Best GFLOPs: 813.5562
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #13: GFLOPs: 405.0381. Time: 126.9767 us. Best GFLOPs: 813.5562
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #14: GFLOPs: 667.0847. Time: 77.0973 us. Best GFLOPs: 813.5562
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #15: GFLOPs: 128.9269. Time: 398.9114 us. Best GFLOPs: 813.5562
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #16: GFLOPs: 12.4168. Time: 4141.9980 us. Best GFLOPs: 813.5562
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #17: GFLOPs: 140.4223. Time: 366.2553 us. Best GFLOPs: 813.5562
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #18: GFLOPs: 823.3554. Time: 62.4644 us. Best GFLOPs: 823.3554
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #19: GFLOPs: 855.1146. Time: 60.1445 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #20: GFLOPs: 115.9943. Time: 443.3875 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #21: GFLOPs: 172.1031. Time: 298.8348 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #22: GFLOPs: 163.7664. Time: 314.0474 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #23: GFLOPs: 283.5744. Time: 181.3647 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #24: GFLOPs: 211.9791. Time: 242.6201 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #25: GFLOPs: 255.6525. Time: 201.1731 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #26: GFLOPs: 44.6760. Time: 1151.1853 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #27: GFLOPs: 374.3666. Time: 137.3798 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #28: GFLOPs: 558.6309. Time: 92.0651 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #29: GFLOPs: 703.2268. Time: 73.1349 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #30: GFLOPs: 266.3889. Time: 193.0651 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #31: GFLOPs: 123.3537. Time: 416.9344 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #32: GFLOPs: 96.3430. Time: 533.8261 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #33: GFLOPs: 32.0196. Time: 1606.2171 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #34: GFLOPs: 722.9690. Time: 71.1378 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #35: GFLOPs: 252.9832. Time: 203.2957 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #36: GFLOPs: 517.6856. Time: 99.3468 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #37: GFLOPs: 310.6358. Time: 165.5650 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #38: GFLOPs: 9.9303. Time: 5179.1359 us. Best GFLOPs: 855.1146
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #39: GFLOPs: 882.8367. Time: 58.2558 us. Best GFLOPs: 882.8367
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #40: GFLOPs: 262.2415. Time: 196.1185 us. Best GFLOPs: 882.8367
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #41: GFLOPs: 315.8725. Time: 162.8201 us. Best GFLOPs: 882.8367
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #42: GFLOPs: 111.9981. Time: 459.2076 us. Best GFLOPs: 882.8367
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #43: GFLOPs: 73.9936. Time: 695.0655 us. Best GFLOPs: 882.8367
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #44: GFLOPs: 960.6751. Time: 53.5357 us. Best GFLOPs: 960.6751
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #45: GFLOPs: 1863.9413. Time: 27.5923 us. Best GFLOPs: 1863.9413
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #46: GFLOPs: 612.0355. Time: 84.0317 us. Best GFLOPs: 1863.9413
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #47: GFLOPs: 221.4709. Time: 232.2219 us. Best GFLOPs: 1863.9413
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #48: GFLOPs: 944.5110. Time: 54.4519 us. Best GFLOPs: 1863.9413
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #49: GFLOPs: 253.9477. Time: 202.5236 us. Best GFLOPs: 1863.9413
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #50: GFLOPs: 134.3882. Time: 382.7001 us. Best GFLOPs: 1863.9413
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #51: GFLOPs: 386.7331. Time: 132.9868 us. Best GFLOPs: 1863.9413
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #52: GFLOPs: 703.4658. Time: 73.1100 us. Best GFLOPs: 1863.9413
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #53: GFLOPs: 1912.2587. Time: 26.8951 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #54: GFLOPs: 729.0974. Time: 70.5398 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #55: GFLOPs: 460.3053. Time: 111.7311 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #56: GFLOPs: 168.8642. Time: 304.5666 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #57: GFLOPs: 59.0592. Time: 870.8285 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #58: GFLOPs: 345.8746. Time: 148.6967 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #59: GFLOPs: 526.7773. Time: 97.6322 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #60: GFLOPs: 38.7739. Time: 1326.4168 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #61: GFLOPs: 631.0499. Time: 81.4997 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #62: GFLOPs: 314.0622. Time: 163.7587 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #63: GFLOPs: 10.2375. Time: 5023.7438 us. Best GFLOPs: 1912.2587
2024-03-21 15:48:41 [INFO] [task_scheduler.cc:131] [Task #112: fused_nn_conv2d_add_nn_relu_55] Trial #64: GFLOPs: 60.4103. Time: 851.3518 us. Best GFLOPs: 1912.2587
