2024-03-21 16:45:31 [INFO] [task_scheduler.cc:160] Initializing Task #41: "fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2"
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(27), T.int64(27)))
        input_tile = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)))
        conv2d_winograd = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(96), T.int64(27), T.int64(27)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(26) and T.int64(1) <= v_i3 and v_i3 < T.int64(26), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(96), T.int64(169), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps, v_p % T.int64(13) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps, v_p % T.int64(13) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(96), T.int64(169), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(96), T.int64(169), T.int64(96)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(96), T.int64(169), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(25), T.int64(25)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(12), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(64896)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(32448))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(32448) // T.int64(8112))
                                    v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(8112) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), ax0_ax1_ax2_ax3_fused % T.int64(169))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(18432))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(18432) // T.int64(4608))
                                    v2 = T.axis.spatial(T.int64(96), ci_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(4608) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(6) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(6) * T.int64(16) + co_3 * T.int64(8) + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(96), ci_0 * T.int64(48) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(6) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(127), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 6, 2, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 24, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v119 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v119)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b3)
l126 = sch.fuse(l120, l121, l122, l123, preserve_unit_iters=True)
v127 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l128, l129 = sch.split(loop=l126, factors=[None, v127], preserve_unit_iters=True)
sch.bind(loop=l128, thread_axis="blockIdx.x")
sch.bind(loop=l129, thread_axis="threadIdx.x")
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(12), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(64896)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(32448))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(32448) // T.int64(8112))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(8112) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), ax0_ax1_ax2_ax3_fused % T.int64(169))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(18432))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(18432) // T.int64(4608))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(4608) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(6) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(6) * T.int64(16) + co_3 * T.int64(8) + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(48) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(6) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 6, 2, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 24, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
            inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                            v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(338), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(12), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(64896)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(32448))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(32448) // T.int64(8112))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(8112) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), ax0_ax1_ax2_ax3_fused % T.int64(169))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(36864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(18432))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(18432) // T.int64(4608))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(4608) // T.int64(96))
                                    v3 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(6) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(6) * T.int64(16) + co_3 * T.int64(8) + co_4)
                                    v_p = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + p_3 + p_4)
                                    v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(48) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(16), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(169) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused % T.int64(6) * T.int64(16) + ax2)
                                v3 = T.axis.spatial(T.int64(169), eps_1_nu_1_co_1_p_1_fused % T.int64(169) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                            v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(169))
                            v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                            T.where((n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                            T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v_n, v_co, v_h, v_w])
                            T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 2])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 6, 2, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 169, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[2, 24, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
2024-03-21 17:16:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:16:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 17:16:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 488 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:16:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 976 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:16:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 1473 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:16:42 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-03-21 17:16:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:16:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:17:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 130 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:17:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:17:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9993  0.9985  0.9978  0.9966  0.9957  0.9946  0.9945  0.9934  0.9931  0.9925  0.9923  0.9920  0.9916  0.9908  0.9908
[17 : 32]:	0.9869  0.9866  0.9858  0.9855  0.9854  0.9853  0.9852  0.9843  0.9842  0.9837  0.9834  0.9820  0.9819  0.9808  0.9808  0.9807
[33 : 48]:	0.9807  0.9804  0.9801  0.9800  0.9798  0.9780  0.9774  0.9773  0.9767  0.9762  0.9748  0.9747  0.9746  0.9743  0.9734  0.9732
[49 : 64]:	0.9726  0.9707  0.9705  0.9702  0.9701  0.9697  0.9692  0.9687  0.9668  0.9661  0.9651  0.9626  0.9622  0.9618  0.9614  0.9612
2024-03-21 17:17:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:17:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #1: GFLOPs: 518.8625. Time: 126.3055 us. Best GFLOPs: 518.8625
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #2: GFLOPs: 2314.3721. Time: 28.3166 us. Best GFLOPs: 2314.3721
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #3: GFLOPs: 786.4072. Time: 83.3349 us. Best GFLOPs: 2314.3721
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #4: GFLOPs: 543.3535. Time: 120.6124 us. Best GFLOPs: 2314.3721
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #5: GFLOPs: 1255.8909. Time: 52.1822 us. Best GFLOPs: 2314.3721
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #6: GFLOPs: 1977.6012. Time: 33.1387 us. Best GFLOPs: 2314.3721
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #7: GFLOPs: 178.6190. Time: 366.8992 us. Best GFLOPs: 2314.3721
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #8: GFLOPs: 3001.3165. Time: 21.8355 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #9: GFLOPs: 1860.3013. Time: 35.2283 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #10: GFLOPs: 2376.9386. Time: 27.5713 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #11: GFLOPs: 36.4231. Time: 1799.2754 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #12: GFLOPs: 62.2248. Time: 1053.2002 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #13: GFLOPs: 351.8278. Time: 186.2706 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #14: GFLOPs: 2486.5110. Time: 26.3563 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #15: GFLOPs: 2069.5637. Time: 31.6662 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #16: GFLOPs: 188.3188. Time: 348.0011 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #17: GFLOPs: 1754.4935. Time: 37.3528 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #18: GFLOPs: 1876.4505. Time: 34.9251 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #19: GFLOPs: 294.5404. Time: 222.4998 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #20: GFLOPs: 2230.0491. Time: 29.3873 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #21: GFLOPs: 234.1657. Time: 279.8667 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #22: GFLOPs: 179.6826. Time: 364.7274 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #23: GFLOPs: 1564.2273. Time: 41.8962 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #24: GFLOPs: 629.1968. Time: 104.1569 us. Best GFLOPs: 3001.3165
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #25: GFLOPs: 3102.9903. Time: 21.1200 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #26: GFLOPs: 659.9344. Time: 99.3056 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #27: GFLOPs: 1241.6863. Time: 52.7792 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #28: GFLOPs: 384.6611. Time: 170.3712 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #29: GFLOPs: 1064.0327. Time: 61.5913 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #30: GFLOPs: 27.2359. Time: 2406.2026 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #31: GFLOPs: 142.8798. Time: 458.6734 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #32: GFLOPs: 1573.2745. Time: 41.6553 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #33: GFLOPs: 1175.7978. Time: 55.7368 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #34: GFLOPs: 137.0345. Time: 478.2383 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #35: GFLOPs: 1198.2491. Time: 54.6924 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #36: GFLOPs: 262.3901. Time: 249.7623 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #37: GFLOPs: 226.5761. Time: 289.2413 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #38: GFLOPs: 23.8834. Time: 2743.9602 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #39: GFLOPs: 104.4072. Time: 627.6881 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #40: GFLOPs: 2410.7191. Time: 27.1849 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #41: GFLOPs: 1424.5343. Time: 46.0046 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #42: GFLOPs: 1154.9447. Time: 56.7431 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #43: GFLOPs: 449.9223. Time: 145.6589 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #44: GFLOPs: 2157.1678. Time: 30.3802 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #45: GFLOPs: 167.8251. Time: 390.4969 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #46: GFLOPs: 1268.0905. Time: 51.6802 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #47: GFLOPs: 530.7300. Time: 123.4812 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #48: GFLOPs: 858.6527. Time: 76.3233 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #49: GFLOPs: 1126.5849. Time: 58.1715 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #50: GFLOPs: 1272.7183. Time: 51.4923 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #51: GFLOPs: 2559.1659. Time: 25.6080 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #52: GFLOPs: 1243.1602. Time: 52.7166 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #53: GFLOPs: 1158.8802. Time: 56.5504 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #54: GFLOPs: 181.1984. Time: 361.6763 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #55: GFLOPs: 853.9437. Time: 76.7441 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #56: GFLOPs: 1663.3780. Time: 39.3988 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #57: GFLOPs: 558.4915. Time: 117.3432 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #58: GFLOPs: 924.7673. Time: 70.8667 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #59: GFLOPs: 437.7291. Time: 149.7163 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #60: GFLOPs: 2062.1538. Time: 31.7800 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #61: GFLOPs: 202.0508. Time: 324.3499 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #62: GFLOPs: 1122.9532. Time: 58.3597 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #63: GFLOPs: 2922.7669. Time: 22.4223 us. Best GFLOPs: 3102.9903
2024-03-21 17:36:19 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #64: GFLOPs: 460.0842. Time: 142.4417 us. Best GFLOPs: 3102.9903
2024-03-21 17:58:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:58:33 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 17:58:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 426 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:58:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 859 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:58:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 1293 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:58:41 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-03-21 17:58:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:59:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:59:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 133 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:59:24 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 17:59:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.5203  2.5096  2.5069  2.4945  2.4889  2.4839  2.4709  2.4701  2.4628  2.4350  2.4200  2.4137  2.3672  2.3530  2.3474  2.3425
[17 : 32]:	2.3406  2.3058  2.2884  2.2527  2.2508  2.2392  2.2379  2.2360  2.2199  2.2143  2.2080  2.2054  2.2035  2.1922  2.1892  2.1857
[33 : 48]:	2.1781  2.1721  2.1719  2.1709  2.1703  2.1703  2.1663  2.1405  2.1386  2.1315  2.1200  2.1181  2.0969  2.0956  2.0813  2.0746
[49 : 64]:	2.0625  2.0623  2.0485  2.0467  2.0419  2.0419  2.0400  2.0400  2.0383  2.0360  2.0335  2.0315  2.0236  2.0228  2.0221  2.0195
2024-03-21 17:59:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:59:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #65: GFLOPs: 2225.1407. Time: 29.4521 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #66: GFLOPs: 2402.7921. Time: 27.2746 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #67: GFLOPs: 2012.0592. Time: 32.5712 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #68: GFLOPs: 2467.0222. Time: 26.5645 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #69: GFLOPs: 2563.6287. Time: 25.5634 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #70: GFLOPs: 2191.1674. Time: 29.9088 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #71: GFLOPs: 2282.8098. Time: 28.7081 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #72: GFLOPs: 2482.3577. Time: 26.4004 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #73: GFLOPs: 2565.6624. Time: 25.5432 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #74: GFLOPs: 2470.0494. Time: 26.5319 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #75: GFLOPs: 2007.7305. Time: 32.6414 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #76: GFLOPs: 2218.5150. Time: 29.5401 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #77: GFLOPs: 2565.5936. Time: 25.5439 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #78: GFLOPs: 2482.1932. Time: 26.4021 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #79: GFLOPs: 2470.0300. Time: 26.5321 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #80: GFLOPs: 2391.5419. Time: 27.4029 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #81: GFLOPs: 2219.7127. Time: 29.5242 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #82: GFLOPs: 967.6048. Time: 67.7293 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #83: GFLOPs: 2274.9318. Time: 28.8075 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #84: GFLOPs: 2308.5046. Time: 28.3886 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #85: GFLOPs: 2193.0734. Time: 29.8828 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #86: GFLOPs: 2136.4996. Time: 30.6741 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #87: GFLOPs: 2293.6378. Time: 28.5726 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #88: GFLOPs: 2134.3502. Time: 30.7050 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #89: GFLOPs: 2300.2036. Time: 28.4910 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #90: GFLOPs: 2349.7030. Time: 27.8908 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #91: GFLOPs: 2355.7905. Time: 27.8188 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #92: GFLOPs: 2513.1647. Time: 26.0768 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #93: GFLOPs: 2313.3725. Time: 28.3288 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #94: GFLOPs: 2313.5407. Time: 28.3268 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #95: GFLOPs: 2323.7255. Time: 28.2026 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #96: GFLOPs: 2188.3875. Time: 29.9468 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #97: GFLOPs: 1511.8436. Time: 43.3478 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #98: GFLOPs: 2465.0522. Time: 26.5857 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #99: GFLOPs: 2342.9940. Time: 27.9707 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #100: GFLOPs: 2192.1433. Time: 29.8955 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #101: GFLOPs: 2346.1105. Time: 27.9335 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #102: GFLOPs: 2324.0389. Time: 28.1988 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #103: GFLOPs: 2312.6050. Time: 28.3382 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #104: GFLOPs: 2248.7308. Time: 29.1432 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #105: GFLOPs: 2128.9579. Time: 30.7827 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #106: GFLOPs: 2368.4438. Time: 27.6701 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #107: GFLOPs: 2470.1261. Time: 26.5311 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #108: GFLOPs: 2352.3220. Time: 27.8598 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #109: GFLOPs: 2323.9622. Time: 28.1998 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #110: GFLOPs: 1879.7117. Time: 34.8645 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #111: GFLOPs: 2222.8152. Time: 29.4830 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #112: GFLOPs: 2070.8324. Time: 31.6468 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #113: GFLOPs: 2247.5616. Time: 29.1583 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #114: GFLOPs: 2296.9236. Time: 28.5317 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #115: GFLOPs: 1667.5048. Time: 39.3013 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #116: GFLOPs: 3016.0345. Time: 21.7289 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #117: GFLOPs: 2418.2674. Time: 27.1001 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #118: GFLOPs: 2407.8098. Time: 27.2178 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #119: GFLOPs: 2382.2388. Time: 27.5099 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #120: GFLOPs: 2379.8590. Time: 27.5374 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #121: GFLOPs: 2174.9242. Time: 30.1322 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #122: GFLOPs: 2241.9078. Time: 29.2319 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #123: GFLOPs: 2384.5984. Time: 27.4827 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #124: GFLOPs: 2233.5800. Time: 29.3409 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #125: GFLOPs: 1473.1709. Time: 44.4858 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #126: GFLOPs: 97.8381. Time: 669.8325 us. Best GFLOPs: 3102.9903
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #127: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(13), T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(48) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(8) + co_3_init * T.int64(8) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(96), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(338))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(338) // T.int64(169))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(169))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1352))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(52), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96) // T.int64(48))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused)
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(48) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(208) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(48))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(52) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(13), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(48) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(8) + co_3 * T.int64(8) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(8), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(3) * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(26) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(2) * T.int64(48) + eps_1_nu_1_co_1_p_1_fused % T.int64(3) * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(26) // T.int64(13) * T.int64(8) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[2, 3, 2, 1, 8])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 13, 13, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[96, 1, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 52, 4], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-03-21 18:00:46 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #128: GFLOPs: 1610.0178. Time: 40.7046 us. Best GFLOPs: 3102.9903
2024-03-21 18:32:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 18:32:42 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 18:32:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 18:32:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 798 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 18:32:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 1199 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 18:32:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 1598 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 18:32:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 1999 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 18:32:54 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-03-21 18:33:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 18:33:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 18:33:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 18:33:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 18:33:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.1960  2.1687  2.1176  2.0545  2.0533  2.0169  2.0048  1.9332  1.9190  1.9188  1.9101  1.8970  1.8825  1.8243  1.8059  1.7997
[17 : 32]:	1.7908  1.7754  1.7725  1.7643  1.7643  1.7631  1.7591  1.7576  1.7395  1.7390  1.7390  1.7345  1.7268  1.7266  1.7204  1.7196
[33 : 48]:	1.7132  1.6786  1.6690  1.6528  1.6523  1.6468  1.6401  1.6327  1.6176  1.6126  1.6126  1.5879  1.5836  1.5741  1.5701  1.5694
[49 : 64]:	1.5592  1.5592  1.5532  1.5496  1.5429  1.5381  1.5339  1.5297  1.5281  1.5242  1.5213  1.5197  1.5156  1.5156  1.5139  1.5135
2024-03-21 18:33:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 18:33:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #129: GFLOPs: 2269.0155. Time: 28.8826 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #130: GFLOPs: 1121.3714. Time: 58.4420 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #131: GFLOPs: 1649.2835. Time: 39.7355 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #132: GFLOPs: 1118.9535. Time: 58.5683 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #133: GFLOPs: 1648.0746. Time: 39.7647 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #134: GFLOPs: 2980.2373. Time: 21.9899 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #135: GFLOPs: 3101.5429. Time: 21.1299 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #136: GFLOPs: 609.6808. Time: 107.4910 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #137: GFLOPs: 608.3800. Time: 107.7208 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #138: GFLOPs: 2238.1358. Time: 29.2811 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #139: GFLOPs: 583.4569. Time: 112.3222 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #140: GFLOPs: 611.1101. Time: 107.2395 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #141: GFLOPs: 1450.0322. Time: 45.1957 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #142: GFLOPs: 575.6690. Time: 113.8418 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #143: GFLOPs: 2112.5435. Time: 31.0219 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #144: GFLOPs: 608.3396. Time: 107.7279 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #145: GFLOPs: 594.5507. Time: 110.2264 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #146: GFLOPs: 2012.1744. Time: 32.5693 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #147: GFLOPs: 590.5428. Time: 110.9745 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #148: GFLOPs: 1131.2003. Time: 57.9342 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #149: GFLOPs: 666.0775. Time: 98.3897 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #150: GFLOPs: 1653.2143. Time: 39.6411 us. Best GFLOPs: 3102.9903
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #151: GFLOPs: 3510.2521. Time: 18.6696 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #152: GFLOPs: 589.0232. Time: 111.2608 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #153: GFLOPs: 592.3862. Time: 110.6291 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #154: GFLOPs: 582.8883. Time: 112.4318 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:30 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #155: GFLOPs: 582.9190. Time: 112.4259 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #156: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(13), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1014))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1248) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1248) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(576))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(13), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 24, 1, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 13, 13, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 3, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 312], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 312, 4], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #157: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(1352), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(12) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(12) // T.int64(6) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(169) * T.int64(12) + eps_2_nu_2_co_2_p_2_fused % T.int64(6) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(169) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(64) // T.int64(16))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16))
                                    v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1 < T.int64(256))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(64)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(768))
                                    v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(768) // T.int64(192))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(192) // T.int64(12))
                                    v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(169) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(12))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(12) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(12) // T.int64(6) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(169) * T.int64(12) + eps_2_nu_2_co_2_p_2_fused % T.int64(6) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(169) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(16) + ci_1 + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(12) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused * T.int64(2) + eps_2_nu_2_co_2_p_2_fused % T.int64(12) // T.int64(6) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused // T.int64(169) * T.int64(12) + eps_2_nu_2_co_2_p_2_fused % T.int64(6) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(169) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[8, 1, 6, 1, 2])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[169, 1, 1, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[6, 16, 1])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144 = sch.split(loop=l142, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b145 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b145, ann_key="meta_schedule.unroll_explicit")
b146, b147, b148, b149, b150, b151, b152, b153, b154 = sch.get_child_blocks(b145)
l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b146)
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b147)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b148)
l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b149)
l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b150)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b151)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b152)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b154)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #158: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(13), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1014))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(624) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(624) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(576))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(13), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 * T.int64(6) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 24, 4, 1])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 13, 13, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 1, 6])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 312], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 312, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #159: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(64) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(64) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(104), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(6), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), nu_3_init * T.int64(4) + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(13) * T.int64(6) + co_3_init * T.int64(6) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(416) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(312))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(416) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(312) // T.int64(78))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(416) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(78) // T.int64(13))
                                        v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(416) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(13))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(624))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(104), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(576))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(576) // T.int64(144))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(144) // T.int64(24))
                                        v3 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(24))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(104) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1152))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(4), T.int64(6), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), nu_3 * T.int64(4) + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(13) * T.int64(6) + co_3 * T.int64(6) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 * T.int64(3) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(6), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(52) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(52) + ax0)
                            v1 = T.axis.spatial(T.int64(4), ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_0_nu_0_co_0_p_0_fused % T.int64(52) // T.int64(13) * T.int64(24) + eps_2_nu_2_co_2_p_2_fused % T.int64(52) // T.int64(13) * T.int64(6) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_0_nu_0_co_0_p_0_fused % T.int64(13) * T.int64(13) + eps_2_nu_2_co_2_p_2_fused % T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 4])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[4, 1, 4, 1, 6])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[13, 1, 13, 1, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 2, 3])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137, l138 = sch.split(loop=l135, factors=[None, 104, 4], preserve_unit_iters=True)
sch.vectorize(loop=l138)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l139, l140, l141, l142, l143 = sch.get_loops(block=b108)
l144, l145, l146 = sch.split(loop=l143, factors=[None, 104, 3], preserve_unit_iters=True)
sch.vectorize(loop=l146)
sch.bind(loop=l145, thread_axis="threadIdx.x")
b147 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b147, ann_key="meta_schedule.unroll_explicit")
b148, b149, b150, b151, b152, b153, b154, b155, b156 = sch.get_child_blocks(b147)
l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b148)
l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b149)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
l169, l170, l171, l172, l173, l174 = sch.get_loops(block=b150)
l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b151)
l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b152)
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202 = sch.get_loops(block=b153)
sch.annotate(block_or_loop=l189, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l189, ann_key="pragma_unroll_explicit", ann_val=1)
l203, l204, l205, l206, l207, l208, l209 = sch.get_loops(block=b154)
l210, l211, l212, l213, l214, l215, l216, l217 = sch.get_loops(block=b155)
sch.annotate(block_or_loop=l210, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l210, ann_key="pragma_unroll_explicit", ann_val=1)
l218, l219, l220, l221 = sch.get_loops(block=b156)
b222 = sch.get_block(name="data_pack", func_name="main")
l223, l224, l225, l226, l227, l228 = sch.get_loops(block=b222)
b229 = sch.decompose_reduction(block=b222, loop=l227)
b230 = sch.get_block(name="bgemm", func_name="main")
l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242, l243, l244 = sch.get_loops(block=b230)
b245 = sch.decompose_reduction(block=b230, loop=l234)
b246 = sch.get_block(name="inverse", func_name="main")
l247, l248, l249, l250, l251, l252, l253, l254 = sch.get_loops(block=b246)
b255 = sch.decompose_reduction(block=b246, loop=l253)
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #160: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                            T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(5) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.where(ci_p_fused_0 * T.int64(512) + ci_p_fused_1 < T.int64(16224))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(13), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1014))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(624) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(624) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(576))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(13), T.int64(6), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 * T.int64(6) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 24, 1, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 13, 13, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 1, 6])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 312], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 312, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:121] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #161: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(96), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)))
        inverse_local = T.alloc_buffer((T.int64(96), T.int64(169), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(169)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(96), T.int64(96)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(507), thread="blockIdx.x"):
            for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax0)
                        v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps and v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps < T.int64(26) and T.int64(1) <= v_p % T.int64(13) * T.int64(2) + v_nu and v_p % T.int64(13) * T.int64(2) + v_nu < T.int64(26), p0[v_p // T.int64(169), v_ci, v_p % T.int64(169) // T.int64(13) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(13) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                            v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169))
                                    v_p = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(96), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(169) + ax2)
                        v3 = T.axis.spatial(T.int64(169), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(169) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(13), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + co_3_init * T.int64(4) + co_4_init)
                            v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                    v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                                    v3 = T.axis.spatial(T.int64(169), (ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1014))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(312), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(96), ci_0_fused * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(624) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v3 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(624) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(312) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(576))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(13), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + co_3 * T.int64(4) + co_4)
                                v_p = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(96), ci_0_fused * T.int64(6) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(13)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(4) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(96), eps_2_nu_2_co_2_p_2_fused // T.int64(13) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(169), eps_2_nu_2_co_2_p_2_fused % T.int64(13) * T.int64(13) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x"):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169) + ax0)
                                        v_p = T.axis.spatial(T.int64(169), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(96), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(169))
                        v_h = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(25), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1)
                        T.where((n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(169) // T.int64(13) * T.int64(2) + h_1 < T.int64(25) and (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(13) * T.int64(2) + w_1 < T.int64(25) and n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1 < T.int64(16224))
                        T.reads(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)], p2[v_n, v_co, T.int64(0), T.int64(0)])
                        T.writes(T_relu[v_n, v_co, v_h, v_w])
                        T_relu[v_n, v_co, v_h, v_w] = T.max(inverse_local[v_co, v_n * T.int64(169) + v_h // T.int64(2) * T.int64(13) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)] + p2[v_n, v_co, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_relu", func_name="main")
b6 = sch.get_block(name="root", func_name="main")
b7, b8 = sch.get_producers(block=b2)
sch.compute_inline(block=b8)
b9, = sch.get_consumers(block=b2)
l10, l11, l12, l13 = sch.get_loops(block=b9)
l14, l15 = sch.split(loop=l12, factors=[None, 2], preserve_unit_iters=True)
l16, l17 = sch.split(loop=l13, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l14, l16, l15, l17)
sch.compute_at(block=b2, loop=l16, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l18, l19, l20, l21, l22, l23, l24, l25, l26, l27 = sch.get_loops(block=b2)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
sch.unroll(loop=l26)
sch.unroll(loop=l27)
b28, b29 = sch.get_producers(block=b0)
sch.compute_inline(block=b29)
b30, = sch.get_producers(block=b28)
l31, l32, l33, l34, l35, l36 = sch.get_loops(block=b0)
sch.reorder(l33, l34, l31, l32, l35, l36)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
sch.unroll(loop=l35)
sch.unroll(loop=l36)
l37 = sch.fuse(l33, l34, preserve_unit_iters=True)
v38 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l39, l40 = sch.split(loop=l37, factors=[None, v38], preserve_unit_iters=True)
sch.bind(loop=l39, thread_axis="blockIdx.x")
sch.bind(loop=l40, thread_axis="threadIdx.x")
b41 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b41, loop=l40, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b28, loop=l40, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b28, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b30)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l42, l43, l44, l45, l46 = sch.get_loops(block=b1)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l52, l53, l54, l55, l56 = sch.split(loop=l42, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59, v60, v61 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l62, l63, l64, l65, l66 = sch.split(loop=l43, factors=[v57, v58, v59, v60, v61], preserve_unit_iters=True)
v67, v68, v69, v70, v71 = sch.sample_perfect_tile(loop=l44, n=5, max_innermost_factor=64, decision=[1, 1, 24, 1, 4])
l72, l73, l74, l75, l76 = sch.split(loop=l44, factors=[v67, v68, v69, v70, v71], preserve_unit_iters=True)
v77, v78, v79, v80, v81 = sch.sample_perfect_tile(loop=l45, n=5, max_innermost_factor=64, decision=[1, 1, 13, 13, 1])
l82, l83, l84, l85, l86 = sch.split(loop=l45, factors=[v77, v78, v79, v80, v81], preserve_unit_iters=True)
v87, v88, v89 = sch.sample_perfect_tile(loop=l46, n=3, max_innermost_factor=64, decision=[16, 3, 2])
l90, l91, l92 = sch.split(loop=l46, factors=[v87, v88, v89], preserve_unit_iters=True)
sch.reorder(l52, l62, l72, l82, l53, l63, l73, l83, l54, l64, l74, l84, l90, l91, l55, l65, l75, l85, l92, l56, l66, l76, l86)
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="blockIdx.x")
l94 = sch.fuse(l53, l63, l73, l83, preserve_unit_iters=True)
sch.bind(loop=l94, thread_axis="vthread.x")
l95 = sch.fuse(l54, l64, l74, l84, preserve_unit_iters=True)
sch.bind(loop=l95, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b96 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b96, loop=l95, preserve_unit_loops=True, index=-1)
b97 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b97, loop=l90, preserve_unit_loops=True, index=-1)
l98, l99, l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b97)
l106 = sch.fuse(l102, l103, l104, l105, preserve_unit_iters=True)
v107 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch", ann_val=v107)
b108 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b108, loop=l90, preserve_unit_loops=True, index=-1)
l109, l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b108)
l117 = sch.fuse(l113, l114, l115, l116, preserve_unit_iters=True)
v118 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch", ann_val=v118)
l119 = sch.fuse(l90, preserve_unit_iters=True)
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l119, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b5)
sch.reverse_compute_inline(block=b4)
v120 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b6, ann_key="meta_schedule.unroll_explicit", ann_val=v120)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b3)
l127 = sch.fuse(l121, l122, l123, l124, preserve_unit_iters=True)
v128 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l129, l130 = sch.split(loop=l127, factors=[None, v128], preserve_unit_iters=True)
sch.bind(loop=l129, thread_axis="blockIdx.x")
sch.bind(loop=l130, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b97, ann_key="meta_schedule.cooperative_fetch")
l131, l132, l133, l134, l135 = sch.get_loops(block=b97)
l136, l137 = sch.split(loop=l135, factors=[None, 312], preserve_unit_iters=True)
sch.bind(loop=l137, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.cooperative_fetch")
l138, l139, l140, l141, l142 = sch.get_loops(block=b108)
l143, l144, l145 = sch.split(loop=l142, factors=[None, 312, 2], preserve_unit_iters=True)
sch.vectorize(loop=l145)
sch.bind(loop=l144, thread_axis="threadIdx.x")
b146 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b146, ann_key="meta_schedule.unroll_explicit")
b147, b148, b149, b150, b151, b152, b153, b154, b155 = sch.get_child_blocks(b146)
l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b147)
l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b148)
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b149)
l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b150)
l180, l181, l182, l183, l184, l185, l186 = sch.get_loops(block=b151)
l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200 = sch.get_loops(block=b152)
l201, l202, l203, l204, l205, l206, l207 = sch.get_loops(block=b153)
l208, l209, l210, l211, l212, l213, l214, l215 = sch.get_loops(block=b154)
l216, l217, l218, l219 = sch.get_loops(block=b155)
b220 = sch.get_block(name="data_pack", func_name="main")
l221, l222, l223, l224, l225, l226 = sch.get_loops(block=b220)
b227 = sch.decompose_reduction(block=b220, loop=l225)
b228 = sch.get_block(name="bgemm", func_name="main")
l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241, l242 = sch.get_loops(block=b228)
b243 = sch.decompose_reduction(block=b228, loop=l232)
b244 = sch.get_block(name="inverse", func_name="main")
l245, l246, l247, l248, l249, l250, l251, l252 = sch.get_loops(block=b244)
b253 = sch.decompose_reduction(block=b244, loop=l251)
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #162: GFLOPs: 588.3317. Time: 111.3915 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #163: GFLOPs: 582.2112. Time: 112.5625 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #164: GFLOPs: 583.7623. Time: 112.2635 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #165: GFLOPs: 585.3634. Time: 111.9564 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #166: GFLOPs: 2092.9765. Time: 31.3119 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #167: GFLOPs: 577.5762. Time: 113.4658 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #168: GFLOPs: 583.2204. Time: 112.3678 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #169: GFLOPs: 1709.0647. Time: 38.3456 us. Best GFLOPs: 3510.2521
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #170: GFLOPs: 3564.0479. Time: 18.3878 us. Best GFLOPs: 3564.0479
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #171: GFLOPs: 3567.9428. Time: 18.3678 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #172: GFLOPs: 2331.3022. Time: 28.1110 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #173: GFLOPs: 593.1789. Time: 110.4813 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #174: GFLOPs: 2953.8020. Time: 22.1867 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #175: GFLOPs: 2793.3257. Time: 23.4613 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #176: GFLOPs: 1943.9954. Time: 33.7116 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #177: GFLOPs: 317.1465. Time: 206.6400 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #178: GFLOPs: 949.9886. Time: 68.9852 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #179: GFLOPs: 2412.7092. Time: 27.1625 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #180: GFLOPs: 2848.3803. Time: 23.0079 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #181: GFLOPs: 290.2606. Time: 225.7804 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #182: GFLOPs: 2141.0479. Time: 30.6089 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #183: GFLOPs: 518.7724. Time: 126.3274 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #184: GFLOPs: 1909.6508. Time: 34.3179 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #185: GFLOPs: 521.6795. Time: 125.6234 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #186: GFLOPs: 1902.9166. Time: 34.4393 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #187: GFLOPs: 2293.7887. Time: 28.5707 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #188: GFLOPs: 1831.8753. Time: 35.7749 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #189: GFLOPs: 2399.5674. Time: 27.3112 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #190: GFLOPs: 1015.4123. Time: 64.5405 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #191: GFLOPs: 1466.5868. Time: 44.6855 us. Best GFLOPs: 3567.9428
2024-03-21 18:34:31 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #192: GFLOPs: 1493.8802. Time: 43.8691 us. Best GFLOPs: 3567.9428
2024-03-21 19:12:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 19:12:32 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 19:12:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 398 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 19:12:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 790 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 19:12:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 1183 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 19:12:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 1579 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 19:12:42 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-03-21 19:12:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 19:13:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 19:13:13 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 19:13:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b41f068)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b17bad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c481c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b07165d01d8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071bdb2d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd244d8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b17b9d8)]: 0 failure(s)
2024-03-21 19:13:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.9798  1.9772  1.9703  1.8410  1.8117  1.7764  1.7296  1.7152  1.6749  1.6683  1.6586  1.6438  1.6331  1.6287  1.5955  1.5941
[17 : 32]:	1.5919  1.5751  1.5751  1.5532  1.5497  1.5366  1.5333  1.5117  1.5028  1.4658  1.4647  1.4546  1.4534  1.4470  1.4395  1.4281
[33 : 48]:	1.4196  1.4123  1.3924  1.3767  1.3590  1.3538  1.3508  1.3436  1.3208  1.3206  1.2999  1.2961  1.2959  1.2949  1.2918  1.2859
[49 : 64]:	1.2817  1.2806  1.2797  1.2764  1.2744  1.2743  1.2737  1.2723  1.2702  1.2615  1.2595  1.2595  1.2592  1.2589  1.2585  1.2584
2024-03-21 19:13:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 19:13:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #193: GFLOPs: 2785.8555. Time: 23.5243 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #194: GFLOPs: 2808.8901. Time: 23.3313 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #195: GFLOPs: 2807.7430. Time: 23.3409 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #196: GFLOPs: 2740.3747. Time: 23.9147 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #197: GFLOPs: 2197.0104. Time: 29.8292 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #198: GFLOPs: 1969.6322. Time: 33.2728 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #199: GFLOPs: 1943.0789. Time: 33.7275 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #200: GFLOPs: 1704.1363. Time: 38.4565 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #201: GFLOPs: 1419.7892. Time: 46.1584 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #202: GFLOPs: 1419.7177. Time: 46.1607 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #203: GFLOPs: 1950.2557. Time: 33.6034 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #204: GFLOPs: 2535.0596. Time: 25.8515 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #205: GFLOPs: 2388.2119. Time: 27.4411 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #206: GFLOPs: 1800.5699. Time: 36.3969 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #207: GFLOPs: 581.8970. Time: 112.6233 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #208: GFLOPs: 437.1958. Time: 149.8989 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #209: GFLOPs: 2308.3607. Time: 28.3903 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #210: GFLOPs: 2847.8230. Time: 23.0124 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #211: GFLOPs: 2470.0977. Time: 26.5314 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #212: GFLOPs: 2870.3255. Time: 22.8320 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #213: GFLOPs: 2609.4955. Time: 25.1141 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #214: GFLOPs: 2369.2518. Time: 27.6607 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #215: GFLOPs: 2996.0111. Time: 21.8741 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #216: GFLOPs: 2369.6637. Time: 27.6559 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #217: GFLOPs: 2722.4238. Time: 24.0724 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #218: GFLOPs: 2215.5700. Time: 29.5794 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #219: GFLOPs: 2997.2948. Time: 21.8648 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #220: GFLOPs: 2633.1657. Time: 24.8884 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #221: GFLOPs: 2730.4010. Time: 24.0020 us. Best GFLOPs: 3567.9428
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #222: GFLOPs: 3644.4443. Time: 17.9822 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #223: GFLOPs: 2282.5528. Time: 28.7113 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #224: GFLOPs: 2755.4911. Time: 23.7835 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #225: GFLOPs: 3232.6945. Time: 20.2726 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #226: GFLOPs: 2730.3115. Time: 24.0028 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #227: GFLOPs: 2776.6815. Time: 23.6020 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #228: GFLOPs: 2664.0864. Time: 24.5995 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #229: GFLOPs: 2475.4878. Time: 26.4736 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #230: GFLOPs: 2503.1742. Time: 26.1808 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #231: GFLOPs: 582.1686. Time: 112.5708 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #232: GFLOPs: 2536.0227. Time: 25.8417 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #233: GFLOPs: 27.1957. Time: 2409.7646 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #234: GFLOPs: 3153.0522. Time: 20.7847 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #235: GFLOPs: 2636.9254. Time: 24.8529 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #236: GFLOPs: 2664.8937. Time: 24.5920 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #237: GFLOPs: 1833.3297. Time: 35.7465 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #238: GFLOPs: 984.9207. Time: 66.5385 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #239: GFLOPs: 1852.1167. Time: 35.3839 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #240: GFLOPs: 2746.1076. Time: 23.8647 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #241: GFLOPs: 2334.7940. Time: 28.0689 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #242: GFLOPs: 2396.7204. Time: 27.3437 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #243: GFLOPs: 2371.1748. Time: 27.6383 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #244: GFLOPs: 2261.1458. Time: 28.9832 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #245: GFLOPs: 2816.7844. Time: 23.2660 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #246: GFLOPs: 2173.0630. Time: 30.1580 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #247: GFLOPs: 2404.6357. Time: 27.2537 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #248: GFLOPs: 2307.7383. Time: 28.3980 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #249: GFLOPs: 280.4568. Time: 233.6730 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #250: GFLOPs: 3294.0284. Time: 19.8951 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #251: GFLOPs: 2334.7865. Time: 28.0690 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #252: GFLOPs: 2334.7753. Time: 28.0692 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #253: GFLOPs: 2174.3584. Time: 30.1400 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #254: GFLOPs: 1309.7372. Time: 50.0369 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #255: GFLOPs: 1946.3912. Time: 33.6701 us. Best GFLOPs: 3644.4443
2024-03-21 19:14:24 [INFO] [task_scheduler.cc:131] [Task #41: fused_nn_contrib_conv2d_winograd_without_weight_transform_add_nn_relu_2] Trial #256: GFLOPs: 207.1490. Time: 316.3673 us. Best GFLOPs: 3644.4443
