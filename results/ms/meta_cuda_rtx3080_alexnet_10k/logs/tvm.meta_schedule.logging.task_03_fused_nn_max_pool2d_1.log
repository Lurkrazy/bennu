2024-03-20 19:37:46 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_max_pool2d_1"
2024-03-20 19:37:46 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(192), T.int64(13), T.int64(13), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
2024-03-20 19:37:46 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-03-20 19:37:46 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(254), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(192), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(169))
                            v_ax2 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(169) // T.int64(13))
                            v_ax3 = T.axis.spatial(T.int64(13), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(13))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 < T.int64(32448))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l3, l4, l5, l6, preserve_unit_iters=True)
v10 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l11, l12 = sch.split(loop=l9, factors=[None, v10], preserve_unit_iters=True)
sch.bind(loop=l11, thread_axis="blockIdx.x")
sch.bind(loop=l12, thread_axis="threadIdx.x")
2024-03-20 19:37:46 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(32448), thread="blockIdx.x"):
                for rv0_rv1_fused_0 in range(T.int64(1)):
                    for rv0_rv1_fused_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(169))
                            v_ax2 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(169) // T.int64(13))
                            v_ax3 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(13))
                            v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(16) + rv0_rv1_fused_1) // T.int64(3))
                            v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(16) + rv0_rv1_fused_1) % T.int64(3))
                            T.where(rv0_rv1_fused_0 * T.int64(16) + rv0_rv1_fused_1 < T.int64(9))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
v2 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
l10, l11 = sch.split(loop=l9, factors=[None, v2], preserve_unit_iters=True)
sch.bind(loop=l11, thread_axis="threadIdx.x")
v12 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v12)
l13, l14, l15, l16, l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l13, l14, l15, l16, preserve_unit_iters=True)
sch.bind(loop=l19, thread_axis="blockIdx.x")
2024-03-20 19:40:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-20 19:40:30 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-20 19:40:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x613333bcf858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61333349cdd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61333349c6f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x613333b3a598)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61333367c368)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x613333553c28)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61333349d188)]: 0 failure(s)
2024-03-20 19:40:31 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-20 19:40:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x613333bcf858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61333349cdd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61333349c6f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x613333b3a598)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61333367c368)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x613333553c28)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61333349d188)]: 0 failure(s)
2024-03-20 19:40:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x613333bcf858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61333349cdd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61333349c6f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x613333b3a598)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61333367c368)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x613333553c28)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61333349d188)]: 0 failure(s)
2024-03-20 19:40:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x613333bcf858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61333349cdd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61333349c6f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x613333b3a598)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61333367c368)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x613333553c28)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61333349d188)]: 0 failure(s)
2024-03-20 19:40:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x613333bcf858)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61333349cdd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61333349c6f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x613333b3a598)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61333367c368)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x613333553c28)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61333349d188)]: 0 failure(s)
2024-03-20 19:40:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9846  0.9791  0.9723  0.9589  0.9532  0.9450  0.9295  0.9271  0.9180  0.9179  0.9005  0.8380  0.7920  0.7695  0.7672  0.7661
[17 : 32]:	0.7546  0.7359  0.7241  0.6790  0.6789  0.6550  0.6495  0.6426  0.6342  0.6273  0.6202  0.6117  0.6030  0.5784  0.5573  0.5186
[33 : 48]:	0.5084  0.5050  0.4977  0.4915  0.4714  0.4628  0.4607  0.4575  0.4277  0.4267  0.4161  0.4100  0.3894  0.3833  0.3743  0.3711
[49 : 64]:	0.3472  0.3368  0.3319  0.3253  0.3114  0.2794  0.2678  0.2122  0.2108  0.2047  0.1850  0.1670  0.1585  0.1204  0.1053  0.1010
2024-03-20 19:40:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-20 19:40:31 [INFO] [evolutionary_search.cc:730] Sending 62 candidates(s) for measurement
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_max_pool2d_1] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(32448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for rv0_rv1_fused_0 in range(T.int64(1)):
                for rv0_rv1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("pool_max"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(169))
                        v_ax2 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(169) // T.int64(13))
                        v_ax3 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(13))
                        v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(64) + rv0_rv1_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(64) + rv0_rv1_fused_1) % T.int64(3))
                        T.where(rv0_rv1_fused_0 * T.int64(64) + rv0_rv1_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
v2 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
l10, l11 = sch.split(loop=l9, factors=[None, v2], preserve_unit_iters=True)
sch.bind(loop=l11, thread_axis="threadIdx.x")
v12 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v12)
l13, l14, l15, l16, l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l13, l14, l15, l16, preserve_unit_iters=True)
sch.bind(loop=l19, thread_axis="blockIdx.x")
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, = sch.get_child_blocks(b20)
l22, l23, l24 = sch.get_loops(block=b21)
sch.annotate(block_or_loop=l22, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l22, ann_key="pragma_unroll_explicit", ann_val=1)
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_max_pool2d_1] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(32448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for rv0_rv1_fused_0 in range(T.int64(1)):
                for rv0_rv1_fused_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                    with T.block("pool_max"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(169))
                        v_ax2 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(169) // T.int64(13))
                        v_ax3 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(13))
                        v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(16) + rv0_rv1_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(16) + rv0_rv1_fused_1) % T.int64(3))
                        T.where(rv0_rv1_fused_0 * T.int64(16) + rv0_rv1_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
v2 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
l10, l11 = sch.split(loop=l9, factors=[None, v2], preserve_unit_iters=True)
sch.bind(loop=l11, thread_axis="threadIdx.x")
v12 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v12)
l13, l14, l15, l16, l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l13, l14, l15, l16, preserve_unit_iters=True)
sch.bind(loop=l19, thread_axis="blockIdx.x")
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, = sch.get_child_blocks(b20)
l22, l23, l24 = sch.get_loops(block=b21)
sch.annotate(block_or_loop=l22, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l22, ann_key="pragma_unroll_explicit", ann_val=1)
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_max_pool2d_1] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(32448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for rv0_rv1_fused_0 in range(T.int64(1)):
                for rv0_rv1_fused_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                    with T.block("pool_max"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(169))
                        v_ax2 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(169) // T.int64(13))
                        v_ax3 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(13))
                        v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(16) + rv0_rv1_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(16) + rv0_rv1_fused_1) % T.int64(3))
                        T.where(rv0_rv1_fused_0 * T.int64(16) + rv0_rv1_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
v2 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
l10, l11 = sch.split(loop=l9, factors=[None, v2], preserve_unit_iters=True)
sch.bind(loop=l11, thread_axis="threadIdx.x")
v12 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v12)
l13, l14, l15, l16, l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l13, l14, l15, l16, preserve_unit_iters=True)
sch.bind(loop=l19, thread_axis="blockIdx.x")
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, = sch.get_child_blocks(b20)
l22, l23, l24 = sch.get_loops(block=b21)
sch.annotate(block_or_loop=l22, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l22, ann_key="pragma_unroll_explicit", ann_val=1)
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_max_pool2d_1] Trial #4: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(27), T.int64(27)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(192), T.int64(13), T.int64(13)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(32448), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for rv0_rv1_fused_0 in range(T.int64(1)):
                for rv0_rv1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("pool_max"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(192), ax0_ax1_ax2_ax3_fused // T.int64(169))
                        v_ax2 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(169) // T.int64(13))
                        v_ax3 = T.axis.spatial(T.int64(13), ax0_ax1_ax2_ax3_fused % T.int64(13))
                        v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(256) + rv0_rv1_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(256) + rv0_rv1_fused_1) % T.int64(3))
                        T.where(rv0_rv1_fused_0 * T.int64(256) + rv0_rv1_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
v2 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=6)
l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
l10, l11 = sch.split(loop=l9, factors=[None, v2], preserve_unit_iters=True)
sch.bind(loop=l11, thread_axis="threadIdx.x")
v12 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v12)
l13, l14, l15, l16, l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l13, l14, l15, l16, preserve_unit_iters=True)
sch.bind(loop=l19, thread_axis="blockIdx.x")
sch.enter_postproc()
b20 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b20, ann_key="meta_schedule.unroll_explicit")
b21, = sch.get_child_blocks(b20)
l22, l23, l24 = sch.get_loops(block=b21)
sch.annotate(block_or_loop=l22, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l22, ann_key="pragma_unroll_explicit", ann_val=1)
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #5: GFLOPs: 130.4057. Time: 2.2394 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #6: GFLOPs: 127.5723. Time: 2.2891 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #7: GFLOPs: 14.0147. Time: 20.8376 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #8: GFLOPs: 128.2443. Time: 2.2772 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #9: GFLOPs: 11.3410. Time: 25.7500 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #10: GFLOPs: 128.1157. Time: 2.2794 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #11: GFLOPs: 14.1965. Time: 20.5707 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #12: GFLOPs: 2.7115. Time: 107.7026 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #13: GFLOPs: 14.1960. Time: 20.5714 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #14: GFLOPs: 14.2083. Time: 20.5537 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #15: GFLOPs: 2.7116. Time: 107.6957 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #16: GFLOPs: 14.2095. Time: 20.5519 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #17: GFLOPs: 5.6697. Time: 51.5076 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #18: GFLOPs: 14.2110. Time: 20.5497 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #19: GFLOPs: 5.6699. Time: 51.5060 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #20: GFLOPs: 126.7553. Time: 2.3039 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #21: GFLOPs: 14.1395. Time: 20.6536 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #22: GFLOPs: 14.2097. Time: 20.5516 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #23: GFLOPs: 128.1757. Time: 2.2784 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #24: GFLOPs: 127.8848. Time: 2.2836 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #25: GFLOPs: 11.2912. Time: 25.8637 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #26: GFLOPs: 127.7886. Time: 2.2853 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #27: GFLOPs: 14.1266. Time: 20.6724 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #28: GFLOPs: 11.2913. Time: 25.8633 us. Best GFLOPs: 130.4057
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #29: GFLOPs: 130.5201. Time: 2.2374 us. Best GFLOPs: 130.5201
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #30: GFLOPs: 129.2055. Time: 2.2602 us. Best GFLOPs: 130.5201
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #31: GFLOPs: 128.6065. Time: 2.2707 us. Best GFLOPs: 130.5201
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #32: GFLOPs: 130.5290. Time: 2.2373 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #33: GFLOPs: 128.5242. Time: 2.2722 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #34: GFLOPs: 5.6693. Time: 51.5109 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #35: GFLOPs: 11.2913. Time: 25.8635 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #36: GFLOPs: 128.8510. Time: 2.2664 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #37: GFLOPs: 14.2113. Time: 20.5493 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #38: GFLOPs: 129.2019. Time: 2.2603 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #39: GFLOPs: 2.6991. Time: 108.1978 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #40: GFLOPs: 14.2117. Time: 20.5487 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #41: GFLOPs: 129.1312. Time: 2.2615 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #42: GFLOPs: 14.1397. Time: 20.6534 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #43: GFLOPs: 14.0936. Time: 20.7209 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #44: GFLOPs: 130.5184. Time: 2.2375 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #45: GFLOPs: 14.1268. Time: 20.6722 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #46: GFLOPs: 14.0943. Time: 20.7199 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #47: GFLOPs: 128.7987. Time: 2.2674 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #48: GFLOPs: 14.0947. Time: 20.7193 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #49: GFLOPs: 11.2548. Time: 25.9472 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #50: GFLOPs: 128.9050. Time: 2.2655 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #51: GFLOPs: 130.3689. Time: 2.2400 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #52: GFLOPs: 128.7071. Time: 2.2690 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #53: GFLOPs: 14.1265. Time: 20.6726 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #54: GFLOPs: 5.6707. Time: 51.4984 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #55: GFLOPs: 14.0944. Time: 20.7197 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #56: GFLOPs: 14.2123. Time: 20.5479 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #57: GFLOPs: 128.6987. Time: 2.2691 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #58: GFLOPs: 128.4198. Time: 2.2740 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #59: GFLOPs: 128.4490. Time: 2.2735 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #60: GFLOPs: 129.2968. Time: 2.2586 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #61: GFLOPs: 129.2221. Time: 2.2599 us. Best GFLOPs: 130.5290
2024-03-20 19:50:56 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_max_pool2d_1] Trial #62: GFLOPs: 128.9841. Time: 2.2641 us. Best GFLOPs: 130.5290
