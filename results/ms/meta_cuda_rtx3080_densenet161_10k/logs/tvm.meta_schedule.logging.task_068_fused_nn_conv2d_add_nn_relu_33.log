2024-03-21 07:30:21 [INFO] [task_scheduler.cc:160] Initializing Task #68: "fused_nn_conv2d_add_nn_relu_33"
2024-03-21 07:30:21 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1632), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1632), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1632), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(1632), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:21 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:21 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1632), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1632), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(224), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(17), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(672)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2304)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(6) + ff_3 * T.int64(6) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1632), rc_0 * T.int64(96) + rc_1 * T.int64(12) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 2, 1, 6])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[17, 8, 12])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:21 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1632), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1632), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(224), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(17), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(672)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2304)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(6) + ff_3 * T.int64(6) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(12) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 2, 1, 6])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[17, 8, 12])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:21 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1632), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1632), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(224), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(17), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(672)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2304)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(6) + ff_3 * T.int64(6) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(12) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(28) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(28) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 2, 1, 6])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[17, 8, 12])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:01:47 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:01:47 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:01:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ef5f2ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f1e8af08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f5649008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ee72c528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e540f078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f120fc28)]: 495 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f574e938)]: 0 failure(s)
2024-03-21 08:01:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ef5f2ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f1e8af08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f5649008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ee72c528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e540f078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f120fc28)]: 985 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f574e938)]: 0 failure(s)
2024-03-21 08:01:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ef5f2ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f1e8af08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f5649008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ee72c528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e540f078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f120fc28)]: 1472 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f574e938)]: 0 failure(s)
2024-03-21 08:01:49 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-03-21 08:01:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ef5f2ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f1e8af08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f5649008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ee72c528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e540f078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f120fc28)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f574e938)]: 0 failure(s)
2024-03-21 08:01:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ef5f2ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f1e8af08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f5649008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ee72c528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e540f078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f120fc28)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f574e938)]: 0 failure(s)
2024-03-21 08:01:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ef5f2ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f1e8af08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f5649008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ee72c528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e540f078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f120fc28)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f574e938)]: 0 failure(s)
2024-03-21 08:01:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ef5f2ac8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f1e8af08)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f5649008)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8ee72c528)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e540f078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f120fc28)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f574e938)]: 0 failure(s)
2024-03-21 08:01:55 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9988  0.9985  0.9981  0.9980  0.9980  0.9980  0.9971  0.9968  0.9967  0.9956  0.9947  0.9946  0.9943  0.9942  0.9924
[17 : 32]:	0.9924  0.9910  0.9894  0.9893  0.9889  0.9887  0.9880  0.9879  0.9877  0.9872  0.9871  0.9843  0.9833  0.9829  0.9822  0.9814
[33 : 48]:	0.9811  0.9792  0.9790  0.9780  0.9753  0.9752  0.9750  0.9744  0.9730  0.9728  0.9726  0.9723  0.9706  0.9706  0.9692  0.9689
[49 : 64]:	0.9685  0.9685  0.9669  0.9655  0.9650  0.9650  0.9642  0.9638  0.9634  0.9634  0.9608  0.9603  0.9594  0.9575  0.9573  0.9573
2024-03-21 08:01:55 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:01:55 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #1: GFLOPs: 1913.3294. Time: 64.2368 us. Best GFLOPs: 1913.3294
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #2: GFLOPs: 905.6389. Time: 135.7121 us. Best GFLOPs: 1913.3294
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #3: GFLOPs: 84.3150. Time: 1457.7011 us. Best GFLOPs: 1913.3294
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #4: GFLOPs: 91.4477. Time: 1344.0051 us. Best GFLOPs: 1913.3294
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #5: GFLOPs: 958.8391. Time: 128.1822 us. Best GFLOPs: 1913.3294
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #6: GFLOPs: 2345.5525. Time: 52.3996 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #7: GFLOPs: 208.4351. Time: 589.6614 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #8: GFLOPs: 1155.1246. Time: 106.4007 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #9: GFLOPs: 859.2138. Time: 143.0449 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #10: GFLOPs: 1380.8100. Time: 89.0102 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #11: GFLOPs: 166.5305. Time: 738.0395 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #12: GFLOPs: 366.9966. Time: 334.8972 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #13: GFLOPs: 837.2661. Time: 146.7946 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #14: GFLOPs: 851.1362. Time: 144.4024 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #15: GFLOPs: 458.6106. Time: 267.9966 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #16: GFLOPs: 391.6674. Time: 313.8022 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #17: GFLOPs: 219.1246. Time: 560.8960 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #18: GFLOPs: 686.0485. Time: 179.1508 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #19: GFLOPs: 274.4381. Time: 447.8464 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #20: GFLOPs: 648.6044. Time: 189.4932 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #21: GFLOPs: 359.8808. Time: 341.5190 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #22: GFLOPs: 310.4647. Time: 395.8779 us. Best GFLOPs: 2345.5525
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #23: GFLOPs: 2682.2939. Time: 45.8213 us. Best GFLOPs: 2682.2939
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #24: GFLOPs: 425.7169. Time: 288.7039 us. Best GFLOPs: 2682.2939
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #25: GFLOPs: 183.7481. Time: 668.8836 us. Best GFLOPs: 2682.2939
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #26: GFLOPs: 2947.3298. Time: 41.7008 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #27: GFLOPs: 11.8561. Time: 10366.4642 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #28: GFLOPs: 364.7240. Time: 336.9838 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #29: GFLOPs: 1634.9343. Time: 75.1750 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #30: GFLOPs: 1858.1159. Time: 66.1456 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #31: GFLOPs: 244.5659. Time: 502.5479 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #32: GFLOPs: 76.2241. Time: 1612.4313 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #33: GFLOPs: 345.5724. Time: 355.6596 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #34: GFLOPs: 106.1827. Time: 1157.4967 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #35: GFLOPs: 366.2124. Time: 335.6143 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #36: GFLOPs: 102.0420. Time: 1204.4664 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #37: GFLOPs: 1936.7372. Time: 63.4604 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #38: GFLOPs: 245.3528. Time: 500.9362 us. Best GFLOPs: 2947.3298
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #39: GFLOPs: 3102.3652. Time: 39.6169 us. Best GFLOPs: 3102.3652
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #40: GFLOPs: 929.2360. Time: 132.2658 us. Best GFLOPs: 3102.3652
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #41: GFLOPs: 425.1393. Time: 289.0961 us. Best GFLOPs: 3102.3652
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #42: GFLOPs: 68.0176. Time: 1806.9760 us. Best GFLOPs: 3102.3652
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #43: GFLOPs: 939.8313. Time: 130.7747 us. Best GFLOPs: 3102.3652
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #44: GFLOPs: 15.6218. Time: 7867.6158 us. Best GFLOPs: 3102.3652
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #45: GFLOPs: 3790.8947. Time: 32.4214 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #46: GFLOPs: 65.4156. Time: 1878.8503 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #47: GFLOPs: 581.6439. Time: 211.3082 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #48: GFLOPs: 491.8797. Time: 249.8703 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #49: GFLOPs: 43.4203. Time: 2830.6132 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #50: GFLOPs: 1429.2806. Time: 85.9916 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #51: GFLOPs: 927.7405. Time: 132.4790 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #52: GFLOPs: 84.7274. Time: 1450.6073 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #53: GFLOPs: 2169.1816. Time: 56.6601 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #54: GFLOPs: 1946.0896. Time: 63.1554 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #55: GFLOPs: 1931.0764. Time: 63.6464 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #56: GFLOPs: 369.9293. Time: 332.2422 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #57: GFLOPs: 757.7271. Time: 162.2037 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #58: GFLOPs: 787.6325. Time: 156.0450 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #59: GFLOPs: 1492.7294. Time: 82.3365 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #60: GFLOPs: 901.6461. Time: 136.3130 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #61: GFLOPs: 964.0972. Time: 127.4831 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #62: GFLOPs: 729.6481. Time: 168.4457 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #63: GFLOPs: 30.7873. Time: 3992.1094 us. Best GFLOPs: 3790.8947
2024-03-21 09:10:30 [INFO] [task_scheduler.cc:131] [Task #68: fused_nn_conv2d_add_nn_relu_33] Trial #64: GFLOPs: 347.4627. Time: 353.7246 us. Best GFLOPs: 3790.8947
