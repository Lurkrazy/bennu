2024-03-21 07:30:25 [INFO] [task_scheduler.cc:160] Initializing Task #143: "fused_nn_conv2d_add_nn_relu_70"
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(240), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28), T.int64(240), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(15), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(240), rc_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(240), rc_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), yy_3 * T.int64(28) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(240), rc_0 * T.int64(16) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                                v2 = T.axis.spatial(T.int64(28), ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 32, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 28])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[15, 16, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(15), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(240), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(240), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), yy_3 * T.int64(28) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(240), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                                v2 = T.axis.spatial(T.int64(28), ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 32, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 28])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[15, 16, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(240), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(84), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(15), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(240), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(56) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(512)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(240), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), yy_3 * T.int64(28) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(240), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                                v2 = T.axis.spatial(T.int64(28), ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[6, 1, 32, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 28])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[15, 16, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:46:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:46:27 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:46:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efbdb1e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ef4a8518)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ede9a9e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eec8f7a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f2c03288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6ad2ef8)]: 484 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ef04e2f8)]: 0 failure(s)
2024-03-21 08:46:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efbdb1e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ef4a8518)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ede9a9e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eec8f7a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f2c03288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6ad2ef8)]: 960 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ef04e2f8)]: 0 failure(s)
2024-03-21 08:46:29 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-03-21 08:46:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efbdb1e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ef4a8518)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ede9a9e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eec8f7a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f2c03288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6ad2ef8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ef04e2f8)]: 0 failure(s)
2024-03-21 08:46:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efbdb1e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ef4a8518)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ede9a9e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eec8f7a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f2c03288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6ad2ef8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ef04e2f8)]: 0 failure(s)
2024-03-21 08:46:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efbdb1e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ef4a8518)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ede9a9e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eec8f7a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f2c03288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6ad2ef8)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ef04e2f8)]: 0 failure(s)
2024-03-21 08:46:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efbdb1e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ef4a8518)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8ede9a9e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8eec8f7a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f2c03288)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6ad2ef8)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8ef04e2f8)]: 0 failure(s)
2024-03-21 08:46:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9998  0.9988  0.9987  0.9979  0.9978  0.9977  0.9975  0.9974  0.9973  0.9973  0.9968  0.9966  0.9961  0.9948  0.9945
[17 : 32]:	0.9919  0.9910  0.9909  0.9907  0.9906  0.9902  0.9894  0.9884  0.9883  0.9880  0.9874  0.9866  0.9853  0.9849  0.9841  0.9839
[33 : 48]:	0.9836  0.9833  0.9829  0.9819  0.9816  0.9808  0.9806  0.9794  0.9790  0.9785  0.9778  0.9773  0.9771  0.9766  0.9761  0.9758
[49 : 64]:	0.9753  0.9745  0.9738  0.9737  0.9733  0.9732  0.9729  0.9728  0.9727  0.9718  0.9718  0.9715  0.9713  0.9711  0.9708  0.9707
2024-03-21 08:46:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:46:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #1: GFLOPs: 19.5679. Time: 3707.8231 us. Best GFLOPs: 19.5679
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #2: GFLOPs: 1242.3611. Time: 58.4005 us. Best GFLOPs: 1242.3611
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #3: GFLOPs: 316.5441. Time: 229.2082 us. Best GFLOPs: 1242.3611
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #4: GFLOPs: 882.2129. Time: 82.2415 us. Best GFLOPs: 1242.3611
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #5: GFLOPs: 628.9340. Time: 115.3611 us. Best GFLOPs: 1242.3611
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #6: GFLOPs: 516.3756. Time: 140.5072 us. Best GFLOPs: 1242.3611
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #7: GFLOPs: 32.4661. Time: 2234.7776 us. Best GFLOPs: 1242.3611
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #8: GFLOPs: 2217.1244. Time: 32.7246 us. Best GFLOPs: 2217.1244
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #9: GFLOPs: 540.2157. Time: 134.3065 us. Best GFLOPs: 2217.1244
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #10: GFLOPs: 117.2654. Time: 618.7204 us. Best GFLOPs: 2217.1244
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #11: GFLOPs: 30.0750. Time: 2412.4485 us. Best GFLOPs: 2217.1244
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #12: GFLOPs: 42.3901. Time: 1711.5900 us. Best GFLOPs: 2217.1244
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #13: GFLOPs: 2805.2334. Time: 25.8640 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #14: GFLOPs: 652.0712. Time: 111.2677 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #15: GFLOPs: 2270.2823. Time: 31.9584 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #16: GFLOPs: 382.2259. Time: 189.8210 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #17: GFLOPs: 15.9661. Time: 4544.2893 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #18: GFLOPs: 2506.4917. Time: 28.9466 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #19: GFLOPs: 67.4718. Time: 1075.3307 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #20: GFLOPs: 2532.0571. Time: 28.6544 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #21: GFLOPs: 697.1725. Time: 104.0696 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #22: GFLOPs: 2472.5568. Time: 29.3439 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #23: GFLOPs: 894.1906. Time: 81.1399 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #24: GFLOPs: 1215.0857. Time: 59.7114 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #25: GFLOPs: 32.2051. Time: 2252.8910 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #26: GFLOPs: 1637.6054. Time: 44.3052 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #27: GFLOPs: 1744.3702. Time: 41.5935 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #28: GFLOPs: 91.6295. Time: 791.8244 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #29: GFLOPs: 32.1580. Time: 2256.1906 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #30: GFLOPs: 270.9462. Time: 267.7820 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #31: GFLOPs: 1535.9967. Time: 47.2361 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #32: GFLOPs: 1158.2759. Time: 62.6401 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #33: GFLOPs: 769.5991. Time: 94.2757 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #34: GFLOPs: 623.8226. Time: 116.3063 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #35: GFLOPs: 2384.9427. Time: 30.4219 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #36: GFLOPs: 600.3887. Time: 120.8459 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #37: GFLOPs: 73.3646. Time: 988.9579 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #38: GFLOPs: 1668.2035. Time: 43.4926 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #39: GFLOPs: 459.5897. Time: 157.8680 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #40: GFLOPs: 2686.7226. Time: 27.0048 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #41: GFLOPs: 29.8285. Time: 2432.3860 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #42: GFLOPs: 47.2986. Time: 1533.9665 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #43: GFLOPs: 62.8023. Time: 1155.2839 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #44: GFLOPs: 121.2869. Time: 598.2056 us. Best GFLOPs: 2805.2334
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #45: GFLOPs: 3253.9262. Time: 22.2975 us. Best GFLOPs: 3253.9262
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #46: GFLOPs: 232.8013. Time: 311.6584 us. Best GFLOPs: 3253.9262
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #47: GFLOPs: 42.7779. Time: 1696.0737 us. Best GFLOPs: 3253.9262
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #48: GFLOPs: 147.6904. Time: 491.2609 us. Best GFLOPs: 3253.9262
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #49: GFLOPs: 3899.1362. Time: 18.6078 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #50: GFLOPs: 1444.6475. Time: 50.2230 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #51: GFLOPs: 232.8480. Time: 311.5959 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #52: GFLOPs: 1799.0830. Time: 40.3286 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #53: GFLOPs: 1269.5339. Time: 57.1505 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #54: GFLOPs: 404.0012. Time: 179.5898 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #55: GFLOPs: 57.8967. Time: 1253.1712 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #56: GFLOPs: 3078.5152. Time: 23.5680 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #57: GFLOPs: 1854.8699. Time: 39.1157 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #58: GFLOPs: 2092.2024. Time: 34.6785 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #59: GFLOPs: 1351.6311. Time: 53.6792 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #60: GFLOPs: 210.7119. Time: 344.3304 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #61: GFLOPs: 1794.0761. Time: 40.4411 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #62: GFLOPs: 58.3688. Time: 1243.0348 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #63: GFLOPs: 3177.6204. Time: 22.8330 us. Best GFLOPs: 3899.1362
2024-03-21 09:11:47 [INFO] [task_scheduler.cc:131] [Task #143: fused_nn_conv2d_add_nn_relu_70] Trial #64: GFLOPs: 232.5604. Time: 311.9813 us. Best GFLOPs: 3899.1362
