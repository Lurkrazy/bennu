2024-03-21 10:38:33 [INFO] [task_scheduler.cc:160] Initializing Task #167: "fused_nn_contrib_conv2d_winograd_without_weight_transform_3"
2024-03-21 10:38:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(58), T.int64(58)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)))
        B = T.alloc_buffer((T.int64(6), T.int64(6)))
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        A = T.alloc_buffer((T.int64(6), T.int64(4)))
        inverse = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(58), T.int64(58)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(57) and T.int64(1) <= v_i3 and v_i3 < T.int64(57), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps, v_p % T.int64(14) * T.int64(4) + v_nu]
        for i, j in T.grid(T.int64(6), T.int64(6)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(6), T.int64(6), T.int64(128), T.int64(196), T.int64(6), T.int64(6)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(6), T.int64(6), T.int64(32), T.int64(196), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(6), T.int64(4)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(5) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_i % T.int64(6) == T.int64(4) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_i % T.int64(6) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(6) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(6) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(32), T.int64(196), T.int64(4), T.int64(4), T.int64(6), T.int64(6)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(32), T.int64(56), T.int64(56)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
2024-03-21 10:38:33 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(903168)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(150528))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(150528) // T.int64(25088))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(25088) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9216)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(1536))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(1536) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(128), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(28) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(128) + ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(28)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(28) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 1, 3, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 2, 1, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 7, 14, 2])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[1, 128, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
2024-03-21 10:38:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(903168)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(150528))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(150528) // T.int64(25088))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(25088) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9216)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(1536))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(1536) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(128), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(28) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(28)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(28) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(32) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 1, 3, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 2, 1, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 7, 14, 2])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[1, 128, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-03-21 10:38:33 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
            data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(6)):
                        for nu in T.unroll(T.int64(6)):
                            for r_a in T.unroll(T.int64(6)):
                                for r_b in T.unroll(T.int64(6)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(512) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(120) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(903168)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(150528))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(150528) // T.int64(25088))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(25088) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9216)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused // T.int64(1536))
                                    v1 = T.axis.spatial(T.int64(6), ax0_ax1_ax2_ax3_fused % T.int64(1536) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(128), T.int64(3), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(6), eps_3 * T.int64(2) + eps_4)
                                    v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + nu_3 * T.int64(2) + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) + co_3 + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(28) + p_3 * T.int64(2) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_1 + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(2), T.int64(1), T.int64(28)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(6), ax0)
                                v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused * T.int64(28) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(4)):
                            for ax3 in T.unroll(T.int64(4)):
                                for ax4 in T.unroll(T.int64(6)):
                                    for ax5 in T.unroll(T.int64(6)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                    for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                            v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 1, 1, 3, 2])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 2])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 2, 1, 1, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 7, 14, 2])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[1, 128, 1])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-03-21 12:09:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:09:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 12:09:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 507 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:09:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1005 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:10:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1508 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:10:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 2008 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:10:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 2506 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:10:11 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-03-21 12:10:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:10:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:10:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:10:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:10:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9981  0.9974  0.9970  0.9968  0.9960  0.9957  0.9956  0.9952  0.9946  0.9935  0.9932  0.9925  0.9919  0.9917  0.9898
[17 : 32]:	0.9896  0.9885  0.9877  0.9870  0.9867  0.9866  0.9858  0.9856  0.9851  0.9847  0.9841  0.9836  0.9833  0.9826  0.9811  0.9805
[33 : 48]:	0.9803  0.9802  0.9788  0.9782  0.9779  0.9772  0.9768  0.9768  0.9767  0.9751  0.9736  0.9732  0.9727  0.9725  0.9721  0.9715
[49 : 64]:	0.9712  0.9711  0.9703  0.9691  0.9690  0.9688  0.9678  0.9677  0.9677  0.9676  0.9673  0.9672  0.9665  0.9659  0.9653  0.9641
2024-03-21 12:10:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:10:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #1: GFLOPs: 794.2999. Time: 209.2194 us. Best GFLOPs: 794.2999
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #2: GFLOPs: 2781.0484. Time: 59.7555 us. Best GFLOPs: 2781.0484
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #3: GFLOPs: 1777.9502. Time: 93.4688 us. Best GFLOPs: 2781.0484
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #4: GFLOPs: 671.9270. Time: 247.3229 us. Best GFLOPs: 2781.0484
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #5: GFLOPs: 3003.4467. Time: 55.3307 us. Best GFLOPs: 3003.4467
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #6: GFLOPs: 2134.5750. Time: 77.8529 us. Best GFLOPs: 3003.4467
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #7: GFLOPs: 51.0107. Time: 3257.8034 us. Best GFLOPs: 3003.4467
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #8: GFLOPs: 1827.2701. Time: 90.9460 us. Best GFLOPs: 3003.4467
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #9: GFLOPs: 1675.3821. Time: 99.1910 us. Best GFLOPs: 3003.4467
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #10: GFLOPs: 422.8974. Time: 392.9628 us. Best GFLOPs: 3003.4467
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #11: GFLOPs: 3495.5917. Time: 47.5407 us. Best GFLOPs: 3495.5917
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #12: GFLOPs: 1418.9081. Time: 117.1203 us. Best GFLOPs: 3495.5917
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #13: GFLOPs: 4125.8859. Time: 40.2781 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #14: GFLOPs: 338.9309. Time: 490.3150 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #15: GFLOPs: 105.5703. Time: 1574.1440 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #16: GFLOPs: 269.4686. Time: 616.7060 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #17: GFLOPs: 393.9678. Time: 421.8185 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #18: GFLOPs: 2099.8755. Time: 79.1394 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #19: GFLOPs: 3481.5994. Time: 47.7318 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:121] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #20: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(6), T.int64(6)), scope="local")
        data_pack = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(6), T.int64(6), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(6), T.int64(6)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps < T.int64(57) and T.int64(1) <= v_p % T.int64(14) * T.int64(4) + v_nu and v_p % T.int64(14) * T.int64(4) + v_nu < T.int64(57), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(4) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(4) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(6)):
                    for nu in T.unroll(T.int64(6)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(6)):
                            for r_b in T.unroll(T.int64(6)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_eps % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_eps % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_eps % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_eps % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_eps % T.int64(6) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_nu % T.int64(6) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(5), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(4), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(5), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(4), T.float32(-0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(3), T.float32(2), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(2), T.float32(2.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_nu % T.int64(6) == T.int64(0), T.float32(1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(5), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(4), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(2), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(1), T.float32(-2.5), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_nu % T.int64(6) == T.int64(0), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(5), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(4), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(3), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(2), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_nu % T.int64(6) == T.int64(0), T.float32(-1.5), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(5), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(4), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_nu % T.int64(6) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(6), T.int64(6), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(49)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + co_3_init + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + p_3_init * T.int64(49) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(147)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(4704))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4704) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(196))
                                        v3 = T.axis.spatial(T.int64(196), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(768))
                                        v1 = T.axis.spatial(T.int64(6), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(768) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(49)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + co_3 + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + p_3 * T.int64(49) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(4) + ci_1 * T.int64(2) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(98)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(6), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(6), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_2_nu_2_co_2_p_2_fused % T.int64(16) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(98) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(4)):
                        for ax3 in T.unroll(T.int64(4)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(6)):
                                for ax5 in T.unroll(T.int64(6)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(5) and v_vh % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_a % T.int64(6) == T.int64(4) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_a % T.int64(6) == T.int64(3) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(2) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(6) == T.int64(1) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(6) == T.int64(0) and v_vh % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))))))))))) * T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(5) and v_vw % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(3), T.float32(-8), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(2), T.float32(4), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(1), T.float32(-2), T.Select(v_r_b % T.int64(6) == T.int64(4) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(3), T.float32(0.125), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(2), T.float32(0.25), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(1), T.float32(0.5), T.Select(v_r_b % T.int64(6) == T.int64(3) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(2) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(6) == T.int64(1) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(6) == T.int64(0) and v_vw % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))))))))))
                for h_1, w_1 in T.grid(T.int64(4), T.int64(4)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(4) + h_1)
                        v_w = T.axis.spatial(T.int64(56), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(4) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(4) * T.int64(14) + v_w // T.int64(4), v_h % T.int64(4), v_w % T.int64(4)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 4], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 4], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[3, 1, 1, 2, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 3, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 1, 16, 2, 1])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 49])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[32, 2, 2])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 32, 3], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #21: GFLOPs: 3127.7599. Time: 53.1316 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #22: GFLOPs: 111.7946. Time: 1486.5017 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #23: GFLOPs: 4119.4173. Time: 40.3414 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #24: GFLOPs: 1835.2389. Time: 90.5511 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #25: GFLOPs: 1808.2895. Time: 91.9006 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #26: GFLOPs: 3874.1383. Time: 42.8955 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #27: GFLOPs: 2687.2639. Time: 61.8409 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #28: GFLOPs: 1625.1196. Time: 102.2589 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #29: GFLOPs: 2911.7443. Time: 57.0733 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #30: GFLOPs: 3532.4678. Time: 47.0444 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #31: GFLOPs: 1283.3688. Time: 129.4896 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #32: GFLOPs: 2519.7482. Time: 65.9522 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #33: GFLOPs: 118.0744. Time: 1407.4422 us. Best GFLOPs: 4125.8859
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #34: GFLOPs: 4701.1245. Time: 35.3496 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #35: GFLOPs: 152.0093. Time: 1093.2419 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #36: GFLOPs: 3181.9150. Time: 52.2273 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #37: GFLOPs: 285.7797. Time: 581.5070 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #38: GFLOPs: 2800.5167. Time: 59.3401 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #39: GFLOPs: 925.0651. Time: 179.6446 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #40: GFLOPs: 2183.7145. Time: 76.1010 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #41: GFLOPs: 1229.2353. Time: 135.1921 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #42: GFLOPs: 1565.3086. Time: 106.1662 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #43: GFLOPs: 2911.1179. Time: 57.0856 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #44: GFLOPs: 1358.6314. Time: 122.3164 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #45: GFLOPs: 2703.1566. Time: 61.4774 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #46: GFLOPs: 86.6855. Time: 1917.0783 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #47: GFLOPs: 1043.9096. Time: 159.1928 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #48: GFLOPs: 2921.6055. Time: 56.8807 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #49: GFLOPs: 130.0648. Time: 1277.6928 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #50: GFLOPs: 1773.5313. Time: 93.7017 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #51: GFLOPs: 87.3262. Time: 1903.0140 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #52: GFLOPs: 1595.2938. Time: 104.1707 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #53: GFLOPs: 2077.1419. Time: 80.0056 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #54: GFLOPs: 3085.0723. Time: 53.8668 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #55: GFLOPs: 3988.2316. Time: 41.6683 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #56: GFLOPs: 4682.7258. Time: 35.4885 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #57: GFLOPs: 283.9356. Time: 585.2839 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #58: GFLOPs: 619.3923. Time: 268.2999 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #59: GFLOPs: 1238.5784. Time: 134.1723 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #60: GFLOPs: 2466.4975. Time: 67.3761 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #61: GFLOPs: 306.4632. Time: 542.2606 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #62: GFLOPs: 147.3945. Time: 1127.4700 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #63: GFLOPs: 619.2554. Time: 268.3592 us. Best GFLOPs: 4701.1245
2024-03-21 12:23:43 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #64: GFLOPs: 1772.1181. Time: 93.7764 us. Best GFLOPs: 4701.1245
2024-03-21 12:27:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:27:25 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-03-21 12:27:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 439 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:27:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 878 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:27:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1316 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:27:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1750 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:27:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 2186 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:27:44 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-03-21 12:27:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:28:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:28:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:28:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:28:45 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5984  1.5024  1.4902  1.4750  1.4249  1.3950  1.3738  1.3658  1.3636  1.3555  1.3427  1.3401  1.3335  1.3225  1.3209  1.3202
[17 : 32]:	1.3200  1.3143  1.3038  1.3031  1.3026  1.3026  1.2987  1.2832  1.2811  1.2806  1.2631  1.2629  1.2568  1.2537  1.2348  1.2326
[33 : 48]:	1.2292  1.2236  1.2111  1.2088  1.2017  1.1998  1.1981  1.1977  1.1946  1.1904  1.1892  1.1882  1.1847  1.1845  1.1841  1.1788
[49 : 64]:	1.1754  1.1720  1.1667  1.1663  1.1653  1.1603  1.1601  1.1586  1.1572  1.1554  1.1490  1.1459  1.1454  1.1409  1.1374  1.1215
2024-03-21 12:28:45 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:28:45 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #65: GFLOPs: 3282.2442. Time: 50.6309 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #66: GFLOPs: 3312.9813. Time: 50.1611 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #67: GFLOPs: 3309.7036. Time: 50.2108 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #68: GFLOPs: 2594.1729. Time: 64.0601 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #69: GFLOPs: 3357.7186. Time: 49.4928 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #70: GFLOPs: 3300.6936. Time: 50.3479 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #71: GFLOPs: 1980.0772. Time: 83.9275 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #72: GFLOPs: 2853.7967. Time: 58.2322 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #73: GFLOPs: 3513.0291. Time: 47.3047 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #74: GFLOPs: 3549.7193. Time: 46.8158 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #75: GFLOPs: 2321.2790. Time: 71.5911 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #76: GFLOPs: 3901.7354. Time: 42.5921 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #77: GFLOPs: 1732.1251. Time: 95.9416 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #78: GFLOPs: 1732.3269. Time: 95.9305 us. Best GFLOPs: 4701.1245
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #79: GFLOPs: 4944.6410. Time: 33.6087 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #80: GFLOPs: 3741.2357. Time: 44.4193 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #81: GFLOPs: 3515.9732. Time: 47.2651 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #82: GFLOPs: 2891.1414. Time: 57.4800 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #83: GFLOPs: 2322.1853. Time: 71.5632 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #84: GFLOPs: 1741.2115. Time: 95.4410 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #85: GFLOPs: 2395.8464. Time: 69.3629 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #86: GFLOPs: 2395.9699. Time: 69.3593 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #87: GFLOPs: 2066.2149. Time: 80.4287 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #88: GFLOPs: 4871.7634. Time: 34.1114 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #89: GFLOPs: 2563.7948. Time: 64.8191 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #90: GFLOPs: 1493.6504. Time: 111.2596 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #91: GFLOPs: 2998.0332. Time: 55.4306 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #92: GFLOPs: 3640.5266. Time: 45.6480 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #93: GFLOPs: 4406.6138. Time: 37.7122 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #94: GFLOPs: 3846.5170. Time: 43.2035 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #95: GFLOPs: 3351.1168. Time: 49.5903 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #96: GFLOPs: 4152.0323. Time: 40.0245 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #97: GFLOPs: 1877.4859. Time: 88.5135 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #98: GFLOPs: 2975.8861. Time: 55.8432 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #99: GFLOPs: 3337.4509. Time: 49.7934 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #100: GFLOPs: 3150.0922. Time: 52.7549 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #101: GFLOPs: 3368.2435. Time: 49.3382 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #102: GFLOPs: 2142.8676. Time: 77.5516 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #103: GFLOPs: 2815.4046. Time: 59.0263 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #104: GFLOPs: 2878.2478. Time: 57.7375 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #105: GFLOPs: 1728.1826. Time: 96.1605 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #106: GFLOPs: 4592.4495. Time: 36.1861 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #107: GFLOPs: 3110.6993. Time: 53.4230 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #108: GFLOPs: 2336.2254. Time: 71.1331 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #109: GFLOPs: 3347.7320. Time: 49.6404 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #110: GFLOPs: 3655.8728. Time: 45.4564 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #111: GFLOPs: 3028.1113. Time: 54.8801 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #112: GFLOPs: 2190.7245. Time: 75.8575 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #113: GFLOPs: 4222.5789. Time: 39.3558 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #114: GFLOPs: 4662.1564. Time: 35.6451 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #115: GFLOPs: 3843.7695. Time: 43.2344 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #116: GFLOPs: 3686.6944. Time: 45.0764 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #117: GFLOPs: 2927.0801. Time: 56.7743 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #118: GFLOPs: 3342.8845. Time: 49.7124 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #119: GFLOPs: 3430.2427. Time: 48.4464 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #120: GFLOPs: 2258.8492. Time: 73.5697 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #121: GFLOPs: 3411.9291. Time: 48.7064 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #122: GFLOPs: 1747.4158. Time: 95.1021 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #123: GFLOPs: 3279.4009. Time: 50.6748 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #124: GFLOPs: 1722.0704. Time: 96.5018 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #125: GFLOPs: 3173.4342. Time: 52.3669 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #126: GFLOPs: 33.1055. Time: 5019.8017 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #127: GFLOPs: 208.4624. Time: 797.1840 us. Best GFLOPs: 4944.6410
2024-03-21 12:30:02 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #128: GFLOPs: 3444.7750. Time: 48.2420 us. Best GFLOPs: 4944.6410
2024-03-21 12:34:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:34:53 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 12:34:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:35:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 796 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:35:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1194 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:35:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1595 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:35:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1994 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:35:10 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-03-21 12:35:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:35:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:35:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:36:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:36:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.1682  2.1514  2.1474  2.1427  2.0923  2.0784  2.0764  2.0719  2.0600  2.0583  2.0581  2.0575  2.0560  2.0555  2.0396  2.0338
[17 : 32]:	1.9946  1.9735  1.9565  1.9499  1.9290  1.9253  1.9245  1.9083  1.8286  1.8204  1.7917  1.7857  1.7756  1.7670  1.7479  1.7468
[33 : 48]:	1.7461  1.7389  1.7345  1.7291  1.7241  1.7191  1.7190  1.7171  1.7135  1.7100  1.6886  1.6819  1.6667  1.6544  1.6290  1.6237
[49 : 64]:	1.6202  1.6148  1.6044  1.5940  1.5809  1.5548  1.5524  1.5493  1.5478  1.5308  1.5290  1.5289  1.5251  1.5180  1.5179  1.5169
2024-03-21 12:36:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:36:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #129: GFLOPs: 5232.5326. Time: 31.7596 us. Best GFLOPs: 5232.5326
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #130: GFLOPs: 5243.5734. Time: 31.6927 us. Best GFLOPs: 5243.5734
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #131: GFLOPs: 5404.9632. Time: 30.7464 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #132: GFLOPs: 4820.8300. Time: 34.4718 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #133: GFLOPs: 4530.3028. Time: 36.6825 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #134: GFLOPs: 4095.6665. Time: 40.5753 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #135: GFLOPs: 4008.6737. Time: 41.4558 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #136: GFLOPs: 4017.9948. Time: 41.3597 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #137: GFLOPs: 4371.9953. Time: 38.0108 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #138: GFLOPs: 3748.7347. Time: 44.3304 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #139: GFLOPs: 3994.1251. Time: 41.6068 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #140: GFLOPs: 4779.8075. Time: 34.7677 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #141: GFLOPs: 4121.6611. Time: 40.3194 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #142: GFLOPs: 4382.8869. Time: 37.9163 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #143: GFLOPs: 4811.4687. Time: 34.5389 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #144: GFLOPs: 2577.2262. Time: 64.4813 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #145: GFLOPs: 2840.7764. Time: 58.4991 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #146: GFLOPs: 5343.5572. Time: 31.0997 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #147: GFLOPs: 5224.1999. Time: 31.8102 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #148: GFLOPs: 4884.0839. Time: 34.0254 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #149: GFLOPs: 2608.4232. Time: 63.7101 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #150: GFLOPs: 5287.8366. Time: 31.4274 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #151: GFLOPs: 2809.3643. Time: 59.1532 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #152: GFLOPs: 2841.7504. Time: 58.4791 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #153: GFLOPs: 4083.2737. Time: 40.6984 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #154: GFLOPs: 4627.1181. Time: 35.9150 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #155: GFLOPs: 4500.0245. Time: 36.9293 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #156: GFLOPs: 4520.2987. Time: 36.7637 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #157: GFLOPs: 4623.4441. Time: 35.9435 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #158: GFLOPs: 5131.5400. Time: 32.3846 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #159: GFLOPs: 5000.8049. Time: 33.2312 us. Best GFLOPs: 5404.9632
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #160: GFLOPs: 6204.0008. Time: 26.7864 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #161: GFLOPs: 5004.1640. Time: 33.2089 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #162: GFLOPs: 4419.4851. Time: 37.6023 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #163: GFLOPs: 4880.5850. Time: 34.0498 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #164: GFLOPs: 4306.1379. Time: 38.5921 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #165: GFLOPs: 4372.8334. Time: 38.0035 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #166: GFLOPs: 4372.5539. Time: 38.0059 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #167: GFLOPs: 4813.0300. Time: 34.5277 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #168: GFLOPs: 4880.4196. Time: 34.0509 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #169: GFLOPs: 2278.4803. Time: 72.9359 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #170: GFLOPs: 4373.9754. Time: 37.9936 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #171: GFLOPs: 4024.4350. Time: 41.2935 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #172: GFLOPs: 5299.2600. Time: 31.3596 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #173: GFLOPs: 4150.2418. Time: 40.0417 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #174: GFLOPs: 4210.7746. Time: 39.4661 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #175: GFLOPs: 4929.4687. Time: 33.7121 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #176: GFLOPs: 4388.7067. Time: 37.8660 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #177: GFLOPs: 5124.9069. Time: 32.4265 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #178: GFLOPs: 4642.7026. Time: 35.7944 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #179: GFLOPs: 2970.8875. Time: 55.9371 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #180: GFLOPs: 4721.8070. Time: 35.1948 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #181: GFLOPs: 4571.6590. Time: 36.3507 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #182: GFLOPs: 3526.8939. Time: 47.1188 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #183: GFLOPs: 2600.9631. Time: 63.8928 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #184: GFLOPs: 4289.2064. Time: 38.7444 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #185: GFLOPs: 3781.2703. Time: 43.9490 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #186: GFLOPs: 5033.8564. Time: 33.0130 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #187: GFLOPs: 5254.2686. Time: 31.6282 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #188: GFLOPs: 5085.4741. Time: 32.6780 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #189: GFLOPs: 3430.5022. Time: 48.4427 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #190: GFLOPs: 210.5526. Time: 789.2702 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #191: GFLOPs: 3045.7558. Time: 54.5621 us. Best GFLOPs: 6204.0008
2024-03-21 12:37:22 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #192: GFLOPs: 1462.8907. Time: 113.5990 us. Best GFLOPs: 6204.0008
2024-03-21 12:51:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:51:03 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 12:51:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:51:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 806 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:51:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1198 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:51:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1600 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:51:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 2002 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:51:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 2402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:51:23 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 12:51:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:51:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:52:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:52:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:52:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.0445  2.0401  2.0394  2.0354  1.9207  1.8191  1.7797  1.7478  1.6704  1.6666  1.6458  1.6448  1.6431  1.6265  1.6235  1.6207
[17 : 32]:	1.6132  1.6009  1.5901  1.5888  1.5817  1.5800  1.5711  1.5621  1.5599  1.5578  1.5435  1.5424  1.5251  1.5206  1.5128  1.5107
[33 : 48]:	1.4985  1.4775  1.4634  1.4622  1.4606  1.4575  1.4514  1.4512  1.4481  1.4460  1.4399  1.4383  1.4372  1.4369  1.4293  1.4236
[49 : 64]:	1.4233  1.4208  1.4201  1.4173  1.4155  1.4148  1.4133  1.4118  1.4110  1.4102  1.3999  1.3970  1.3946  1.3939  1.3932  1.3911
2024-03-21 12:52:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:52:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #193: GFLOPs: 5707.7940. Time: 29.1151 us. Best GFLOPs: 6204.0008
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #194: GFLOPs: 5669.2527. Time: 29.3130 us. Best GFLOPs: 6204.0008
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #195: GFLOPs: 5458.0179. Time: 30.4475 us. Best GFLOPs: 6204.0008
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #196: GFLOPs: 5727.1791. Time: 29.0165 us. Best GFLOPs: 6204.0008
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #197: GFLOPs: 2587.5716. Time: 64.2235 us. Best GFLOPs: 6204.0008
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #198: GFLOPs: 6231.0678. Time: 26.6701 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #199: GFLOPs: 5682.3368. Time: 29.2455 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #200: GFLOPs: 5777.8815. Time: 28.7619 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #201: GFLOPs: 1383.5312. Time: 120.1150 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #202: GFLOPs: 1427.7050. Time: 116.3986 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #203: GFLOPs: 1885.2228. Time: 88.1503 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #204: GFLOPs: 393.8480. Time: 421.9468 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #205: GFLOPs: 395.0638. Time: 420.6483 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #206: GFLOPs: 391.3011. Time: 424.6932 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #207: GFLOPs: 395.4394. Time: 420.2488 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #208: GFLOPs: 393.7336. Time: 422.0695 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #209: GFLOPs: 5331.7264. Time: 31.1687 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #210: GFLOPs: 5091.8009. Time: 32.6374 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #211: GFLOPs: 347.0780. Time: 478.8057 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #212: GFLOPs: 5266.8194. Time: 31.5528 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #213: GFLOPs: 280.7147. Time: 591.9993 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #214: GFLOPs: 2351.0448. Time: 70.6847 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #215: GFLOPs: 280.3736. Time: 592.7195 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #216: GFLOPs: 388.5945. Time: 427.6513 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #217: GFLOPs: 279.5348. Time: 594.4981 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #218: GFLOPs: 282.3706. Time: 588.5276 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #219: GFLOPs: 6055.8187. Time: 27.4419 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #220: GFLOPs: 263.9423. Time: 629.6183 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #221: GFLOPs: 115.1784. Time: 1442.8307 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #222: GFLOPs: 4888.2761. Time: 33.9962 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #223: GFLOPs: 209.3677. Time: 793.7371 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #224: GFLOPs: 4309.0426. Time: 38.5661 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #225: GFLOPs: 110.3059. Time: 1506.5638 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #226: GFLOPs: 141.7825. Time: 1172.0978 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #227: GFLOPs: 78.2976. Time: 2122.4534 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #228: GFLOPs: 4869.4304. Time: 34.1278 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #229: GFLOPs: 105.8738. Time: 1569.6320 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #230: GFLOPs: 109.0637. Time: 1523.7241 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #231: GFLOPs: 4721.3829. Time: 35.1979 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #232: GFLOPs: 83.9429. Time: 1979.7133 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #233: GFLOPs: 4711.1343. Time: 35.2745 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #234: GFLOPs: 202.0691. Time: 822.4063 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #235: GFLOPs: 82.6869. Time: 2009.7844 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #236: GFLOPs: 83.9131. Time: 1980.4159 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #237: GFLOPs: 98.7504. Time: 1682.8587 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #238: GFLOPs: 84.1135. Time: 1975.6975 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #239: GFLOPs: 117.3447. Time: 1416.1942 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #240: GFLOPs: 5398.7519. Time: 30.7817 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #241: GFLOPs: 5227.2645. Time: 31.7916 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #242: GFLOPs: 143.8419. Time: 1155.3162 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #243: GFLOPs: 165.2312. Time: 1005.7600 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #244: GFLOPs: 96.8629. Time: 1715.6513 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #245: GFLOPs: 5399.3575. Time: 30.7783 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #246: GFLOPs: 2425.9159. Time: 68.5032 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #247: GFLOPs: 140.3847. Time: 1183.7681 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #248: GFLOPs: 5051.1962. Time: 32.8997 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #249: GFLOPs: 94.4682. Time: 1759.1421 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #250: GFLOPs: 138.2896. Time: 1201.7022 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #251: GFLOPs: 84.7976. Time: 1959.7587 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #252: GFLOPs: 82.4115. Time: 2016.5018 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #253: GFLOPs: 4675.1337. Time: 35.5461 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #254: GFLOPs: 764.5002. Time: 217.3746 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #255: GFLOPs: 13.7801. Time: 12059.6482 us. Best GFLOPs: 6231.0678
2024-03-21 12:53:58 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #256: GFLOPs: 1269.9710. Time: 130.8557 us. Best GFLOPs: 6231.0678
2024-03-21 12:59:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:59:27 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 12:59:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 398 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:59:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 801 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:59:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1201 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:59:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1604 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:59:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 2003 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:59:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 2400 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 12:59:45 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-03-21 12:59:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 151 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:00:15 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:00:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 127 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:00:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:00:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5163  1.4979  1.4901  1.4895  1.4879  1.4824  1.4781  1.4722  1.4526  1.4329  1.4267  1.4182  1.4166  1.4115  1.4022  1.3846
[17 : 32]:	1.3675  1.3406  1.3354  1.3308  1.3237  1.3237  1.3224  1.3159  1.3136  1.3136  1.3046  1.2889  1.2847  1.2777  1.2745  1.2619
[33 : 48]:	1.2611  1.2591  1.2588  1.2481  1.2446  1.2438  1.2365  1.2326  1.2249  1.2217  1.2170  1.2144  1.2125  1.2117  1.2102  1.2099
[49 : 64]:	1.2098  1.2087  1.2072  1.2009  1.2008  1.1981  1.1971  1.1957  1.1947  1.1901  1.1893  1.1812  1.1741  1.1734  1.1727  1.1603
2024-03-21 13:00:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 13:00:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #257: GFLOPs: 5110.0583. Time: 32.5207 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #258: GFLOPs: 330.5322. Time: 502.7737 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #259: GFLOPs: 5770.6120. Time: 28.7981 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #260: GFLOPs: 316.8589. Time: 524.4697 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #261: GFLOPs: 248.6716. Time: 668.2827 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #262: GFLOPs: 242.0897. Time: 686.4517 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #263: GFLOPs: 315.8498. Time: 526.1454 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #264: GFLOPs: 4627.9671. Time: 35.9084 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #265: GFLOPs: 5284.8066. Time: 31.4454 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #266: GFLOPs: 5199.7786. Time: 31.9596 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #267: GFLOPs: 5241.2587. Time: 31.7067 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #268: GFLOPs: 5304.2598. Time: 31.3301 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #269: GFLOPs: 4546.5585. Time: 36.5514 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #270: GFLOPs: 243.5016. Time: 682.4716 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #271: GFLOPs: 4911.7453. Time: 33.8338 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #272: GFLOPs: 3752.0540. Time: 44.2912 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #273: GFLOPs: 4948.5322. Time: 33.5823 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #274: GFLOPs: 4619.7014. Time: 35.9727 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #275: GFLOPs: 3002.8206. Time: 55.3423 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #276: GFLOPs: 276.7798. Time: 600.4155 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #277: GFLOPs: 5911.2482. Time: 28.1130 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #278: GFLOPs: 5691.7494. Time: 29.1972 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #279: GFLOPs: 3811.9857. Time: 43.5948 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #280: GFLOPs: 275.9442. Time: 602.2338 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #281: GFLOPs: 5938.7585. Time: 27.9828 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #282: GFLOPs: 5791.2933. Time: 28.6953 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #283: GFLOPs: 3821.3354. Time: 43.4882 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #284: GFLOPs: 4538.9074. Time: 36.6130 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #285: GFLOPs: 4364.3568. Time: 38.0773 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #286: GFLOPs: 4728.2105. Time: 35.1471 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #287: GFLOPs: 3750.8424. Time: 44.3055 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #288: GFLOPs: 3755.8765. Time: 44.2461 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #289: GFLOPs: 4076.9859. Time: 40.7612 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #290: GFLOPs: 3803.8464. Time: 43.6881 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #291: GFLOPs: 3808.1793. Time: 43.6384 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #292: GFLOPs: 4534.9660. Time: 36.6448 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #293: GFLOPs: 3838.4576. Time: 43.2942 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #294: GFLOPs: 3799.4830. Time: 43.7383 us. Best GFLOPs: 6231.0678
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #295: GFLOPs: 6244.5001. Time: 26.6127 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #296: GFLOPs: 3762.8639. Time: 44.1639 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #297: GFLOPs: 335.0625. Time: 495.9759 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #298: GFLOPs: 3287.1622. Time: 50.5551 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #299: GFLOPs: 4552.2094. Time: 36.5060 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #300: GFLOPs: 4536.5203. Time: 36.6322 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #301: GFLOPs: 4381.2364. Time: 37.9306 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #302: GFLOPs: 332.6253. Time: 499.6099 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #303: GFLOPs: 4971.6079. Time: 33.4264 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #304: GFLOPs: 4373.8949. Time: 37.9943 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #305: GFLOPs: 4467.7355. Time: 37.1962 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #306: GFLOPs: 3677.3929. Time: 45.1904 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #307: GFLOPs: 4326.8119. Time: 38.4077 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #308: GFLOPs: 250.9566. Time: 662.1979 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #309: GFLOPs: 5943.2052. Time: 27.9618 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #310: GFLOPs: 4808.9202. Time: 34.5572 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #311: GFLOPs: 3620.4533. Time: 45.9011 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #312: GFLOPs: 2960.0007. Time: 56.1429 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #313: GFLOPs: 1841.9307. Time: 90.2221 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #314: GFLOPs: 247.8419. Time: 670.5199 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #315: GFLOPs: 247.6271. Time: 671.1014 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #316: GFLOPs: 1331.5975. Time: 124.7997 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #317: GFLOPs: 246.9658. Time: 672.8986 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #318: GFLOPs: 2317.3408. Time: 71.7128 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #319: GFLOPs: 64.8620. Time: 2562.0992 us. Best GFLOPs: 6244.5001
2024-03-21 13:02:03 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #320: GFLOPs: 1640.8147. Time: 101.2807 us. Best GFLOPs: 6244.5001
2024-03-21 13:18:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 13:18:52 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 13:18:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 402 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:18:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 805 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:19:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1204 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:19:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 1609 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:19:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 2002 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:19:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 2403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:19:12 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-03-21 13:19:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 129 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:19:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 139 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:19:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:20:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd2d031e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd412c588)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578ccf511838)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cccd28908)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd81d9b78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd4b62d38)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd2570eb8)]: 0 failure(s)
2024-03-21 13:20:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.3704  2.3069  2.1796  2.1658  2.0588  1.9883  1.9489  1.9295  1.9185  1.9146  1.8960  1.8902  1.8877  1.8479  1.8427  1.8330
[17 : 32]:	1.8326  1.8322  1.8313  1.8272  1.8063  1.8035  1.7907  1.7772  1.7519  1.7103  1.7038  1.6978  1.6835  1.6814  1.6722  1.6708
[33 : 48]:	1.6706  1.6594  1.6536  1.6494  1.6340  1.6272  1.6155  1.6111  1.6110  1.6107  1.6052  1.5967  1.5866  1.5851  1.5806  1.5766
[49 : 64]:	1.5707  1.5686  1.5680  1.5610  1.5595  1.5495  1.5454  1.5266  1.5258  1.5210  1.5207  1.5176  1.5172  1.5133  1.5123  1.5123
2024-03-21 13:20:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 13:20:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #321: GFLOPs: 4493.1324. Time: 36.9860 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #322: GFLOPs: 4645.6781. Time: 35.7715 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #323: GFLOPs: 5022.1001. Time: 33.0903 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #324: GFLOPs: 4865.3114. Time: 34.1567 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #325: GFLOPs: 5152.8627. Time: 32.2506 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #326: GFLOPs: 4060.3065. Time: 40.9287 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #327: GFLOPs: 4240.1045. Time: 39.1931 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #328: GFLOPs: 4017.6427. Time: 41.3633 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #329: GFLOPs: 4136.2206. Time: 40.1775 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #330: GFLOPs: 2647.1407. Time: 62.7783 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #331: GFLOPs: 4589.8508. Time: 36.2066 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #332: GFLOPs: 4589.0525. Time: 36.2129 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #333: GFLOPs: 4589.1343. Time: 36.2123 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #334: GFLOPs: 4506.4025. Time: 36.8771 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #335: GFLOPs: 4925.6215. Time: 33.7385 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #336: GFLOPs: 4731.8791. Time: 35.1199 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #337: GFLOPs: 6026.1481. Time: 27.5770 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #338: GFLOPs: 3502.1400. Time: 47.4518 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #339: GFLOPs: 5072.9087. Time: 32.7589 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #340: GFLOPs: 4701.4627. Time: 35.3471 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #341: GFLOPs: 4937.9115. Time: 33.6545 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #342: GFLOPs: 5235.0271. Time: 31.7444 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #343: GFLOPs: 3724.1526. Time: 44.6230 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #344: GFLOPs: 163.4420. Time: 1016.7699 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #345: GFLOPs: 5527.3093. Time: 30.0658 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #346: GFLOPs: 5041.3881. Time: 32.9637 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #347: GFLOPs: 5046.5320. Time: 32.9301 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #348: GFLOPs: 5097.5178. Time: 32.6008 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #349: GFLOPs: 4674.2268. Time: 35.5530 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #350: GFLOPs: 4641.3913. Time: 35.8045 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #351: GFLOPs: 4570.3351. Time: 36.3612 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #352: GFLOPs: 2889.3006. Time: 57.5167 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #353: GFLOPs: 4917.2411. Time: 33.7960 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #354: GFLOPs: 4495.3195. Time: 36.9680 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #355: GFLOPs: 4788.2577. Time: 34.7063 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #356: GFLOPs: 5161.4607. Time: 32.1969 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #357: GFLOPs: 5704.1240. Time: 29.1338 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #358: GFLOPs: 2107.9922. Time: 78.8347 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #359: GFLOPs: 4252.3853. Time: 39.0799 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #360: GFLOPs: 2725.9140. Time: 60.9641 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #361: GFLOPs: 2544.2897. Time: 65.3160 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #362: GFLOPs: 4227.6928. Time: 39.3082 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #363: GFLOPs: 2761.8519. Time: 60.1708 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #364: GFLOPs: 4595.9715. Time: 36.1584 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #365: GFLOPs: 3362.2883. Time: 49.4255 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #366: GFLOPs: 2817.7689. Time: 58.9768 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #367: GFLOPs: 2455.8967. Time: 67.6669 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #368: GFLOPs: 3327.0000. Time: 49.9498 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #369: GFLOPs: 1875.4922. Time: 88.6076 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #370: GFLOPs: 3550.6128. Time: 46.8040 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #371: GFLOPs: 3240.8795. Time: 51.2771 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #372: GFLOPs: 2977.9635. Time: 55.8042 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #373: GFLOPs: 3032.4638. Time: 54.8013 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #374: GFLOPs: 3311.5695. Time: 50.1825 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #375: GFLOPs: 3603.6264. Time: 46.1155 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #376: GFLOPs: 4965.8232. Time: 33.4653 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #377: GFLOPs: 4538.4916. Time: 36.6163 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #378: GFLOPs: 3525.1477. Time: 47.1421 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #379: GFLOPs: 3977.7091. Time: 41.7785 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #380: GFLOPs: 2168.3352. Time: 76.6408 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #381: GFLOPs: 4850.4798. Time: 34.2611 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #382: GFLOPs: 387.8284. Time: 428.4960 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #383: GFLOPs: 174.8402. Time: 950.4845 us. Best GFLOPs: 6244.5001
2024-03-21 13:21:29 [INFO] [task_scheduler.cc:131] [Task #167: fused_nn_contrib_conv2d_winograd_without_weight_transform_3] Trial #384: GFLOPs: 261.1452. Time: 636.3622 us. Best GFLOPs: 6244.5001
