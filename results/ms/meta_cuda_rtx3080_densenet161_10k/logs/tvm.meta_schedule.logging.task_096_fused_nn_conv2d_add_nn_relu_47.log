2024-03-21 07:30:23 [INFO] [task_scheduler.cc:160] Initializing Task #96: "fused_nn_conv2d_add_nn_relu_47"
2024-03-21 07:30:23 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(960), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(960), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(960), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(960), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(960), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:23 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:23 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(960), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(960), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(960), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(960), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(336), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(80), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(588)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(960), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(960), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(960), rc_0 * T.int64(12) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 48, 1, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[80, 12, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:23 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(960), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(960), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(960), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(960), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(336), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(588)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(960), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(960), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(960), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 48, 1, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[80, 12, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:23 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(960), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(960), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(960), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(960), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(336), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(80), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(588)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(960), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(960), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(960), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(7) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 48, 1, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[80, 12, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:17:55 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:17:55 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:17:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f20e3418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec9c698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8eddf6048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f1a37ca8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1695818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f68886e8)]: 494 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec9c598)]: 0 failure(s)
2024-03-21 08:17:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f20e3418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec9c698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8eddf6048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f1a37ca8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1695818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f68886e8)]: 984 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec9c598)]: 0 failure(s)
2024-03-21 08:17:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f20e3418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec9c698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8eddf6048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f1a37ca8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1695818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f68886e8)]: 1478 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec9c598)]: 0 failure(s)
2024-03-21 08:17:57 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 08:17:59 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f20e3418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec9c698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8eddf6048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f1a37ca8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1695818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f68886e8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec9c598)]: 0 failure(s)
2024-03-21 08:18:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f20e3418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec9c698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8eddf6048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f1a37ca8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1695818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f68886e8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec9c598)]: 0 failure(s)
2024-03-21 08:18:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f20e3418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec9c698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8eddf6048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f1a37ca8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1695818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f68886e8)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec9c598)]: 0 failure(s)
2024-03-21 08:18:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f20e3418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec9c698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8eddf6048)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f1a37ca8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1695818)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f68886e8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec9c598)]: 0 failure(s)
2024-03-21 08:18:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9999  0.9992  0.9987  0.9979  0.9972  0.9969  0.9961  0.9958  0.9956  0.9953  0.9952  0.9945  0.9929  0.9928  0.9927
[17 : 32]:	0.9927  0.9921  0.9918  0.9905  0.9903  0.9900  0.9894  0.9890  0.9888  0.9883  0.9872  0.9871  0.9858  0.9854  0.9847  0.9847
[33 : 48]:	0.9831  0.9831  0.9824  0.9814  0.9812  0.9797  0.9766  0.9754  0.9750  0.9744  0.9742  0.9736  0.9728  0.9718  0.9717  0.9713
[49 : 64]:	0.9705  0.9693  0.9680  0.9665  0.9662  0.9660  0.9650  0.9645  0.9644  0.9643  0.9635  0.9627  0.9606  0.9605  0.9603  0.9602
2024-03-21 08:18:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:18:03 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #1: GFLOPs: 26.6292. Time: 2716.1379 us. Best GFLOPs: 26.6292
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #2: GFLOPs: 169.0957. Time: 427.7384 us. Best GFLOPs: 169.0957
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #3: GFLOPs: 121.4777. Time: 595.4073 us. Best GFLOPs: 169.0957
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #4: GFLOPs: 491.4267. Time: 147.1811 us. Best GFLOPs: 491.4267
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #5: GFLOPs: 1157.8667. Time: 62.4672 us. Best GFLOPs: 1157.8667
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #6: GFLOPs: 726.9135. Time: 99.5011 us. Best GFLOPs: 1157.8667
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #7: GFLOPs: 825.9665. Time: 87.5686 us. Best GFLOPs: 1157.8667
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #8: GFLOPs: 165.2929. Time: 437.5791 us. Best GFLOPs: 1157.8667
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #9: GFLOPs: 63.8685. Time: 1132.4627 us. Best GFLOPs: 1157.8667
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #10: GFLOPs: 362.2462. Time: 199.6672 us. Best GFLOPs: 1157.8667
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #11: GFLOPs: 175.1914. Time: 412.8553 us. Best GFLOPs: 1157.8667
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #12: GFLOPs: 174.3882. Time: 414.7569 us. Best GFLOPs: 1157.8667
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #13: GFLOPs: 79.5463. Time: 909.2655 us. Best GFLOPs: 1157.8667
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #14: GFLOPs: 25.2430. Time: 2865.2982 us. Best GFLOPs: 1157.8667
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #15: GFLOPs: 1719.4818. Time: 42.0642 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #16: GFLOPs: 671.7425. Time: 107.6733 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #17: GFLOPs: 154.4661. Time: 468.2497 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #18: GFLOPs: 857.8088. Time: 84.3180 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #19: GFLOPs: 492.8798. Time: 146.7471 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #20: GFLOPs: 1468.5027. Time: 49.2534 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #21: GFLOPs: 1671.6197. Time: 43.2686 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #22: GFLOPs: 311.4158. Time: 232.2577 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #23: GFLOPs: 412.7379. Time: 175.2413 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #24: GFLOPs: 111.0023. Time: 651.5965 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #25: GFLOPs: 1224.6321. Time: 59.0616 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #26: GFLOPs: 1442.0530. Time: 50.1568 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #27: GFLOPs: 187.7121. Time: 385.3173 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #28: GFLOPs: 85.3409. Time: 847.5271 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #29: GFLOPs: 19.5643. Time: 3696.9670 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #30: GFLOPs: 295.1587. Time: 245.0502 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #31: GFLOPs: 618.7688. Time: 116.8913 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #32: GFLOPs: 338.3851. Time: 213.7467 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #33: GFLOPs: 155.1961. Time: 466.0473 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #34: GFLOPs: 1027.4146. Time: 70.3988 us. Best GFLOPs: 1719.4818
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #35: GFLOPs: 1936.3089. Time: 37.3539 us. Best GFLOPs: 1936.3089
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #36: GFLOPs: 2773.5609. Time: 26.0779 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #37: GFLOPs: 647.3341. Time: 111.7332 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #38: GFLOPs: 718.6036. Time: 100.6517 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #39: GFLOPs: 8.7506. Time: 8265.5604 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #40: GFLOPs: 867.8847. Time: 83.3391 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #41: GFLOPs: 95.6765. Time: 755.9716 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #42: GFLOPs: 411.8493. Time: 175.6194 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #43: GFLOPs: 283.3373. Time: 255.2742 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #44: GFLOPs: 724.4207. Time: 99.8435 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #45: GFLOPs: 619.6751. Time: 116.7204 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #46: GFLOPs: 8.2627. Time: 8753.6640 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #47: GFLOPs: 77.3263. Time: 935.3702 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #48: GFLOPs: 1217.3683. Time: 59.4140 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #49: GFLOPs: 1450.8073. Time: 49.8541 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #50: GFLOPs: 205.7641. Time: 351.5127 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #51: GFLOPs: 1523.3316. Time: 47.4806 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #52: GFLOPs: 1961.4038. Time: 36.8760 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #53: GFLOPs: 86.5580. Time: 835.6096 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #54: GFLOPs: 12.1558. Time: 5950.1477 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #55: GFLOPs: 14.1168. Time: 5123.5790 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #56: GFLOPs: 892.4291. Time: 81.0470 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #57: GFLOPs: 249.9588. Time: 289.3625 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #58: GFLOPs: 1130.2963. Time: 63.9909 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #59: GFLOPs: 578.8855. Time: 124.9448 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #60: GFLOPs: 206.0123. Time: 351.0892 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #61: GFLOPs: 166.8303. Time: 433.5465 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #62: GFLOPs: 1234.2900. Time: 58.5994 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #63: GFLOPs: 332.4385. Time: 217.5702 us. Best GFLOPs: 2773.5609
2024-03-21 09:10:54 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #64: GFLOPs: 422.9093. Time: 171.0265 us. Best GFLOPs: 2773.5609
