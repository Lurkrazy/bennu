2024-03-21 19:46:24 [INFO] [task_scheduler.cc:160] Initializing Task #12: "fused_nn_conv2d_add_nn_relu_8"
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(120), T.int64(32), T.int64(32)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(2) <= v_i2 and v_i2 < T.int64(30) and T.int64(2) <= v_i3 and v_i3 < T.int64(30), p0[v_i0, v_i1, v_i2 - T.int64(2), v_i3 - T.int64(2)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(120), T.int64(28), T.int64(28), T.int64(5), T.int64(5)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(120), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(120), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(10), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(10560)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + ax0_ax1_ax2_ax3_fused // T.int64(352))
                                    v2 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(352) // T.int64(11))
                                    v3 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(11))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(750)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + ax0_ax1_ax2_ax3_fused // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(3), T.int64(2), T.int64(7)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(7) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                    v_i = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(7) + j_3 * T.int64(7) + j_4)
                                    v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                    v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 * T.int64(5) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(7) * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 5, 2, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 7])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(10), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(10560)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + ax0_ax1_ax2_ax3_fused // T.int64(352))
                                    v2 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(352) // T.int64(11))
                                    v3 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(11))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(750)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + ax0_ax1_ax2_ax3_fused // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(3), T.int64(2), T.int64(7)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(7) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                    v_i = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(7) + j_3 * T.int64(7) + j_4)
                                    v_di = T.axis.reduce(T.int64(5), di_1 * T.int64(5) + di_2)
                                    v_dj = T.axis.reduce(T.int64(5), dj_1 * T.int64(5) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(7) * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 5, 2, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 7])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(10), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(10560)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + ax0_ax1_ax2_ax3_fused // T.int64(352))
                                    v2 = T.axis.spatial(T.int64(32), ax0_ax1_ax2_ax3_fused % T.int64(352) // T.int64(11))
                                    v3 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(11))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(750)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + ax0_ax1_ax2_ax3_fused // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), ax0_ax1_ax2_ax3_fused % T.int64(5))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(5), T.int64(5), T.int64(1), T.int64(3), T.int64(2), T.int64(7)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(7) * T.int64(3) + c_3 * T.int64(3) + c_4)
                                    v_i = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                    v_j = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(7) + j_3 * T.int64(7) + j_4)
                                    v_di = T.axis.reduce(T.int64(5), di_1 * T.int64(5) + di_2)
                                    v_dj = T.axis.reduce(T.int64(5), dj_1 * T.int64(5) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(2), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(30) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(6) + b_2_c_2_i_2_j_2_fused // T.int64(7) * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(28), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 5, 2, 1, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 7])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 19:59:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 19:59:26 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 19:59:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 502 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 19:59:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 993 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 19:59:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 1487 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 19:59:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 1987 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 19:59:30 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-03-21 19:59:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 19:59:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 19:59:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 130 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 19:59:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 19:59:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9981  0.9980  0.9979  0.9971  0.9963  0.9957  0.9956  0.9954  0.9947  0.9945  0.9938  0.9936  0.9920  0.9893  0.9889  0.9887
[17 : 32]:	0.9874  0.9861  0.9837  0.9828  0.9810  0.9804  0.9801  0.9801  0.9798  0.9797  0.9794  0.9794  0.9765  0.9761  0.9761  0.9743
[33 : 48]:	0.9733  0.9723  0.9722  0.9719  0.9717  0.9712  0.9700  0.9688  0.9676  0.9671  0.9666  0.9655  0.9655  0.9653  0.9640  0.9630
[49 : 64]:	0.9627  0.9619  0.9617  0.9615  0.9610  0.9606  0.9598  0.9581  0.9562  0.9554  0.9546  0.9543  0.9527  0.9523  0.9522  0.9512
2024-03-21 19:59:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 19:59:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #1: GFLOPs: 414.0190. Time: 11.8163 us. Best GFLOPs: 414.0190
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #2: GFLOPs: 240.5842. Time: 20.3345 us. Best GFLOPs: 414.0190
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #3: GFLOPs: 286.3725. Time: 17.0832 us. Best GFLOPs: 414.0190
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #4: GFLOPs: 76.0771. Time: 64.3053 us. Best GFLOPs: 414.0190
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #5: GFLOPs: 1180.6371. Time: 4.1437 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #6: GFLOPs: 325.8774. Time: 15.0123 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #7: GFLOPs: 73.3717. Time: 66.6764 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #8: GFLOPs: 19.3731. Time: 252.5228 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #9: GFLOPs: 565.7848. Time: 8.6467 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #10: GFLOPs: 64.6612. Time: 75.6583 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #11: GFLOPs: 407.8264. Time: 11.9957 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #12: GFLOPs: 144.4694. Time: 33.8630 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #13: GFLOPs: 268.4747. Time: 18.2221 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #14: GFLOPs: 54.8627. Time: 89.1709 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #15: GFLOPs: 102.6701. Time: 47.6493 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #16: GFLOPs: 288.1999. Time: 16.9749 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #17: GFLOPs: 989.6760. Time: 4.9432 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #18: GFLOPs: 297.4620. Time: 16.4463 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #19: GFLOPs: 177.9821. Time: 27.4868 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #20: GFLOPs: 550.6469. Time: 8.8844 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #21: GFLOPs: 187.5106. Time: 26.0900 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #22: GFLOPs: 661.6559. Time: 7.3938 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #23: GFLOPs: 104.1881. Time: 46.9551 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #24: GFLOPs: 184.2210. Time: 26.5559 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #25: GFLOPs: 302.5932. Time: 16.1675 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #26: GFLOPs: 426.2167. Time: 11.4781 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #27: GFLOPs: 115.8558. Time: 42.2263 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #28: GFLOPs: 343.3126. Time: 14.2499 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #29: GFLOPs: 616.5505. Time: 7.9347 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #30: GFLOPs: 405.8860. Time: 12.0530 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #31: GFLOPs: 483.9391. Time: 10.1090 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #32: GFLOPs: 53.8366. Time: 90.8706 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #33: GFLOPs: 289.2529. Time: 16.9131 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #34: GFLOPs: 169.1601. Time: 28.9203 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #35: GFLOPs: 220.3741. Time: 22.1993 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #36: GFLOPs: 24.1748. Time: 202.3665 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #37: GFLOPs: 347.7421. Time: 14.0684 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #38: GFLOPs: 429.6236. Time: 11.3871 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #39: GFLOPs: 28.9139. Time: 169.1975 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #40: GFLOPs: 681.9549. Time: 7.1737 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #41: GFLOPs: 319.1744. Time: 15.3275 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #42: GFLOPs: 802.3531. Time: 6.0973 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #43: GFLOPs: 190.7570. Time: 25.6460 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #44: GFLOPs: 219.6445. Time: 22.2731 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #45: GFLOPs: 33.0879. Time: 147.8533 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #46: GFLOPs: 100.1414. Time: 48.8525 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #47: GFLOPs: 136.6616. Time: 35.7976 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #48: GFLOPs: 260.8654. Time: 18.7536 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #49: GFLOPs: 325.9727. Time: 15.0079 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #50: GFLOPs: 97.0961. Time: 50.3847 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #51: GFLOPs: 15.5802. Time: 313.9994 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #52: GFLOPs: 652.5078. Time: 7.4975 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #53: GFLOPs: 58.8442. Time: 83.1375 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #54: GFLOPs: 576.5918. Time: 8.4846 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #55: GFLOPs: 24.8363. Time: 196.9760 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #56: GFLOPs: 179.9748. Time: 27.1825 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #57: GFLOPs: 55.3985. Time: 88.3086 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #58: GFLOPs: 164.4975. Time: 29.7400 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #59: GFLOPs: 221.0033. Time: 22.1361 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #60: GFLOPs: 990.2013. Time: 4.9406 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #61: GFLOPs: 768.8391. Time: 6.3630 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #62: GFLOPs: 184.1839. Time: 26.5613 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #63: GFLOPs: 280.0208. Time: 17.4707 us. Best GFLOPs: 1180.6371
2024-03-21 20:21:53 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #64: GFLOPs: 661.7122. Time: 7.3932 us. Best GFLOPs: 1180.6371
2024-03-21 20:43:18 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:43:18 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 20:43:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 436 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 20:43:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 874 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 20:43:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 1310 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 20:43:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 1746 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 20:43:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 2182 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 20:43:23 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 20:43:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 132 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 20:43:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 20:43:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 20:43:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 20:43:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0775  1.0706  1.0288  1.0240  1.0138  1.0087  0.9845  0.9845  0.9845  0.9680  0.9537  0.9537  0.9537  0.9537  0.9454  0.9447
[17 : 32]:	0.9364  0.9358  0.9358  0.9345  0.9345  0.9298  0.9279  0.9267  0.9267  0.9253  0.9218  0.9214  0.9057  0.9027  0.9015  0.9015
[33 : 48]:	0.8914  0.8902  0.8868  0.8692  0.8685  0.8636  0.8525  0.8380  0.8353  0.8317  0.8293  0.8258  0.8239  0.8217  0.8193  0.8172
[49 : 64]:	0.8171  0.8142  0.8141  0.8067  0.8058  0.8046  0.8025  0.8017  0.7990  0.7946  0.7919  0.7910  0.7907  0.7890  0.7792  0.7736
2024-03-21 20:43:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:43:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #65: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(60), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v2 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(50))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[60, 1, 1, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #66: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(60), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v2 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(50))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(5), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 * T.int64(5) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[60, 1, 1, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #67: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(60), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v2 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(50))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[60, 1, 1, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #68: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(60), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1024))
                                    v2 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1024) // T.int64(32))
                                    v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(32))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2048))
                                    T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(50))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[60, 1, 1, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107 = sch.split(loop=l105, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b110)
l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l127, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l127, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b112)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b151)
b169 = sch.decompose_reduction(block=b151, loop=l155)
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #69: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(60), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v2 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(50))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(5), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[60, 1, 1, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #70: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(60), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v2 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(50))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(5), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 * T.int64(5) + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 * T.int64(5) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[60, 1, 1, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 5])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #71: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(60), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3_init * T.int64(7) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v2 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(50))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(5), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3 * T.int64(7) + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[60, 1, 1, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 7])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:121] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #72: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), "float32"), p2: T.Buffer((T.int64(1), T.int64(120), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(28), T.int64(28)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(120), T.int64(32), T.int64(32)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(120), T.int64(1), T.int64(5), T.int64(5)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(60), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3_init * T.int64(7) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1024))
                                        v2 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1024) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2048))
                                        T.reads(p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(2) <= v2 and v2 < T.int64(30) and T.int64(2) <= v3 and v3 < T.int64(30), p0[v0, v1, v2 - T.int64(2), v3 - T.int64(2)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(25))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(25) // T.int64(5))
                                    v3 = T.axis.spatial(T.int64(5), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(50))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(5), T.int64(5), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + j_3 * T.int64(7) + j_4)
                                v_di = T.axis.reduce(T.int64(5), di_0 * T.int64(5) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(5), dj_0 * T.int64(5) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(120), b_0_c_0_i_0_j_0_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused // T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(28), b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[60, 1, 1, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 7])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 5, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #73: GFLOPs: 1078.4099. Time: 4.5365 us. Best GFLOPs: 1180.6371
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #74: GFLOPs: 1181.6363. Time: 4.1402 us. Best GFLOPs: 1181.6363
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #75: GFLOPs: 744.3759. Time: 6.5722 us. Best GFLOPs: 1181.6363
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #76: GFLOPs: 743.5908. Time: 6.5791 us. Best GFLOPs: 1181.6363
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #77: GFLOPs: 744.3850. Time: 6.5721 us. Best GFLOPs: 1181.6363
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #78: GFLOPs: 744.3920. Time: 6.5720 us. Best GFLOPs: 1181.6363
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #79: GFLOPs: 828.2820. Time: 5.9064 us. Best GFLOPs: 1181.6363
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #80: GFLOPs: 1298.0754. Time: 3.7688 us. Best GFLOPs: 1298.0754
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #81: GFLOPs: 1068.7735. Time: 4.5774 us. Best GFLOPs: 1298.0754
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #82: GFLOPs: 904.7055. Time: 5.4075 us. Best GFLOPs: 1298.0754
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #83: GFLOPs: 906.0212. Time: 5.3996 us. Best GFLOPs: 1298.0754
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #84: GFLOPs: 1351.3899. Time: 3.6201 us. Best GFLOPs: 1351.3899
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #85: GFLOPs: 1346.1605. Time: 3.6342 us. Best GFLOPs: 1351.3899
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #86: GFLOPs: 828.0912. Time: 5.9078 us. Best GFLOPs: 1351.3899
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #87: GFLOPs: 1350.6346. Time: 3.6221 us. Best GFLOPs: 1351.3899
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #88: GFLOPs: 1351.6835. Time: 3.6193 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #89: GFLOPs: 1347.3316. Time: 3.6310 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #90: GFLOPs: 1027.9435. Time: 4.7592 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #91: GFLOPs: 1321.2034. Time: 3.7028 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #92: GFLOPs: 981.6719. Time: 4.9835 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #93: GFLOPs: 1258.7692. Time: 3.8865 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #94: GFLOPs: 1037.5486. Time: 4.7151 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #95: GFLOPs: 1303.9390. Time: 3.7518 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #96: GFLOPs: 1304.0281. Time: 3.7516 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #97: GFLOPs: 707.5497. Time: 6.9142 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #98: GFLOPs: 1175.0701. Time: 4.1633 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #99: GFLOPs: 723.1056. Time: 6.7655 us. Best GFLOPs: 1351.6835
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #100: GFLOPs: 1352.6917. Time: 3.6166 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #101: GFLOPs: 889.9523. Time: 5.4971 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #102: GFLOPs: 707.2600. Time: 6.9171 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #103: GFLOPs: 866.1868. Time: 5.6479 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #104: GFLOPs: 738.4833. Time: 6.6246 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #105: GFLOPs: 905.6566. Time: 5.4018 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #106: GFLOPs: 681.6834. Time: 7.1766 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #107: GFLOPs: 839.0042. Time: 5.8309 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #108: GFLOPs: 1062.4287. Time: 4.6047 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #109: GFLOPs: 950.8928. Time: 5.1448 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #110: GFLOPs: 977.9205. Time: 5.0026 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #111: GFLOPs: 995.8086. Time: 4.9128 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #112: GFLOPs: 1347.1664. Time: 3.6314 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #113: GFLOPs: 1343.3422. Time: 3.6418 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #114: GFLOPs: 1033.5475. Time: 4.7334 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #115: GFLOPs: 949.0358. Time: 5.1549 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #116: GFLOPs: 1341.5326. Time: 3.6467 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #117: GFLOPs: 571.3454. Time: 8.5625 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #118: GFLOPs: 1063.9747. Time: 4.5980 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #119: GFLOPs: 1341.5163. Time: 3.6467 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #120: GFLOPs: 729.8840. Time: 6.7027 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #121: GFLOPs: 1341.7826. Time: 3.6460 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #122: GFLOPs: 975.0152. Time: 5.0175 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #123: GFLOPs: 1034.5333. Time: 4.7289 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #124: GFLOPs: 1170.5621. Time: 4.1793 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #125: GFLOPs: 1307.6866. Time: 3.7411 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #126: GFLOPs: 173.7215. Time: 28.1609 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #127: GFLOPs: 861.2074. Time: 5.6806 us. Best GFLOPs: 1352.6917
2024-03-21 20:44:26 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #128: GFLOPs: 884.8593. Time: 5.5287 us. Best GFLOPs: 1352.6917
2024-03-21 21:24:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 21:24:19 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 21:24:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 403 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 21:24:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 803 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 21:24:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 1196 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 21:24:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 1594 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 21:24:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 1991 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 21:24:23 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-03-21 21:24:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 21:24:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 21:24:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 21:24:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 21:24:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0190  1.0190  1.0190  1.0092  1.0092  1.0092  1.0090  1.0090  1.0032  1.0026  0.9992  0.9992  0.9938  0.9913  0.9894  0.9870
[17 : 32]:	0.9869  0.9869  0.9869  0.9869  0.9869  0.9869  0.9857  0.9855  0.9848  0.9784  0.9764  0.9742  0.9742  0.9733  0.9710  0.9695
[33 : 48]:	0.9693  0.9693  0.9687  0.9658  0.9656  0.9656  0.9642  0.9630  0.9617  0.9602  0.9600  0.9600  0.9584  0.9553  0.9544  0.9527
[49 : 64]:	0.9517  0.9517  0.9511  0.9505  0.9502  0.9497  0.9489  0.9482  0.9482  0.9482  0.9481  0.9481  0.9477  0.9453  0.9407  0.9381
2024-03-21 21:24:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 21:24:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #129: GFLOPs: 1362.2721. Time: 3.5912 us. Best GFLOPs: 1362.2721
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #130: GFLOPs: 1363.9354. Time: 3.5868 us. Best GFLOPs: 1363.9354
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #131: GFLOPs: 1359.1108. Time: 3.5995 us. Best GFLOPs: 1363.9354
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #132: GFLOPs: 1364.3093. Time: 3.5858 us. Best GFLOPs: 1364.3093
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #133: GFLOPs: 1364.5446. Time: 3.5852 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #134: GFLOPs: 1364.3611. Time: 3.5857 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #135: GFLOPs: 1362.7059. Time: 3.5900 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #136: GFLOPs: 1362.7633. Time: 3.5899 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #137: GFLOPs: 1363.8549. Time: 3.5870 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #138: GFLOPs: 1362.7755. Time: 3.5899 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #139: GFLOPs: 1361.4902. Time: 3.5932 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #140: GFLOPs: 1361.5881. Time: 3.5930 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #141: GFLOPs: 1345.4998. Time: 3.6359 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #142: GFLOPs: 1363.0526. Time: 3.5891 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #143: GFLOPs: 1359.4650. Time: 3.5986 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #144: GFLOPs: 1185.3175. Time: 4.1273 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #145: GFLOPs: 1359.3350. Time: 3.5989 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #146: GFLOPs: 1364.0979. Time: 3.5864 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #147: GFLOPs: 1364.0874. Time: 3.5864 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #148: GFLOPs: 1364.0504. Time: 3.5865 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #149: GFLOPs: 1364.2090. Time: 3.5861 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #150: GFLOPs: 1364.2575. Time: 3.5860 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #151: GFLOPs: 1314.8495. Time: 3.7207 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #152: GFLOPs: 1315.1358. Time: 3.7199 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #153: GFLOPs: 1362.3502. Time: 3.5910 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #154: GFLOPs: 1343.7440. Time: 3.6407 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #155: GFLOPs: 1359.3621. Time: 3.5989 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #156: GFLOPs: 1269.6926. Time: 3.8530 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #157: GFLOPs: 1266.9551. Time: 3.8614 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #158: GFLOPs: 1341.2284. Time: 3.6475 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #159: GFLOPs: 1351.8869. Time: 3.6188 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #160: GFLOPs: 1354.5925. Time: 3.6115 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #161: GFLOPs: 1352.8867. Time: 3.6161 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #162: GFLOPs: 1352.9585. Time: 3.6159 us. Best GFLOPs: 1364.5446
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #163: GFLOPs: 1390.7500. Time: 3.5176 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #164: GFLOPs: 1304.4010. Time: 3.7505 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #165: GFLOPs: 1304.4956. Time: 3.7502 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #166: GFLOPs: 1304.4956. Time: 3.7502 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #167: GFLOPs: 1138.9561. Time: 4.2953 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #168: GFLOPs: 1352.7800. Time: 3.6164 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #169: GFLOPs: 1139.2923. Time: 4.2940 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #170: GFLOPs: 1304.3286. Time: 3.7507 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #171: GFLOPs: 1304.5068. Time: 3.7502 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #172: GFLOPs: 1304.4780. Time: 3.7503 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #173: GFLOPs: 1348.6633. Time: 3.6274 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #174: GFLOPs: 1304.3558. Time: 3.7506 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #175: GFLOPs: 1354.3685. Time: 3.6121 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #176: GFLOPs: 1350.0994. Time: 3.6236 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #177: GFLOPs: 1351.7773. Time: 3.6191 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #178: GFLOPs: 1345.0188. Time: 3.6372 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #179: GFLOPs: 1348.7735. Time: 3.6271 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #180: GFLOPs: 1008.4696. Time: 4.8511 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #181: GFLOPs: 1347.7644. Time: 3.6298 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #182: GFLOPs: 1351.1190. Time: 3.6208 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #183: GFLOPs: 1354.8421. Time: 3.6109 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #184: GFLOPs: 1259.5568. Time: 3.8840 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #185: GFLOPs: 1259.6418. Time: 3.8838 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #186: GFLOPs: 1259.6481. Time: 3.8838 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #187: GFLOPs: 1353.4478. Time: 3.6146 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #188: GFLOPs: 1348.8112. Time: 3.6270 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #189: GFLOPs: 1100.7430. Time: 4.4444 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #190: GFLOPs: 158.8190. Time: 30.8034 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #191: GFLOPs: 384.2525. Time: 12.7316 us. Best GFLOPs: 1390.7500
2024-03-21 21:25:19 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #192: GFLOPs: 195.7378. Time: 24.9934 us. Best GFLOPs: 1390.7500
2024-03-21 22:00:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 22:00:03 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 22:00:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 397 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 22:00:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 801 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 22:00:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 1198 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 22:00:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 1595 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 22:00:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 1998 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 22:00:07 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-03-21 22:00:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 22:00:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 22:00:16 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 22:00:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed518478)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7c6718)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed82c198)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6f46c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed602ef8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7c3fe8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7c6618)]: 0 failure(s)
2024-03-21 22:00:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9977  0.9940  0.9923  0.9922  0.9916  0.9899  0.9891  0.9891  0.9872  0.9872  0.9860  0.9860  0.9836  0.9836  0.9830
[17 : 32]:	0.9827  0.9819  0.9813  0.9809  0.9808  0.9808  0.9808  0.9771  0.9771  0.9755  0.9755  0.9755  0.9753  0.9753  0.9753  0.9749
[33 : 48]:	0.9720  0.9720  0.9720  0.9716  0.9716  0.9700  0.9700  0.9700  0.9690  0.9690  0.9690  0.9664  0.9650  0.9650  0.9650  0.9650
[49 : 64]:	0.9640  0.9640  0.9639  0.9639  0.9639  0.9635  0.9614  0.9613  0.9613  0.9608  0.9608  0.9599  0.9561  0.9547  0.9546  0.9545
2024-03-21 22:00:21 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 22:00:21 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #193: GFLOPs: 1362.2584. Time: 3.5912 us. Best GFLOPs: 1390.7500
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #194: GFLOPs: 1363.9944. Time: 3.5866 us. Best GFLOPs: 1390.7500
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #195: GFLOPs: 1318.3500. Time: 3.7108 us. Best GFLOPs: 1390.7500
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #196: GFLOPs: 1363.3394. Time: 3.5884 us. Best GFLOPs: 1390.7500
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #197: GFLOPs: 1364.2000. Time: 3.5861 us. Best GFLOPs: 1390.7500
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #198: GFLOPs: 1363.9469. Time: 3.5868 us. Best GFLOPs: 1390.7500
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #199: GFLOPs: 1405.4230. Time: 3.4809 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #200: GFLOPs: 1343.1066. Time: 3.6424 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #201: GFLOPs: 1363.2052. Time: 3.5887 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #202: GFLOPs: 1362.7863. Time: 3.5898 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #203: GFLOPs: 1362.7571. Time: 3.5899 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #204: GFLOPs: 1337.0266. Time: 3.6590 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #205: GFLOPs: 1365.3975. Time: 3.5830 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #206: GFLOPs: 1363.4473. Time: 3.5881 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #207: GFLOPs: 1358.8270. Time: 3.6003 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #208: GFLOPs: 1362.8552. Time: 3.5896 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #209: GFLOPs: 1364.0391. Time: 3.5865 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #210: GFLOPs: 1377.7009. Time: 3.5510 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #211: GFLOPs: 1364.0964. Time: 3.5864 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #212: GFLOPs: 1363.9124. Time: 3.5869 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #213: GFLOPs: 1362.0864. Time: 3.5917 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #214: GFLOPs: 1362.0523. Time: 3.5918 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #215: GFLOPs: 1344.3495. Time: 3.6391 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #216: GFLOPs: 1362.1437. Time: 3.5915 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #217: GFLOPs: 1362.1437. Time: 3.5915 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #218: GFLOPs: 1364.5754. Time: 3.5851 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #219: GFLOPs: 1363.7029. Time: 3.5874 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #220: GFLOPs: 1317.8333. Time: 3.7123 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #221: GFLOPs: 1365.6196. Time: 3.5824 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #222: GFLOPs: 1365.6061. Time: 3.5824 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #223: GFLOPs: 1365.6395. Time: 3.5823 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #224: GFLOPs: 1364.3071. Time: 3.5858 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #225: GFLOPs: 1363.2916. Time: 3.5885 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #226: GFLOPs: 1363.2227. Time: 3.5887 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #227: GFLOPs: 1340.6935. Time: 3.6490 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #228: GFLOPs: 1363.4870. Time: 3.5880 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #229: GFLOPs: 1363.4561. Time: 3.5881 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #230: GFLOPs: 1364.0737. Time: 3.5864 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #231: GFLOPs: 1362.9718. Time: 3.5893 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #232: GFLOPs: 1350.3295. Time: 3.6229 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #233: GFLOPs: 1376.9621. Time: 3.5529 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #234: GFLOPs: 1369.3389. Time: 3.5726 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #235: GFLOPs: 1376.4750. Time: 3.5541 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #236: GFLOPs: 1354.8878. Time: 3.6107 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #237: GFLOPs: 1351.1568. Time: 3.6207 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #238: GFLOPs: 1351.8755. Time: 3.6188 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #239: GFLOPs: 1349.5184. Time: 3.6251 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #240: GFLOPs: 1351.9416. Time: 3.6186 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #241: GFLOPs: 1354.1389. Time: 3.6127 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #242: GFLOPs: 1352.9887. Time: 3.6158 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #243: GFLOPs: 1353.5157. Time: 3.6144 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #244: GFLOPs: 1352.7573. Time: 3.6164 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #245: GFLOPs: 1304.6409. Time: 3.7498 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #246: GFLOPs: 1353.3020. Time: 3.6150 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #247: GFLOPs: 1351.9909. Time: 3.6185 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #248: GFLOPs: 1352.4601. Time: 3.6172 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #249: GFLOPs: 1350.1717. Time: 3.6234 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #250: GFLOPs: 1350.9272. Time: 3.6213 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #251: GFLOPs: 1352.9723. Time: 3.6159 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #252: GFLOPs: 1304.3825. Time: 3.7506 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #253: GFLOPs: 1293.3501. Time: 3.7825 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #254: GFLOPs: 74.2463. Time: 65.8909 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #255: GFLOPs: 132.4111. Time: 36.9468 us. Best GFLOPs: 1405.4230
2024-03-21 22:00:59 [INFO] [task_scheduler.cc:131] [Task #12: fused_nn_conv2d_add_nn_relu_8] Trial #256: GFLOPs: 88.4905. Time: 55.2846 us. Best GFLOPs: 1405.4230
