2024-03-21 10:38:26 [INFO] [task_scheduler.cc:160] Initializing Task #59: "fused_nn_conv2d_add_nn_relu_29"
2024-03-21 10:38:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(704), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(128), T.int64(704), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(704), T.int64(7), T.int64(7)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(704), T.int64(7), T.int64(7)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7), T.int64(704), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 10:38:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(704), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(128), T.int64(704), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(704), T.int64(7), T.int64(7)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(704), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(32), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(154)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(704), rc_0 * T.int64(22) + ax0_ax1_ax2_ax3_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(352)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(22))
                                    v1 = T.axis.spatial(T.int64(704), rc_0 * T.int64(22) + ax0_ax1_ax2_ax3_fused % T.int64(22))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(7), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(704), rc_0 * T.int64(22) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(7), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 1, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 11, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 10:38:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(704), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(128), T.int64(704), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(704), T.int64(7), T.int64(7)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(704), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(154)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(704), rc_0_ry_0_rx_0_fused * T.int64(22) + ax0_ax1_ax2_ax3_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(352)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(22))
                                    v1 = T.axis.spatial(T.int64(704), rc_0_ry_0_rx_0_fused * T.int64(22) + ax0_ax1_ax2_ax3_fused % T.int64(22))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(7), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(704), rc_0_ry_0_rx_0_fused * T.int64(22) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(7), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 1, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 11, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 10:38:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(704), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(128), T.int64(704), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(7), T.int64(7)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(704), T.int64(7), T.int64(7)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(704), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(154)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(704), rc_0_ry_0_rx_0_fused * T.int64(22) + ax0_ax1_ax2_ax3_fused // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(352)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(22))
                                    v1 = T.axis.spatial(T.int64(704), rc_0_ry_0_rx_0_fused * T.int64(22) + ax0_ax1_ax2_ax3_fused % T.int64(22))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(11), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(7), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(704), rc_0_ry_0_rx_0_fused * T.int64(22) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(7), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 1, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 11, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 11:03:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:03:59 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:03:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd3feda28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd25a1c78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3ced628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578ccfe6e8e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3c6f4e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2fdfaa8)]: 477 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd82d5308)]: 0 failure(s)
2024-03-21 11:04:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd3feda28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd25a1c78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3ced628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578ccfe6e8e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3c6f4e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2fdfaa8)]: 964 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd82d5308)]: 0 failure(s)
2024-03-21 11:04:00 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-03-21 11:04:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd3feda28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd25a1c78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3ced628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578ccfe6e8e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3c6f4e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2fdfaa8)]: 166 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd82d5308)]: 0 failure(s)
2024-03-21 11:04:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd3feda28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd25a1c78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3ced628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578ccfe6e8e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3c6f4e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2fdfaa8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd82d5308)]: 0 failure(s)
2024-03-21 11:04:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd3feda28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd25a1c78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3ced628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578ccfe6e8e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3c6f4e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2fdfaa8)]: 125 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd82d5308)]: 0 failure(s)
2024-03-21 11:04:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd3feda28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd25a1c78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3ced628)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578ccfe6e8e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd3c6f4e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2fdfaa8)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd82d5308)]: 0 failure(s)
2024-03-21 11:04:06 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9982  0.9978  0.9960  0.9948  0.9947  0.9947  0.9936  0.9931  0.9907  0.9906  0.9898  0.9898  0.9895  0.9894  0.9889  0.9874
[17 : 32]:	0.9872  0.9870  0.9865  0.9863  0.9862  0.9852  0.9850  0.9844  0.9842  0.9835  0.9826  0.9823  0.9819  0.9815  0.9804  0.9798
[33 : 48]:	0.9796  0.9794  0.9780  0.9767  0.9765  0.9765  0.9763  0.9758  0.9755  0.9750  0.9746  0.9729  0.9728  0.9723  0.9704  0.9700
[49 : 64]:	0.9699  0.9698  0.9660  0.9659  0.9649  0.9646  0.9642  0.9632  0.9626  0.9626  0.9619  0.9618  0.9614  0.9600  0.9597  0.9593
2024-03-21 11:04:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:04:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #1: GFLOPs: 221.8505. Time: 39.8625 us. Best GFLOPs: 221.8505
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #2: GFLOPs: 60.1084. Time: 147.1261 us. Best GFLOPs: 221.8505
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #3: GFLOPs: 209.5924. Time: 42.1939 us. Best GFLOPs: 221.8505
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #4: GFLOPs: 429.6607. Time: 20.5826 us. Best GFLOPs: 429.6607
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #5: GFLOPs: 80.4396. Time: 109.9398 us. Best GFLOPs: 429.6607
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #6: GFLOPs: 198.5667. Time: 44.5368 us. Best GFLOPs: 429.6607
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #7: GFLOPs: 217.8579. Time: 40.5931 us. Best GFLOPs: 429.6607
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #8: GFLOPs: 89.6017. Time: 98.6981 us. Best GFLOPs: 429.6607
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #9: GFLOPs: 50.9444. Time: 173.5918 us. Best GFLOPs: 429.6607
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #10: GFLOPs: 170.4355. Time: 51.8878 us. Best GFLOPs: 429.6607
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #11: GFLOPs: 258.5034. Time: 34.2105 us. Best GFLOPs: 429.6607
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #12: GFLOPs: 65.0978. Time: 135.8497 us. Best GFLOPs: 429.6607
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #13: GFLOPs: 273.1752. Time: 32.3731 us. Best GFLOPs: 429.6607
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #14: GFLOPs: 508.4985. Time: 17.3914 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #15: GFLOPs: 105.8942. Time: 83.5128 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #16: GFLOPs: 73.5443. Time: 120.2475 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #17: GFLOPs: 75.6022. Time: 116.9744 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #18: GFLOPs: 70.9477. Time: 124.6484 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #19: GFLOPs: 212.7020. Time: 41.5770 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #20: GFLOPs: 98.3360. Time: 89.9316 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #21: GFLOPs: 87.1293. Time: 101.4988 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #22: GFLOPs: 89.4387. Time: 98.8780 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #23: GFLOPs: 118.6540. Time: 74.5320 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #24: GFLOPs: 95.0266. Time: 93.0636 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #25: GFLOPs: 228.6235. Time: 38.6816 us. Best GFLOPs: 508.4985
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #26: GFLOPs: 553.5219. Time: 15.9768 us. Best GFLOPs: 553.5219
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #27: GFLOPs: 59.8702. Time: 147.7115 us. Best GFLOPs: 553.5219
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #28: GFLOPs: 61.3686. Time: 144.1051 us. Best GFLOPs: 553.5219
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #29: GFLOPs: 73.4900. Time: 120.3364 us. Best GFLOPs: 553.5219
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #30: GFLOPs: 715.4201. Time: 12.3613 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #31: GFLOPs: 69.0375. Time: 128.0973 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #32: GFLOPs: 246.7922. Time: 35.8339 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #33: GFLOPs: 80.9022. Time: 109.3113 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #34: GFLOPs: 156.0294. Time: 56.6786 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #35: GFLOPs: 170.9058. Time: 51.7450 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #36: GFLOPs: 382.0222. Time: 23.1492 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #37: GFLOPs: 107.9768. Time: 81.9020 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #38: GFLOPs: 62.4133. Time: 141.6928 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #39: GFLOPs: 44.4112. Time: 199.1281 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #40: GFLOPs: 49.1615. Time: 179.8872 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #41: GFLOPs: 230.2917. Time: 38.4014 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #42: GFLOPs: 61.5886. Time: 143.5903 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #43: GFLOPs: 60.6819. Time: 145.7356 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #44: GFLOPs: 240.7538. Time: 36.7326 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #45: GFLOPs: 81.8964. Time: 107.9842 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #46: GFLOPs: 612.0057. Time: 14.4501 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #47: GFLOPs: 236.0887. Time: 37.4585 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #48: GFLOPs: 168.9676. Time: 52.3386 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #49: GFLOPs: 78.6118. Time: 112.4961 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #50: GFLOPs: 56.9993. Time: 155.1514 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #51: GFLOPs: 98.0435. Time: 90.1999 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #52: GFLOPs: 168.1124. Time: 52.6048 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #53: GFLOPs: 118.5202. Time: 74.6162 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #54: GFLOPs: 82.1091. Time: 107.7045 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #55: GFLOPs: 65.3568. Time: 135.3115 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #56: GFLOPs: 485.5296. Time: 18.2142 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #57: GFLOPs: 129.5513. Time: 68.2627 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #58: GFLOPs: 372.9528. Time: 23.7122 us. Best GFLOPs: 715.4201
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #59: GFLOPs: 772.3004. Time: 11.4509 us. Best GFLOPs: 772.3004
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #60: GFLOPs: 307.8710. Time: 28.7248 us. Best GFLOPs: 772.3004
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #61: GFLOPs: 19.4563. Time: 454.5319 us. Best GFLOPs: 772.3004
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #62: GFLOPs: 53.7263. Time: 164.6033 us. Best GFLOPs: 772.3004
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #63: GFLOPs: 134.9458. Time: 65.5339 us. Best GFLOPs: 772.3004
2024-03-21 12:21:49 [INFO] [task_scheduler.cc:131] [Task #59: fused_nn_conv2d_add_nn_relu_29] Trial #64: GFLOPs: 356.8698. Time: 24.7808 us. Best GFLOPs: 772.3004
