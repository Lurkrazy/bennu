2024-03-21 13:42:27 [INFO] [task_scheduler.cc:160] Initializing Task #108: "fused_nn_conv2d_add_nn_relu_53"
2024-03-21 13:42:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1088), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1088), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1088), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1088), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1088), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1088), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1088), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1088), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1088), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(64), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(136), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(224)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1088), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(1088), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1088), rc_0 * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 64, 1, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[136, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1088), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1088), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1088), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1088), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(64), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(136), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(224)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1088), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(1088), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1088), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 64, 1, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[136, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1088), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1088), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1088), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1088), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(64), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(136), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(224)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1088), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(1088), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1088), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 64, 1, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[136, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 14:39:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 14:39:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 14:39:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f091b058)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f02e7998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9669bc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa61fe08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f99f2548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7ebb568)]: 496 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f39f8808)]: 0 failure(s)
2024-03-21 14:39:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f091b058)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f02e7998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9669bc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa61fe08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f99f2548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7ebb568)]: 979 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f39f8808)]: 0 failure(s)
2024-03-21 14:39:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f091b058)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f02e7998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9669bc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa61fe08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f99f2548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7ebb568)]: 1468 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f39f8808)]: 0 failure(s)
2024-03-21 14:39:35 [INFO] [evolutionary_search.cc:723] Sampled 68 candidate(s)
2024-03-21 14:39:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f091b058)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f02e7998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9669bc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa61fe08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f99f2548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7ebb568)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f39f8808)]: 0 failure(s)
2024-03-21 14:39:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f091b058)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f02e7998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9669bc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa61fe08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f99f2548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7ebb568)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f39f8808)]: 0 failure(s)
2024-03-21 14:39:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f091b058)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f02e7998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9669bc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa61fe08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f99f2548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7ebb568)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f39f8808)]: 0 failure(s)
2024-03-21 14:39:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f091b058)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f02e7998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f9669bc8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2fa61fe08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f99f2548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f7ebb568)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f39f8808)]: 0 failure(s)
2024-03-21 14:39:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9998  0.9976  0.9974  0.9970  0.9959  0.9946  0.9917  0.9907  0.9898  0.9898  0.9898  0.9897  0.9888  0.9883  0.9872
[17 : 32]:	0.9870  0.9866  0.9864  0.9863  0.9856  0.9850  0.9849  0.9843  0.9839  0.9832  0.9828  0.9824  0.9814  0.9813  0.9793  0.9787
[33 : 48]:	0.9785  0.9779  0.9769  0.9766  0.9764  0.9764  0.9763  0.9760  0.9721  0.9721  0.9715  0.9708  0.9700  0.9694  0.9690  0.9690
[49 : 64]:	0.9687  0.9665  0.9664  0.9648  0.9647  0.9643  0.9635  0.9634  0.9627  0.9626  0.9618  0.9616  0.9616  0.9615  0.9586  0.9559
2024-03-21 14:39:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 14:39:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #1: GFLOPs: 131.6813. Time: 414.9537 us. Best GFLOPs: 131.6813
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #2: GFLOPs: 166.5318. Time: 328.1155 us. Best GFLOPs: 166.5318
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #3: GFLOPs: 619.9336. Time: 88.1412 us. Best GFLOPs: 619.9336
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #4: GFLOPs: 17.4293. Time: 3135.0400 us. Best GFLOPs: 619.9336
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #5: GFLOPs: 719.0845. Time: 75.9878 us. Best GFLOPs: 719.0845
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #6: GFLOPs: 399.7925. Time: 136.6751 us. Best GFLOPs: 719.0845
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #7: GFLOPs: 289.8871. Time: 188.4929 us. Best GFLOPs: 719.0845
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #8: GFLOPs: 170.3580. Time: 320.7461 us. Best GFLOPs: 719.0845
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #9: GFLOPs: 16.8376. Time: 3245.2242 us. Best GFLOPs: 719.0845
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #10: GFLOPs: 306.8947. Time: 178.0469 us. Best GFLOPs: 719.0845
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #11: GFLOPs: 132.1347. Time: 413.5302 us. Best GFLOPs: 719.0845
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #12: GFLOPs: 166.8347. Time: 327.5198 us. Best GFLOPs: 719.0845
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #13: GFLOPs: 550.4899. Time: 99.2601 us. Best GFLOPs: 719.0845
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #14: GFLOPs: 763.7786. Time: 71.5412 us. Best GFLOPs: 763.7786
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #15: GFLOPs: 650.3482. Time: 84.0191 us. Best GFLOPs: 763.7786
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #16: GFLOPs: 330.8956. Time: 165.1326 us. Best GFLOPs: 763.7786
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #17: GFLOPs: 468.1745. Time: 116.7122 us. Best GFLOPs: 763.7786
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #18: GFLOPs: 328.1638. Time: 166.5073 us. Best GFLOPs: 763.7786
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #19: GFLOPs: 241.5957. Time: 226.1698 us. Best GFLOPs: 763.7786
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #20: GFLOPs: 1464.3781. Time: 37.3139 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #21: GFLOPs: 134.1284. Time: 407.3833 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #22: GFLOPs: 590.9879. Time: 92.4582 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #23: GFLOPs: 54.3297. Time: 1005.7427 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #24: GFLOPs: 174.5161. Time: 313.1039 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #25: GFLOPs: 905.7144. Time: 60.3299 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #26: GFLOPs: 10.4630. Time: 5222.3473 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #27: GFLOPs: 667.6158. Time: 81.8460 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #28: GFLOPs: 721.1642. Time: 75.7687 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #29: GFLOPs: 786.6031. Time: 69.4654 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #30: GFLOPs: 231.9940. Time: 235.5305 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #31: GFLOPs: 156.5594. Time: 349.0155 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #32: GFLOPs: 170.3883. Time: 320.6891 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #33: GFLOPs: 271.9153. Time: 200.9510 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #34: GFLOPs: 408.7634. Time: 133.6755 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #35: GFLOPs: 407.5233. Time: 134.0823 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #36: GFLOPs: 992.8127. Time: 55.0372 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #37: GFLOPs: 571.4465. Time: 95.6199 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #38: GFLOPs: 234.1586. Time: 233.3532 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #39: GFLOPs: 212.0122. Time: 257.7289 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #40: GFLOPs: 91.4508. Time: 597.4979 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #41: GFLOPs: 363.5057. Time: 150.3186 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #42: GFLOPs: 5.3826. Time: 10151.5266 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #43: GFLOPs: 132.1986. Time: 413.3301 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #44: GFLOPs: 395.0276. Time: 138.3237 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #45: GFLOPs: 307.7559. Time: 177.5487 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #46: GFLOPs: 345.5988. Time: 158.1072 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #47: GFLOPs: 673.5494. Time: 81.1250 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #48: GFLOPs: 22.3971. Time: 2439.6799 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #49: GFLOPs: 104.1515. Time: 524.6365 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #50: GFLOPs: 10.5059. Time: 5201.0494 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #51: GFLOPs: 677.8272. Time: 80.6130 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #52: GFLOPs: 229.7436. Time: 237.8376 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #53: GFLOPs: 187.3113. Time: 291.7158 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #54: GFLOPs: 307.4095. Time: 177.7488 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #55: GFLOPs: 302.0842. Time: 180.8822 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #56: GFLOPs: 361.3831. Time: 151.2015 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #57: GFLOPs: 197.0677. Time: 277.2735 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #58: GFLOPs: 510.5850. Time: 107.0178 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #59: GFLOPs: 10.0570. Time: 5433.1822 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #60: GFLOPs: 621.9565. Time: 87.8545 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #61: GFLOPs: 205.7923. Time: 265.5185 us. Best GFLOPs: 1464.3781
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #62: GFLOPs: 2408.1882. Time: 22.6899 us. Best GFLOPs: 2408.1882
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #63: GFLOPs: 557.5096. Time: 98.0103 us. Best GFLOPs: 2408.1882
2024-03-21 15:48:37 [INFO] [task_scheduler.cc:131] [Task #108: fused_nn_conv2d_add_nn_relu_53] Trial #64: GFLOPs: 161.0251. Time: 339.3364 us. Best GFLOPs: 2408.1882
