2024-03-20 22:52:32 [INFO] [task_scheduler.cc:160] Initializing Task #34: "fused_nn_conv2d_add_nn_relu_16"
2024-03-20 22:52:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(992), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(992), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(992), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(992), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-20 22:52:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-20 22:52:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(992), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(992), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(992), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(32), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3038)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(992), rc_0 * T.int64(31) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3968)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(31))
                                    v1 = T.axis.spatial(T.int64(992), rc_0 * T.int64(31) + ax0_ax1_ax2_ax3_fused % T.int64(31))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(31), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(992), rc_0 * T.int64(31) + rc_1 * T.int64(31) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 2, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 31])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-20 22:52:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(992), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(992), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(992), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3038)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(992), rc_0_ry_0_rx_0_fused * T.int64(31) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3968)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(31))
                                    v1 = T.axis.spatial(T.int64(992), rc_0_ry_0_rx_0_fused * T.int64(31) + ax0_ax1_ax2_ax3_fused % T.int64(31))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(31), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(992), rc_0_ry_0_rx_0_fused * T.int64(31) + rc_1 * T.int64(31) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 2, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 31])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 22:52:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(992), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(992), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(992), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3038)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(992), rc_0_ry_0_rx_0_fused * T.int64(31) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3968)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(31))
                                    v1 = T.axis.spatial(T.int64(992), rc_0_ry_0_rx_0_fused * T.int64(31) + ax0_ax1_ax2_ax3_fused % T.int64(31))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(31), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(992), rc_0_ry_0_rx_0_fused * T.int64(31) + rc_1 * T.int64(31) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 2, 16])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 1, 31])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 23:07:13 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-20 23:07:13 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-20 23:07:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 477 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-20 23:07:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 966 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-20 23:07:14 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-20 23:07:16 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-20 23:07:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-20 23:07:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-20 23:07:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-20 23:07:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9995  0.9990  0.9989  0.9987  0.9984  0.9982  0.9974  0.9973  0.9972  0.9960  0.9958  0.9954  0.9954  0.9950  0.9946
[17 : 32]:	0.9910  0.9903  0.9901  0.9900  0.9894  0.9893  0.9892  0.9889  0.9889  0.9887  0.9886  0.9886  0.9862  0.9846  0.9844  0.9842
[33 : 48]:	0.9831  0.9818  0.9816  0.9808  0.9801  0.9800  0.9798  0.9796  0.9791  0.9791  0.9791  0.9774  0.9771  0.9758  0.9746  0.9724
[49 : 64]:	0.9719  0.9710  0.9710  0.9706  0.9690  0.9687  0.9683  0.9677  0.9676  0.9675  0.9661  0.9642  0.9638  0.9635  0.9630  0.9622
2024-03-20 23:07:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-20 23:07:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #1: GFLOPs: 377.7806. Time: 131.8881 us. Best GFLOPs: 377.7806
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #2: GFLOPs: 579.1342. Time: 86.0332 us. Best GFLOPs: 579.1342
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #3: GFLOPs: 450.1790. Time: 110.6777 us. Best GFLOPs: 579.1342
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #4: GFLOPs: 34.0673. Time: 1462.5391 us. Best GFLOPs: 579.1342
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #5: GFLOPs: 54.0105. Time: 922.5019 us. Best GFLOPs: 579.1342
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #6: GFLOPs: 287.5648. Time: 173.2645 us. Best GFLOPs: 579.1342
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #7: GFLOPs: 237.1398. Time: 210.1072 us. Best GFLOPs: 579.1342
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #8: GFLOPs: 61.7291. Time: 807.1515 us. Best GFLOPs: 579.1342
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #9: GFLOPs: 702.7358. Time: 70.9011 us. Best GFLOPs: 702.7358
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #10: GFLOPs: 69.5490. Time: 716.3977 us. Best GFLOPs: 702.7358
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #11: GFLOPs: 22.1661. Time: 2247.7937 us. Best GFLOPs: 702.7358
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #12: GFLOPs: 838.2625. Time: 59.4381 us. Best GFLOPs: 838.2625
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #13: GFLOPs: 1080.6455. Time: 46.1065 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #14: GFLOPs: 411.4659. Time: 121.0909 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #15: GFLOPs: 26.4185. Time: 1885.9791 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #16: GFLOPs: 705.1830. Time: 70.6551 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #17: GFLOPs: 42.3903. Time: 1175.3801 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #18: GFLOPs: 729.6620. Time: 68.2847 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #19: GFLOPs: 648.2675. Time: 76.8583 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #20: GFLOPs: 204.6728. Time: 243.4362 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #21: GFLOPs: 44.6017. Time: 1117.1043 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #22: GFLOPs: 254.7860. Time: 195.5554 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #23: GFLOPs: 158.2403. Time: 314.8678 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #24: GFLOPs: 377.2125. Time: 132.0867 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #25: GFLOPs: 434.8344. Time: 114.5833 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #26: GFLOPs: 17.3463. Time: 2872.3493 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #27: GFLOPs: 434.8367. Time: 114.5827 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #28: GFLOPs: 382.3824. Time: 130.3009 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #29: GFLOPs: 167.0061. Time: 298.3411 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #30: GFLOPs: 342.4734. Time: 145.4851 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #31: GFLOPs: 193.6480. Time: 257.2955 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #32: GFLOPs: 192.9937. Time: 258.1678 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #33: GFLOPs: 87.6532. Time: 568.4306 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #34: GFLOPs: 1050.4063. Time: 47.4338 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #35: GFLOPs: 108.4696. Time: 459.3430 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #36: GFLOPs: 313.4885. Time: 158.9365 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #37: GFLOPs: 552.5492. Time: 90.1725 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #38: GFLOPs: 60.4289. Time: 824.5193 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #39: GFLOPs: 164.9694. Time: 302.0243 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #40: GFLOPs: 69.9495. Time: 712.2960 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #41: GFLOPs: 383.3853. Time: 129.9600 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #42: GFLOPs: 46.8264. Time: 1064.0320 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #43: GFLOPs: 15.0758. Time: 3304.9598 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #44: GFLOPs: 603.1769. Time: 82.6039 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #45: GFLOPs: 12.1150. Time: 4112.6669 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #46: GFLOPs: 266.2541. Time: 187.1324 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #47: GFLOPs: 385.9598. Time: 129.0931 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #48: GFLOPs: 720.3345. Time: 69.1689 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #49: GFLOPs: 315.6019. Time: 157.8722 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #50: GFLOPs: 357.5279. Time: 139.3591 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #51: GFLOPs: 293.0047. Time: 170.0477 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #52: GFLOPs: 341.9763. Time: 145.6965 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #53: GFLOPs: 149.0261. Time: 334.3359 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #54: GFLOPs: 449.9011. Time: 110.7461 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #55: GFLOPs: 147.4077. Time: 338.0065 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #56: GFLOPs: 270.6767. Time: 184.0748 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #57: GFLOPs: 776.9103. Time: 64.1319 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:121] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #58: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(992), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(992), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(992), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(128), T.int64(992), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), xx_3_init * T.int64(14) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(124), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(992), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(992), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), xx_3 * T.int64(14) + xx_4)
                                v_rc = T.axis.reduce(T.int64(992), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(14)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 64, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 14])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[124, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #59: GFLOPs: 364.2697. Time: 136.7799 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #60: GFLOPs: 871.3745. Time: 57.1795 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #61: GFLOPs: 53.6840. Time: 928.1117 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #62: GFLOPs: 202.1832. Time: 246.4338 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #63: GFLOPs: 777.1293. Time: 64.1139 us. Best GFLOPs: 1080.6455
2024-03-21 00:11:59 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #64: GFLOPs: 204.6741. Time: 243.4347 us. Best GFLOPs: 1080.6455
2024-03-21 00:44:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 00:44:09 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-03-21 00:44:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 427 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-21 00:44:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 854 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-21 00:44:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 1280 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-21 00:44:11 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-03-21 00:44:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-21 00:44:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-21 00:44:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-21 00:44:19 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a04c72f8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3a79098)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a558e728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f2956a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a3089678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4c89b68)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a5cf6f08)]: 0 failure(s)
2024-03-21 00:44:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4035  1.3904  1.3179  1.3076  1.3044  1.2969  1.2957  1.2946  1.2708  1.2543  1.2149  1.2083  1.1963  1.1888  1.1803  1.1758
[17 : 32]:	1.1739  1.1464  1.1397  1.1360  1.1360  1.1317  1.1317  1.1317  1.1268  1.1250  1.1180  1.1180  1.1177  1.1141  1.1128  1.1128
[33 : 48]:	1.1073  1.1036  1.1022  1.1011  1.1002  1.1002  1.1002  1.0999  1.0991  1.0982  1.0931  1.0924  1.0921  1.0914  1.0896  1.0874
[49 : 64]:	1.0857  1.0853  1.0851  1.0814  1.0802  1.0802  1.0794  1.0788  1.0768  1.0751  1.0714  1.0706  1.0685  1.0685  1.0670  1.0658
2024-03-21 00:44:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:44:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #65: GFLOPs: 522.9470. Time: 95.2769 us. Best GFLOPs: 1080.6455
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #66: GFLOPs: 1293.9795. Time: 38.5051 us. Best GFLOPs: 1293.9795
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #67: GFLOPs: 554.2151. Time: 89.9015 us. Best GFLOPs: 1293.9795
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #68: GFLOPs: 1336.3560. Time: 37.2841 us. Best GFLOPs: 1336.3560
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #69: GFLOPs: 1337.3205. Time: 37.2572 us. Best GFLOPs: 1337.3205
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #70: GFLOPs: 547.4091. Time: 91.0193 us. Best GFLOPs: 1337.3205
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #71: GFLOPs: 1390.2274. Time: 35.8393 us. Best GFLOPs: 1390.2274
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #72: GFLOPs: 1330.0033. Time: 37.4621 us. Best GFLOPs: 1390.2274
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #73: GFLOPs: 573.8522. Time: 86.8251 us. Best GFLOPs: 1390.2274
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #74: GFLOPs: 1398.5323. Time: 35.6265 us. Best GFLOPs: 1398.5323
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #75: GFLOPs: 1271.8259. Time: 39.1758 us. Best GFLOPs: 1398.5323
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #76: GFLOPs: 1727.6260. Time: 28.8400 us. Best GFLOPs: 1727.6260
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #77: GFLOPs: 1674.7123. Time: 29.7512 us. Best GFLOPs: 1727.6260
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #78: GFLOPs: 1728.3199. Time: 28.8284 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #79: GFLOPs: 1374.3944. Time: 36.2522 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #80: GFLOPs: 562.2238. Time: 88.6209 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #81: GFLOPs: 570.5259. Time: 87.3313 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #82: GFLOPs: 1340.5628. Time: 37.1671 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #83: GFLOPs: 1386.2294. Time: 35.9427 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #84: GFLOPs: 1284.3501. Time: 38.7938 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #85: GFLOPs: 1291.8086. Time: 38.5698 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #86: GFLOPs: 1310.4597. Time: 38.0208 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #87: GFLOPs: 1298.8075. Time: 38.3619 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #88: GFLOPs: 1297.1604. Time: 38.4106 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #89: GFLOPs: 1381.9368. Time: 36.0543 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #90: GFLOPs: 1582.9405. Time: 31.4761 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #91: GFLOPs: 1708.6026. Time: 29.1611 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #92: GFLOPs: 1297.4489. Time: 38.4021 us. Best GFLOPs: 1728.3199
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #93: GFLOPs: 2283.3910. Time: 21.8205 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #94: GFLOPs: 1599.3299. Time: 31.1535 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #95: GFLOPs: 1139.0899. Time: 43.7409 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #96: GFLOPs: 1139.0975. Time: 43.7406 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #97: GFLOPs: 1320.1676. Time: 37.7412 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #98: GFLOPs: 1302.3646. Time: 38.2572 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #99: GFLOPs: 1342.5894. Time: 37.1110 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #100: GFLOPs: 1603.6576. Time: 31.0695 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #101: GFLOPs: 563.9597. Time: 88.3481 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #102: GFLOPs: 564.1772. Time: 88.3140 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #103: GFLOPs: 1292.2782. Time: 38.5558 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #104: GFLOPs: 1610.1609. Time: 30.9440 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #105: GFLOPs: 1609.9695. Time: 30.9476 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #106: GFLOPs: 564.0902. Time: 88.3277 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #107: GFLOPs: 1611.2417. Time: 30.9232 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #108: GFLOPs: 1611.2337. Time: 30.9234 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #109: GFLOPs: 1904.4640. Time: 26.1621 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #110: GFLOPs: 1314.0632. Time: 37.9166 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #111: GFLOPs: 1716.1553. Time: 29.0328 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #112: GFLOPs: 1618.8909. Time: 30.7771 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #113: GFLOPs: 1427.1649. Time: 34.9117 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #114: GFLOPs: 1315.1574. Time: 37.8850 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #115: GFLOPs: 1666.8740. Time: 29.8911 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #116: GFLOPs: 1675.8300. Time: 29.7314 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #117: GFLOPs: 1292.0496. Time: 38.5626 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #118: GFLOPs: 563.9749. Time: 88.3457 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #119: GFLOPs: 1629.5590. Time: 30.5756 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #120: GFLOPs: 1316.0463. Time: 37.8594 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #121: GFLOPs: 1400.4930. Time: 35.5766 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #122: GFLOPs: 564.9897. Time: 88.1870 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #123: GFLOPs: 1315.3704. Time: 37.8789 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #124: GFLOPs: 564.5520. Time: 88.2554 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #125: GFLOPs: 584.7196. Time: 85.2114 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #126: GFLOPs: 115.3177. Time: 432.0652 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #127: GFLOPs: 523.5787. Time: 95.1620 us. Best GFLOPs: 2283.3910
2024-03-21 00:45:17 [INFO] [task_scheduler.cc:131] [Task #34: fused_nn_conv2d_add_nn_relu_16] Trial #128: GFLOPs: 93.5874. Time: 532.3874 us. Best GFLOPs: 2283.3910
