2024-03-21 07:30:25 [INFO] [task_scheduler.cc:160] Initializing Task #129: "fused_nn_conv2d_add_nn_relu_63"
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(576), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28), T.int64(576), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(6), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(64), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3528)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0 * T.int64(9) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(576), rc_0 * T.int64(9) + ax0_ax1_ax2_ax3_fused % T.int64(9))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0 * T.int64(9) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 6, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 3, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(6), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3528)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(9) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(9) + ax0_ax1_ax2_ax3_fused % T.int64(9))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(9) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 6, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 3, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(6), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(64), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3528)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(9) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(864)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(9) + ax0_ax1_ax2_ax3_fused % T.int64(9))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(9) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 6, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 3, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:38:23 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:38:23 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:38:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ebb78f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8edde6868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f4b601c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0414138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1f905f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6bfffe8)]: 473 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8edde6718)]: 0 failure(s)
2024-03-21 08:38:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ebb78f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8edde6868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f4b601c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0414138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1f905f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6bfffe8)]: 963 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8edde6718)]: 0 failure(s)
2024-03-21 08:38:24 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-03-21 08:38:26 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ebb78f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8edde6868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f4b601c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0414138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1f905f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6bfffe8)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8edde6718)]: 0 failure(s)
2024-03-21 08:38:27 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ebb78f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8edde6868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f4b601c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0414138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1f905f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6bfffe8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8edde6718)]: 0 failure(s)
2024-03-21 08:38:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ebb78f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8edde6868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f4b601c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0414138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1f905f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6bfffe8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8edde6718)]: 0 failure(s)
2024-03-21 08:38:30 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8ebb78f68)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8edde6868)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f4b601c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0414138)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f1f905f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f6bfffe8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8edde6718)]: 0 failure(s)
2024-03-21 08:38:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9996  0.9992  0.9984  0.9984  0.9978  0.9976  0.9974  0.9971  0.9970  0.9965  0.9957  0.9954  0.9950  0.9948  0.9948
[17 : 32]:	0.9927  0.9926  0.9923  0.9922  0.9920  0.9917  0.9910  0.9910  0.9909  0.9906  0.9893  0.9892  0.9886  0.9859  0.9859  0.9856
[33 : 48]:	0.9837  0.9835  0.9813  0.9802  0.9800  0.9797  0.9796  0.9796  0.9793  0.9792  0.9791  0.9789  0.9789  0.9783  0.9780  0.9779
[49 : 64]:	0.9768  0.9768  0.9765  0.9764  0.9754  0.9745  0.9743  0.9742  0.9739  0.9731  0.9722  0.9720  0.9716  0.9710  0.9708  0.9706
2024-03-21 08:38:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:38:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #1: GFLOPs: 35.8311. Time: 4848.0061 us. Best GFLOPs: 35.8311
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #2: GFLOPs: 1616.7348. Time: 107.4445 us. Best GFLOPs: 1616.7348
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #3: GFLOPs: 3547.9269. Time: 48.9608 us. Best GFLOPs: 3547.9269
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #4: GFLOPs: 1378.2715. Time: 126.0342 us. Best GFLOPs: 3547.9269
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #5: GFLOPs: 130.3847. Time: 1332.2832 us. Best GFLOPs: 3547.9269
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #6: GFLOPs: 10.8797. Time: 15966.3500 us. Best GFLOPs: 3547.9269
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #7: GFLOPs: 1404.6291. Time: 123.6692 us. Best GFLOPs: 3547.9269
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #8: GFLOPs: 16.4743. Time: 10544.2306 us. Best GFLOPs: 3547.9269
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #9: GFLOPs: 817.4102. Time: 212.5118 us. Best GFLOPs: 3547.9269
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #10: GFLOPs: 935.0695. Time: 185.7716 us. Best GFLOPs: 3547.9269
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #11: GFLOPs: 61.6716. Time: 2816.6826 us. Best GFLOPs: 3547.9269
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #12: GFLOPs: 1935.1710. Time: 89.7643 us. Best GFLOPs: 3547.9269
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #13: GFLOPs: 5706.9072. Time: 30.4384 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #14: GFLOPs: 10.0684. Time: 17252.8635 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #15: GFLOPs: 2962.7183. Time: 58.6317 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #16: GFLOPs: 1698.0559. Time: 102.2989 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #17: GFLOPs: 4758.6805. Time: 36.5037 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #18: GFLOPs: 2587.6595. Time: 67.1299 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #19: GFLOPs: 31.7637. Time: 5468.7958 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #20: GFLOPs: 1371.8790. Time: 126.6214 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #21: GFLOPs: 155.4616. Time: 1117.3774 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #22: GFLOPs: 1207.1138. Time: 143.9047 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #23: GFLOPs: 2487.8397. Time: 69.8234 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #24: GFLOPs: 58.1462. Time: 2987.4597 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #25: GFLOPs: 1061.6096. Time: 163.6282 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #26: GFLOPs: 2500.1841. Time: 69.4786 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #27: GFLOPs: 269.9368. Time: 643.5183 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #28: GFLOPs: 1614.1320. Time: 107.6178 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #29: GFLOPs: 97.8967. Time: 1774.4135 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #30: GFLOPs: 1108.4974. Time: 156.7070 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #31: GFLOPs: 19.9131. Time: 8723.3708 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #32: GFLOPs: 1260.7332. Time: 137.7844 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #33: GFLOPs: 1888.1293. Time: 92.0008 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #34: GFLOPs: 3150.2281. Time: 55.1418 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #35: GFLOPs: 1183.8981. Time: 146.7266 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #36: GFLOPs: 1226.4826. Time: 141.6321 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #37: GFLOPs: 3534.1251. Time: 49.1520 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #38: GFLOPs: 1685.6855. Time: 103.0497 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #39: GFLOPs: 2245.7602. Time: 77.3499 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #40: GFLOPs: 505.1293. Time: 343.8908 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #41: GFLOPs: 3164.7190. Time: 54.8893 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #42: GFLOPs: 1752.3625. Time: 99.1286 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #43: GFLOPs: 167.3129. Time: 1038.2303 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #44: GFLOPs: 1445.6992. Time: 120.1559 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #45: GFLOPs: 79.1021. Time: 2196.0126 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #46: GFLOPs: 3547.2803. Time: 48.9697 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #47: GFLOPs: 2943.2410. Time: 59.0197 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #48: GFLOPs: 25.1219. Time: 6914.6561 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #49: GFLOPs: 1262.7354. Time: 137.5659 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #50: GFLOPs: 1114.7627. Time: 155.8263 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #51: GFLOPs: 2527.3279. Time: 68.7324 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #52: GFLOPs: 704.9269. Time: 246.4218 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #53: GFLOPs: 722.3967. Time: 240.4625 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #54: GFLOPs: 26.4386. Time: 6570.2826 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #55: GFLOPs: 4432.1856. Time: 39.1927 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #56: GFLOPs: 1133.2385. Time: 153.2858 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #57: GFLOPs: 31.1047. Time: 5584.6684 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #58: GFLOPs: 144.4181. Time: 1202.8221 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #59: GFLOPs: 1646.9509. Time: 105.4733 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #60: GFLOPs: 23.3981. Time: 7424.0662 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #61: GFLOPs: 2329.5907. Time: 74.5665 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #62: GFLOPs: 204.7812. Time: 848.2678 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #63: GFLOPs: 419.6904. Time: 413.8987 us. Best GFLOPs: 5706.9072
2024-03-21 09:11:29 [INFO] [task_scheduler.cc:131] [Task #129: fused_nn_conv2d_add_nn_relu_63] Trial #64: GFLOPs: 1350.3396. Time: 128.6412 us. Best GFLOPs: 5706.9072
