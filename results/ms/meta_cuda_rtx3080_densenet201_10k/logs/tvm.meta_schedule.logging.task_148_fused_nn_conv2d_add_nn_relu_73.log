2024-03-21 13:42:30 [INFO] [task_scheduler.cc:160] Initializing Task #148: "fused_nn_conv2d_add_nn_relu_73"
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(448), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(448), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(448), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(448), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(448), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(448), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(224), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(196)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(448), rc_0 * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(64)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(448), rc_0 * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(448), rc_0 * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[224, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(448), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(448), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(224), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(196)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(64)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[224, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(448), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(448), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(224), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(196)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(64)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[224, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 15:02:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:02:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 15:02:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f4e5cd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f9368648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0dddb98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f589a018)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f73cbf58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f97c3468)]: 484 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3402408)]: 0 failure(s)
2024-03-21 15:02:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f4e5cd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f9368648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0dddb98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f589a018)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f73cbf58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f97c3468)]: 978 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3402408)]: 0 failure(s)
2024-03-21 15:02:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f4e5cd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f9368648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0dddb98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f589a018)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f73cbf58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f97c3468)]: 1462 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3402408)]: 0 failure(s)
2024-03-21 15:02:35 [INFO] [evolutionary_search.cc:723] Sampled 74 candidate(s)
2024-03-21 15:02:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f4e5cd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f9368648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0dddb98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f589a018)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f73cbf58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f97c3468)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3402408)]: 0 failure(s)
2024-03-21 15:02:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f4e5cd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f9368648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0dddb98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f589a018)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f73cbf58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f97c3468)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3402408)]: 0 failure(s)
2024-03-21 15:02:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f4e5cd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f9368648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0dddb98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f589a018)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f73cbf58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f97c3468)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3402408)]: 0 failure(s)
2024-03-21 15:02:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f4e5cd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f9368648)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0dddb98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f589a018)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f73cbf58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f97c3468)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3402408)]: 0 failure(s)
2024-03-21 15:02:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9983  0.9979  0.9978  0.9976  0.9967  0.9961  0.9954  0.9949  0.9935  0.9929  0.9918  0.9915  0.9911  0.9900  0.9889  0.9883
[17 : 32]:	0.9883  0.9882  0.9882  0.9873  0.9858  0.9845  0.9844  0.9840  0.9824  0.9821  0.9816  0.9812  0.9806  0.9803  0.9803  0.9792
[33 : 48]:	0.9785  0.9780  0.9779  0.9775  0.9770  0.9749  0.9741  0.9738  0.9731  0.9729  0.9728  0.9725  0.9722  0.9722  0.9718  0.9713
[49 : 64]:	0.9706  0.9685  0.9681  0.9676  0.9673  0.9672  0.9668  0.9664  0.9659  0.9647  0.9643  0.9640  0.9640  0.9637  0.9635  0.9629
2024-03-21 15:02:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:02:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #1: GFLOPs: 142.4003. Time: 158.2091 us. Best GFLOPs: 142.4003
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #2: GFLOPs: 403.9296. Time: 55.7746 us. Best GFLOPs: 403.9296
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #3: GFLOPs: 149.1859. Time: 151.0131 us. Best GFLOPs: 403.9296
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #4: GFLOPs: 56.8465. Time: 396.3132 us. Best GFLOPs: 403.9296
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #5: GFLOPs: 95.0219. Time: 237.0930 us. Best GFLOPs: 403.9296
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #6: GFLOPs: 341.2912. Time: 66.0112 us. Best GFLOPs: 403.9296
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #7: GFLOPs: 1601.4838. Time: 14.0676 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #8: GFLOPs: 288.6061. Time: 78.0615 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #9: GFLOPs: 409.7900. Time: 54.9770 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #10: GFLOPs: 345.7061. Time: 65.1681 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #11: GFLOPs: 12.1143. Time: 1859.6978 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #12: GFLOPs: 1208.8039. Time: 18.6375 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #13: GFLOPs: 364.8241. Time: 61.7531 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #14: GFLOPs: 138.6565. Time: 162.4809 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #15: GFLOPs: 181.0794. Time: 124.4152 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #16: GFLOPs: 155.9816. Time: 144.4339 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #17: GFLOPs: 11.0747. Time: 2034.2764 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #18: GFLOPs: 542.2107. Time: 41.5503 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #19: GFLOPs: 263.7651. Time: 85.4132 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #20: GFLOPs: 565.7109. Time: 39.8243 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #21: GFLOPs: 782.1282. Time: 28.8048 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #22: GFLOPs: 338.4442. Time: 66.5664 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #23: GFLOPs: 169.3626. Time: 133.0224 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #24: GFLOPs: 136.6374. Time: 164.8819 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #25: GFLOPs: 632.0976. Time: 35.6417 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #26: GFLOPs: 526.6509. Time: 42.7779 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #27: GFLOPs: 51.0030. Time: 441.7200 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #28: GFLOPs: 134.9978. Time: 166.8844 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #29: GFLOPs: 21.5689. Time: 1044.5120 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #30: GFLOPs: 133.8434. Time: 168.3238 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #31: GFLOPs: 95.7034. Time: 235.4047 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #32: GFLOPs: 129.1996. Time: 174.3738 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #33: GFLOPs: 158.2171. Time: 142.3931 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #34: GFLOPs: 93.7172. Time: 240.3936 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #35: GFLOPs: 651.3141. Time: 34.5901 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #36: GFLOPs: 162.2428. Time: 138.8599 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #37: GFLOPs: 24.3931. Time: 923.5822 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #38: GFLOPs: 169.0331. Time: 133.2817 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #39: GFLOPs: 136.4668. Time: 165.0879 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #40: GFLOPs: 437.7567. Time: 51.4647 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #41: GFLOPs: 93.7005. Time: 240.4364 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #42: GFLOPs: 1465.8881. Time: 15.3689 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #43: GFLOPs: 719.6252. Time: 31.3066 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #44: GFLOPs: 56.5481. Time: 398.4048 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #45: GFLOPs: 846.9582. Time: 26.5999 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #46: GFLOPs: 1465.0475. Time: 15.3777 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #47: GFLOPs: 164.2808. Time: 137.1373 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #48: GFLOPs: 1328.6851. Time: 16.9559 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #49: GFLOPs: 264.5821. Time: 85.1495 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #50: GFLOPs: 12.7740. Time: 1763.6693 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #51: GFLOPs: 141.5995. Time: 159.1038 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #52: GFLOPs: 94.4224. Time: 238.5982 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #53: GFLOPs: 92.9786. Time: 242.3034 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #54: GFLOPs: 599.3674. Time: 37.5880 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #55: GFLOPs: 689.6700. Time: 32.6664 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #56: GFLOPs: 476.2889. Time: 47.3012 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #57: GFLOPs: 1432.5116. Time: 15.7269 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #58: GFLOPs: 498.9397. Time: 45.1538 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #59: GFLOPs: 323.0943. Time: 69.7289 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #60: GFLOPs: 294.3940. Time: 76.5268 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #61: GFLOPs: 290.4164. Time: 77.5749 us. Best GFLOPs: 1601.4838
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #62: GFLOPs: 1803.1109. Time: 12.4945 us. Best GFLOPs: 1803.1109
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #63: GFLOPs: 24.2060. Time: 930.7212 us. Best GFLOPs: 1803.1109
2024-03-21 15:49:22 [INFO] [task_scheduler.cc:131] [Task #148: fused_nn_conv2d_add_nn_relu_73] Trial #64: GFLOPs: 522.2496. Time: 43.1384 us. Best GFLOPs: 1803.1109
