2024-03-20 22:52:37 [INFO] [task_scheduler.cc:160] Initializing Task #135: "fused_nn_global_avg_pool2d"
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(1024), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1024), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(1024), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1024), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(512)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-03-21 00:09:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 00:09:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 00:09:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44bc388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a6a55b68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37c0528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f88aff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a27c0ed8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a33906f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6a55c68)]: 0 failure(s)
2024-03-21 00:09:33 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-21 00:09:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44bc388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a6a55b68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37c0528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f88aff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a27c0ed8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a33906f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6a55c68)]: 0 failure(s)
2024-03-21 00:09:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44bc388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a6a55b68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37c0528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f88aff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a27c0ed8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a33906f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6a55c68)]: 0 failure(s)
2024-03-21 00:09:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44bc388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a6a55b68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37c0528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f88aff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a27c0ed8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a33906f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6a55c68)]: 0 failure(s)
2024-03-21 00:09:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44bc388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a6a55b68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37c0528)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299f88aff8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a27c0ed8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a33906f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a6a55c68)]: 0 failure(s)
2024-03-21 00:09:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9894  0.9854  0.9748  0.9705  0.9690  0.9666  0.9617  0.9616  0.9480  0.9425  0.9345  0.9284  0.9218  0.9200  0.9190  0.9145
[17 : 32]:	0.9081  0.9080  0.9071  0.9051  0.8893  0.8884  0.8882  0.8863  0.8855  0.8779  0.8776  0.8739  0.8730  0.8725  0.8673  0.8658
[33 : 48]:	0.8602  0.8556  0.8490  0.8421  0.8406  0.8323  0.8312  0.8274  0.8199  0.8192  0.8130  0.8098  0.8056  0.7949  0.7937  0.7905
[49 : 64]:	0.7895  0.7878  0.7873  0.7847  0.7798  0.7795  0.7722  0.7666  0.7647  0.7600  0.7588  0.7582  0.7579  0.7509  0.7335  0.7224
2024-03-21 00:09:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:09:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 9.8449. Time: 5.2007 us. Best GFLOPs: 9.8449
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 11.5675. Time: 4.4262 us. Best GFLOPs: 11.5675
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 11.4290. Time: 4.4798 us. Best GFLOPs: 11.5675
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 11.4733. Time: 4.4625 us. Best GFLOPs: 11.5675
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 11.4862. Time: 4.4575 us. Best GFLOPs: 11.5675
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 11.5824. Time: 4.4205 us. Best GFLOPs: 11.5824
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 21.1911. Time: 2.4161 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 11.4174. Time: 4.4844 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 14.9799. Time: 3.4179 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 9.8583. Time: 5.1936 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 9.8580. Time: 5.1937 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 11.4460. Time: 4.4732 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 6.9706. Time: 7.3451 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 3.3357. Time: 15.3493 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 6.9698. Time: 7.3460 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 11.4362. Time: 4.4770 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 19.6962. Time: 2.5995 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 3.3370. Time: 15.3433 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 11.4302. Time: 4.4794 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 11.5717. Time: 4.4246 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 11.4201. Time: 4.4833 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 9.8569. Time: 5.1943 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 3.3439. Time: 15.3117 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 11.5041. Time: 4.4506 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 9.8565. Time: 5.1945 us. Best GFLOPs: 21.1911
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 22.1154. Time: 2.3151 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 11.5726. Time: 4.4242 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 19.6984. Time: 2.5992 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 19.6977. Time: 2.5993 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 11.5583. Time: 4.4297 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 6.9788. Time: 7.3365 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 6.9695. Time: 7.3463 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 11.4217. Time: 4.4827 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 11.6088. Time: 4.4104 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 11.5946. Time: 4.4159 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 9.8581. Time: 5.1937 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 11.5355. Time: 4.4385 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 11.4549. Time: 4.4697 us. Best GFLOPs: 22.1154
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 22.1377. Time: 2.3128 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 3.3365. Time: 15.3454 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 11.4242. Time: 4.4817 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 6.9794. Time: 7.3359 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 11.4870. Time: 4.4572 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 19.6975. Time: 2.5993 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 3.3427. Time: 15.3171 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 3.3426. Time: 15.3173 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 6.9748. Time: 7.3408 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 11.4948. Time: 4.4542 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 6.9759. Time: 7.3395 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 3.3361. Time: 15.3474 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 3.3355. Time: 15.3502 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 3.3414. Time: 15.3231 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 3.3357. Time: 15.3493 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 9.8593. Time: 5.1931 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 3.3363. Time: 15.3464 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 22.1229. Time: 2.3143 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 14.9781. Time: 3.4183 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 11.4351. Time: 4.4774 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 11.4334. Time: 4.4781 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 11.4789. Time: 4.4604 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 11.5770. Time: 4.4226 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 11.5947. Time: 4.4158 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 11.5234. Time: 4.4431 us. Best GFLOPs: 22.1377
2024-03-21 00:13:28 [INFO] [task_scheduler.cc:131] [Task #135: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 21.0723. Time: 2.4297 us. Best GFLOPs: 22.1377
