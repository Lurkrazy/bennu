2024-03-21 13:42:31 [INFO] [task_scheduler.cc:160] Initializing Task #165: "fused_nn_conv2d_add_nn_relu_81"
2024-03-21 13:42:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(448), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(448), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(448), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(448), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(448), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(448), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6272)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(448), rc_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v1 = T.axis.spatial(T.int64(448), rc_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(448), rc_0 * T.int64(56) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 16, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 28, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(448), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(448), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6272)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(56) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v1 = T.axis.spatial(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(56) + ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(56) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 16, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 28, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(448), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(448), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(448), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6272)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(56) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(56))
                                    v1 = T.axis.spatial(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(56) + ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(448), rc_0_ry_0_rx_0_fused * T.int64(56) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 16, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 14, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 28, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 15:12:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:12:04 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 15:12:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9bbfd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d7338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2fd1168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f79e54e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f6d20c98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2fa729028)]: 492 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f42d7298)]: 0 failure(s)
2024-03-21 15:12:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9bbfd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d7338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2fd1168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f79e54e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f6d20c98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2fa729028)]: 980 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f42d7298)]: 0 failure(s)
2024-03-21 15:12:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9bbfd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d7338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2fd1168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f79e54e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f6d20c98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2fa729028)]: 1474 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f42d7298)]: 0 failure(s)
2024-03-21 15:12:07 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-03-21 15:12:08 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9bbfd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d7338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2fd1168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f79e54e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f6d20c98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2fa729028)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f42d7298)]: 0 failure(s)
2024-03-21 15:12:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9bbfd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d7338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2fd1168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f79e54e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f6d20c98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2fa729028)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f42d7298)]: 0 failure(s)
2024-03-21 15:12:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9bbfd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d7338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2fd1168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f79e54e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f6d20c98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2fa729028)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f42d7298)]: 0 failure(s)
2024-03-21 15:12:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2e9bbfd58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f42d7338)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f2fd1168)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f79e54e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f6d20c98)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2fa729028)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f42d7298)]: 0 failure(s)
2024-03-21 15:12:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9986  0.9981  0.9981  0.9980  0.9976  0.9972  0.9971  0.9961  0.9956  0.9952  0.9951  0.9948  0.9944  0.9944  0.9936  0.9922
[17 : 32]:	0.9918  0.9909  0.9905  0.9902  0.9900  0.9900  0.9897  0.9881  0.9879  0.9867  0.9857  0.9849  0.9843  0.9841  0.9837  0.9830
[33 : 48]:	0.9810  0.9804  0.9802  0.9789  0.9787  0.9782  0.9773  0.9759  0.9752  0.9751  0.9751  0.9733  0.9725  0.9721  0.9719  0.9716
[49 : 64]:	0.9714  0.9713  0.9711  0.9710  0.9701  0.9678  0.9678  0.9669  0.9666  0.9662  0.9653  0.9641  0.9632  0.9629  0.9622  0.9611
2024-03-21 15:12:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:12:13 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #1: GFLOPs: 2168.5492. Time: 41.5559 us. Best GFLOPs: 2168.5492
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #2: GFLOPs: 2830.0402. Time: 31.8427 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #3: GFLOPs: 537.2259. Time: 167.7434 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #4: GFLOPs: 910.6846. Time: 98.9542 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #5: GFLOPs: 1357.1458. Time: 66.4012 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #6: GFLOPs: 806.8658. Time: 111.6866 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #7: GFLOPs: 1760.1389. Time: 51.1983 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #8: GFLOPs: 92.3781. Time: 975.5141 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #9: GFLOPs: 705.6379. Time: 127.7087 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #10: GFLOPs: 1396.5390. Time: 64.5282 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #11: GFLOPs: 1728.5697. Time: 52.1333 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #12: GFLOPs: 521.2733. Time: 172.8769 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #13: GFLOPs: 59.7816. Time: 1507.4226 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #14: GFLOPs: 1135.1090. Time: 79.3898 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #15: GFLOPs: 159.4520. Time: 565.1612 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #16: GFLOPs: 939.7998. Time: 95.8886 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #17: GFLOPs: 238.1350. Time: 378.4244 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #18: GFLOPs: 51.9219. Time: 1735.6094 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #19: GFLOPs: 2156.7698. Time: 41.7829 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #20: GFLOPs: 1762.0129. Time: 51.1438 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #21: GFLOPs: 2802.5240. Time: 32.1553 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #22: GFLOPs: 319.5943. Time: 281.9703 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #23: GFLOPs: 1921.4278. Time: 46.9006 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #24: GFLOPs: 1822.2151. Time: 49.4541 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #25: GFLOPs: 564.3400. Time: 159.6841 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #26: GFLOPs: 1205.2236. Time: 74.7713 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #27: GFLOPs: 61.7848. Time: 1458.5475 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #28: GFLOPs: 125.2027. Time: 719.7615 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #29: GFLOPs: 2425.7359. Time: 37.1500 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #30: GFLOPs: 1727.5077. Time: 52.1654 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #31: GFLOPs: 1142.1663. Time: 78.8993 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #32: GFLOPs: 2498.9351. Time: 36.0618 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #33: GFLOPs: 426.6856. Time: 211.2002 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #34: GFLOPs: 1858.0947. Time: 48.4992 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #35: GFLOPs: 630.4152. Time: 142.9472 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #36: GFLOPs: 324.3294. Time: 277.8536 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #37: GFLOPs: 1648.1474. Time: 54.6772 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #38: GFLOPs: 891.5305. Time: 101.0802 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #39: GFLOPs: 611.8469. Time: 147.2854 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #40: GFLOPs: 1319.6222. Time: 68.2893 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #41: GFLOPs: 2152.5185. Time: 41.8654 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #42: GFLOPs: 1161.1548. Time: 77.6090 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #43: GFLOPs: 92.5413. Time: 973.7934 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #44: GFLOPs: 1594.8280. Time: 56.5052 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #45: GFLOPs: 24.0049. Time: 3754.0670 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #46: GFLOPs: 2556.0992. Time: 35.2553 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #47: GFLOPs: 676.1717. Time: 133.2740 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #48: GFLOPs: 591.9212. Time: 152.2434 us. Best GFLOPs: 2830.0402
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #49: GFLOPs: 2905.1463. Time: 31.0195 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #50: GFLOPs: 26.1011. Time: 3452.5749 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #51: GFLOPs: 17.9448. Time: 5021.8494 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #52: GFLOPs: 954.9965. Time: 94.3627 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #53: GFLOPs: 1005.2037. Time: 89.6496 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #54: GFLOPs: 13.7309. Time: 6563.0078 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #55: GFLOPs: 907.7393. Time: 99.2753 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #56: GFLOPs: 479.9812. Time: 187.7492 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #57: GFLOPs: 24.8764. Time: 3622.5542 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #58: GFLOPs: 1578.5241. Time: 57.0888 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #59: GFLOPs: 1221.7907. Time: 73.7574 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #60: GFLOPs: 1367.4468. Time: 65.9010 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #61: GFLOPs: 472.4446. Time: 190.7443 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #62: GFLOPs: 11.0053. Time: 8188.4554 us. Best GFLOPs: 2905.1463
2024-03-21 15:49:46 [INFO] [task_scheduler.cc:131] [Task #165: fused_nn_conv2d_add_nn_relu_81] Trial #63: GFLOPs: 462.8689. Time: 194.6903 us. Best GFLOPs: 2905.1463
