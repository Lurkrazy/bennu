2024-03-21 19:46:25 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_nn_conv2d_add_add_3"
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(576), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(96), T.int64(14), T.int64(14), T.int64(576), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(14), T.int64(14)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, v_ax1, v_ax2, v_ax3]
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(9), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12544)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(576), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0 * T.int64(64) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                                T.writes(T_add[v0, v1, v2, v3])
                                T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 3, 1, 32, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[9, 32, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12544)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                                T.writes(T_add[v0, v1, v2, v3])
                                T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 3, 1, 32, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[9, 32, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12544)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(14), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                                T.writes(T_add[v0, v1, v2, v3])
                                T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 3, 1, 32, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[9, 32, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 20:11:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:11:40 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 20:11:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 487 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:11:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 982 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:11:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 1462 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:11:42 [INFO] [evolutionary_search.cc:723] Sampled 74 candidate(s)
2024-03-21 20:11:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:11:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:11:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:11:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:11:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9994  0.9993  0.9991  0.9979  0.9970  0.9967  0.9944  0.9943  0.9932  0.9931  0.9914  0.9914  0.9907  0.9906  0.9898
[17 : 32]:	0.9881  0.9860  0.9854  0.9846  0.9842  0.9840  0.9825  0.9817  0.9810  0.9796  0.9794  0.9783  0.9780  0.9778  0.9778  0.9772
[33 : 48]:	0.9761  0.9752  0.9747  0.9741  0.9741  0.9736  0.9714  0.9702  0.9695  0.9693  0.9687  0.9685  0.9677  0.9677  0.9673  0.9665
[49 : 64]:	0.9663  0.9650  0.9648  0.9646  0.9637  0.9631  0.9631  0.9628  0.9623  0.9618  0.9609  0.9597  0.9595  0.9586  0.9578  0.9573
2024-03-21 20:11:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:11:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #1: GFLOPs: 214.8019. Time: 101.0869 us. Best GFLOPs: 214.8019
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #2: GFLOPs: 28.8940. Time: 751.4937 us. Best GFLOPs: 214.8019
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #3: GFLOPs: 131.5660. Time: 165.0400 us. Best GFLOPs: 214.8019
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #4: GFLOPs: 292.0992. Time: 74.3366 us. Best GFLOPs: 292.0992
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #5: GFLOPs: 987.3705. Time: 21.9914 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #6: GFLOPs: 95.3932. Time: 227.6228 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #7: GFLOPs: 493.0052. Time: 44.0435 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #8: GFLOPs: 327.0908. Time: 66.3842 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #9: GFLOPs: 111.9048. Time: 194.0369 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #10: GFLOPs: 233.9366. Time: 92.8186 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #11: GFLOPs: 757.1816. Time: 28.6770 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #12: GFLOPs: 297.4906. Time: 72.9894 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #13: GFLOPs: 651.9418. Time: 33.3061 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #14: GFLOPs: 103.6822. Time: 209.4252 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_add_3] Trial #15: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  407: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  406: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  405: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  404: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  403: tvm::transform::Pass::operator()(tvm::IRModule) const
  402: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  401: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  400: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  399: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  398: _ZN3tvm7runtime13PackedFuncObj
  397: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  396: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  395: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  394: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  393: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  392: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  391: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  390: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  389: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  388: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  387: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  386: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  385: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  384: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  383: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  382: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  381: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  380: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  379: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  378: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  377: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  376: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  375: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  374: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  373: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  372: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  371: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  370: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  369: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  368: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  367: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  366: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  365: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  364: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  363: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  362: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  361: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  360: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  359: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  358: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  357: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  356: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  355: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  354: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  353: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  352: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  351: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  350: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  349: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  348: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  347: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  346: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  345: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  344: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  343: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  342: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  341: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  340: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  339: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  338: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  337: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  336: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  335: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  334: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  333: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  332: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  331: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  330: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  329: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  328: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  327: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  326: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  325: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  324: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  323: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  322: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  321: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  320: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  319: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  318: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  317: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  316: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  315: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  314: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  313: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  312: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  311: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  310: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  309: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  308: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  307: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  306: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  305: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  304: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  303: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  302: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  301: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  300: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  299: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  298: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  297: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  296: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  295: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  294: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  293: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  292: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  291: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  290: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  289: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  288: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  287: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  286: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  285: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  284: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  283: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  282: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  281: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  280: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  279: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  278: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  277: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  276: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  275: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  274: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  273: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  272: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  271: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  270: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  269: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  268: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  267: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  266: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  265: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  264: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  263: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  262: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  261: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  260: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  259: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  258: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  257: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  256: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  255: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  254: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  253: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  252: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  251: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  250: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  249: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  248: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  247: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  246: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  245: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  244: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  243: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  242: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  241: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  240: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  239: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  238: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  237: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  236: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  235: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  234: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  233: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  232: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  231: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  230: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  229: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  228: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  227: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  226: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  225: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  224: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  223: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  222: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  221: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  220: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  219: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  218: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  217: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  216: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  215: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  214: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  213: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  212: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  211: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  210: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  209: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  208: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  207: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  206: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  205: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  204: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  203: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  202: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  201: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  200: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  199: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  198: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  197: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  196: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  195: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  194: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  193: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  192: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  191: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  190: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  189: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  188: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  187: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  186: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  185: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  184: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  183: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  182: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  181: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  180: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  179: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  178: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  177: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  176: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  175: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  174: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  173: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  172: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  171: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  170: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  169: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  168: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  167: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  166: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  165: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  164: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  163: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  162: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  161: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  160: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  159: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  158: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  157: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  156: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  155: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  154: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  151: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  150: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  149: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  148: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  147: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  146: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  145: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  144: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  143: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  142: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  141: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  140: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  139: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  138: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  137: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  136: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  135: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  134: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  133: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  132: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  131: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  130: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  129: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  128: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  127: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  126: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  125: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  124: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  123: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  122: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  120: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  119: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  118: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  117: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  116: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  115: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  114: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  113: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  112: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  111: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  110: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  109: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  108: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  107: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  106: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  105: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  104: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  103: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  102: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  101: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  100: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  99: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  98: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  97: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  96: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  95: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  94: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  93: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  92: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  89: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  86: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  85: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  84: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  83: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  82: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  81: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  80: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  79: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  78: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  77: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  76: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  75: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  74: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  73: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  72: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  71: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  70: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  69: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  68: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  67: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  66: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  65: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  64: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  63: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  62: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  61: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  60: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  59: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  58: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  57: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  56: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  55: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  54: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  53: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  52: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  51: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  50: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  49: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  48: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  47: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  46: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  45: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  44: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  43: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  42: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  41: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  40: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  39: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  38: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  37: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  36: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  35: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  34: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  33: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  30: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  29: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  28: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  27: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  26: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  25: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  24: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  23: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  22: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  21: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  20: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  19: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  18: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  17: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  16: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  15: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  14: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  13: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  12: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  11: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  10: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  9: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  8: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  7: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  6: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  5: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  4: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  3: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS2_EE10InitVTableEvENUlRKNS_7ru
  2: tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  1: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  0: tvm::tir::APIType(tvm::runtime::DataType)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/ir_utils.h", line 157
InternalError: Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(48), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28) // T.int64(2))
                                        v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(336))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 12, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[48, 6, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 48, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 48, 3], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #16: GFLOPs: 513.5160. Time: 42.2843 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #17: GFLOPs: 223.6226. Time: 97.0996 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #18: GFLOPs: 121.3060. Time: 178.9991 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #19: GFLOPs: 310.9357. Time: 69.8333 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #20: GFLOPs: 31.0271. Time: 699.8288 us. Best GFLOPs: 987.3705
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #21: GFLOPs: 1142.4000. Time: 19.0071 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #22: GFLOPs: 281.8854. Time: 77.0301 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #23: GFLOPs: 205.1849. Time: 105.8249 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #24: GFLOPs: 423.1882. Time: 51.3097 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #25: GFLOPs: 33.9453. Time: 639.6668 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #26: GFLOPs: 362.6724. Time: 59.8713 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #27: GFLOPs: 31.3866. Time: 691.8135 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #28: GFLOPs: 320.2134. Time: 67.8100 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #29: GFLOPs: 29.5122. Time: 735.7515 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #30: GFLOPs: 389.8073. Time: 55.7036 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #31: GFLOPs: 256.6184. Time: 84.6146 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #32: GFLOPs: 66.8087. Time: 325.0126 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #33: GFLOPs: 183.6854. Time: 118.2112 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #34: GFLOPs: 296.4416. Time: 73.2477 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #35: GFLOPs: 248.4096. Time: 87.4107 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #36: GFLOPs: 228.1575. Time: 95.1696 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #37: GFLOPs: 61.9645. Time: 350.4212 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #38: GFLOPs: 216.4553. Time: 100.3148 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #39: GFLOPs: 160.6543. Time: 135.1577 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #40: GFLOPs: 222.4270. Time: 97.6215 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #41: GFLOPs: 282.9714. Time: 76.7345 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #42: GFLOPs: 120.1452. Time: 180.7285 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #43: GFLOPs: 10.2014. Time: 2128.5032 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #44: GFLOPs: 28.0112. Time: 775.1766 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #45: GFLOPs: 169.2746. Time: 128.2748 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #46: GFLOPs: 945.8684. Time: 22.9563 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #47: GFLOPs: 25.3133. Time: 857.7969 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #48: GFLOPs: 343.3648. Time: 63.2379 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #49: GFLOPs: 198.5047. Time: 109.3861 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #50: GFLOPs: 393.4011. Time: 55.1947 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #51: GFLOPs: 270.6763. Time: 80.2200 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #52: GFLOPs: 15.1927. Time: 1429.2155 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #53: GFLOPs: 520.1322. Time: 41.7464 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #54: GFLOPs: 602.4652. Time: 36.0414 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #55: GFLOPs: 23.0258. Time: 943.0141 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #56: GFLOPs: 338.9963. Time: 64.0528 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #57: GFLOPs: 784.3034. Time: 27.6853 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #58: GFLOPs: 97.3711. Time: 222.9991 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #59: GFLOPs: 175.7930. Time: 123.5183 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #60: GFLOPs: 79.5424. Time: 272.9823 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #61: GFLOPs: 347.7419. Time: 62.4419 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #62: GFLOPs: 523.7098. Time: 41.4613 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #63: GFLOPs: 743.3016. Time: 29.2125 us. Best GFLOPs: 1142.4000
2024-03-21 20:21:59 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #64: GFLOPs: 282.5482. Time: 76.8494 us. Best GFLOPs: 1142.4000
2024-03-21 20:25:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:25:40 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-03-21 20:25:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 435 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:25:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 863 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:25:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 1294 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:25:42 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 20:25:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:25:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:25:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 147 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:25:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:25:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9653  0.9516  0.9496  0.9484  0.9458  0.9435  0.9419  0.9418  0.9407  0.9362  0.9319  0.9230  0.9065  0.9060  0.9058  0.9051
[17 : 32]:	0.9047  0.9045  0.9027  0.9021  0.8923  0.8807  0.8799  0.8717  0.8704  0.8685  0.8684  0.8657  0.8628  0.8576  0.8574  0.8548
[33 : 48]:	0.8540  0.8476  0.8471  0.8453  0.8445  0.8441  0.8399  0.8394  0.8394  0.8357  0.8318  0.8318  0.8318  0.8279  0.8257  0.8256
[49 : 64]:	0.8251  0.8250  0.8233  0.8203  0.8198  0.8193  0.8176  0.8132  0.8129  0.8117  0.8105  0.8099  0.8056  0.8032  0.8016  0.7994
2024-03-21 20:25:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:25:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #65: GFLOPs: 1632.5845. Time: 13.3002 us. Best GFLOPs: 1632.5845
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #66: GFLOPs: 1176.6268. Time: 18.4542 us. Best GFLOPs: 1632.5845
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #67: GFLOPs: 1173.6624. Time: 18.5008 us. Best GFLOPs: 1632.5845
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #68: GFLOPs: 1197.2227. Time: 18.1367 us. Best GFLOPs: 1632.5845
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #69: GFLOPs: 1603.4896. Time: 13.5415 us. Best GFLOPs: 1632.5845
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #70: GFLOPs: 1589.3184. Time: 13.6622 us. Best GFLOPs: 1632.5845
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #71: GFLOPs: 1071.2505. Time: 20.2695 us. Best GFLOPs: 1632.5845
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #72: GFLOPs: 1109.2180. Time: 19.5756 us. Best GFLOPs: 1632.5845
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #73: GFLOPs: 1113.2676. Time: 19.5044 us. Best GFLOPs: 1632.5845
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #74: GFLOPs: 1515.8379. Time: 14.3245 us. Best GFLOPs: 1632.5845
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #75: GFLOPs: 1918.0527. Time: 11.3207 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #76: GFLOPs: 1168.6471. Time: 18.5802 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #77: GFLOPs: 1015.8809. Time: 21.3742 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #78: GFLOPs: 1132.6068. Time: 19.1714 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #79: GFLOPs: 1125.7596. Time: 19.2880 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #80: GFLOPs: 1177.2316. Time: 18.4447 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #81: GFLOPs: 1132.9785. Time: 19.1651 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #82: GFLOPs: 1122.1850. Time: 19.3495 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #83: GFLOPs: 1168.0940. Time: 18.5890 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #84: GFLOPs: 1124.5020. Time: 19.3096 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #85: GFLOPs: 1079.9216. Time: 20.1067 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #86: GFLOPs: 1085.9451. Time: 19.9952 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #87: GFLOPs: 1135.7893. Time: 19.1177 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #88: GFLOPs: 1042.3335. Time: 20.8318 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #89: GFLOPs: 1077.6621. Time: 20.1489 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #90: GFLOPs: 1180.7627. Time: 18.3895 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #91: GFLOPs: 1134.1511. Time: 19.1453 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #92: GFLOPs: 1241.7209. Time: 17.4868 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #93: GFLOPs: 1254.7113. Time: 17.3057 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #94: GFLOPs: 1121.8759. Time: 19.3548 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #95: GFLOPs: 1155.8000. Time: 18.7867 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #96: GFLOPs: 1262.7637. Time: 17.1953 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #97: GFLOPs: 1149.9668. Time: 18.8820 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #98: GFLOPs: 1177.1776. Time: 18.4455 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #99: GFLOPs: 1140.7609. Time: 19.0344 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #100: GFLOPs: 1111.8258. Time: 19.5297 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #101: GFLOPs: 1404.0849. Time: 15.4646 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #102: GFLOPs: 955.1510. Time: 22.7332 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #103: GFLOPs: 599.4290. Time: 36.2239 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #104: GFLOPs: 599.5072. Time: 36.2192 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #105: GFLOPs: 941.7628. Time: 23.0564 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #106: GFLOPs: 1115.0366. Time: 19.4735 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #107: GFLOPs: 781.0358. Time: 27.8011 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #108: GFLOPs: 952.0626. Time: 22.8070 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #109: GFLOPs: 532.8226. Time: 40.7521 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #110: GFLOPs: 1218.4255. Time: 17.8211 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #111: GFLOPs: 1062.0513. Time: 20.4450 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #112: GFLOPs: 431.0943. Time: 50.3687 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #113: GFLOPs: 434.6005. Time: 49.9623 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #114: GFLOPs: 1092.1005. Time: 19.8825 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #115: GFLOPs: 1070.7184. Time: 20.2795 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #116: GFLOPs: 1277.0120. Time: 17.0035 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #117: GFLOPs: 694.4811. Time: 31.2660 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #118: GFLOPs: 696.5832. Time: 31.1717 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #119: GFLOPs: 946.5504. Time: 22.9398 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #120: GFLOPs: 1081.8087. Time: 20.0716 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #121: GFLOPs: 1284.9274. Time: 16.8987 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #122: GFLOPs: 604.1592. Time: 35.9403 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #123: GFLOPs: 1248.9618. Time: 17.3854 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #124: GFLOPs: 1272.6804. Time: 17.0614 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #125: GFLOPs: 1024.1732. Time: 21.2012 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #126: GFLOPs: 642.3805. Time: 33.8019 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #127: GFLOPs: 17.7937. Time: 1220.2988 us. Best GFLOPs: 1918.0527
2024-03-21 20:26:36 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #128: GFLOPs: 127.6149. Time: 170.1500 us. Best GFLOPs: 1918.0527
2024-03-21 20:57:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:57:40 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 20:57:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:57:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 777 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:57:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 1168 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:57:41 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-03-21 20:57:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:57:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 118 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:57:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:57:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 145 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 20:57:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9817  0.9715  0.9710  0.9658  0.9658  0.9634  0.9631  0.9607  0.9584  0.9584  0.9578  0.9526  0.9524  0.9516  0.9511  0.9509
[17 : 32]:	0.9502  0.9475  0.9470  0.9466  0.9422  0.9390  0.9390  0.9388  0.9384  0.9332  0.9317  0.9315  0.9248  0.9198  0.9130  0.9013
[33 : 48]:	0.8829  0.8760  0.8759  0.8725  0.8706  0.8696  0.8678  0.8621  0.8588  0.8588  0.8563  0.8540  0.8520  0.8514  0.8512  0.8505
[49 : 64]:	0.8503  0.8493  0.8486  0.8473  0.8473  0.8473  0.8456  0.8447  0.8444  0.8437  0.8397  0.8374  0.8369  0.8351  0.8341  0.8341
2024-03-21 20:57:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:57:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #129: GFLOPs: 1765.0372. Time: 12.3021 us. Best GFLOPs: 1918.0527
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #130: GFLOPs: 1975.5732. Time: 10.9911 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #131: GFLOPs: 1922.2879. Time: 11.2957 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #132: GFLOPs: 1833.9093. Time: 11.8401 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #133: GFLOPs: 1833.7436. Time: 11.8412 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #134: GFLOPs: 1823.4807. Time: 11.9078 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #135: GFLOPs: 1833.3348. Time: 11.8438 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #136: GFLOPs: 1813.5984. Time: 11.9727 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #137: GFLOPs: 1874.2554. Time: 11.5852 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #138: GFLOPs: 1873.9002. Time: 11.5874 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #139: GFLOPs: 1860.9767. Time: 11.6679 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #140: GFLOPs: 1806.8736. Time: 12.0173 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #141: GFLOPs: 1898.8443. Time: 11.4352 us. Best GFLOPs: 1975.5732
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #142: GFLOPs: 2006.8700. Time: 10.8197 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #143: GFLOPs: 1433.1937. Time: 15.1505 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #144: GFLOPs: 1822.8759. Time: 11.9118 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #145: GFLOPs: 1803.9374. Time: 12.0368 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #146: GFLOPs: 1803.8879. Time: 12.0371 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #147: GFLOPs: 1755.1029. Time: 12.3717 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #148: GFLOPs: 1783.5936. Time: 12.1741 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #149: GFLOPs: 1831.0771. Time: 11.8584 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #150: GFLOPs: 1822.3559. Time: 11.9152 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #151: GFLOPs: 1822.5241. Time: 11.9141 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #152: GFLOPs: 1868.9451. Time: 11.6181 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #153: GFLOPs: 1824.0838. Time: 11.9039 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #154: GFLOPs: 1728.0169. Time: 12.5657 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #155: GFLOPs: 1783.6922. Time: 12.1734 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #156: GFLOPs: 1761.3528. Time: 12.3278 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #157: GFLOPs: 1796.7429. Time: 12.0850 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #158: GFLOPs: 1570.3123. Time: 13.8276 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #159: GFLOPs: 1675.2505. Time: 12.9614 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #160: GFLOPs: 1392.7292. Time: 15.5907 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #161: GFLOPs: 1376.1377. Time: 15.7787 us. Best GFLOPs: 2006.8700
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #162: GFLOPs: 2103.6894. Time: 10.3217 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #163: GFLOPs: 1671.4248. Time: 12.9911 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #164: GFLOPs: 1605.1428. Time: 13.5276 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #165: GFLOPs: 1812.5059. Time: 11.9799 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #166: GFLOPs: 1768.4552. Time: 12.2783 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #167: GFLOPs: 1580.0757. Time: 13.7422 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #168: GFLOPs: 1910.8242. Time: 11.3635 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #169: GFLOPs: 1593.7103. Time: 13.6246 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #170: GFLOPs: 1582.7915. Time: 13.7186 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #171: GFLOPs: 1580.1736. Time: 13.7413 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #172: GFLOPs: 1898.4330. Time: 11.4377 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #173: GFLOPs: 1473.5098. Time: 14.7360 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #174: GFLOPs: 1848.5304. Time: 11.7464 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #175: GFLOPs: 1897.2692. Time: 11.4447 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #176: GFLOPs: 1621.9403. Time: 13.3875 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #177: GFLOPs: 1643.3573. Time: 13.2130 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #178: GFLOPs: 1809.5671. Time: 11.9994 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #179: GFLOPs: 1595.4356. Time: 13.6099 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #180: GFLOPs: 1971.5060. Time: 11.0137 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #181: GFLOPs: 1957.5401. Time: 11.0923 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #182: GFLOPs: 1864.0589. Time: 11.6486 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #183: GFLOPs: 1904.4446. Time: 11.4016 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #184: GFLOPs: 1514.8245. Time: 14.3341 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #185: GFLOPs: 1512.1489. Time: 14.3595 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #186: GFLOPs: 1721.6706. Time: 12.6120 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #187: GFLOPs: 1652.6065. Time: 13.1390 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #188: GFLOPs: 1335.7839. Time: 16.2554 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #189: GFLOPs: 1580.4165. Time: 13.7392 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #190: GFLOPs: 131.7267. Time: 164.8388 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #191: GFLOPs: 244.3262. Time: 88.8716 us. Best GFLOPs: 2103.6894
2024-03-21 20:58:39 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #192: GFLOPs: 281.9680. Time: 77.0075 us. Best GFLOPs: 2103.6894
2024-03-21 21:27:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 21:27:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 21:27:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 389 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:27:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 770 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:27:03 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-03-21 21:27:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 144 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:27:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 150 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:27:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 190 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:27:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 154 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:27:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9593  0.9527  0.9448  0.9434  0.9425  0.9318  0.9287  0.9261  0.9215  0.9214  0.9175  0.9128  0.9109  0.9084  0.9020  0.9020
[17 : 32]:	0.9020  0.9019  0.9014  0.9013  0.9002  0.8989  0.8981  0.8966  0.8949  0.8940  0.8939  0.8937  0.8924  0.8921  0.8921  0.8903
[33 : 48]:	0.8899  0.8898  0.8892  0.8874  0.8863  0.8860  0.8859  0.8857  0.8851  0.8841  0.8840  0.8839  0.8837  0.8836  0.8836  0.8832
[49 : 64]:	0.8826  0.8826  0.8826  0.8825  0.8811  0.8807  0.8801  0.8800  0.8796  0.8793  0.8779  0.8769  0.8768  0.8768  0.8768  0.8767
2024-03-21 21:27:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 21:27:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_add_3] Trial #193: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(48), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(48) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 3, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 2, 48])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_add_3] Trial #194: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(24)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(12), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(8) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 3, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 12, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_add_3] Trial #195: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(24) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 3, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 4, 24])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_add_3] Trial #196: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(24) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 3, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 4, 24])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_add_3] Trial #197: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(24) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 3, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 4, 24])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_add_3] Trial #198: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(6)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(3) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 3, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 32, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_conv2d_add_add_3] Trial #199: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32"), T_add: T.Buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(576), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(6), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(96))
                                        v1 = T.axis.spatial(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(96))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(576), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(24) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_add[v0, v1, v2, v3])
                            T_add[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3]
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 3, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[6, 4, 24])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #200: GFLOPs: 1662.1540. Time: 13.0636 us. Best GFLOPs: 2103.6894
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #201: GFLOPs: 2109.2797. Time: 10.2944 us. Best GFLOPs: 2109.2797
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #202: GFLOPs: 1875.5313. Time: 11.5773 us. Best GFLOPs: 2109.2797
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #203: GFLOPs: 2139.1196. Time: 10.1507 us. Best GFLOPs: 2139.1196
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #204: GFLOPs: 2116.9826. Time: 10.2569 us. Best GFLOPs: 2139.1196
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #205: GFLOPs: 2144.9689. Time: 10.1231 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #206: GFLOPs: 2033.2766. Time: 10.6791 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #207: GFLOPs: 1978.2162. Time: 10.9764 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #208: GFLOPs: 1978.3232. Time: 10.9758 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #209: GFLOPs: 1978.0472. Time: 10.9773 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #210: GFLOPs: 2008.6103. Time: 10.8103 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #211: GFLOPs: 2133.8516. Time: 10.1758 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #212: GFLOPs: 2008.5542. Time: 10.8106 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #213: GFLOPs: 2093.8920. Time: 10.3700 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #214: GFLOPs: 2042.2617. Time: 10.6322 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #215: GFLOPs: 2012.8904. Time: 10.7873 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #216: GFLOPs: 2111.0267. Time: 10.2858 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #217: GFLOPs: 1905.7552. Time: 11.3937 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #218: GFLOPs: 1914.2035. Time: 11.3434 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #219: GFLOPs: 1939.7839. Time: 11.1939 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #220: GFLOPs: 2007.7800. Time: 10.8148 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #221: GFLOPs: 2012.8641. Time: 10.7874 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #222: GFLOPs: 1865.2836. Time: 11.6409 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #223: GFLOPs: 1905.4925. Time: 11.3953 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #224: GFLOPs: 2012.8664. Time: 10.7874 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #225: GFLOPs: 1977.6377. Time: 10.9796 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #226: GFLOPs: 1996.3663. Time: 10.8766 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #227: GFLOPs: 1951.3817. Time: 11.1273 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #228: GFLOPs: 2070.5939. Time: 10.4867 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #229: GFLOPs: 1894.7840. Time: 11.4597 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #230: GFLOPs: 2063.0200. Time: 10.5252 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #231: GFLOPs: 1861.6184. Time: 11.6639 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #232: GFLOPs: 1928.4901. Time: 11.2594 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #233: GFLOPs: 1980.3411. Time: 10.9646 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #234: GFLOPs: 1874.0185. Time: 11.5867 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #235: GFLOPs: 1907.1488. Time: 11.3854 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #236: GFLOPs: 1894.9197. Time: 11.4589 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #237: GFLOPs: 1868.6884. Time: 11.6197 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #238: GFLOPs: 1996.5736. Time: 10.8755 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #239: GFLOPs: 2006.2683. Time: 10.8229 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #240: GFLOPs: 1967.1291. Time: 11.0383 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #241: GFLOPs: 1784.3667. Time: 12.1688 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #242: GFLOPs: 1784.4237. Time: 12.1684 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #243: GFLOPs: 1815.4192. Time: 11.9607 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #244: GFLOPs: 1716.9704. Time: 12.6465 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #245: GFLOPs: 1916.5532. Time: 11.3295 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #246: GFLOPs: 1804.2553. Time: 12.0347 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #247: GFLOPs: 1908.3278. Time: 11.3784 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #248: GFLOPs: 1896.0349. Time: 11.4521 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #249: GFLOPs: 1869.6055. Time: 11.6140 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #250: GFLOPs: 1908.9399. Time: 11.3747 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #251: GFLOPs: 1869.6585. Time: 11.6137 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #252: GFLOPs: 1822.9874. Time: 11.9110 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #253: GFLOPs: 1772.5705. Time: 12.2498 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #254: GFLOPs: 729.6577. Time: 29.7587 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #255: GFLOPs: 134.2590. Time: 161.7297 us. Best GFLOPs: 2144.9689
2024-03-21 21:28:08 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #256: GFLOPs: 195.4330. Time: 111.1054 us. Best GFLOPs: 2144.9689
2024-03-21 21:32:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 21:32:01 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 21:32:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 383 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:32:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 775 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:32:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 1173 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:32:02 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-03-21 21:32:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 216 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:32:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 159 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:32:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 179 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:32:12 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 168 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 21:32:13 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0028  1.0028  0.9913  0.9848  0.9848  0.9726  0.9700  0.9692  0.9674  0.9656  0.9643  0.9643  0.9620  0.9609  0.9584  0.9579
[17 : 32]:	0.9572  0.9566  0.9552  0.9546  0.9536  0.9528  0.9528  0.9528  0.9514  0.9514  0.9514  0.9513  0.9512  0.9472  0.9463  0.9463
[33 : 48]:	0.9459  0.9443  0.9442  0.9440  0.9428  0.9420  0.9404  0.9401  0.9400  0.9400  0.9386  0.9372  0.9371  0.9370  0.9350  0.9338
[49 : 64]:	0.9327  0.9303  0.9301  0.9300  0.9300  0.9300  0.9300  0.9300  0.9297  0.9294  0.9292  0.9290  0.9287  0.9281  0.9269  0.9257
2024-03-21 21:32:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 21:32:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #257: GFLOPs: 2187.7713. Time: 9.9250 us. Best GFLOPs: 2187.7713
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #258: GFLOPs: 2188.7423. Time: 9.9206 us. Best GFLOPs: 2188.7423
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #259: GFLOPs: 2143.7746. Time: 10.1287 us. Best GFLOPs: 2188.7423
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #260: GFLOPs: 2138.5598. Time: 10.1534 us. Best GFLOPs: 2188.7423
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #261: GFLOPs: 2138.7295. Time: 10.1526 us. Best GFLOPs: 2188.7423
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #262: GFLOPs: 2192.9789. Time: 9.9014 us. Best GFLOPs: 2192.9789
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #263: GFLOPs: 2150.8668. Time: 10.0953 us. Best GFLOPs: 2192.9789
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #264: GFLOPs: 2135.6646. Time: 10.1672 us. Best GFLOPs: 2192.9789
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #265: GFLOPs: 2194.5895. Time: 9.8942 us. Best GFLOPs: 2194.5895
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #266: GFLOPs: 1934.6728. Time: 11.2234 us. Best GFLOPs: 2194.5895
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #267: GFLOPs: 2055.4750. Time: 10.5638 us. Best GFLOPs: 2194.5895
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #268: GFLOPs: 2055.4689. Time: 10.5638 us. Best GFLOPs: 2194.5895
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #269: GFLOPs: 2139.1351. Time: 10.1507 us. Best GFLOPs: 2194.5895
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #270: GFLOPs: 2126.1440. Time: 10.2127 us. Best GFLOPs: 2194.5895
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #271: GFLOPs: 2083.4831. Time: 10.4218 us. Best GFLOPs: 2194.5895
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #272: GFLOPs: 2129.6957. Time: 10.1957 us. Best GFLOPs: 2194.5895
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #273: GFLOPs: 2155.8839. Time: 10.0718 us. Best GFLOPs: 2194.5895
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #274: GFLOPs: 2055.6147. Time: 10.5631 us. Best GFLOPs: 2194.5895
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #275: GFLOPs: 2195.8496. Time: 9.8885 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #276: GFLOPs: 2178.1111. Time: 9.9690 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #277: GFLOPs: 2067.8537. Time: 10.5006 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #278: GFLOPs: 2093.6845. Time: 10.3710 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #279: GFLOPs: 2038.2034. Time: 10.6533 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #280: GFLOPs: 2038.4349. Time: 10.6521 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #281: GFLOPs: 2067.8558. Time: 10.5006 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #282: GFLOPs: 2067.9675. Time: 10.5000 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #283: GFLOPs: 2115.6697. Time: 10.2633 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #284: GFLOPs: 2178.4238. Time: 9.9676 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #285: GFLOPs: 2178.4901. Time: 9.9673 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #286: GFLOPs: 1920.4666. Time: 11.3065 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #287: GFLOPs: 2083.9894. Time: 10.4193 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #288: GFLOPs: 2083.5916. Time: 10.4213 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #289: GFLOPs: 2178.4394. Time: 9.9675 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #290: GFLOPs: 1917.4334. Time: 11.3243 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #291: GFLOPs: 2177.1314. Time: 9.9735 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #292: GFLOPs: 2180.5039. Time: 9.9581 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #293: GFLOPs: 2108.3757. Time: 10.2988 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #294: GFLOPs: 2038.6624. Time: 10.6509 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #295: GFLOPs: 2042.5541. Time: 10.6306 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #296: GFLOPs: 2108.5424. Time: 10.2980 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #297: GFLOPs: 1917.4848. Time: 11.3240 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #298: GFLOPs: 1935.3673. Time: 11.2194 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #299: GFLOPs: 2095.2453. Time: 10.3633 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #300: GFLOPs: 1922.4304. Time: 11.2949 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #301: GFLOPs: 2152.5293. Time: 10.0875 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #302: GFLOPs: 2108.8131. Time: 10.2966 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #303: GFLOPs: 2094.6073. Time: 10.3665 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #304: GFLOPs: 2103.0857. Time: 10.3247 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #305: GFLOPs: 2093.8869. Time: 10.3700 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #306: GFLOPs: 1965.3430. Time: 11.0483 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #307: GFLOPs: 2119.2894. Time: 10.2457 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #308: GFLOPs: 2156.4678. Time: 10.0691 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #309: GFLOPs: 1895.0959. Time: 11.4578 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #310: GFLOPs: 2121.5371. Time: 10.2349 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #311: GFLOPs: 1946.0734. Time: 11.1577 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #312: GFLOPs: 1980.2011. Time: 10.9654 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #313: GFLOPs: 2178.1507. Time: 9.9689 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #314: GFLOPs: 2106.5037. Time: 10.3079 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #315: GFLOPs: 2117.3314. Time: 10.2552 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #316: GFLOPs: 1784.7614. Time: 12.1661 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #317: GFLOPs: 2113.4480. Time: 10.2740 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #318: GFLOPs: 203.4146. Time: 106.7458 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #319: GFLOPs: 178.7369. Time: 121.4839 us. Best GFLOPs: 2195.8496
2024-03-21 21:33:15 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #320: GFLOPs: 380.6254. Time: 57.0473 us. Best GFLOPs: 2195.8496
2024-03-21 22:13:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 22:13:41 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 22:13:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 22:13:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 782 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 22:13:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 1174 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 22:13:43 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-03-21 22:13:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 221 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 22:13:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 195 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 22:13:50 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 208 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 22:13:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec246b08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed8620b8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8655a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ebdb7d48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ec41c0a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed9340d8)]: 171 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed86cd58)]: 0 failure(s)
2024-03-21 22:13:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9913  0.9905  0.9893  0.9879  0.9877  0.9876  0.9875  0.9874  0.9874  0.9867  0.9867  0.9854  0.9854  0.9854  0.9814  0.9805
[17 : 32]:	0.9783  0.9782  0.9777  0.9763  0.9762  0.9756  0.9745  0.9721  0.9690  0.9676  0.9676  0.9669  0.9666  0.9665  0.9665  0.9663
[33 : 48]:	0.9658  0.9649  0.9647  0.9647  0.9646  0.9637  0.9631  0.9629  0.9627  0.9626  0.9625  0.9622  0.9622  0.9616  0.9613  0.9611
[49 : 64]:	0.9611  0.9611  0.9609  0.9604  0.9604  0.9598  0.9593  0.9593  0.9591  0.9590  0.9583  0.9583  0.9581  0.9578  0.9576  0.9575
2024-03-21 22:13:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 22:13:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #321: GFLOPs: 2178.8218. Time: 9.9658 us. Best GFLOPs: 2195.8496
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #322: GFLOPs: 2175.7527. Time: 9.9798 us. Best GFLOPs: 2195.8496
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #323: GFLOPs: 2176.1822. Time: 9.9779 us. Best GFLOPs: 2195.8496
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #324: GFLOPs: 2175.8036. Time: 9.9796 us. Best GFLOPs: 2195.8496
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #325: GFLOPs: 2175.6671. Time: 9.9802 us. Best GFLOPs: 2195.8496
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #326: GFLOPs: 2193.2430. Time: 9.9003 us. Best GFLOPs: 2195.8496
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #327: GFLOPs: 2248.1173. Time: 9.6586 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #328: GFLOPs: 2178.8060. Time: 9.9659 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #329: GFLOPs: 2178.8753. Time: 9.9655 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #330: GFLOPs: 2178.8643. Time: 9.9656 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #331: GFLOPs: 2178.8625. Time: 9.9656 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #332: GFLOPs: 2178.8587. Time: 9.9656 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #333: GFLOPs: 2168.5286. Time: 10.0131 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #334: GFLOPs: 2168.7941. Time: 10.0119 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #335: GFLOPs: 2179.3804. Time: 9.9632 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #336: GFLOPs: 2132.6050. Time: 10.1818 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #337: GFLOPs: 2150.7660. Time: 10.0958 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #338: GFLOPs: 2154.9820. Time: 10.0760 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #339: GFLOPs: 2140.5067. Time: 10.1442 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #340: GFLOPs: 2106.7554. Time: 10.3067 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #341: GFLOPs: 2222.5508. Time: 9.7697 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #342: GFLOPs: 2099.9618. Time: 10.3400 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #343: GFLOPs: 2131.8287. Time: 10.1855 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #344: GFLOPs: 2134.1121. Time: 10.1746 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #345: GFLOPs: 2125.6866. Time: 10.2149 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #346: GFLOPs: 2125.9512. Time: 10.2136 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #347: GFLOPs: 2126.6068. Time: 10.2105 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #348: GFLOPs: 2132.5960. Time: 10.1818 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #349: GFLOPs: 2126.4233. Time: 10.2114 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #350: GFLOPs: 2125.9085. Time: 10.2138 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #351: GFLOPs: 2126.5747. Time: 10.2106 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #352: GFLOPs: 2126.6358. Time: 10.2103 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #353: GFLOPs: 2118.8126. Time: 10.2480 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #354: GFLOPs: 2099.5195. Time: 10.3422 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #355: GFLOPs: 2179.9058. Time: 9.9608 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #356: GFLOPs: 2179.5033. Time: 9.9627 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #357: GFLOPs: 2142.5581. Time: 10.1345 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #358: GFLOPs: 2179.5485. Time: 9.9625 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #359: GFLOPs: 2100.3782. Time: 10.3380 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #360: GFLOPs: 2140.4280. Time: 10.1445 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #361: GFLOPs: 2179.8907. Time: 9.9609 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #362: GFLOPs: 2140.3227. Time: 10.1450 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #363: GFLOPs: 2115.1046. Time: 10.2660 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #364: GFLOPs: 2179.6417. Time: 9.9620 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #365: GFLOPs: 2179.9656. Time: 9.9606 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #366: GFLOPs: 2118.3460. Time: 10.2503 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #367: GFLOPs: 2067.8670. Time: 10.5005 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #368: GFLOPs: 2067.6347. Time: 10.5017 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #369: GFLOPs: 2121.9966. Time: 10.2327 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #370: GFLOPs: 2121.9362. Time: 10.2329 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #371: GFLOPs: 2139.8716. Time: 10.1472 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #372: GFLOPs: 2110.4390. Time: 10.2887 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #373: GFLOPs: 2110.3241. Time: 10.2893 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #374: GFLOPs: 2102.7684. Time: 10.3262 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #375: GFLOPs: 2126.7345. Time: 10.2099 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #376: GFLOPs: 2118.7578. Time: 10.2483 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #377: GFLOPs: 2056.4343. Time: 10.5589 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #378: GFLOPs: 2083.8490. Time: 10.4200 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #379: GFLOPs: 2029.0998. Time: 10.7011 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #380: GFLOPs: 2029.2602. Time: 10.7003 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #381: GFLOPs: 2083.9879. Time: 10.4193 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #382: GFLOPs: 159.2430. Time: 136.3555 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #383: GFLOPs: 70.5703. Time: 307.6883 us. Best GFLOPs: 2248.1173
2024-03-21 22:14:53 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_add_3] Trial #384: GFLOPs: 360.9844. Time: 60.1513 us. Best GFLOPs: 2248.1173
