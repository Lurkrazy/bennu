2024-03-22 04:15:24 [INFO] [task_scheduler.cc:160] Initializing Task #9: "fused_nn_conv2d_add_add_nn_relu"
2024-03-22 04:15:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        T_add_1 = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3], p3[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_add[v_ax0, v_ax1, v_ax2, v_ax3] + p3[v_ax0, v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-22 04:15:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-22 04:15:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(100352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(1568))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(1568) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused * T.int64(128) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(32) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(28) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(64) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused * T.int64(128) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(28) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="T_relu", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l18, l19, l20, l21, l22 = sch.split(loop=l6, factors=[v13, v14, v15, v16, v17], preserve_unit_iters=True)
v23, v24, v25, v26, v27 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 4, 2, 16])
l28, l29, l30, l31, l32 = sch.split(loop=l7, factors=[v23, v24, v25, v26, v27], preserve_unit_iters=True)
v33, v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 14, 2])
l38, l39, l40, l41, l42 = sch.split(loop=l8, factors=[v33, v34, v35, v36, v37], preserve_unit_iters=True)
v43, v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[2, 1, 7, 2, 2])
l48, l49, l50, l51, l52 = sch.split(loop=l9, factors=[v43, v44, v45, v46, v47], preserve_unit_iters=True)
v53, v54, v55 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 32, 2])
l56, l57, l58 = sch.split(loop=l10, factors=[v53, v54, v55], preserve_unit_iters=True)
v59, v60, v61 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l62, l63, l64 = sch.split(loop=l11, factors=[v59, v60, v61], preserve_unit_iters=True)
v65, v66, v67 = sch.sample_perfect_tile(loop=l12, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l68, l69, l70 = sch.split(loop=l12, factors=[v65, v66, v67], preserve_unit_iters=True)
sch.reorder(l18, l28, l38, l48, l19, l29, l39, l49, l20, l30, l40, l50, l56, l62, l68, l57, l63, l69, l21, l31, l41, l51, l58, l64, l70, l22, l32, l42, l52)
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="blockIdx.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="vthread.x")
l73 = sch.fuse(l20, l30, l40, l50, preserve_unit_iters=True)
sch.bind(loop=l73, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b74 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b74, loop=l73, preserve_unit_loops=True, index=-1)
b75 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b75, loop=l68, preserve_unit_loops=True, index=-1)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b75)
l86 = sch.fuse(l82, l83, l84, l85, preserve_unit_iters=True)
v87 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch", ann_val=v87)
b88 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b88, loop=l68, preserve_unit_loops=True, index=-1)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b88)
l99 = sch.fuse(l95, l96, l97, l98, preserve_unit_iters=True)
v100 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch", ann_val=v100)
sch.reverse_compute_inline(block=b4)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-22 04:15:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(100352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(1568))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(1568) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused * T.int64(128) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(32) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(28) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused * T.int64(128) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(28) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="T_relu", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l18, l19, l20, l21, l22 = sch.split(loop=l6, factors=[v13, v14, v15, v16, v17], preserve_unit_iters=True)
v23, v24, v25, v26, v27 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 4, 2, 16])
l28, l29, l30, l31, l32 = sch.split(loop=l7, factors=[v23, v24, v25, v26, v27], preserve_unit_iters=True)
v33, v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 14, 2])
l38, l39, l40, l41, l42 = sch.split(loop=l8, factors=[v33, v34, v35, v36, v37], preserve_unit_iters=True)
v43, v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[2, 1, 7, 2, 2])
l48, l49, l50, l51, l52 = sch.split(loop=l9, factors=[v43, v44, v45, v46, v47], preserve_unit_iters=True)
v53, v54, v55 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 32, 2])
l56, l57, l58 = sch.split(loop=l10, factors=[v53, v54, v55], preserve_unit_iters=True)
v59, v60, v61 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l62, l63, l64 = sch.split(loop=l11, factors=[v59, v60, v61], preserve_unit_iters=True)
v65, v66, v67 = sch.sample_perfect_tile(loop=l12, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l68, l69, l70 = sch.split(loop=l12, factors=[v65, v66, v67], preserve_unit_iters=True)
sch.reorder(l18, l28, l38, l48, l19, l29, l39, l49, l20, l30, l40, l50, l56, l62, l68, l57, l63, l69, l21, l31, l41, l51, l58, l64, l70, l22, l32, l42, l52)
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="blockIdx.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="vthread.x")
l73 = sch.fuse(l20, l30, l40, l50, preserve_unit_iters=True)
sch.bind(loop=l73, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b74 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b74, loop=l73, preserve_unit_loops=True, index=-1)
b75 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b75, loop=l68, preserve_unit_loops=True, index=-1)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b75)
l86 = sch.fuse(l82, l83, l84, l85, preserve_unit_iters=True)
v87 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch", ann_val=v87)
b88 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b88, loop=l68, preserve_unit_loops=True, index=-1)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b88)
l99 = sch.fuse(l95, l96, l97, l98, preserve_unit_iters=True)
v100 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch", ann_val=v100)
l101 = sch.fuse(l56, l62, l68, preserve_unit_iters=True)
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v102 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v102)
2024-03-22 04:15:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(100352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(1568))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(1568) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(16384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused * T.int64(128) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(32) + ff_3 * T.int64(16) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(28) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused * T.int64(128) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(28) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="T_relu", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l18, l19, l20, l21, l22 = sch.split(loop=l6, factors=[v13, v14, v15, v16, v17], preserve_unit_iters=True)
v23, v24, v25, v26, v27 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 4, 2, 16])
l28, l29, l30, l31, l32 = sch.split(loop=l7, factors=[v23, v24, v25, v26, v27], preserve_unit_iters=True)
v33, v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 14, 2])
l38, l39, l40, l41, l42 = sch.split(loop=l8, factors=[v33, v34, v35, v36, v37], preserve_unit_iters=True)
v43, v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[2, 1, 7, 2, 2])
l48, l49, l50, l51, l52 = sch.split(loop=l9, factors=[v43, v44, v45, v46, v47], preserve_unit_iters=True)
v53, v54, v55 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 32, 2])
l56, l57, l58 = sch.split(loop=l10, factors=[v53, v54, v55], preserve_unit_iters=True)
v59, v60, v61 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l62, l63, l64 = sch.split(loop=l11, factors=[v59, v60, v61], preserve_unit_iters=True)
v65, v66, v67 = sch.sample_perfect_tile(loop=l12, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l68, l69, l70 = sch.split(loop=l12, factors=[v65, v66, v67], preserve_unit_iters=True)
sch.reorder(l18, l28, l38, l48, l19, l29, l39, l49, l20, l30, l40, l50, l56, l62, l68, l57, l63, l69, l21, l31, l41, l51, l58, l64, l70, l22, l32, l42, l52)
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="blockIdx.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="vthread.x")
l73 = sch.fuse(l20, l30, l40, l50, preserve_unit_iters=True)
sch.bind(loop=l73, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b74 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b74, loop=l73, preserve_unit_loops=True, index=-1)
b75 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b75, loop=l68, preserve_unit_loops=True, index=-1)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b75)
l86 = sch.fuse(l82, l83, l84, l85, preserve_unit_iters=True)
v87 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch", ann_val=v87)
b88 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b88, loop=l68, preserve_unit_loops=True, index=-1)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b88)
l99 = sch.fuse(l95, l96, l97, l98, preserve_unit_iters=True)
v100 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch", ann_val=v100)
l101 = sch.fuse(l56, l62, l68, preserve_unit_iters=True)
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v102 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v102)
2024-03-22 04:26:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 04:26:39 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-22 04:26:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 478 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 04:26:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 950 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 04:26:40 [INFO] [evolutionary_search.cc:723] Sampled 74 candidate(s)
2024-03-22 04:26:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 04:26:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 04:26:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 04:26:46 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 04:26:46 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9990  0.9982  0.9972  0.9961  0.9957  0.9955  0.9947  0.9930  0.9920  0.9918  0.9907  0.9898  0.9838  0.9836  0.9835
[17 : 32]:	0.9834  0.9826  0.9824  0.9823  0.9812  0.9808  0.9801  0.9798  0.9794  0.9793  0.9791  0.9786  0.9768  0.9760  0.9757  0.9756
[33 : 48]:	0.9739  0.9723  0.9721  0.9716  0.9710  0.9703  0.9692  0.9681  0.9681  0.9668  0.9667  0.9664  0.9658  0.9653  0.9649  0.9640
[49 : 64]:	0.9633  0.9631  0.9629  0.9626  0.9587  0.9585  0.9577  0.9571  0.9562  0.9560  0.9559  0.9549  0.9545  0.9539  0.9538  0.9537
2024-03-22 04:26:46 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 04:26:46 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #1: GFLOPs: 1153.4463. Time: 91.1780 us. Best GFLOPs: 1153.4463
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #2: GFLOPs: 250.9907. Time: 419.0151 us. Best GFLOPs: 1153.4463
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #3: GFLOPs: 3035.1220. Time: 34.6506 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #4: GFLOPs: 211.0205. Time: 498.3823 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #5: GFLOPs: 2218.8867. Time: 47.3971 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #6: GFLOPs: 115.6742. Time: 909.1817 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #7: GFLOPs: 82.2640. Time: 1278.4316 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #8: GFLOPs: 1508.0119. Time: 69.7401 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #9: GFLOPs: 1511.9924. Time: 69.5565 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #10: GFLOPs: 1559.1166. Time: 67.4542 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #11: GFLOPs: 1436.2871. Time: 73.2228 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #12: GFLOPs: 680.0902. Time: 154.6396 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #13: GFLOPs: 2225.8267. Time: 47.2494 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #14: GFLOPs: 1947.4127. Time: 54.0044 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #15: GFLOPs: 268.1481. Time: 392.2045 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #16: GFLOPs: 1994.3294. Time: 52.7340 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #17: GFLOPs: 214.8878. Time: 489.4130 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #18: GFLOPs: 134.0838. Time: 784.3520 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #19: GFLOPs: 1938.9048. Time: 54.2414 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #20: GFLOPs: 336.2283. Time: 312.7902 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #21: GFLOPs: 2638.8933. Time: 39.8534 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #22: GFLOPs: 57.2684. Time: 1836.4224 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #23: GFLOPs: 2270.5415. Time: 46.3189 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #24: GFLOPs: 1882.5242. Time: 55.8659 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #25: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(64), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(128) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + xx_3_init * T.int64(7) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(32), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(28)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(128) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(64), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(256))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(128) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + xx_3 * T.int64(7) + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(256), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(128) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="T_relu", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l18, l19, l20, l21, l22 = sch.split(loop=l6, factors=[v13, v14, v15, v16, v17], preserve_unit_iters=True)
v23, v24, v25, v26, v27 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 32, 2, 2, 1])
l28, l29, l30, l31, l32 = sch.split(loop=l7, factors=[v23, v24, v25, v26, v27], preserve_unit_iters=True)
v33, v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 1, 14, 1, 1])
l38, l39, l40, l41, l42 = sch.split(loop=l8, factors=[v33, v34, v35, v36, v37], preserve_unit_iters=True)
v43, v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[1, 2, 2, 2, 7])
l48, l49, l50, l51, l52 = sch.split(loop=l9, factors=[v43, v44, v45, v46, v47], preserve_unit_iters=True)
v53, v54, v55 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[32, 1, 2])
l56, l57, l58 = sch.split(loop=l10, factors=[v53, v54, v55], preserve_unit_iters=True)
v59, v60, v61 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l62, l63, l64 = sch.split(loop=l11, factors=[v59, v60, v61], preserve_unit_iters=True)
v65, v66, v67 = sch.sample_perfect_tile(loop=l12, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l68, l69, l70 = sch.split(loop=l12, factors=[v65, v66, v67], preserve_unit_iters=True)
sch.reorder(l18, l28, l38, l48, l19, l29, l39, l49, l20, l30, l40, l50, l56, l62, l68, l57, l63, l69, l21, l31, l41, l51, l58, l64, l70, l22, l32, l42, l52)
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="blockIdx.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="vthread.x")
l73 = sch.fuse(l20, l30, l40, l50, preserve_unit_iters=True)
sch.bind(loop=l73, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b74 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b74, loop=l73, preserve_unit_loops=True, index=-1)
b75 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b75, loop=l68, preserve_unit_loops=True, index=-1)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b75)
l86 = sch.fuse(l82, l83, l84, l85, preserve_unit_iters=True)
v87 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch", ann_val=v87)
b88 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b88, loop=l68, preserve_unit_loops=True, index=-1)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b88)
l99 = sch.fuse(l95, l96, l97, l98, preserve_unit_iters=True)
v100 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch", ann_val=v100)
sch.reverse_compute_inline(block=b4)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106, l107, l108 = sch.get_loops(block=b75)
l109, l110 = sch.split(loop=l108, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l110, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b88)
l118, l119 = sch.split(loop=l117, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b121)
l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b122)
l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l141, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l141, ann_key="pragma_unroll_explicit", ann_val=1)
l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b124)
b168 = sch.get_block(name="conv2d_nchw", func_name="main")
l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b168)
b189 = sch.decompose_reduction(block=b168, loop=l172)
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #26: GFLOPs: 97.7713. Time: 1075.6624 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #27: GFLOPs: 10.5718. Time: 9948.0963 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #28: GFLOPs: 411.9409. Time: 255.3009 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #29: GFLOPs: 1668.6009. Time: 63.0282 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #30: GFLOPs: 106.9955. Time: 982.9280 us. Best GFLOPs: 3035.1220
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #31: GFLOPs: 3193.3299. Time: 32.9339 us. Best GFLOPs: 3193.3299
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #32: GFLOPs: 2878.2037. Time: 36.5398 us. Best GFLOPs: 3193.3299
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #33: GFLOPs: 6741.3286. Time: 15.6006 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #34: GFLOPs: 3994.7114. Time: 26.3270 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #35: GFLOPs: 1902.5951. Time: 55.2766 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #36: GFLOPs: 1115.3280. Time: 94.2941 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #37: GFLOPs: 522.7873. Time: 201.1696 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #38: GFLOPs: 5636.3453. Time: 18.6591 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #39: GFLOPs: 1390.7855. Time: 75.6183 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #40: GFLOPs: 1517.8812. Time: 69.2866 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #41: GFLOPs: 481.4481. Time: 218.4429 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #42: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(256), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1568))
                                        v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1568) // T.int64(56))
                                        v3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3136))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(256), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(14)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(256), nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="T_relu", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l18, l19, l20, l21, l22 = sch.split(loop=l6, factors=[v13, v14, v15, v16, v17], preserve_unit_iters=True)
v23, v24, v25, v26, v27 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 64, 4, 1])
l28, l29, l30, l31, l32 = sch.split(loop=l7, factors=[v23, v24, v25, v26, v27], preserve_unit_iters=True)
v33, v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 14])
l38, l39, l40, l41, l42 = sch.split(loop=l8, factors=[v33, v34, v35, v36, v37], preserve_unit_iters=True)
v43, v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[1, 1, 4, 14, 1])
l48, l49, l50, l51, l52 = sch.split(loop=l9, factors=[v43, v44, v45, v46, v47], preserve_unit_iters=True)
v53, v54, v55 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[32, 1, 2])
l56, l57, l58 = sch.split(loop=l10, factors=[v53, v54, v55], preserve_unit_iters=True)
v59, v60, v61 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l62, l63, l64 = sch.split(loop=l11, factors=[v59, v60, v61], preserve_unit_iters=True)
v65, v66, v67 = sch.sample_perfect_tile(loop=l12, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l68, l69, l70 = sch.split(loop=l12, factors=[v65, v66, v67], preserve_unit_iters=True)
sch.reorder(l18, l28, l38, l48, l19, l29, l39, l49, l20, l30, l40, l50, l56, l62, l68, l57, l63, l69, l21, l31, l41, l51, l58, l64, l70, l22, l32, l42, l52)
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="blockIdx.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="vthread.x")
l73 = sch.fuse(l20, l30, l40, l50, preserve_unit_iters=True)
sch.bind(loop=l73, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b74 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b74, loop=l73, preserve_unit_loops=True, index=-1)
b75 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b75, loop=l68, preserve_unit_loops=True, index=-1)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b75)
l86 = sch.fuse(l82, l83, l84, l85, preserve_unit_iters=True)
v87 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch", ann_val=v87)
b88 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b88, loop=l68, preserve_unit_loops=True, index=-1)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b88)
l99 = sch.fuse(l95, l96, l97, l98, preserve_unit_iters=True)
v100 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch", ann_val=v100)
l101 = sch.fuse(l56, l62, l68, preserve_unit_iters=True)
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v102 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v102)
sch.enter_postproc()
sch.unannotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch")
l103, l104, l105, l106, l107 = sch.get_loops(block=b75)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 256, 4], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115 = sch.get_loops(block=b88)
l116, l117 = sch.split(loop=l115, factors=[None, 256], preserve_unit_iters=True)
sch.bind(loop=l117, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135 = sch.get_loops(block=b120)
l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l136, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l136, ann_key="pragma_unroll_explicit", ann_val=1)
l154, l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b122)
b161 = sch.get_block(name="conv2d_nchw", func_name="main")
l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179 = sch.get_loops(block=b161)
b180 = sch.decompose_reduction(block=b161, loop=l165)
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #43: GFLOPs: 175.0928. Time: 600.6465 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #44: GFLOPs: 661.7035. Time: 158.9366 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #45: GFLOPs: 4252.5856. Time: 24.7306 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #46: GFLOPs: 123.4872. Time: 851.6582 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #47: GFLOPs: 158.9134. Time: 661.8002 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #48: GFLOPs: 338.1692. Time: 310.9949 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #49: GFLOPs: 509.5043. Time: 206.4142 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #50: GFLOPs: 2542.2210. Time: 41.3689 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #51: GFLOPs: 1716.7387. Time: 61.2609 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #52: GFLOPs: 88.2319. Time: 1191.9604 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #53: GFLOPs: 61.9819. Time: 1696.7680 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:121] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #54: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(256), T.int64(1), T.int64(1)), "float32"), p3: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(256), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(128) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + yy_3_init * T.int64(2) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(4) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(224))
                                        v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(224) // T.int64(56))
                                        v3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(128) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(64), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(4)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(256), nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(128) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)], p3[v0, v1, v2, v3])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)] + p3[v0, v1, v2, v3], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_add_1", func_name="main")
b4 = sch.get_block(name="T_relu", func_name="main")
b5 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l6, l7, l8, l9, l10, l11, l12 = sch.get_loops(block=b1)
v13, v14, v15, v16, v17 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l18, l19, l20, l21, l22 = sch.split(loop=l6, factors=[v13, v14, v15, v16, v17], preserve_unit_iters=True)
v23, v24, v25, v26, v27 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 32, 2, 2])
l28, l29, l30, l31, l32 = sch.split(loop=l7, factors=[v23, v24, v25, v26, v27], preserve_unit_iters=True)
v33, v34, v35, v36, v37 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 2, 1, 1, 2])
l38, l39, l40, l41, l42 = sch.split(loop=l8, factors=[v33, v34, v35, v36, v37], preserve_unit_iters=True)
v43, v44, v45, v46, v47 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[1, 14, 1, 2, 2])
l48, l49, l50, l51, l52 = sch.split(loop=l9, factors=[v43, v44, v45, v46, v47], preserve_unit_iters=True)
v53, v54, v55 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[16, 2, 2])
l56, l57, l58 = sch.split(loop=l10, factors=[v53, v54, v55], preserve_unit_iters=True)
v59, v60, v61 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l62, l63, l64 = sch.split(loop=l11, factors=[v59, v60, v61], preserve_unit_iters=True)
v65, v66, v67 = sch.sample_perfect_tile(loop=l12, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l68, l69, l70 = sch.split(loop=l12, factors=[v65, v66, v67], preserve_unit_iters=True)
sch.reorder(l18, l28, l38, l48, l19, l29, l39, l49, l20, l30, l40, l50, l56, l62, l68, l57, l63, l69, l21, l31, l41, l51, l58, l64, l70, l22, l32, l42, l52)
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="blockIdx.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="vthread.x")
l73 = sch.fuse(l20, l30, l40, l50, preserve_unit_iters=True)
sch.bind(loop=l73, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b74 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b74, loop=l73, preserve_unit_loops=True, index=-1)
b75 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b75, loop=l68, preserve_unit_loops=True, index=-1)
l76, l77, l78, l79, l80, l81, l82, l83, l84, l85 = sch.get_loops(block=b75)
l86 = sch.fuse(l82, l83, l84, l85, preserve_unit_iters=True)
v87 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch", ann_val=v87)
b88 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b88, loop=l68, preserve_unit_loops=True, index=-1)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b88)
l99 = sch.fuse(l95, l96, l97, l98, preserve_unit_iters=True)
v100 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch", ann_val=v100)
l101 = sch.fuse(l56, l62, l68, preserve_unit_iters=True)
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l101, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b4)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v102 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b5, ann_key="meta_schedule.unroll_explicit", ann_val=v102)
sch.enter_postproc()
sch.unannotate(block_or_loop=b75, ann_key="meta_schedule.cooperative_fetch")
l103, l104, l105, l106, l107 = sch.get_loops(block=b75)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b88, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115 = sch.get_loops(block=b88)
l116, l117, l118 = sch.split(loop=l115, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l118)
sch.bind(loop=l117, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b120)
l131, l132, l133, l134, l135, l136, l137 = sch.get_loops(block=b121)
l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l138, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l138, ann_key="pragma_unroll_explicit", ann_val=1)
l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b123)
b163 = sch.get_block(name="conv2d_nchw", func_name="main")
l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b163)
b182 = sch.decompose_reduction(block=b163, loop=l167)
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #55: GFLOPs: 1335.8130. Time: 78.7303 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #56: GFLOPs: 10.7101. Time: 9819.6015 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #57: GFLOPs: 398.5503. Time: 263.8786 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #58: GFLOPs: 199.1788. Time: 528.0126 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #59: GFLOPs: 2058.9206. Time: 51.0796 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #60: GFLOPs: 86.3061. Time: 1218.5573 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #61: GFLOPs: 2365.8745. Time: 44.4524 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #62: GFLOPs: 4362.2086. Time: 24.1091 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #63: GFLOPs: 2034.8353. Time: 51.6842 us. Best GFLOPs: 6741.3286
2024-03-22 04:47:06 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #64: GFLOPs: 74.5693. Time: 1410.3508 us. Best GFLOPs: 6741.3286
2024-03-22 05:43:42 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 05:43:43 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2024-03-22 05:43:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 424 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 05:43:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 835 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 05:43:44 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-03-22 05:43:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 05:43:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 05:43:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 05:43:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 05:43:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2095  1.2077  1.1691  1.1644  1.1572  1.1482  1.1265  1.1111  1.1110  1.1002  1.0431  1.0374  1.0327  1.0191  1.0177  1.0172
[17 : 32]:	1.0160  1.0127  1.0092  1.0091  1.0091  1.0080  1.0063  1.0051  0.9993  0.9953  0.9924  0.9882  0.9882  0.9881  0.9880  0.9836
[33 : 48]:	0.9825  0.9813  0.9807  0.9795  0.9757  0.9745  0.9727  0.9715  0.9704  0.9701  0.9695  0.9691  0.9687  0.9632  0.9631  0.9613
[49 : 64]:	0.9613  0.9596  0.9583  0.9562  0.9546  0.9540  0.9539  0.9536  0.9500  0.9486  0.9476  0.9454  0.9442  0.9442  0.9438  0.9430
2024-03-22 05:43:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 05:43:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #65: GFLOPs: 5318.6634. Time: 19.7736 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #66: GFLOPs: 5632.5899. Time: 18.6715 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #67: GFLOPs: 1403.8729. Time: 74.9134 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #68: GFLOPs: 5670.5271. Time: 18.5466 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #69: GFLOPs: 5669.4845. Time: 18.5500 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #70: GFLOPs: 1827.2457. Time: 57.5560 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #71: GFLOPs: 6393.5088. Time: 16.4493 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #72: GFLOPs: 1942.1156. Time: 54.1517 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #73: GFLOPs: 1939.9723. Time: 54.2115 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #74: GFLOPs: 1708.0179. Time: 61.5736 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #75: GFLOPs: 3176.1843. Time: 33.1117 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #76: GFLOPs: 1459.9257. Time: 72.0372 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #77: GFLOPs: 3062.4645. Time: 34.3413 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #78: GFLOPs: 1435.7512. Time: 73.2501 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #79: GFLOPs: 5691.1365. Time: 18.4794 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #80: GFLOPs: 5990.8328. Time: 17.5550 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #81: GFLOPs: 5628.8227. Time: 18.6840 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #82: GFLOPs: 6601.4257. Time: 15.9312 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #83: GFLOPs: 1934.9868. Time: 54.3512 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #84: GFLOPs: 6581.1053. Time: 15.9804 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #85: GFLOPs: 6580.7246. Time: 15.9814 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #86: GFLOPs: 3927.0796. Time: 26.7804 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #87: GFLOPs: 1810.9752. Time: 58.0731 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #88: GFLOPs: 6539.3347. Time: 16.0825 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #89: GFLOPs: 6500.5644. Time: 16.1784 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #90: GFLOPs: 5321.1456. Time: 19.7643 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #91: GFLOPs: 6571.7027. Time: 16.0033 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #92: GFLOPs: 4648.1142. Time: 22.6261 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #93: GFLOPs: 5291.4463. Time: 19.8753 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #94: GFLOPs: 6371.4019. Time: 16.5064 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #95: GFLOPs: 1800.8851. Time: 58.3984 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #96: GFLOPs: 6314.4077. Time: 16.6554 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #97: GFLOPs: 1745.5466. Time: 60.2498 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #98: GFLOPs: 1735.2237. Time: 60.6083 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #99: GFLOPs: 4641.8094. Time: 22.6569 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #100: GFLOPs: 4662.1317. Time: 22.5581 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #101: GFLOPs: 6576.6383. Time: 15.9913 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #102: GFLOPs: 1614.8983. Time: 65.1242 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #103: GFLOPs: 1925.4466. Time: 54.6205 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #104: GFLOPs: 6418.4075. Time: 16.3855 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #105: GFLOPs: 5835.1323. Time: 18.0234 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #106: GFLOPs: 6433.0466. Time: 16.3482 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #107: GFLOPs: 1958.0992. Time: 53.7097 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #108: GFLOPs: 3991.4172. Time: 26.3488 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #109: GFLOPs: 1668.2262. Time: 63.0423 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #110: GFLOPs: 2853.7785. Time: 36.8525 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #111: GFLOPs: 2354.2345. Time: 44.6722 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #112: GFLOPs: 3928.4023. Time: 26.7714 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #113: GFLOPs: 6024.6193. Time: 17.4565 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #114: GFLOPs: 1591.0186. Time: 66.1016 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #115: GFLOPs: 3176.2728. Time: 33.1108 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #116: GFLOPs: 3058.2453. Time: 34.3886 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #117: GFLOPs: 5448.1268. Time: 19.3037 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #118: GFLOPs: 1735.2486. Time: 60.6074 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #119: GFLOPs: 2017.0923. Time: 52.1389 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #120: GFLOPs: 3017.0939. Time: 34.8577 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #121: GFLOPs: 2757.8560. Time: 38.1343 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #122: GFLOPs: 5899.6550. Time: 17.8263 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #123: GFLOPs: 2002.1823. Time: 52.5271 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #124: GFLOPs: 1754.7732. Time: 59.9330 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #125: GFLOPs: 1951.0097. Time: 53.9049 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #126: GFLOPs: 524.8046. Time: 200.3963 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #127: GFLOPs: 285.5031. Time: 368.3635 us. Best GFLOPs: 6741.3286
2024-03-22 05:44:46 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #128: GFLOPs: 1128.5167. Time: 93.1921 us. Best GFLOPs: 6741.3286
2024-03-22 06:50:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 06:50:52 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-22 06:50:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 386 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 06:50:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 760 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 06:50:54 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-03-22 06:50:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 06:50:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 06:51:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 66 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 06:51:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac572a00e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfcaf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac62302c08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac572d6268)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4c456838)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac557af858)]: 74 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfc9f8)]: 0 failure(s)
2024-03-22 06:51:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.7151  1.7058  1.6983  1.6958  1.6909  1.6898  1.6882  1.6349  1.6327  1.6295  1.6284  1.5947  1.4704  1.4243  1.3576  1.2932
[17 : 32]:	1.2305  1.2039  1.2009  1.1935  1.1836  1.1788  1.1714  1.1694  1.1610  1.1555  1.1549  1.1362  1.1350  1.1195  1.1118  1.0897
[33 : 48]:	1.0876  1.0866  1.0839  1.0785  1.0758  1.0745  1.0736  1.0681  1.0681  1.0679  1.0642  1.0564  1.0484  1.0471  1.0468  1.0426
[49 : 64]:	1.0401  1.0374  1.0357  1.0348  1.0339  1.0334  1.0330  1.0320  1.0316  1.0302  1.0282  1.0276  1.0273  1.0270  1.0247  1.0231
2024-03-22 06:51:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 06:51:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #129: GFLOPs: 4059.9347. Time: 25.9041 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #130: GFLOPs: 5718.2314. Time: 18.3919 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #131: GFLOPs: 5599.2963. Time: 18.7825 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #132: GFLOPs: 4644.8873. Time: 22.6419 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #133: GFLOPs: 4080.7935. Time: 25.7717 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #134: GFLOPs: 4039.2352. Time: 26.0368 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #135: GFLOPs: 4536.5371. Time: 23.1826 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #136: GFLOPs: 3690.2765. Time: 28.4989 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #137: GFLOPs: 3744.8215. Time: 28.0838 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #138: GFLOPs: 4206.2314. Time: 25.0031 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #139: GFLOPs: 4203.0375. Time: 25.0221 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #140: GFLOPs: 4206.7184. Time: 25.0002 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #141: GFLOPs: 2895.8685. Time: 36.3169 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #142: GFLOPs: 4159.8446. Time: 25.2819 us. Best GFLOPs: 6741.3286
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #143: GFLOPs: 6965.3084. Time: 15.0990 us. Best GFLOPs: 6965.3084
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #144: GFLOPs: 1777.1002. Time: 59.1801 us. Best GFLOPs: 6965.3084
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #145: GFLOPs: 6630.5695. Time: 15.8612 us. Best GFLOPs: 6965.3084
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #146: GFLOPs: 6749.1180. Time: 15.5826 us. Best GFLOPs: 6965.3084
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #147: GFLOPs: 6744.6092. Time: 15.5930 us. Best GFLOPs: 6965.3084
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #148: GFLOPs: 6941.4857. Time: 15.1508 us. Best GFLOPs: 6965.3084
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #149: GFLOPs: 3804.1765. Time: 27.6456 us. Best GFLOPs: 6965.3084
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #150: GFLOPs: 171.2924. Time: 613.9728 us. Best GFLOPs: 6965.3084
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #151: GFLOPs: 173.4192. Time: 606.4432 us. Best GFLOPs: 6965.3084
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #152: GFLOPs: 6919.9945. Time: 15.1978 us. Best GFLOPs: 6965.3084
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #153: GFLOPs: 6999.2687. Time: 15.0257 us. Best GFLOPs: 6999.2687
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #154: GFLOPs: 1822.2820. Time: 57.7127 us. Best GFLOPs: 6999.2687
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #155: GFLOPs: 7134.6871. Time: 14.7405 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #156: GFLOPs: 4111.6226. Time: 25.5784 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #157: GFLOPs: 3786.3789. Time: 27.7756 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #158: GFLOPs: 4027.3841. Time: 26.1135 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #159: GFLOPs: 1803.3239. Time: 58.3195 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #160: GFLOPs: 5267.5919. Time: 19.9653 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #161: GFLOPs: 163.3750. Time: 643.7270 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #162: GFLOPs: 6197.4384. Time: 16.9697 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #163: GFLOPs: 5097.0591. Time: 20.6333 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #164: GFLOPs: 3437.8814. Time: 30.5912 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #165: GFLOPs: 163.1716. Time: 644.5295 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #166: GFLOPs: 297.8267. Time: 353.1211 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #167: GFLOPs: 5267.1198. Time: 19.9671 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #168: GFLOPs: 5498.4087. Time: 19.1272 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #169: GFLOPs: 6019.9127. Time: 17.4702 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #170: GFLOPs: 163.3770. Time: 643.7192 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #171: GFLOPs: 157.6934. Time: 666.9202 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #172: GFLOPs: 157.5859. Time: 667.3749 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #173: GFLOPs: 5542.8485. Time: 18.9738 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #174: GFLOPs: 6938.2822. Time: 15.1578 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #175: GFLOPs: 6390.2409. Time: 16.4577 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #176: GFLOPs: 6480.4882. Time: 16.2285 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #177: GFLOPs: 5898.4301. Time: 17.8300 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #178: GFLOPs: 6094.6025. Time: 17.2561 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #179: GFLOPs: 6230.8207. Time: 16.8788 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #180: GFLOPs: 6103.4336. Time: 17.2311 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #181: GFLOPs: 5908.3925. Time: 17.7999 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #182: GFLOPs: 5883.8516. Time: 17.8742 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #183: GFLOPs: 6243.3938. Time: 16.8448 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #184: GFLOPs: 297.7230. Time: 353.2441 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #185: GFLOPs: 5682.6182. Time: 18.5071 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #186: GFLOPs: 6189.7775. Time: 16.9907 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #187: GFLOPs: 5086.1633. Time: 20.6775 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #188: GFLOPs: 5797.5138. Time: 18.1403 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #189: GFLOPs: 5827.7488. Time: 18.0462 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #190: GFLOPs: 1964.4085. Time: 53.5372 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #191: GFLOPs: 326.6480. Time: 321.9640 us. Best GFLOPs: 7134.6871
2024-03-22 06:52:01 [INFO] [task_scheduler.cc:131] [Task #9: fused_nn_conv2d_add_add_nn_relu] Trial #192: GFLOPs: 1771.1376. Time: 59.3793 us. Best GFLOPs: 7134.6871
