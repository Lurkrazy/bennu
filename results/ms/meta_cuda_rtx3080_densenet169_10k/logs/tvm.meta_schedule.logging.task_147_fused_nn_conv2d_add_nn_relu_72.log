2024-03-21 10:38:32 [INFO] [task_scheduler.cc:160] Initializing Task #147: "fused_nn_conv2d_add_nn_relu_72"
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(224), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(224), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(87808)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(224), ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v1 = T.axis.spatial(T.int64(224), ax0_ax1_ax2_ax3_fused % T.int64(224))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(224), rc_0 * T.int64(224) + rc_1 * T.int64(7) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 1, 16, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 32, 7])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(87808)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(224), ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v1 = T.axis.spatial(T.int64(224), ax0_ax1_ax2_ax3_fused % T.int64(224))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(224), rc_1 * T.int64(7) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 1, 16, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 32, 7])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(224), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(224), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(224), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(87808)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(224), ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v1 = T.axis.spatial(T.int64(224), ax0_ax1_ax2_ax3_fused % T.int64(224))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(224), rc_1 * T.int64(7) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(1), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 1, 16, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 32, 7])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 11:55:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:55:21 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:55:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4b48dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6a75b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a26f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd7031638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5ebf5d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2b57b08)]: 476 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd579edf8)]: 0 failure(s)
2024-03-21 11:55:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4b48dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6a75b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a26f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd7031638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5ebf5d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2b57b08)]: 960 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd579edf8)]: 0 failure(s)
2024-03-21 11:55:23 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-03-21 11:55:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4b48dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6a75b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a26f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd7031638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5ebf5d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2b57b08)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd579edf8)]: 0 failure(s)
2024-03-21 11:55:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4b48dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6a75b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a26f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd7031638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5ebf5d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2b57b08)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd579edf8)]: 0 failure(s)
2024-03-21 11:55:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4b48dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6a75b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a26f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd7031638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5ebf5d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2b57b08)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd579edf8)]: 0 failure(s)
2024-03-21 11:55:29 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4b48dc8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6a75b88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd2a26f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd7031638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5ebf5d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd2b57b08)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd579edf8)]: 0 failure(s)
2024-03-21 11:55:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9992  0.9990  0.9988  0.9987  0.9979  0.9963  0.9956  0.9956  0.9916  0.9913  0.9910  0.9899  0.9887  0.9887  0.9876
[17 : 32]:	0.9875  0.9872  0.9868  0.9864  0.9843  0.9835  0.9825  0.9825  0.9819  0.9800  0.9799  0.9795  0.9789  0.9787  0.9774  0.9766
[33 : 48]:	0.9765  0.9763  0.9759  0.9754  0.9752  0.9749  0.9749  0.9749  0.9741  0.9736  0.9736  0.9734  0.9722  0.9719  0.9704  0.9696
[49 : 64]:	0.9688  0.9683  0.9658  0.9654  0.9645  0.9643  0.9615  0.9612  0.9611  0.9608  0.9601  0.9600  0.9588  0.9580  0.9577  0.9564
2024-03-21 11:55:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:55:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #1: GFLOPs: 52.5565. Time: 859.2355 us. Best GFLOPs: 52.5565
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #2: GFLOPs: 14.3343. Time: 3150.3680 us. Best GFLOPs: 52.5565
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #3: GFLOPs: 54.6867. Time: 825.7663 us. Best GFLOPs: 54.6867
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #4: GFLOPs: 372.8679. Time: 121.1110 us. Best GFLOPs: 372.8679
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #5: GFLOPs: 53.3698. Time: 846.1408 us. Best GFLOPs: 372.8679
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #6: GFLOPs: 192.3415. Time: 234.7824 us. Best GFLOPs: 372.8679
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #7: GFLOPs: 855.2399. Time: 52.8020 us. Best GFLOPs: 855.2399
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #8: GFLOPs: 32.4921. Time: 1389.8258 us. Best GFLOPs: 855.2399
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #9: GFLOPs: 1309.3409. Time: 34.4894 us. Best GFLOPs: 1309.3409
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #10: GFLOPs: 652.0576. Time: 69.2552 us. Best GFLOPs: 1309.3409
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #11: GFLOPs: 518.0816. Time: 87.1646 us. Best GFLOPs: 1309.3409
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #12: GFLOPs: 73.8701. Time: 611.3217 us. Best GFLOPs: 1309.3409
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #13: GFLOPs: 1105.5276. Time: 40.8478 us. Best GFLOPs: 1309.3409
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #14: GFLOPs: 3196.9721. Time: 14.1254 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #15: GFLOPs: 2765.6412. Time: 16.3284 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #16: GFLOPs: 483.8772. Time: 93.3262 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #17: GFLOPs: 524.8320. Time: 86.0435 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #18: GFLOPs: 798.5060. Time: 56.5536 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #19: GFLOPs: 483.7300. Time: 93.3546 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #20: GFLOPs: 192.2584. Time: 234.8839 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #21: GFLOPs: 13.5269. Time: 3338.4107 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #22: GFLOPs: 40.4192. Time: 1117.2523 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #23: GFLOPs: 2305.0040. Time: 19.5915 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #24: GFLOPs: 456.0951. Time: 99.0109 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #25: GFLOPs: 986.8936. Time: 45.7581 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #26: GFLOPs: 2533.9554. Time: 17.8213 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #27: GFLOPs: 55.0089. Time: 820.9283 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #28: GFLOPs: 601.4511. Time: 75.0824 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #29: GFLOPs: 407.5923. Time: 110.7931 us. Best GFLOPs: 3196.9721
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #30: GFLOPs: 4221.6286. Time: 10.6969 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #31: GFLOPs: 913.8521. Time: 49.4154 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #32: GFLOPs: 43.4864. Time: 1038.4483 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #33: GFLOPs: 406.5216. Time: 111.0849 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #34: GFLOPs: 1292.0785. Time: 34.9502 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #35: GFLOPs: 120.9765. Time: 373.2824 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #36: GFLOPs: 36.7451. Time: 1228.9623 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #37: GFLOPs: 416.4191. Time: 108.4446 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #38: GFLOPs: 1769.6135. Time: 25.5188 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #39: GFLOPs: 1444.1032. Time: 31.2709 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #40: GFLOPs: 93.7617. Time: 481.6296 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #41: GFLOPs: 966.3893. Time: 46.7290 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #42: GFLOPs: 827.9928. Time: 54.5396 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #43: GFLOPs: 395.6641. Time: 114.1332 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #44: GFLOPs: 2580.2491. Time: 17.5016 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #45: GFLOPs: 47.9247. Time: 942.2776 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #46: GFLOPs: 503.8434. Time: 89.6279 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #47: GFLOPs: 386.6795. Time: 116.7851 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #48: GFLOPs: 1123.5340. Time: 40.1932 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #49: GFLOPs: 492.0596. Time: 91.7742 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #50: GFLOPs: 2183.5389. Time: 20.6813 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #51: GFLOPs: 544.7632. Time: 82.8955 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #52: GFLOPs: 199.0469. Time: 226.8732 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #53: GFLOPs: 3613.7637. Time: 12.4962 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #54: GFLOPs: 52.1346. Time: 866.1881 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #55: GFLOPs: 908.7182. Time: 49.6946 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #56: GFLOPs: 498.3354. Time: 90.6185 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #57: GFLOPs: 567.9903. Time: 79.5056 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #58: GFLOPs: 450.9249. Time: 100.1462 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #59: GFLOPs: 753.0724. Time: 59.9655 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #60: GFLOPs: 1883.8914. Time: 23.9708 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #61: GFLOPs: 216.9070. Time: 208.1925 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #62: GFLOPs: 2591.8734. Time: 17.4231 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #63: GFLOPs: 194.1743. Time: 232.5663 us. Best GFLOPs: 4221.6286
2024-03-21 12:23:14 [INFO] [task_scheduler.cc:131] [Task #147: fused_nn_conv2d_add_nn_relu_72] Trial #64: GFLOPs: 557.0843. Time: 81.0621 us. Best GFLOPs: 4221.6286
