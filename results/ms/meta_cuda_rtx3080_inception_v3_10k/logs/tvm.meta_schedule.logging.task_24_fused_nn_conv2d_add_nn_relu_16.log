2024-03-21 16:45:31 [INFO] [task_scheduler.cc:160] Initializing Task #24: "fused_nn_conv2d_add_nn_relu_16"
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(18), T.int64(12)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(18), T.int64(12)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3], T.float32(0))
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(12), T.int64(12), T.int64(128), T.int64(7), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(12), T.int64(12)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(12), T.int64(12)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(18), T.int64(12)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(7), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(27648)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(216))
                                    v2 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(216) // T.int64(12))
                                    v3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(114688)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(896))
                                    v1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(1), T.int64(64), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(24) * T.int64(64) + ff_3 * T.int64(64) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(24) // T.int64(4) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0 * T.int64(128) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(24) * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(24) // T.int64(4) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 64])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 4, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(18), T.int64(12)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(7), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(27648)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(216))
                                    v2 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(216) // T.int64(12))
                                    v3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(114688)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(896))
                                    v1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(1), T.int64(64), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(24) * T.int64(64) + ff_3 * T.int64(64) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(24) // T.int64(4) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(24) * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(24) // T.int64(4) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 64])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 4, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(18), T.int64(12)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(7), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(27648)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(216))
                                    v2 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(216) // T.int64(12))
                                    v3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(114688)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(896))
                                    v1 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(896) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(7), T.int64(1), T.int64(1), T.int64(64), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(24) * T.int64(64) + ff_3 * T.int64(64) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(24) // T.int64(4) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(2), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(24) * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(24) // T.int64(4) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 64])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 6, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 3, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 4, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 17:03:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:03:24 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 17:03:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 485 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 17:03:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 972 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 17:03:26 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-03-21 17:03:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 17:03:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 17:03:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 17:03:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 17:03:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9966  0.9958  0.9957  0.9954  0.9950  0.9944  0.9942  0.9935  0.9927  0.9924  0.9922  0.9922  0.9919  0.9911  0.9909
[17 : 32]:	0.9903  0.9902  0.9899  0.9896  0.9895  0.9886  0.9878  0.9870  0.9868  0.9868  0.9867  0.9862  0.9859  0.9856  0.9854  0.9852
[33 : 48]:	0.9848  0.9837  0.9832  0.9831  0.9830  0.9823  0.9817  0.9809  0.9800  0.9796  0.9784  0.9782  0.9782  0.9780  0.9768  0.9765
[49 : 64]:	0.9760  0.9753  0.9751  0.9749  0.9728  0.9725  0.9702  0.9696  0.9693  0.9687  0.9683  0.9680  0.9671  0.9668  0.9664  0.9661
2024-03-21 17:03:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:03:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #1: GFLOPs: 278.6870. Time: 118.6528 us. Best GFLOPs: 278.6870
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #2: GFLOPs: 440.7799. Time: 75.0193 us. Best GFLOPs: 440.7799
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #3: GFLOPs: 36.4162. Time: 908.0297 us. Best GFLOPs: 440.7799
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #4: GFLOPs: 79.0804. Time: 418.1444 us. Best GFLOPs: 440.7799
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #5: GFLOPs: 228.6057. Time: 144.6465 us. Best GFLOPs: 440.7799
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #6: GFLOPs: 151.8342. Time: 217.7836 us. Best GFLOPs: 440.7799
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #7: GFLOPs: 553.1700. Time: 59.7773 us. Best GFLOPs: 553.1700
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #8: GFLOPs: 645.7233. Time: 51.2093 us. Best GFLOPs: 645.7233
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #9: GFLOPs: 150.2307. Time: 220.1082 us. Best GFLOPs: 645.7233
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #10: GFLOPs: 224.0098. Time: 147.6141 us. Best GFLOPs: 645.7233
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #11: GFLOPs: 186.6150. Time: 177.1938 us. Best GFLOPs: 645.7233
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #12: GFLOPs: 768.3654. Time: 43.0355 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #13: GFLOPs: 143.6659. Time: 230.1660 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #14: GFLOPs: 107.0718. Time: 308.8302 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #15: GFLOPs: 512.0782. Time: 64.5741 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #16: GFLOPs: 328.4638. Time: 100.6717 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #17: GFLOPs: 460.2846. Time: 71.8403 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #18: GFLOPs: 429.3031. Time: 77.0248 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #19: GFLOPs: 657.0494. Time: 50.3265 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #20: GFLOPs: 497.8077. Time: 66.4253 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #21: GFLOPs: 342.0899. Time: 96.6618 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #22: GFLOPs: 510.3465. Time: 64.7933 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #23: GFLOPs: 85.6720. Time: 385.9720 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #24: GFLOPs: 237.6171. Time: 139.1609 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #25: GFLOPs: 150.3502. Time: 219.9333 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #26: GFLOPs: 584.2340. Time: 56.5989 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #27: GFLOPs: 429.4099. Time: 77.0057 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #28: GFLOPs: 145.1913. Time: 227.7479 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #29: GFLOPs: 202.2369. Time: 163.5063 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #30: GFLOPs: 359.2967. Time: 92.0326 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #31: GFLOPs: 450.9027. Time: 73.3351 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #32: GFLOPs: 117.0914. Time: 282.4034 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #33: GFLOPs: 165.6000. Time: 199.6800 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #34: GFLOPs: 161.9921. Time: 204.1273 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #35: GFLOPs: 283.2055. Time: 116.7598 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #36: GFLOPs: 127.7671. Time: 258.8069 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #37: GFLOPs: 173.4919. Time: 190.5968 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #38: GFLOPs: 574.2189. Time: 57.5861 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #39: GFLOPs: 352.9622. Time: 93.6843 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #40: GFLOPs: 111.0409. Time: 297.7913 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #41: GFLOPs: 387.5748. Time: 85.3177 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #42: GFLOPs: 331.1106. Time: 99.8669 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #43: GFLOPs: 337.5212. Time: 97.9702 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #44: GFLOPs: 159.9326. Time: 206.7559 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #45: GFLOPs: 115.3871. Time: 286.5745 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #46: GFLOPs: 46.9125. Time: 704.8654 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #47: GFLOPs: 59.7952. Time: 553.0047 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #48: GFLOPs: 11.5891. Time: 2853.2897 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #49: GFLOPs: 100.4992. Time: 329.0277 us. Best GFLOPs: 768.3654
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #50: GFLOPs: 1150.9660. Time: 28.7298 us. Best GFLOPs: 1150.9660
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #51: GFLOPs: 1266.9986. Time: 26.0987 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #52: GFLOPs: 259.2496. Time: 127.5489 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #53: GFLOPs: 150.9260. Time: 219.0942 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #54: GFLOPs: 418.5278. Time: 79.0079 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #55: GFLOPs: 120.8245. Time: 273.6779 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #56: GFLOPs: 509.1885. Time: 64.9406 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #57: GFLOPs: 869.1210. Time: 38.0465 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #58: GFLOPs: 496.7941. Time: 66.5608 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #59: GFLOPs: 232.8020. Time: 142.0392 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #60: GFLOPs: 151.5836. Time: 218.1436 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #61: GFLOPs: 145.4419. Time: 227.3555 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #62: GFLOPs: 714.9309. Time: 46.2520 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #63: GFLOPs: 115.3871. Time: 286.5745 us. Best GFLOPs: 1266.9986
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #64: GFLOPs: 82.3202. Time: 401.6877 us. Best GFLOPs: 1266.9986
2024-03-21 18:04:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 18:04:38 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 18:04:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 424 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 18:04:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 845 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 18:04:39 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-03-21 18:04:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 18:04:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 18:04:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 18:04:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071625fa08)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b38bc68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071b38dab8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b0718b5f1c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0718154a18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b1551f8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b38bb98)]: 0 failure(s)
2024-03-21 18:04:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0566  1.0542  1.0517  1.0351  0.9978  0.9887  0.9880  0.9800  0.9769  0.9769  0.9717  0.9710  0.9661  0.9661  0.9457  0.9434
[17 : 32]:	0.9418  0.9418  0.9409  0.9275  0.9245  0.9244  0.9244  0.9241  0.9231  0.9231  0.9229  0.9210  0.9202  0.9192  0.9148  0.9124
[33 : 48]:	0.9102  0.9101  0.9097  0.9090  0.9069  0.9056  0.9055  0.9021  0.9020  0.8988  0.8987  0.8957  0.8930  0.8908  0.8908  0.8885
[49 : 64]:	0.8882  0.8882  0.8882  0.8881  0.8871  0.8846  0.8845  0.8824  0.8812  0.8810  0.8788  0.8770  0.8763  0.8725  0.8694  0.8669
2024-03-21 18:04:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 18:04:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #65: GFLOPs: 1754.8973. Time: 18.8427 us. Best GFLOPs: 1754.8973
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #66: GFLOPs: 1746.8321. Time: 18.9297 us. Best GFLOPs: 1754.8973
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #67: GFLOPs: 1671.5594. Time: 19.7821 us. Best GFLOPs: 1754.8973
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #68: GFLOPs: 788.0648. Time: 41.9598 us. Best GFLOPs: 1754.8973
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #69: GFLOPs: 1678.2803. Time: 19.7029 us. Best GFLOPs: 1754.8973
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #70: GFLOPs: 1727.6160. Time: 19.1403 us. Best GFLOPs: 1754.8973
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #71: GFLOPs: 1721.4229. Time: 19.2091 us. Best GFLOPs: 1754.8973
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #72: GFLOPs: 1126.2017. Time: 29.3615 us. Best GFLOPs: 1754.8973
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #73: GFLOPs: 1177.2870. Time: 28.0875 us. Best GFLOPs: 1754.8973
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #74: GFLOPs: 1178.1685. Time: 28.0665 us. Best GFLOPs: 1754.8973
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #75: GFLOPs: 2042.7820. Time: 16.1872 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #76: GFLOPs: 1137.8954. Time: 29.0598 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #77: GFLOPs: 1279.9558. Time: 25.8345 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #78: GFLOPs: 1241.1190. Time: 26.6429 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #79: GFLOPs: 1760.2465. Time: 18.7854 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #80: GFLOPs: 1747.3004. Time: 18.9246 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #81: GFLOPs: 1280.5042. Time: 25.8234 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #82: GFLOPs: 1260.1247. Time: 26.2411 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #83: GFLOPs: 1696.7762. Time: 19.4881 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #84: GFLOPs: 1731.2410. Time: 19.1002 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #85: GFLOPs: 1953.4243. Time: 16.9277 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #86: GFLOPs: 1246.9595. Time: 26.5181 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #87: GFLOPs: 1281.1557. Time: 25.8103 us. Best GFLOPs: 2042.7820
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #88: GFLOPs: 2211.0899. Time: 14.9551 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #89: GFLOPs: 1229.8577. Time: 26.8869 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #90: GFLOPs: 1252.1131. Time: 26.4090 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #91: GFLOPs: 1595.1896. Time: 20.7292 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #92: GFLOPs: 1731.0163. Time: 19.1027 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #93: GFLOPs: 1727.1281. Time: 19.1457 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #94: GFLOPs: 1953.4430. Time: 16.9276 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #95: GFLOPs: 1749.5310. Time: 18.9005 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #96: GFLOPs: 1239.4272. Time: 26.6793 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #97: GFLOPs: 1682.1301. Time: 19.6578 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #98: GFLOPs: 1999.6750. Time: 16.5362 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #99: GFLOPs: 1913.7704. Time: 17.2785 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #100: GFLOPs: 1797.2369. Time: 18.3988 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #101: GFLOPs: 1300.2802. Time: 25.4307 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #102: GFLOPs: 1280.4871. Time: 25.8238 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #103: GFLOPs: 2190.9303. Time: 15.0927 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #104: GFLOPs: 1050.6103. Time: 31.4741 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #105: GFLOPs: 1322.0027. Time: 25.0128 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #106: GFLOPs: 1282.2884. Time: 25.7875 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #107: GFLOPs: 1072.1268. Time: 30.8424 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #108: GFLOPs: 1126.1913. Time: 29.3618 us. Best GFLOPs: 2211.0899
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #109: GFLOPs: 2473.1746. Time: 13.3703 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #110: GFLOPs: 1138.1865. Time: 29.0524 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #111: GFLOPs: 1138.2084. Time: 29.0518 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #112: GFLOPs: 1117.7462. Time: 29.5836 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #113: GFLOPs: 1030.9926. Time: 32.0730 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #114: GFLOPs: 1138.1513. Time: 29.0533 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #115: GFLOPs: 1138.1363. Time: 29.0536 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #116: GFLOPs: 2014.7277. Time: 16.4126 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #117: GFLOPs: 678.3739. Time: 48.7445 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #118: GFLOPs: 1144.1323. Time: 28.9014 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #119: GFLOPs: 1441.9569. Time: 22.9320 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #120: GFLOPs: 1140.0055. Time: 29.0060 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #121: GFLOPs: 602.4767. Time: 54.8851 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #122: GFLOPs: 1136.7246. Time: 29.0897 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #123: GFLOPs: 1133.4301. Time: 29.1743 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #124: GFLOPs: 1590.7635. Time: 20.7869 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #125: GFLOPs: 944.9530. Time: 34.9933 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #126: GFLOPs: 352.9453. Time: 93.6888 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #127: GFLOPs: 278.3597. Time: 118.7924 us. Best GFLOPs: 2473.1746
2024-03-21 18:05:41 [INFO] [task_scheduler.cc:131] [Task #24: fused_nn_conv2d_add_nn_relu_16] Trial #128: GFLOPs: 9.8646. Time: 3352.0981 us. Best GFLOPs: 2473.1746
