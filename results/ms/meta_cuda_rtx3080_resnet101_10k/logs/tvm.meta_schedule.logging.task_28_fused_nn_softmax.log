2024-03-22 00:52:27 [INFO] [task_scheduler.cc:160] Initializing Task #28: "fused_nn_softmax"
2024-03-22 00:52:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-03-22 00:52:27 [INFO] [task_scheduler.cc:164] Total 4 design space(s) generated
2024-03-22 00:52:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(256) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(256) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-03-22 00:52:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for k_0 in range(T.int64(125)):
                    for k_1 in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(8) + k_1)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(256) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(256) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=1)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
2024-03-22 00:52:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                for i1_0 in range(T.int64(16)):
                    for i1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(64) + i1_1)
                            T.where(i1_0 * T.int64(64) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
2024-03-22 00:52:27 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem_shared[v_i0])
                            with T.init():
                                T_softmax_maxelem_shared[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_shared[v_i0] = T.max(T_softmax_maxelem_shared[v_i0], p0[v_i0, v_k])
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(16)):
                    for ax1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(64) + ax1_1)
                            T.where(ax1_0 * T.int64(64) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem_shared[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem_shared[v_i0])
                for i1_0 in range(T.int64(16)):
                    for i1_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(64) + i1_1)
                            T.where(i1_0 * T.int64(64) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem_shared[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem_shared[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
b16, b17 = sch.get_consumers(block=b0)
l18, l19, l20, l21 = sch.get_loops(block=b16)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l22, l23, l24 = sch.get_loops(block=b0)
l25, l26 = sch.split(loop=l24, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l26, thread_axis="threadIdx.x")
v27 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v27)
l28, l29, l30 = sch.get_loops(block=b3)
l31 = sch.fuse(l28, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
2024-03-22 01:23:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 01:23:29 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-22 01:23:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c8860d9e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c88711d9998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c88711d92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c886994e408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c886c91b038)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c8860dff5c8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c88711d9898)]: 0 failure(s)
2024-03-22 01:23:30 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-22 01:23:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c8860d9e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c88711d9998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c88711d92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c886994e408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c886c91b038)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c8860dff5c8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c88711d9898)]: 0 failure(s)
2024-03-22 01:23:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c8860d9e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c88711d9998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c88711d92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c886994e408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c886c91b038)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c8860dff5c8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c88711d9898)]: 0 failure(s)
2024-03-22 01:23:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c8860d9e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c88711d9998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c88711d92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c886994e408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c886c91b038)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c8860dff5c8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c88711d9898)]: 0 failure(s)
2024-03-22 01:23:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c8860d9e878)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c88711d9998)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c88711d92b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c886994e408)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c886c91b038)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c8860dff5c8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c88711d9898)]: 0 failure(s)
2024-03-22 01:23:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9978  0.9860  0.9856  0.9801  0.9780  0.9746  0.9699  0.9693  0.9672  0.9571  0.9571  0.9558  0.9444  0.9428  0.9350  0.9345
[17 : 32]:	0.9311  0.9293  0.9212  0.9201  0.9183  0.9075  0.9023  0.9008  0.8948  0.8918  0.8838  0.8828  0.8802  0.8766  0.8762  0.8745
[33 : 48]:	0.8676  0.8621  0.8582  0.8514  0.8434  0.8386  0.8324  0.8307  0.8254  0.8191  0.8107  0.8011  0.7987  0.7901  0.7851  0.7777
[49 : 64]:	0.7763  0.7759  0.7736  0.7710  0.7682  0.7667  0.7664  0.7657  0.7655  0.7595  0.7558  0.7546  0.7543  0.7542  0.7510  0.7494
2024-03-22 01:23:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 01:23:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #1: GFLOPs: 0.1476. Time: 27.0956 us. Best GFLOPs: 0.1476
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #2: GFLOPs: 0.4254. Time: 9.4028 us. Best GFLOPs: 0.4254
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #3: GFLOPs: 0.1456. Time: 27.4687 us. Best GFLOPs: 0.4254
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #4: GFLOPs: 0.1491. Time: 26.8250 us. Best GFLOPs: 0.4254
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #5: GFLOPs: 0.4413. Time: 9.0646 us. Best GFLOPs: 0.4413
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #6: GFLOPs: 0.2134. Time: 18.7413 us. Best GFLOPs: 0.4413
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #7: GFLOPs: 0.1222. Time: 32.7426 us. Best GFLOPs: 0.4413
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #8: GFLOPs: 0.1477. Time: 27.0907 us. Best GFLOPs: 0.4413
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #9: GFLOPs: 0.4176. Time: 9.5788 us. Best GFLOPs: 0.4413
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #10: GFLOPs: 1.3605. Time: 2.9401 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #11: GFLOPs: 0.1662. Time: 24.0638 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #12: GFLOPs: 0.1520. Time: 26.3110 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #13: GFLOPs: 0.1496. Time: 26.7409 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #14: GFLOPs: 0.1222. Time: 32.7441 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #15: GFLOPs: 0.1456. Time: 27.4696 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #16: GFLOPs: 0.1490. Time: 26.8374 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #17: GFLOPs: 0.1839. Time: 21.7503 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #18: GFLOPs: 0.2049. Time: 19.5189 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #19: GFLOPs: 0.1456. Time: 27.4752 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #20: GFLOPs: 0.2189. Time: 18.2723 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #21: GFLOPs: 0.3225. Time: 12.4045 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #22: GFLOPs: 0.1496. Time: 26.7331 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #23: GFLOPs: 0.2135. Time: 18.7349 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #24: GFLOPs: 0.2195. Time: 18.2264 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #25: GFLOPs: 0.1477. Time: 27.0888 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #26: GFLOPs: 0.2039. Time: 19.6162 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #27: GFLOPs: 0.4230. Time: 9.4568 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #28: GFLOPs: 0.1489. Time: 26.8569 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #29: GFLOPs: 0.1495. Time: 26.7625 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #30: GFLOPs: 0.1456. Time: 27.4725 us. Best GFLOPs: 1.3605
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #31: GFLOPs: 1.7502. Time: 2.2854 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #32: GFLOPs: 0.1499. Time: 26.6932 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #33: GFLOPs: 1.0637. Time: 3.7605 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #34: GFLOPs: 0.1368. Time: 29.2357 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #35: GFLOPs: 0.1491. Time: 26.8302 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #36: GFLOPs: 0.2048. Time: 19.5269 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #37: GFLOPs: 0.1751. Time: 22.8464 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #38: GFLOPs: 0.1498. Time: 26.6998 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #39: GFLOPs: 0.2201. Time: 18.1763 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #40: GFLOPs: 0.1456. Time: 27.4729 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #41: GFLOPs: 0.2200. Time: 18.1796 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #42: GFLOPs: 0.1496. Time: 26.7423 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #43: GFLOPs: 1.7325. Time: 2.3088 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #44: GFLOPs: 0.1222. Time: 32.7355 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #45: GFLOPs: 0.1491. Time: 26.8316 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #46: GFLOPs: 0.2203. Time: 18.1568 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #47: GFLOPs: 0.1496. Time: 26.7332 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #48: GFLOPs: 0.1222. Time: 32.7305 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #49: GFLOPs: 0.1490. Time: 26.8380 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #50: GFLOPs: 0.2039. Time: 19.6137 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #51: GFLOPs: 0.2180. Time: 18.3501 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #52: GFLOPs: 0.2191. Time: 18.2523 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #53: GFLOPs: 0.1476. Time: 27.0936 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #54: GFLOPs: 0.1496. Time: 26.7454 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #55: GFLOPs: 0.1751. Time: 22.8462 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #56: GFLOPs: 0.1477. Time: 27.0882 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #57: GFLOPs: 0.2068. Time: 19.3414 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #58: GFLOPs: 0.1497. Time: 26.7271 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #59: GFLOPs: 0.2131. Time: 18.7746 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #60: GFLOPs: 0.1477. Time: 27.0766 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #61: GFLOPs: 0.2192. Time: 18.2514 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #62: GFLOPs: 0.2193. Time: 18.2432 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #63: GFLOPs: 0.1222. Time: 32.7379 us. Best GFLOPs: 1.7502
2024-03-22 01:24:30 [INFO] [task_scheduler.cc:131] [Task #28: fused_nn_softmax] Trial #64: GFLOPs: 0.1222. Time: 32.7449 us. Best GFLOPs: 1.7502
