2024-03-21 10:38:33 [INFO] [task_scheduler.cc:160] Initializing Task #183: "fused_nn_global_avg_pool2d"
2024-03-21 10:38:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(1664), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1664), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-03-21 10:38:33 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-03-21 10:38:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(13), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1664))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-03-21 10:38:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1664), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(1664), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(1664), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(1664), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(64)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-03-21 12:19:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:19:32 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 12:19:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4426708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd48add68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3c349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd322d0b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd814a238)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1dd25d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd35a1b48)]: 0 failure(s)
2024-03-21 12:19:32 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-21 12:19:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4426708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd48add68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3c349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd322d0b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd814a238)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1dd25d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd35a1b48)]: 0 failure(s)
2024-03-21 12:19:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4426708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd48add68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3c349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd322d0b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd814a238)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1dd25d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd35a1b48)]: 0 failure(s)
2024-03-21 12:19:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4426708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd48add68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3c349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd322d0b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd814a238)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1dd25d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd35a1b48)]: 0 failure(s)
2024-03-21 12:19:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd4426708)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd48add68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd3c349b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd322d0b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd814a238)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1dd25d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd35a1b48)]: 0 failure(s)
2024-03-21 12:19:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9969  0.9943  0.9833  0.9790  0.9770  0.9735  0.9701  0.9565  0.9504  0.9463  0.9420  0.9376  0.9343  0.9331  0.9291  0.9276
[17 : 32]:	0.9260  0.9233  0.9144  0.9036  0.9020  0.8854  0.8733  0.8611  0.8591  0.8567  0.8538  0.8498  0.8434  0.8400  0.8390  0.8384
[33 : 48]:	0.8334  0.8307  0.8217  0.8018  0.7983  0.7875  0.7832  0.7772  0.7767  0.7562  0.7557  0.7439  0.7436  0.7419  0.7390  0.7379
[49 : 64]:	0.7366  0.7355  0.7191  0.7172  0.7160  0.7118  0.7077  0.6964  0.6949  0.6912  0.6889  0.6867  0.6810  0.6805  0.6803  0.6784
2024-03-21 12:19:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:19:33 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 11.1544. Time: 7.4589 us. Best GFLOPs: 11.1544
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 18.8771. Time: 4.4075 us. Best GFLOPs: 18.8771
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 16.1695. Time: 5.1455 us. Best GFLOPs: 18.8771
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 18.8144. Time: 4.4221 us. Best GFLOPs: 18.8771
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 18.8137. Time: 4.4223 us. Best GFLOPs: 18.8771
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 19.0144. Time: 4.3756 us. Best GFLOPs: 19.0144
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 10.5181. Time: 7.9102 us. Best GFLOPs: 19.0144
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 18.9559. Time: 4.3891 us. Best GFLOPs: 19.0144
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 18.9561. Time: 4.3891 us. Best GFLOPs: 19.0144
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 18.8620. Time: 4.4110 us. Best GFLOPs: 19.0144
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 16.1665. Time: 5.1464 us. Best GFLOPs: 19.0144
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 32.3129. Time: 2.5748 us. Best GFLOPs: 32.3129
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 32.3133. Time: 2.5748 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 18.9816. Time: 4.3832 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 10.5165. Time: 7.9114 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 5.4626. Time: 15.2307 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 19.0379. Time: 4.3702 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 19.0671. Time: 4.3635 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 11.0262. Time: 7.5457 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 18.9739. Time: 4.3850 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 18.8076. Time: 4.4237 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 16.1660. Time: 5.1466 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 18.9866. Time: 4.3820 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 32.3117. Time: 2.5749 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 18.9579. Time: 4.3887 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 5.4627. Time: 15.2306 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 11.4059. Time: 7.2945 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 18.9913. Time: 4.3809 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 19.0402. Time: 4.3697 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 16.1661. Time: 5.1466 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 19.0973. Time: 4.3566 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 19.0453. Time: 4.3685 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 18.7757. Time: 4.4313 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 5.4517. Time: 15.2614 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 16.1662. Time: 5.1465 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 15.7573. Time: 5.2801 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 16.1620. Time: 5.1479 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 5.5106. Time: 15.0981 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 19.1224. Time: 4.3509 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 11.0266. Time: 7.5454 us. Best GFLOPs: 32.3133
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 32.3160. Time: 2.5746 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 10.5191. Time: 7.9094 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 18.8214. Time: 4.4205 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 18.9349. Time: 4.3940 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 5.4625. Time: 15.2310 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 11.4295. Time: 7.2794 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 18.8409. Time: 4.4159 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 6.2748. Time: 13.2595 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 5.4519. Time: 15.2609 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 18.8888. Time: 4.4047 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 5.4522. Time: 15.2599 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 18.9416. Time: 4.3925 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 11.0260. Time: 7.5458 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 18.6838. Time: 4.4531 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 18.1779. Time: 4.5770 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 18.6921. Time: 4.4511 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 15.7556. Time: 5.2807 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 29.7631. Time: 2.7954 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 19.0093. Time: 4.3768 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 18.9468. Time: 4.3912 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 5.4531. Time: 15.2574 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 26.7303. Time: 3.1126 us. Best GFLOPs: 32.3160
2024-03-21 12:24:08 [INFO] [task_scheduler.cc:131] [Task #183: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 32.3160. Time: 2.5746 us. Best GFLOPs: 32.3160
