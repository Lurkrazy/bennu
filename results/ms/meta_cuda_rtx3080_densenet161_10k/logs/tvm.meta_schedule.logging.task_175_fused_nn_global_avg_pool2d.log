2024-03-21 07:30:27 [INFO] [task_scheduler.cc:160] Initializing Task #175: "fused_nn_global_avg_pool2d"
2024-03-21 07:30:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2208), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(2208), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2208), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-03-21 07:30:27 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-03-21 07:30:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2208), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(5), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2208), ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2208))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(35), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2208), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(2208))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-03-21 07:30:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2208), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(2208), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(2208), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2208), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2208), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(64)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-03-21 09:08:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 09:08:01 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 09:08:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1a0c278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f263dff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f037aa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5501898)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8edc5ad18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0c3c178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f263e0f8)]: 0 failure(s)
2024-03-21 09:08:01 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-21 09:08:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1a0c278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f263dff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f037aa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5501898)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8edc5ad18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0c3c178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f263e0f8)]: 0 failure(s)
2024-03-21 09:08:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1a0c278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f263dff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f037aa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5501898)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8edc5ad18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0c3c178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f263e0f8)]: 0 failure(s)
2024-03-21 09:08:02 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1a0c278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f263dff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f037aa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5501898)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8edc5ad18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0c3c178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f263e0f8)]: 0 failure(s)
2024-03-21 09:08:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f1a0c278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f263dff8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f037aa28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5501898)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8edc5ad18)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f0c3c178)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f263e0f8)]: 0 failure(s)
2024-03-21 09:08:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9985  0.9977  0.9932  0.9868  0.9794  0.9720  0.9717  0.9707  0.9677  0.9643  0.9576  0.9543  0.9524  0.9453  0.9428
[17 : 32]:	0.9335  0.9273  0.9268  0.9177  0.9132  0.9131  0.8973  0.8926  0.8905  0.8887  0.8830  0.8673  0.8663  0.8609  0.8578  0.8568
[33 : 48]:	0.8496  0.8388  0.8312  0.8285  0.8275  0.8272  0.8221  0.8115  0.8009  0.8002  0.7978  0.7973  0.7961  0.7898  0.7891  0.7766
[49 : 64]:	0.7755  0.7727  0.7680  0.7680  0.7658  0.7644  0.7521  0.7468  0.7339  0.7320  0.7288  0.7287  0.7137  0.7093  0.6969  0.6897
2024-03-21 09:08:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 09:08:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 14.6230. Time: 7.5498 us. Best GFLOPs: 14.6230
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 15.0858. Time: 7.3181 us. Best GFLOPs: 15.0858
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 30.7430. Time: 3.5911 us. Best GFLOPs: 30.7430
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 10.9959. Time: 10.0401 us. Best GFLOPs: 30.7430
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 25.0027. Time: 4.4155 us. Best GFLOPs: 30.7430
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 24.7675. Time: 4.4574 us. Best GFLOPs: 30.7430
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 24.8247. Time: 4.4472 us. Best GFLOPs: 30.7430
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 24.8252. Time: 4.4471 us. Best GFLOPs: 30.7430
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 25.0174. Time: 4.4129 us. Best GFLOPs: 30.7430
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 25.3299. Time: 4.3585 us. Best GFLOPs: 30.7430
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 21.0263. Time: 5.2506 us. Best GFLOPs: 30.7430
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 34.8672. Time: 3.1663 us. Best GFLOPs: 34.8672
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 24.8987. Time: 4.4340 us. Best GFLOPs: 34.8672
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 36.6226. Time: 3.0145 us. Best GFLOPs: 36.6226
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 36.6163. Time: 3.0150 us. Best GFLOPs: 36.6226
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 36.5867. Time: 3.0175 us. Best GFLOPs: 36.6226
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 10.9823. Time: 10.0525 us. Best GFLOPs: 36.6226
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 36.6913. Time: 3.0089 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 14.7919. Time: 7.4636 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 25.2261. Time: 4.3764 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 20.9585. Time: 5.2675 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 21.0168. Time: 5.2529 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 24.9806. Time: 4.4194 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 35.8314. Time: 3.0811 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 25.1928. Time: 4.3822 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 24.8754. Time: 4.4381 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 15.0265. Time: 7.3470 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 20.4972. Time: 5.3861 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 25.2958. Time: 4.3644 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 21.1185. Time: 5.2276 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 36.6195. Time: 3.0148 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 7.2802. Time: 15.1644 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 25.0520. Time: 4.4068 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 7.2177. Time: 15.2956 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 15.0126. Time: 7.3538 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 20.1634. Time: 5.4753 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 14.5721. Time: 7.5761 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 24.9129. Time: 4.4314 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 7.2227. Time: 15.2852 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 10.9816. Time: 10.0532 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 20.5154. Time: 5.3813 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 36.5881. Time: 3.0174 us. Best GFLOPs: 36.6913
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 36.7091. Time: 3.0074 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 25.3434. Time: 4.3562 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 7.3147. Time: 15.0928 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 25.0416. Time: 4.4087 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 24.8543. Time: 4.4419 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 20.7020. Time: 5.3328 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 36.5657. Time: 3.0192 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 34.8678. Time: 3.1662 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 7.1772. Time: 15.3821 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 14.9833. Time: 7.3682 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 24.2968. Time: 4.5438 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 25.0406. Time: 4.4088 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 25.0076. Time: 4.4147 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 14.8626. Time: 7.4280 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 24.8445. Time: 4.4436 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 20.9502. Time: 5.2696 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 25.0348. Time: 4.4099 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 21.0431. Time: 5.2464 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 24.8281. Time: 4.4466 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 14.9828. Time: 7.3684 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 34.8676. Time: 3.1663 us. Best GFLOPs: 36.7091
2024-03-21 09:12:36 [INFO] [task_scheduler.cc:131] [Task #175: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 7.1768. Time: 15.3829 us. Best GFLOPs: 36.7091
