2024-03-21 07:30:19 [INFO] [task_scheduler.cc:160] Initializing Task #50: "fused_nn_conv2d_add_nn_relu_24"
2024-03-21 07:30:19 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(2064), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(2064), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:19 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:19 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(344), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(84)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0 * T.int64(6) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(6))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0 * T.int64(6) + ax0_ax1_ax2_ax3_fused % T.int64(6))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(2064), rc_0 * T.int64(6) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 6, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[344, 6, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:19 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(344), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(84)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(6))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused % T.int64(6))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(6) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 6, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[344, 6, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:19 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(2064), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(2064), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(344), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(84)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(144)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(6))
                                    v1 = T.axis.spatial(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused % T.int64(6))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(2064), rc_0_ry_0_rx_0_fused * T.int64(6) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(24) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(12) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 6, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[344, 6, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:52:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 07:52:58 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 07:52:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 490 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 07:52:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 968 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 07:52:59 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-03-21 07:53:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 07:53:02 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 07:53:04 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 07:53:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 07:53:05 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9987  0.9982  0.9973  0.9969  0.9965  0.9964  0.9964  0.9959  0.9954  0.9946  0.9946  0.9944  0.9943  0.9940  0.9938  0.9925
[17 : 32]:	0.9922  0.9921  0.9919  0.9919  0.9915  0.9906  0.9891  0.9889  0.9875  0.9875  0.9865  0.9864  0.9861  0.9858  0.9847  0.9837
[33 : 48]:	0.9830  0.9826  0.9823  0.9814  0.9812  0.9800  0.9791  0.9789  0.9788  0.9784  0.9780  0.9771  0.9770  0.9760  0.9756  0.9755
[49 : 64]:	0.9744  0.9743  0.9738  0.9716  0.9715  0.9711  0.9708  0.9692  0.9691  0.9689  0.9689  0.9688  0.9674  0.9674  0.9673  0.9668
2024-03-21 07:53:06 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 07:53:06 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #1: GFLOPs: 204.7212. Time: 759.1798 us. Best GFLOPs: 204.7212
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #2: GFLOPs: 395.0983. Time: 393.3708 us. Best GFLOPs: 395.0983
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #3: GFLOPs: 589.5783. Time: 263.6124 us. Best GFLOPs: 589.5783
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #4: GFLOPs: 251.6628. Time: 617.5731 us. Best GFLOPs: 589.5783
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #5: GFLOPs: 12.6402. Time: 12295.7364 us. Best GFLOPs: 589.5783
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #6: GFLOPs: 34.1801. Time: 4547.0943 us. Best GFLOPs: 589.5783
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #7: GFLOPs: 215.1248. Time: 722.4651 us. Best GFLOPs: 589.5783
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #8: GFLOPs: 9.8746. Time: 15739.4649 us. Best GFLOPs: 589.5783
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #9: GFLOPs: 481.8892. Time: 322.5226 us. Best GFLOPs: 589.5783
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #10: GFLOPs: 867.7538. Time: 179.1063 us. Best GFLOPs: 867.7538
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #11: GFLOPs: 537.5929. Time: 289.1038 us. Best GFLOPs: 867.7538
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #12: GFLOPs: 89.0570. Time: 1745.1762 us. Best GFLOPs: 867.7538
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #13: GFLOPs: 392.7395. Time: 395.7335 us. Best GFLOPs: 867.7538
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #14: GFLOPs: 127.1013. Time: 1222.8059 us. Best GFLOPs: 867.7538
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #15: GFLOPs: 235.6481. Time: 659.5436 us. Best GFLOPs: 867.7538
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #16: GFLOPs: 60.8037. Time: 2556.0990 us. Best GFLOPs: 867.7538
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #17: GFLOPs: 974.6383. Time: 159.4645 us. Best GFLOPs: 974.6383
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #18: GFLOPs: 822.5502. Time: 188.9492 us. Best GFLOPs: 974.6383
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #19: GFLOPs: 676.8102. Time: 229.6363 us. Best GFLOPs: 974.6383
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #20: GFLOPs: 438.8469. Time: 354.1558 us. Best GFLOPs: 974.6383
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #21: GFLOPs: 1275.6539. Time: 121.8357 us. Best GFLOPs: 1275.6539
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #22: GFLOPs: 443.1782. Time: 350.6945 us. Best GFLOPs: 1275.6539
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #23: GFLOPs: 24.0159. Time: 6471.5519 us. Best GFLOPs: 1275.6539
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #24: GFLOPs: 23.9680. Time: 6484.4799 us. Best GFLOPs: 1275.6539
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #25: GFLOPs: 402.8326. Time: 385.8183 us. Best GFLOPs: 1275.6539
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #26: GFLOPs: 213.2507. Time: 728.8142 us. Best GFLOPs: 1275.6539
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #27: GFLOPs: 609.7923. Time: 254.8739 us. Best GFLOPs: 1275.6539
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #28: GFLOPs: 339.4740. Time: 457.8264 us. Best GFLOPs: 1275.6539
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #29: GFLOPs: 1403.8118. Time: 110.7130 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #30: GFLOPs: 873.8643. Time: 177.8539 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #31: GFLOPs: 31.8062. Time: 4886.4717 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #32: GFLOPs: 778.3258. Time: 199.6852 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #33: GFLOPs: 13.0760. Time: 11885.9303 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #34: GFLOPs: 135.5885. Time: 1146.2633 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #35: GFLOPs: 620.7175. Time: 250.3879 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #36: GFLOPs: 537.1121. Time: 289.3626 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #37: GFLOPs: 61.6487. Time: 2521.0624 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #38: GFLOPs: 56.2550. Time: 2762.7796 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #39: GFLOPs: 436.6103. Time: 355.9700 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #40: GFLOPs: 1344.2795. Time: 115.6160 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #41: GFLOPs: 454.6084. Time: 341.8770 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #42: GFLOPs: 350.9414. Time: 442.8664 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #43: GFLOPs: 201.5493. Time: 771.1271 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #44: GFLOPs: 9.5097. Time: 16343.3324 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #45: GFLOPs: 230.4612. Time: 674.3875 us. Best GFLOPs: 1403.8118
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #46: GFLOPs: 1413.7735. Time: 109.9329 us. Best GFLOPs: 1413.7735
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #47: GFLOPs: 530.7884. Time: 292.8100 us. Best GFLOPs: 1413.7735
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #48: GFLOPs: 33.4811. Time: 4642.0246 us. Best GFLOPs: 1413.7735
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #49: GFLOPs: 551.8901. Time: 281.6143 us. Best GFLOPs: 1413.7735
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #50: GFLOPs: 961.9642. Time: 161.5654 us. Best GFLOPs: 1413.7735
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #51: GFLOPs: 168.8620. Time: 920.3975 us. Best GFLOPs: 1413.7735
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #52: GFLOPs: 1473.3981. Time: 105.4842 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #53: GFLOPs: 909.7398. Time: 170.8402 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #54: GFLOPs: 32.0583. Time: 4848.0548 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #55: GFLOPs: 121.0966. Time: 1283.4396 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #56: GFLOPs: 35.3468. Time: 4397.0031 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #57: GFLOPs: 1015.9785. Time: 152.9758 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #58: GFLOPs: 233.2266. Time: 666.3913 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #59: GFLOPs: 361.8483. Time: 429.5175 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #60: GFLOPs: 359.7446. Time: 432.0292 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #61: GFLOPs: 1209.9653. Time: 128.4501 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #62: GFLOPs: 232.0000. Time: 669.9144 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #63: GFLOPs: 444.3071. Time: 349.8035 us. Best GFLOPs: 1473.3981
2024-03-21 09:10:18 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #64: GFLOPs: 5.5212. Time: 28149.7592 us. Best GFLOPs: 1473.3981
2024-03-21 09:33:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 09:33:02 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 09:33:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 429 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 09:33:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 849 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 09:33:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 1270 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 09:33:04 [INFO] [evolutionary_search.cc:723] Sampled 74 candidate(s)
2024-03-21 09:33:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 09:33:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 09:33:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 09:33:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8efd5aa98)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8efda02c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f1e8ea78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f0fb7628)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f5a8ef88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8ea5a84d8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f0396d48)]: 0 failure(s)
2024-03-21 09:33:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5759  1.2010  1.1922  1.1876  1.1081  1.1034  1.0825  1.0765  1.0690  1.0674  1.0532  1.0506  1.0383  1.0372  1.0361  1.0337
[17 : 32]:	1.0321  1.0270  1.0265  1.0229  1.0204  1.0198  1.0198  1.0191  1.0156  1.0152  1.0152  1.0151  1.0090  1.0090  1.0082  1.0061
[33 : 48]:	1.0047  1.0045  1.0032  1.0032  1.0028  1.0017  1.0017  1.0011  1.0009  1.0007  1.0005  0.9992  0.9992  0.9990  0.9986  0.9982
[49 : 64]:	0.9981  0.9979  0.9976  0.9962  0.9960  0.9944  0.9937  0.9931  0.9930  0.9918  0.9912  0.9899  0.9894  0.9893  0.9881  0.9867
2024-03-21 09:33:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 09:33:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #65: GFLOPs: 1620.0969. Time: 95.9326 us. Best GFLOPs: 1620.0969
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #66: GFLOPs: 2879.6028. Time: 53.9728 us. Best GFLOPs: 2879.6028
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #67: GFLOPs: 2999.3603. Time: 51.8178 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #68: GFLOPs: 2998.7485. Time: 51.8283 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #69: GFLOPs: 1436.6900. Time: 108.1793 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #70: GFLOPs: 1442.4873. Time: 107.7446 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #71: GFLOPs: 1379.8307. Time: 112.6371 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #72: GFLOPs: 1389.4966. Time: 111.8536 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #73: GFLOPs: 2764.2265. Time: 56.2256 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #74: GFLOPs: 1335.3342. Time: 116.3905 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #75: GFLOPs: 2138.2463. Time: 72.6858 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #76: GFLOPs: 2523.7728. Time: 61.5825 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #77: GFLOPs: 2542.1862. Time: 61.1364 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #78: GFLOPs: 2498.2297. Time: 62.2121 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #79: GFLOPs: 2499.0042. Time: 62.1928 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #80: GFLOPs: 1852.4527. Time: 83.8997 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #81: GFLOPs: 2487.6277. Time: 62.4773 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #82: GFLOPs: 2452.0150. Time: 63.3847 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #83: GFLOPs: 1904.1079. Time: 81.6236 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #84: GFLOPs: 1456.7209. Time: 106.6918 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #85: GFLOPs: 1993.0445. Time: 77.9813 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #86: GFLOPs: 2487.4319. Time: 62.4822 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #87: GFLOPs: 1898.9569. Time: 81.8450 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #88: GFLOPs: 2076.0943. Time: 74.8618 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #89: GFLOPs: 2291.4402. Time: 67.8264 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #90: GFLOPs: 2439.5463. Time: 63.7086 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #91: GFLOPs: 2187.9696. Time: 71.0340 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #92: GFLOPs: 2413.1694. Time: 64.4050 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #93: GFLOPs: 2390.0121. Time: 65.0290 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #94: GFLOPs: 1347.3015. Time: 115.3566 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #95: GFLOPs: 2137.9856. Time: 72.6947 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #96: GFLOPs: 2419.0236. Time: 64.2491 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #97: GFLOPs: 2433.8424. Time: 63.8579 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #98: GFLOPs: 1451.5136. Time: 107.0745 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #99: GFLOPs: 1769.6874. Time: 87.8235 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #100: GFLOPs: 1377.0537. Time: 112.8643 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #101: GFLOPs: 2360.1916. Time: 65.8507 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #102: GFLOPs: 1992.3597. Time: 78.0081 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #103: GFLOPs: 1880.0041. Time: 82.6701 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #104: GFLOPs: 2071.6715. Time: 75.0216 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #105: GFLOPs: 2339.2520. Time: 66.4401 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #106: GFLOPs: 2054.0759. Time: 75.6643 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #107: GFLOPs: 2066.4483. Time: 75.2112 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #108: GFLOPs: 1372.1523. Time: 113.2674 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #109: GFLOPs: 1875.1149. Time: 82.8857 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #110: GFLOPs: 2434.5608. Time: 63.8391 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #111: GFLOPs: 1969.4203. Time: 78.9167 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #112: GFLOPs: 2337.0938. Time: 66.5015 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #113: GFLOPs: 2061.9772. Time: 75.3743 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #114: GFLOPs: 2336.2163. Time: 66.5264 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #115: GFLOPs: 2340.7220. Time: 66.3984 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #116: GFLOPs: 1722.9965. Time: 90.2034 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #117: GFLOPs: 2432.7746. Time: 63.8860 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #118: GFLOPs: 1463.7303. Time: 106.1809 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #119: GFLOPs: 1252.6127. Time: 124.0768 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #120: GFLOPs: 2440.3172. Time: 63.6885 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #121: GFLOPs: 1922.6157. Time: 80.8379 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #122: GFLOPs: 1798.8618. Time: 86.3992 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #123: GFLOPs: 1302.7112. Time: 119.3052 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #124: GFLOPs: 2219.9784. Time: 70.0098 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #125: GFLOPs: 1923.5242. Time: 80.7997 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #126: GFLOPs: 673.9245. Time: 230.6195 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #127: GFLOPs: 29.1220. Time: 5336.8723 us. Best GFLOPs: 2999.3603
2024-03-21 09:34:03 [INFO] [task_scheduler.cc:131] [Task #50: fused_nn_conv2d_add_nn_relu_24] Trial #128: GFLOPs: 993.9129. Time: 156.3720 us. Best GFLOPs: 2999.3603
