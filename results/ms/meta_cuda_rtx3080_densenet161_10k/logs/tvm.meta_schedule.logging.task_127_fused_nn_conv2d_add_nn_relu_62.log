2024-03-21 07:30:24 [INFO] [task_scheduler.cc:160] Initializing Task #127: "fused_nn_conv2d_add_nn_relu_62"
2024-03-21 07:30:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(624), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(624), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(624), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(624), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28), T.int64(624), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(624), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(624), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(624), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(624), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(588), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(52), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(624), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(624), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(98) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(98) // T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(624), rc_0 * T.int64(12) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(98) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(98) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 6, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[52, 3, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(624), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(624), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(624), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(624), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(588), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(52), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(624), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(624), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(98) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(98) // T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(624), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(98) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(98) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 6, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[52, 3, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(624), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(624), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(624), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(624), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(588), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(52), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(624), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(624), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(98) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(98) // T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(624), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(98) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) // T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(98) // T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 6, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 14, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[52, 3, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:36:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:36:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:36:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 483 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 08:36:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 965 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 08:36:56 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-03-21 08:36:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 08:36:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 08:37:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 08:37:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 08:37:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9971  0.9962  0.9962  0.9961  0.9959  0.9956  0.9955  0.9938  0.9935  0.9915  0.9909  0.9898  0.9894  0.9892  0.9892  0.9891
[17 : 32]:	0.9888  0.9880  0.9880  0.9877  0.9876  0.9869  0.9856  0.9853  0.9848  0.9819  0.9816  0.9816  0.9803  0.9799  0.9797  0.9795
[33 : 48]:	0.9782  0.9771  0.9767  0.9743  0.9741  0.9740  0.9738  0.9737  0.9733  0.9723  0.9722  0.9720  0.9718  0.9713  0.9710  0.9701
[49 : 64]:	0.9693  0.9687  0.9678  0.9668  0.9657  0.9653  0.9653  0.9647  0.9647  0.9638  0.9634  0.9633  0.9630  0.9616  0.9612  0.9609
2024-03-21 08:37:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:37:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #1: GFLOPs: 254.7676. Time: 738.5555 us. Best GFLOPs: 254.7676
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #2: GFLOPs: 146.4622. Time: 1284.6998 us. Best GFLOPs: 254.7676
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #3: GFLOPs: 468.8538. Time: 401.3191 us. Best GFLOPs: 468.8538
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #4: GFLOPs: 2768.5917. Time: 67.9623 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #5: GFLOPs: 1380.9903. Time: 136.2501 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #6: GFLOPs: 21.0692. Time: 8930.5598 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #7: GFLOPs: 32.8964. Time: 5719.7795 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #8: GFLOPs: 1867.0070. Time: 100.7816 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #9: GFLOPs: 1355.1561. Time: 138.8475 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #10: GFLOPs: 28.2667. Time: 6656.5971 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #11: GFLOPs: 57.0098. Time: 3300.4842 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #12: GFLOPs: 471.9783. Time: 398.6624 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #13: GFLOPs: 41.1400. Time: 4573.6493 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #14: GFLOPs: 1686.6311. Time: 111.5597 us. Best GFLOPs: 2768.5917
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #15: GFLOPs: 2807.8710. Time: 67.0116 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #16: GFLOPs: 71.4243. Time: 2634.3992 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #17: GFLOPs: 108.3202. Time: 1737.0720 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #18: GFLOPs: 16.7783. Time: 11214.5063 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #19: GFLOPs: 325.6006. Time: 577.8859 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #20: GFLOPs: 2126.5709. Time: 88.4805 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #21: GFLOPs: 162.5726. Time: 1157.3907 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #22: GFLOPs: 473.3593. Time: 397.4993 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #23: GFLOPs: 2160.7966. Time: 87.0790 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #24: GFLOPs: 827.8610. Time: 227.2845 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #25: GFLOPs: 1065.4074. Time: 176.6085 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #26: GFLOPs: 53.6800. Time: 3505.2172 us. Best GFLOPs: 2807.8710
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #27: GFLOPs: 3428.7068. Time: 54.8778 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #28: GFLOPs: 26.2505. Time: 7167.8537 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #29: GFLOPs: 485.7629. Time: 387.3495 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #30: GFLOPs: 164.1556. Time: 1146.2298 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #31: GFLOPs: 882.8569. Time: 213.1263 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #32: GFLOPs: 67.2974. Time: 2795.9468 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #33: GFLOPs: 1572.4757. Time: 119.6584 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #34: GFLOPs: 1985.4855. Time: 94.7678 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #35: GFLOPs: 1380.8815. Time: 136.2608 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #36: GFLOPs: 1884.4482. Time: 99.8489 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #37: GFLOPs: 1987.3424. Time: 94.6792 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #38: GFLOPs: 1932.3253. Time: 97.3749 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #39: GFLOPs: 932.4679. Time: 201.7871 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #40: GFLOPs: 1688.4268. Time: 111.4410 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #41: GFLOPs: 131.7630. Time: 1428.0185 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #42: GFLOPs: 3081.3563. Time: 61.0640 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #43: GFLOPs: 2912.0226. Time: 64.6149 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #44: GFLOPs: 19.6591. Time: 9571.1357 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #45: GFLOPs: 52.9118. Time: 3556.1047 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #46: GFLOPs: 115.0361. Time: 1635.6608 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #47: GFLOPs: 2254.7654. Time: 83.4499 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #48: GFLOPs: 72.1270. Time: 2608.7324 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #49: GFLOPs: 1426.4611. Time: 131.9069 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #50: GFLOPs: 2248.9543. Time: 83.6655 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #51: GFLOPs: 3393.3508. Time: 55.4496 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #52: GFLOPs: 38.3185. Time: 4910.4214 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #53: GFLOPs: 2099.7779. Time: 89.6095 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #54: GFLOPs: 1991.9400. Time: 94.4607 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #55: GFLOPs: 2423.2671. Time: 77.6472 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #56: GFLOPs: 1046.8084. Time: 179.7464 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #57: GFLOPs: 1164.9755. Time: 161.5141 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #58: GFLOPs: 156.7148. Time: 1200.6522 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #59: GFLOPs: 2330.3254. Time: 80.7441 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #60: GFLOPs: 80.0046. Time: 2351.8661 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:121] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #61: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(624), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(192), T.int64(624), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(624), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(624), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(42), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(8) + ff_3_init * T.int64(8) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(312), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(624), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(624), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(384))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(624), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(4)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 6, 4, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[312, 2, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #62: GFLOPs: 25.9699. Time: 7245.3166 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #63: GFLOPs: 53.2907. Time: 3530.8225 us. Best GFLOPs: 3428.7068
2024-03-21 09:11:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #64: GFLOPs: 94.4568. Time: 1992.0213 us. Best GFLOPs: 3428.7068
2024-03-21 10:11:20 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 10:11:20 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-03-21 10:11:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 420 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 10:11:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 854 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 10:11:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 1288 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 10:11:22 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-03-21 10:11:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 10:11:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 10:11:29 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 10:11:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eb273788)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8f4afceb8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f457ba88)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f18a7bd8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f599cd78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f3941758)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f4afcdb8)]: 0 failure(s)
2024-03-21 10:11:33 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4340  1.4065  1.4008  1.4003  1.3803  1.3520  1.3495  1.3390  1.2746  1.2560  1.2373  1.2261  1.2199  1.2007  1.1698  1.1687
[17 : 32]:	1.1455  1.1402  1.1381  1.1334  1.1163  1.1083  1.1072  1.1065  1.0984  1.0934  1.0913  1.0826  1.0820  1.0778  1.0773  1.0753
[33 : 48]:	1.0745  1.0731  1.0731  1.0729  1.0722  1.0700  1.0658  1.0649  1.0640  1.0590  1.0570  1.0570  1.0563  1.0540  1.0518  1.0514
[49 : 64]:	1.0501  1.0459  1.0437  1.0342  1.0328  1.0274  1.0261  1.0260  1.0216  1.0177  1.0145  1.0113  1.0038  0.9929  0.9896  0.9686
2024-03-21 10:11:33 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 10:11:33 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #65: GFLOPs: 2509.5352. Time: 74.9780 us. Best GFLOPs: 3428.7068
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #66: GFLOPs: 2351.8621. Time: 80.0047 us. Best GFLOPs: 3428.7068
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #67: GFLOPs: 5559.1846. Time: 33.8467 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #68: GFLOPs: 5534.4431. Time: 33.9980 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #69: GFLOPs: 2578.9307. Time: 72.9605 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #70: GFLOPs: 3942.3415. Time: 47.7280 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #71: GFLOPs: 3727.1566. Time: 50.4835 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #72: GFLOPs: 3799.2456. Time: 49.5256 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #73: GFLOPs: 3935.6740. Time: 47.8088 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #74: GFLOPs: 3827.9782. Time: 49.1539 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #75: GFLOPs: 3817.5998. Time: 49.2875 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #76: GFLOPs: 2494.3975. Time: 75.4330 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #77: GFLOPs: 5143.3149. Time: 36.5834 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #78: GFLOPs: 3489.0070. Time: 53.9294 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #79: GFLOPs: 2461.1724. Time: 76.4514 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #80: GFLOPs: 3340.4519. Time: 56.3277 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #81: GFLOPs: 3370.0799. Time: 55.8325 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #82: GFLOPs: 3211.6047. Time: 58.5875 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #83: GFLOPs: 3236.2756. Time: 58.1409 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #84: GFLOPs: 3565.6245. Time: 52.7706 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #85: GFLOPs: 1078.9734. Time: 174.3880 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #86: GFLOPs: 2424.2987. Time: 77.6142 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #87: GFLOPs: 3370.0336. Time: 55.8333 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #88: GFLOPs: 3672.0843. Time: 51.2407 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #89: GFLOPs: 5114.9727. Time: 36.7861 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #90: GFLOPs: 4733.6916. Time: 39.7491 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #91: GFLOPs: 4733.9296. Time: 39.7471 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #92: GFLOPs: 3578.7894. Time: 52.5764 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #93: GFLOPs: 3407.1923. Time: 55.2244 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #94: GFLOPs: 3844.3130. Time: 48.9450 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #95: GFLOPs: 4128.0970. Time: 45.5803 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #96: GFLOPs: 3401.8231. Time: 55.3115 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #97: GFLOPs: 3467.1426. Time: 54.2695 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #98: GFLOPs: 3330.6542. Time: 56.4934 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #99: GFLOPs: 3473.7740. Time: 54.1659 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #100: GFLOPs: 3296.8740. Time: 57.0722 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #101: GFLOPs: 4759.3993. Time: 39.5344 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #102: GFLOPs: 4759.6144. Time: 39.5326 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #103: GFLOPs: 3284.8251. Time: 57.2816 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #104: GFLOPs: 4461.3909. Time: 42.1752 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #105: GFLOPs: 4744.8588. Time: 39.6556 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #106: GFLOPs: 3339.9459. Time: 56.3362 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #107: GFLOPs: 3692.6909. Time: 50.9547 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #108: GFLOPs: 3381.4723. Time: 55.6444 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #109: GFLOPs: 2231.4896. Time: 84.3204 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #110: GFLOPs: 3854.8120. Time: 48.8117 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #111: GFLOPs: 3543.2773. Time: 53.1034 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #112: GFLOPs: 2230.9096. Time: 84.3423 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #113: GFLOPs: 3274.9296. Time: 57.4547 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #114: GFLOPs: 2231.1610. Time: 84.3328 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #115: GFLOPs: 4486.7672. Time: 41.9367 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #116: GFLOPs: 3317.8064. Time: 56.7122 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #117: GFLOPs: 2536.7188. Time: 74.1746 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #118: GFLOPs: 3374.2538. Time: 55.7634 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #119: GFLOPs: 4253.8835. Time: 44.2325 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #120: GFLOPs: 3452.8942. Time: 54.4934 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #121: GFLOPs: 3138.4595. Time: 59.9530 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #122: GFLOPs: 3760.9509. Time: 50.0299 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #123: GFLOPs: 3915.1878. Time: 48.0590 us. Best GFLOPs: 5559.1846
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #124: GFLOPs: 5740.4255. Time: 32.7781 us. Best GFLOPs: 5740.4255
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #125: GFLOPs: 2792.5146. Time: 67.3801 us. Best GFLOPs: 5740.4255
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #126: GFLOPs: 4008.7319. Time: 46.9375 us. Best GFLOPs: 5740.4255
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #127: GFLOPs: 81.9689. Time: 2295.5055 us. Best GFLOPs: 5740.4255
2024-03-21 10:12:27 [INFO] [task_scheduler.cc:131] [Task #127: fused_nn_conv2d_add_nn_relu_62] Trial #128: GFLOPs: 139.7571. Time: 1346.3363 us. Best GFLOPs: 5740.4255
