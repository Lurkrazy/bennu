2024-03-21 19:46:24 [INFO] [task_scheduler.cc:160] Initializing Task #14: "fused_nn_conv2d_add_nn_relu_9"
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(40), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(240), T.int64(28), T.int64(28), T.int64(40), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(240), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(240), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(70), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2240)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(40), rc_0 * T.int64(20) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(480)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(20))
                                    v1 = T.axis.spatial(T.int64(40), rc_0 * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(20))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(2), T.int64(2), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(40), rc_0 * T.int64(20) + rc_1 * T.int64(10) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[10, 1, 1, 24, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 14, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 2, 10])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(70), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2240)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(480)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(20))
                                    v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(20))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(2), T.int64(2), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(20) + rc_1 * T.int64(10) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[10, 1, 1, 24, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 14, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 2, 10])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(70), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2240)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(480)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(20))
                                    v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(20) + ax0_ax1_ax2_ax3_fused % T.int64(20))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(2), T.int64(2), T.int64(10), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(20) + rc_1 * T.int64(10) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(24) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[10, 1, 1, 24, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 2, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 14, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 2, 10])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 20:01:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:01:44 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 20:01:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 458 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:01:45 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-03-21 20:01:46 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:01:48 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:01:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:01:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:01:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9981  0.9975  0.9974  0.9974  0.9972  0.9972  0.9965  0.9965  0.9963  0.9955  0.9953  0.9944  0.9939  0.9932  0.9915
[17 : 32]:	0.9913  0.9904  0.9902  0.9882  0.9874  0.9872  0.9872  0.9857  0.9849  0.9843  0.9837  0.9830  0.9817  0.9815  0.9810  0.9789
[33 : 48]:	0.9787  0.9771  0.9767  0.9766  0.9762  0.9746  0.9742  0.9735  0.9715  0.9704  0.9685  0.9684  0.9683  0.9676  0.9672  0.9660
[49 : 64]:	0.9654  0.9651  0.9650  0.9643  0.9643  0.9642  0.9638  0.9626  0.9614  0.9612  0.9605  0.9586  0.9578  0.9545  0.9539  0.9523
2024-03-21 20:01:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:01:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #1: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(70), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(240), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(120) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(12) + ff_3_init * T.int64(6) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(5), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(70), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(140) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(196))
                                        v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(140) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(196) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(140) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(70), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(240), (ax0_ax1_ax2_ax3_fused_0 * T.int64(210) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(8))
                                        v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(210) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(70) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1920))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(14), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(240), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(120) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(12) + ff_3 * T.int64(6) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(14)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(240), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(120) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(12) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 10, 2, 6])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 14, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 4, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 70, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 70, 3], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #2: GFLOPs: 320.4371. Time: 48.1502 us. Best GFLOPs: 320.4371
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #3: GFLOPs: 123.2868. Time: 125.1482 us. Best GFLOPs: 320.4371
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #4: GFLOPs: 87.0333. Time: 177.2784 us. Best GFLOPs: 320.4371
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #5: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(240), ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(10), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(240), (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(4))
                                        v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(960))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(120), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(240), ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(240), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 120, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 28, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[10, 2, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 196, 4], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #6: GFLOPs: 1024.5074. Time: 15.0600 us. Best GFLOPs: 1024.5074
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #7: GFLOPs: 46.3512. Time: 332.8739 us. Best GFLOPs: 1024.5074
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #8: GFLOPs: 215.2042. Time: 71.6953 us. Best GFLOPs: 1024.5074
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #9: GFLOPs: 66.3982. Time: 232.3725 us. Best GFLOPs: 1024.5074
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #10: GFLOPs: 10.1153. Time: 1525.3255 us. Best GFLOPs: 1024.5074
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #11: GFLOPs: 1739.5357. Time: 8.8697 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #12: GFLOPs: 506.0868. Time: 30.4871 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #13: GFLOPs: 39.6201. Time: 389.4266 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #14: GFLOPs: 186.4567. Time: 82.7491 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #15: GFLOPs: 364.2158. Time: 42.3626 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #16: GFLOPs: 1457.4100. Time: 10.5867 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #17: GFLOPs: 697.0815. Time: 22.1339 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #18: GFLOPs: 107.6339. Time: 143.3481 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #19: GFLOPs: 50.1078. Time: 307.9187 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #20: GFLOPs: 80.0480. Time: 192.7483 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #21: GFLOPs: 77.4164. Time: 199.3005 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #22: GFLOPs: 249.9284. Time: 61.7342 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #23: GFLOPs: 2.3999. Time: 6429.0561 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #24: GFLOPs: 1027.5295. Time: 15.0157 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #25: GFLOPs: 86.3204. Time: 178.7425 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #26: GFLOPs: 31.3171. Time: 492.6732 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #27: GFLOPs: 917.6491. Time: 16.8137 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #28: GFLOPs: 129.2151. Time: 119.4065 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #29: GFLOPs: 1358.0687. Time: 11.3611 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #30: GFLOPs: 268.9493. Time: 57.3681 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #31: GFLOPs: 638.4892. Time: 24.1650 us. Best GFLOPs: 1739.5357
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #32: GFLOPs: 1766.7729. Time: 8.7329 us. Best GFLOPs: 1766.7729
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #33: GFLOPs: 18.5116. Time: 833.4848 us. Best GFLOPs: 1766.7729
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #34: GFLOPs: 640.4336. Time: 24.0917 us. Best GFLOPs: 1766.7729
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #35: GFLOPs: 10.0225. Time: 1539.4501 us. Best GFLOPs: 1766.7729
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #36: GFLOPs: 25.5723. Time: 603.3519 us. Best GFLOPs: 1766.7729
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #37: GFLOPs: 2594.0449. Time: 5.9479 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #38: GFLOPs: 114.3547. Time: 134.9234 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #39: GFLOPs: 599.7804. Time: 25.7246 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #40: GFLOPs: 1029.8322. Time: 14.9822 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #41: GFLOPs: 10.1564. Time: 1519.1506 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #42: GFLOPs: 201.4145. Time: 76.6038 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #43: GFLOPs: 1333.0975. Time: 11.5739 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #44: GFLOPs: 751.3182. Time: 20.5361 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #45: GFLOPs: 15.5394. Time: 992.9049 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #46: GFLOPs: 363.6718. Time: 42.4259 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #47: GFLOPs: 9.5701. Time: 1612.2148 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #48: GFLOPs: 600.6827. Time: 25.6860 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #49: GFLOPs: 2190.8782. Time: 7.0424 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #50: GFLOPs: 35.1181. Time: 439.3492 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #51: GFLOPs: 467.9102. Time: 32.9745 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #52: GFLOPs: 1029.1129. Time: 14.9926 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #53: GFLOPs: 190.3994. Time: 81.0356 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #54: GFLOPs: 87.3740. Time: 176.5871 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #55: GFLOPs: 1612.7638. Time: 9.5669 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(40), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(14), T.int64(14)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused * T.int64(80) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), xx_3_init * T.int64(14) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(40), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(40), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(40), rc_0)
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(80) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(80) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(40) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(784))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(40), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused * T.int64(80) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(160) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2))
                                        v1 = T.axis.spatial(T.int64(40), rc_0)
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(40) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(80))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(14), T.int64(14)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused * T.int64(80) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(14) + xx_4)
                                v_rc = T.axis.reduce(T.int64(40), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(14), T.int64(28)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused * T.int64(80) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 1, 20, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 14])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[40, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 40, 2], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 40, 4], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #57: GFLOPs: 101.1287. Time: 152.5691 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #58: GFLOPs: 2198.8743. Time: 7.0168 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #59: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(80), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(240), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(120) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(6) + ff_3_init * T.int64(3) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(14) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(20), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(10)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(80), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(160) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(160) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(160) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(80) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(80), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(240), (ax0_ax1_ax2_ax3_fused_0 * T.int64(160) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(160) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(240), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(120) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(6) + ff_3 * T.int64(3) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(14) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(14), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(240), nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(120) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(6) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(7) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 20, 2, 3])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[20, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 80, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 80, 2], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #60: GFLOPs: 71.2021. Time: 216.6947 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #61: GFLOPs: 1601.5059. Time: 9.6341 us. Best GFLOPs: 2594.0449
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #62: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(10), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3_init * T.int64(7) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(47)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(5) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1960))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(48) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(5))
                                        v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(5) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(5))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(240))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(5) + rc_1 * T.int64(5) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(4)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[5, 8, 3, 1, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 7, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 1, 5])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 42, 2], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #63: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(10), T.int64(2), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(80) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(20) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(9)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(5) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(392))
                                        v2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(392) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1960))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(80) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(5))
                                    v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(5) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(5))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 < T.int64(400))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(5), T.int64(1), T.int64(1), T.int64(1), T.int64(10), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(80) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(20) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(5) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(20), T.int64(2), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(80) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(20) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 1, 4, 10, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 5, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116 = sch.split(loop=l114, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b118)
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 20:21:54 [INFO] [task_scheduler.cc:121] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #64: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(240), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(240), T.int64(28), T.int64(28)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(40), T.int64(28), T.int64(28)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(240), T.int64(40), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(40), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(294), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(8) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(5), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(294), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(294) + ax0_ax1_ax2_ax3_fused_1) // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(2) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(294) + ax0_ax1_ax2_ax3_fused_1) % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(294) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(294) + ax0_ax1_ax2_ax3_fused_1 < T.int64(784))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(294), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(48) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(294) + ax0_ax1_ax2_ax3_fused_1) // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(294) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(294) + ax0_ax1_ax2_ax3_fused_1 < T.int64(384))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(40), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(240), nn_0_ff_0_yy_0_xx_0_fused // T.int64(8) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(8) // T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[5, 1, 6, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 8, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 294], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115 = sch.split(loop=l113, factors=[None, 294], preserve_unit_iters=True)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b116 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b116, ann_key="meta_schedule.unroll_explicit")
b117, b118, b119, b120 = sch.get_child_blocks(b116)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b117)
l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b118)
l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b119)
sch.annotate(block_or_loop=l133, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l133, ann_key="pragma_unroll_explicit", ann_val=1)
l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b120)
b158 = sch.get_block(name="conv2d_nchw", func_name="main")
l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176 = sch.get_loops(block=b158)
b177 = sch.decompose_reduction(block=b158, loop=l162)
2024-03-21 20:55:39 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:55:39 [INFO] [evolutionary_search.cc:715] Picked top 57 candidate(s) from database
2024-03-21 20:55:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 411 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:55:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 812 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:55:40 [INFO] [evolutionary_search.cc:723] Sampled 98 candidate(s)
2024-03-21 20:55:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:55:44 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:55:47 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:55:49 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 20:55:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9780  0.9756  0.9720  0.9668  0.9664  0.9645  0.9639  0.9260  0.9165  0.9161  0.9158  0.9148  0.9144  0.9088  0.9079  0.9078
[17 : 32]:	0.9049  0.9033  0.9019  0.8992  0.8958  0.8893  0.8870  0.8857  0.8857  0.8853  0.8849  0.8846  0.8844  0.8840  0.8840  0.8797
[33 : 48]:	0.8784  0.8750  0.8748  0.8722  0.8695  0.8689  0.8658  0.8632  0.8617  0.8584  0.8569  0.8566  0.8566  0.8557  0.8534  0.8531
[49 : 64]:	0.8524  0.8517  0.8516  0.8480  0.8474  0.8458  0.8457  0.8455  0.8444  0.8440  0.8438  0.8434  0.8432  0.8427  0.8424  0.8423
2024-03-21 20:55:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:55:50 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #65: GFLOPs: 1226.3981. Time: 12.5808 us. Best GFLOPs: 2594.0449
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #66: GFLOPs: 1075.5134. Time: 14.3458 us. Best GFLOPs: 2594.0449
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #67: GFLOPs: 2785.8448. Time: 5.5384 us. Best GFLOPs: 2785.8448
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #68: GFLOPs: 2568.3846. Time: 6.0073 us. Best GFLOPs: 2785.8448
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #69: GFLOPs: 2772.3695. Time: 5.5653 us. Best GFLOPs: 2785.8448
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #70: GFLOPs: 1208.5809. Time: 12.7663 us. Best GFLOPs: 2785.8448
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #71: GFLOPs: 2581.4839. Time: 5.9768 us. Best GFLOPs: 2785.8448
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #72: GFLOPs: 2782.4799. Time: 5.5451 us. Best GFLOPs: 2785.8448
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #73: GFLOPs: 3557.5595. Time: 4.3370 us. Best GFLOPs: 3557.5595
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #74: GFLOPs: 3624.7275. Time: 4.2566 us. Best GFLOPs: 3624.7275
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #75: GFLOPs: 3456.8836. Time: 4.4633 us. Best GFLOPs: 3624.7275
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #76: GFLOPs: 3341.6796. Time: 4.6172 us. Best GFLOPs: 3624.7275
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #77: GFLOPs: 3658.3717. Time: 4.2175 us. Best GFLOPs: 3658.3717
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #78: GFLOPs: 3676.0531. Time: 4.1972 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #79: GFLOPs: 3658.2498. Time: 4.2176 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #80: GFLOPs: 3665.8434. Time: 4.2089 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #81: GFLOPs: 2177.7164. Time: 7.0850 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #82: GFLOPs: 2856.9320. Time: 5.4006 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #83: GFLOPs: 2706.5254. Time: 5.7007 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #84: GFLOPs: 2583.0744. Time: 5.9732 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #85: GFLOPs: 3663.0235. Time: 4.2121 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #86: GFLOPs: 2418.9654. Time: 6.3784 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #87: GFLOPs: 1107.1367. Time: 13.9361 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #88: GFLOPs: 2915.7385. Time: 5.2917 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #89: GFLOPs: 2830.5972. Time: 5.4508 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #90: GFLOPs: 3667.3014. Time: 4.2072 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #91: GFLOPs: 1264.6057. Time: 12.2007 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #92: GFLOPs: 2360.4529. Time: 6.5365 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #93: GFLOPs: 3565.3634. Time: 4.3275 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #94: GFLOPs: 2350.2345. Time: 6.5649 us. Best GFLOPs: 3676.0531
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #95: GFLOPs: 3783.9249. Time: 4.0775 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #96: GFLOPs: 3664.5882. Time: 4.2103 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #97: GFLOPs: 1231.9502. Time: 12.5241 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #98: GFLOPs: 2290.3018. Time: 6.7367 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #99: GFLOPs: 3138.5463. Time: 4.9160 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #100: GFLOPs: 2282.7028. Time: 6.7591 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #101: GFLOPs: 3661.5942. Time: 4.2138 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #102: GFLOPs: 1548.7354. Time: 9.9624 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #103: GFLOPs: 3138.4248. Time: 4.9162 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #104: GFLOPs: 2240.0347. Time: 6.8879 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #105: GFLOPs: 1176.8601. Time: 13.1104 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #106: GFLOPs: 1653.6551. Time: 9.3303 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #107: GFLOPs: 2894.6138. Time: 5.3303 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #108: GFLOPs: 2297.6668. Time: 6.7151 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #109: GFLOPs: 3063.2359. Time: 5.0369 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #110: GFLOPs: 1831.7208. Time: 8.4233 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #111: GFLOPs: 1326.8293. Time: 11.6286 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #112: GFLOPs: 2261.2950. Time: 6.8231 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #113: GFLOPs: 2321.6679. Time: 6.6457 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #114: GFLOPs: 2194.8853. Time: 7.0296 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #115: GFLOPs: 1223.4168. Time: 12.6115 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #116: GFLOPs: 2295.1411. Time: 6.7225 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #117: GFLOPs: 2285.0614. Time: 6.7522 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #118: GFLOPs: 1196.1141. Time: 12.8994 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #119: GFLOPs: 2507.9325. Time: 6.1521 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #120: GFLOPs: 2496.3969. Time: 6.1806 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #121: GFLOPs: 3052.8738. Time: 5.0540 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #122: GFLOPs: 2437.1235. Time: 6.3309 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #123: GFLOPs: 2261.3787. Time: 6.8229 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #124: GFLOPs: 2169.3826. Time: 7.1122 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #125: GFLOPs: 2874.7532. Time: 5.3671 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #126: GFLOPs: 1293.1705. Time: 11.9312 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #127: GFLOPs: 918.2268. Time: 16.8032 us. Best GFLOPs: 3783.9249
2024-03-21 20:56:36 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #128: GFLOPs: 635.9053. Time: 24.2632 us. Best GFLOPs: 3783.9249
2024-03-21 22:16:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 22:16:45 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 22:16:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 363 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 22:16:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 725 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 22:16:46 [INFO] [evolutionary_search.cc:723] Sampled 95 candidate(s)
2024-03-21 22:16:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 22:16:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 22:16:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 22:16:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ed5bd9b8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7be0d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed8e9ad8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec1e4928)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed6a4e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7bb2c8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed801518)]: 0 failure(s)
2024-03-21 22:16:56 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0112  1.0104  1.0050  1.0030  0.9923  0.9915  0.9658  0.9638  0.9585  0.9574  0.9557  0.9548  0.9548  0.9548  0.9527  0.9522
[17 : 32]:	0.9518  0.9517  0.9513  0.9505  0.9502  0.9497  0.9483  0.9483  0.9480  0.9479  0.9479  0.9477  0.9473  0.9471  0.9467  0.9459
[33 : 48]:	0.9446  0.9446  0.9431  0.9430  0.9430  0.9414  0.9414  0.9412  0.9406  0.9391  0.9374  0.9360  0.9359  0.9358  0.9357  0.9344
[49 : 64]:	0.9337  0.9337  0.9336  0.9333  0.9319  0.9313  0.9292  0.9275  0.9273  0.9272  0.9258  0.9255  0.9253  0.9233  0.9216  0.9216
2024-03-21 22:16:56 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 22:16:56 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #129: GFLOPs: 3677.3028. Time: 4.1958 us. Best GFLOPs: 3783.9249
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #130: GFLOPs: 3702.9665. Time: 4.1667 us. Best GFLOPs: 3783.9249
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #131: GFLOPs: 3480.6449. Time: 4.4328 us. Best GFLOPs: 3783.9249
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #132: GFLOPs: 3690.6712. Time: 4.1806 us. Best GFLOPs: 3783.9249
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #133: GFLOPs: 3482.6108. Time: 4.4303 us. Best GFLOPs: 3783.9249
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #134: GFLOPs: 3843.3221. Time: 4.0145 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #135: GFLOPs: 3483.6215. Time: 4.4290 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #136: GFLOPs: 3690.7626. Time: 4.1805 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #137: GFLOPs: 3683.0357. Time: 4.1892 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #138: GFLOPs: 3708.3257. Time: 4.1607 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #139: GFLOPs: 2474.0840. Time: 6.2363 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #140: GFLOPs: 3695.2512. Time: 4.1754 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #141: GFLOPs: 3683.0266. Time: 4.1893 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #142: GFLOPs: 3683.0890. Time: 4.1892 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #143: GFLOPs: 3697.8880. Time: 4.1724 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #144: GFLOPs: 3676.9009. Time: 4.1962 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #145: GFLOPs: 3584.7613. Time: 4.3041 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #146: GFLOPs: 3692.3532. Time: 4.1787 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #147: GFLOPs: 3529.1236. Time: 4.3719 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #148: GFLOPs: 3793.6734. Time: 4.0671 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #149: GFLOPs: 3793.5226. Time: 4.0672 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #150: GFLOPs: 3707.9947. Time: 4.1610 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #151: GFLOPs: 3698.5861. Time: 4.1716 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #152: GFLOPs: 3494.8412. Time: 4.4148 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #153: GFLOPs: 3583.7158. Time: 4.3053 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #154: GFLOPs: 3835.3803. Time: 4.0228 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #155: GFLOPs: 2432.5836. Time: 6.3427 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #156: GFLOPs: 3706.2057. Time: 4.1631 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #157: GFLOPs: 3671.1410. Time: 4.2028 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #158: GFLOPs: 3452.9016. Time: 4.4685 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #159: GFLOPs: 3458.3872. Time: 4.4614 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #160: GFLOPs: 3361.4307. Time: 4.5900 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #161: GFLOPs: 3783.7003. Time: 4.0778 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #162: GFLOPs: 3670.0091. Time: 4.2041 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #163: GFLOPs: 3457.2223. Time: 4.4629 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #164: GFLOPs: 3458.1472. Time: 4.4617 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #165: GFLOPs: 3458.3028. Time: 4.4615 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #166: GFLOPs: 3363.1283. Time: 4.5877 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #167: GFLOPs: 3674.8730. Time: 4.1985 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #168: GFLOPs: 3783.9249. Time: 4.0775 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #169: GFLOPs: 3557.0602. Time: 4.3376 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #170: GFLOPs: 3556.4418. Time: 4.3384 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #171: GFLOPs: 3693.6646. Time: 4.1772 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #172: GFLOPs: 3731.7654. Time: 4.1345 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #173: GFLOPs: 3457.0781. Time: 4.4631 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #174: GFLOPs: 3662.7850. Time: 4.2124 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #175: GFLOPs: 3664.0715. Time: 4.2109 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #176: GFLOPs: 3458.4746. Time: 4.4613 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #177: GFLOPs: 3567.1776. Time: 4.3253 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #178: GFLOPs: 3458.3019. Time: 4.4615 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #179: GFLOPs: 3769.9289. Time: 4.0927 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #180: GFLOPs: 3666.7534. Time: 4.2078 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #181: GFLOPs: 3650.8603. Time: 4.2262 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #182: GFLOPs: 3457.9672. Time: 4.4619 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #183: GFLOPs: 3457.9034. Time: 4.4620 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #184: GFLOPs: 3550.2564. Time: 4.3459 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #185: GFLOPs: 2414.6282. Time: 6.3899 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #186: GFLOPs: 3582.2440. Time: 4.3071 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #187: GFLOPs: 3660.9746. Time: 4.2145 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #188: GFLOPs: 3466.0693. Time: 4.4515 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #189: GFLOPs: 3660.5287. Time: 4.2150 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #190: GFLOPs: 25.1511. Time: 613.4577 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #191: GFLOPs: 50.1246. Time: 307.8156 us. Best GFLOPs: 3843.3221
2024-03-21 22:17:55 [INFO] [task_scheduler.cc:131] [Task #14: fused_nn_conv2d_add_nn_relu_9] Trial #192: GFLOPs: 41.7185. Time: 369.8390 us. Best GFLOPs: 3843.3221
