2024-03-21 16:45:30 [INFO] [task_scheduler.cc:160] Initializing Task #18: "fused_nn_conv2d_add_nn_relu_12"
2024-03-21 16:45:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(18)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(160), T.int64(12), T.int64(18)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3)])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3)], T.float32(0))
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(160), T.int64(1), T.int64(7)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 16:45:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 16:45:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(12), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(34560)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), ax0_ax1_ax2_ax3_fused // T.int64(216))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(216) // T.int64(18))
                                    v3 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(18))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(71680)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(1120))
                                    v1 = T.axis.spatial(T.int64(160), ax0_ax1_ax2_ax3_fused % T.int64(1120) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(4), T.int64(2), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(160), rc_0 * T.int64(160) + rc_1 * T.int64(40) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 2, 4, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 1, 4, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 3, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 4, 40])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 16:45:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(12), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(34560)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), ax0_ax1_ax2_ax3_fused // T.int64(216))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(216) // T.int64(18))
                                    v3 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(18))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(71680)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(1120))
                                    v1 = T.axis.spatial(T.int64(160), ax0_ax1_ax2_ax3_fused % T.int64(1120) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(4), T.int64(2), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(160), rc_1 * T.int64(40) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 2, 4, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 1, 4, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 3, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 4, 40])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 16:45:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(12), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(34560)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), ax0_ax1_ax2_ax3_fused // T.int64(216))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(216) // T.int64(18))
                                    v3 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(18))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(71680)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(1120))
                                    v1 = T.axis.spatial(T.int64(160), ax0_ax1_ax2_ax3_fused % T.int64(1120) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(7), T.int64(1), T.int64(4), T.int64(4), T.int64(2), T.int64(40), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(160), rc_1 * T.int64(40) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(3) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 2, 4, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 1, 4, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 3, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 4, 40])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 16:58:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 16:58:50 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 16:58:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 493 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 16:58:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 983 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 16:58:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 1472 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 16:58:52 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-03-21 16:58:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 16:58:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 16:58:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 16:59:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 16:59:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9988  0.9985  0.9980  0.9952  0.9941  0.9937  0.9913  0.9911  0.9894  0.9887  0.9885  0.9878  0.9872  0.9871  0.9859
[17 : 32]:	0.9853  0.9852  0.9848  0.9845  0.9830  0.9825  0.9804  0.9800  0.9799  0.9793  0.9792  0.9791  0.9787  0.9774  0.9740  0.9738
[33 : 48]:	0.9736  0.9716  0.9711  0.9704  0.9703  0.9702  0.9700  0.9697  0.9692  0.9682  0.9680  0.9680  0.9665  0.9664  0.9659  0.9654
[49 : 64]:	0.9625  0.9621  0.9617  0.9612  0.9602  0.9597  0.9592  0.9590  0.9589  0.9589  0.9578  0.9573  0.9570  0.9569  0.9562  0.9559
2024-03-21 16:59:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 16:59:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #1: GFLOPs: 141.5433. Time: 437.9352 us. Best GFLOPs: 141.5433
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #2: GFLOPs: 180.1284. Time: 344.1258 us. Best GFLOPs: 180.1284
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #3: GFLOPs: 771.0372. Time: 80.3941 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #4: GFLOPs: 701.4458. Time: 88.3701 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #5: GFLOPs: 136.6917. Time: 453.4791 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #6: GFLOPs: 262.3004. Time: 236.3199 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #7: GFLOPs: 664.0624. Time: 93.3449 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #8: GFLOPs: 601.3278. Time: 103.0832 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #9: GFLOPs: 62.7378. Time: 988.0295 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #10: GFLOPs: 632.5039. Time: 98.0023 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #11: GFLOPs: 613.5891. Time: 101.0233 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #12: GFLOPs: 106.1879. Time: 583.7468 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #13: GFLOPs: 31.3842. Time: 1975.0953 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #14: GFLOPs: 719.8243. Time: 86.1138 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #15: GFLOPs: 50.4456. Time: 1228.7843 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #16: GFLOPs: 518.3640. Time: 119.5816 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #17: GFLOPs: 29.3938. Time: 2108.8420 us. Best GFLOPs: 771.0372
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #18: GFLOPs: 989.7130. Time: 62.6311 us. Best GFLOPs: 989.7130
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #19: GFLOPs: 756.4366. Time: 81.9458 us. Best GFLOPs: 989.7130
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #20: GFLOPs: 55.1870. Time: 1123.2131 us. Best GFLOPs: 989.7130
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #21: GFLOPs: 213.0868. Time: 290.8993 us. Best GFLOPs: 989.7130
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #22: GFLOPs: 225.1007. Time: 275.3737 us. Best GFLOPs: 989.7130
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #23: GFLOPs: 152.5848. Time: 406.2450 us. Best GFLOPs: 989.7130
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #24: GFLOPs: 1094.4834. Time: 56.6357 us. Best GFLOPs: 1094.4834
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #25: GFLOPs: 2356.6058. Time: 26.3034 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #26: GFLOPs: 271.1329. Time: 228.6215 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #27: GFLOPs: 326.3143. Time: 189.9605 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #28: GFLOPs: 390.9118. Time: 158.5698 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #29: GFLOPs: 536.3137. Time: 115.5794 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #30: GFLOPs: 31.1603. Time: 1989.2900 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #31: GFLOPs: 70.3575. Time: 881.0262 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #32: GFLOPs: 123.5564. Time: 501.6883 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #33: GFLOPs: 38.1317. Time: 1625.6000 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #34: GFLOPs: 1189.8191. Time: 52.0977 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #35: GFLOPs: 651.8957. Time: 95.0870 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #36: GFLOPs: 38.0181. Time: 1630.4557 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #37: GFLOPs: 426.6928. Time: 145.2727 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #38: GFLOPs: 206.5652. Time: 300.0835 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #39: GFLOPs: 19.1881. Time: 3230.4887 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #40: GFLOPs: 1552.6136. Time: 39.9242 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #41: GFLOPs: 63.6894. Time: 973.2667 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #42: GFLOPs: 220.9031. Time: 280.6063 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #43: GFLOPs: 257.2658. Time: 240.9446 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #44: GFLOPs: 29.7361. Time: 2084.5675 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #45: GFLOPs: 51.0768. Time: 1213.6003 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #46: GFLOPs: 641.3998. Time: 96.6430 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #47: GFLOPs: 312.0369. Time: 198.6522 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #48: GFLOPs: 31.4899. Time: 1968.4694 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #49: GFLOPs: 1155.9004. Time: 53.6264 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #50: GFLOPs: 501.7239. Time: 123.5477 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #51: GFLOPs: 774.3553. Time: 80.0496 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #52: GFLOPs: 272.8929. Time: 227.1471 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #53: GFLOPs: 434.7673. Time: 142.5747 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #54: GFLOPs: 512.3401. Time: 120.9876 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #55: GFLOPs: 605.2123. Time: 102.4216 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #56: GFLOPs: 137.4211. Time: 451.0720 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #57: GFLOPs: 374.4244. Time: 165.5523 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #58: GFLOPs: 224.5962. Time: 275.9923 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #59: GFLOPs: 86.9294. Time: 713.0710 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #60: GFLOPs: 255.1761. Time: 242.9178 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #61: GFLOPs: 274.0034. Time: 226.2264 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #62: GFLOPs: 683.8307. Time: 90.6464 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #63: GFLOPs: 191.1766. Time: 324.2384 us. Best GFLOPs: 2356.6058
2024-03-21 17:36:07 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #64: GFLOPs: 56.9569. Time: 1088.3106 us. Best GFLOPs: 2356.6058
2024-03-21 18:03:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 18:03:39 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 18:03:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 18:03:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 853 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 18:03:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 1285 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 18:03:41 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-03-21 18:03:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 18:03:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 18:03:49 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 18:03:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 18:03:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4199  1.4199  1.4150  1.4093  1.4066  1.4053  1.4053  1.3884  1.3884  1.3843  1.3831  1.3742  1.3582  1.3520  1.3520  1.3326
[17 : 32]:	1.3271  1.3267  1.3267  1.3255  1.3215  1.3117  1.3104  1.3104  1.3104  1.3045  1.3045  1.3045  1.2798  1.2793  1.2734  1.2734
[33 : 48]:	1.2157  1.2072  1.1763  1.1576  1.1479  1.1454  1.1273  1.0951  1.0695  1.0326  1.0284  1.0284  1.0209  1.0095  1.0085  1.0085
[49 : 64]:	1.0061  1.0058  1.0026  1.0026  0.9977  0.9973  0.9963  0.9950  0.9939  0.9939  0.9758  0.9747  0.9747  0.9701  0.9685  0.9685
2024-03-21 18:03:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 18:03:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #65: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(18)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(10), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) // T.int64(144))
                                    v2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) % T.int64(144) // T.int64(12))
                                    v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) % T.int64(12))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(112))
                                        v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0 * T.int64(16) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 3, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 6, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[10, 16, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 288], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 288, 3], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b121)
l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #66: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(18)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(10), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) // T.int64(144))
                                    v2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) % T.int64(144) // T.int64(12))
                                    v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) % T.int64(12))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(112))
                                        v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0 * T.int64(16) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 3, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 6, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[10, 16, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 288], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 288, 3], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b121)
l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #67: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(18)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(10), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(144))
                                        v2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(144) // T.int64(12))
                                        v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(112))
                                        v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0 * T.int64(16) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 3, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 6, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[10, 8, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 288, 3], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 288, 3], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #68: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(18)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(10), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(144))
                                        v2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(144) // T.int64(12))
                                        v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2304))
                                        T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(112))
                                        v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0 * T.int64(16) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 3, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 6, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[10, 16, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 288, 3], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 288, 3], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:121] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #69: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(18)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(1), T.int64(7)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(10), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(576) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(144))
                                        v2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_fused_0 * T.int64(576) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(144) // T.int64(12))
                                        v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(576) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12))
                                        T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(288), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(112))
                                        v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1344))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0 * T.int64(16) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(72) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(72) // T.int64(6) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 3, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 6, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[10, 16, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 288, 2], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 288, 3], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #70: GFLOPs: 1177.9604. Time: 52.6222 us. Best GFLOPs: 2356.6058
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #71: GFLOPs: 1271.9219. Time: 48.7348 us. Best GFLOPs: 2356.6058
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #72: GFLOPs: 2444.2502. Time: 25.3603 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #73: GFLOPs: 2298.4876. Time: 26.9685 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #74: GFLOPs: 2434.8794. Time: 25.4579 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #75: GFLOPs: 1771.7775. Time: 34.9857 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #76: GFLOPs: 1277.5029. Time: 48.5219 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #77: GFLOPs: 2186.5788. Time: 28.3488 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #78: GFLOPs: 1847.8466. Time: 33.5454 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #79: GFLOPs: 1856.1045. Time: 33.3962 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #80: GFLOPs: 1197.7100. Time: 51.7544 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #81: GFLOPs: 673.0504. Time: 92.0983 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #82: GFLOPs: 1221.0607. Time: 50.7647 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #83: GFLOPs: 1274.2884. Time: 48.6443 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #84: GFLOPs: 1789.5631. Time: 34.6380 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #85: GFLOPs: 1820.0951. Time: 34.0569 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #86: GFLOPs: 1789.5941. Time: 34.6374 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #87: GFLOPs: 1759.1355. Time: 35.2371 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #88: GFLOPs: 1694.5730. Time: 36.5796 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #89: GFLOPs: 1694.7966. Time: 36.5748 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #90: GFLOPs: 1863.7787. Time: 33.2587 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #91: GFLOPs: 1845.6990. Time: 33.5845 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #92: GFLOPs: 1863.8489. Time: 33.2574 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #93: GFLOPs: 515.5299. Time: 120.2390 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #94: GFLOPs: 1761.8176. Time: 35.1834 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #95: GFLOPs: 1843.0519. Time: 33.6327 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #96: GFLOPs: 1843.1723. Time: 33.6305 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #97: GFLOPs: 2080.5480. Time: 29.7935 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #98: GFLOPs: 1841.9448. Time: 33.6529 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #99: GFLOPs: 1377.4322. Time: 45.0017 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #100: GFLOPs: 855.2917. Time: 72.4745 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #101: GFLOPs: 907.5749. Time: 68.2994 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #102: GFLOPs: 1912.8700. Time: 32.4051 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #103: GFLOPs: 1017.4772. Time: 60.9221 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #104: GFLOPs: 916.8865. Time: 67.6058 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #105: GFLOPs: 2371.2296. Time: 26.1412 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #106: GFLOPs: 2397.1699. Time: 25.8583 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #107: GFLOPs: 2274.9838. Time: 27.2471 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #108: GFLOPs: 2400.2889. Time: 25.8247 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #109: GFLOPs: 2420.7953. Time: 25.6060 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #110: GFLOPs: 2345.3954. Time: 26.4292 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #111: GFLOPs: 2146.1210. Time: 28.8832 us. Best GFLOPs: 2444.2502
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #112: GFLOPs: 3063.7119. Time: 20.2326 us. Best GFLOPs: 3063.7119
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #113: GFLOPs: 3595.8319. Time: 17.2385 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #114: GFLOPs: 2347.3336. Time: 26.4073 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #115: GFLOPs: 2405.1839. Time: 25.7722 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #116: GFLOPs: 2396.6754. Time: 25.8637 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #117: GFLOPs: 2547.4417. Time: 24.3330 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #118: GFLOPs: 3539.5413. Time: 17.5127 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #119: GFLOPs: 3539.6677. Time: 17.5120 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #120: GFLOPs: 2371.6761. Time: 26.1363 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #121: GFLOPs: 3568.5229. Time: 17.3704 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #122: GFLOPs: 3454.1097. Time: 17.9458 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #123: GFLOPs: 1398.1244. Time: 44.3357 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #124: GFLOPs: 2651.4963. Time: 23.3781 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #125: GFLOPs: 2117.9746. Time: 29.2670 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #126: GFLOPs: 165.9108. Time: 373.6154 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #127: GFLOPs: 370.2836. Time: 167.4036 us. Best GFLOPs: 3595.8319
2024-03-21 18:04:38 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #128: GFLOPs: 2.6938. Time: 23011.1236 us. Best GFLOPs: 3595.8319
2024-03-21 19:27:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 19:27:23 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 19:27:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 390 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 19:27:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 788 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 19:27:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 1172 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 19:27:25 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 19:27:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 62 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 19:27:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 60 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 19:27:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 19:27:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071bd9d928)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071802f218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b07166a47d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c1a6aa8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071c1cb078)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b0717105e68)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166a42f8)]: 0 failure(s)
2024-03-21 19:27:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1521  1.1521  1.1434  1.1431  1.1177  1.0897  1.0507  1.0507  1.0026  0.9826  0.9779  0.9779  0.9736  0.9731  0.9729  0.9729
[17 : 32]:	0.9701  0.9677  0.9662  0.9649  0.9649  0.9649  0.9644  0.9599  0.9593  0.9574  0.9542  0.9514  0.9501  0.9501  0.9467  0.9466
[33 : 48]:	0.9433  0.9426  0.9421  0.9407  0.9374  0.9357  0.9356  0.9356  0.9351  0.9305  0.9297  0.9273  0.9272  0.9272  0.9267  0.9267
[49 : 64]:	0.9265  0.9259  0.9231  0.9221  0.9186  0.9170  0.9169  0.9163  0.9135  0.9117  0.9115  0.9107  0.9083  0.9076  0.9046  0.9032
2024-03-21 19:27:36 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 19:27:36 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #129: GFLOPs: 1963.7383. Time: 31.5657 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #130: GFLOPs: 2497.0935. Time: 24.8236 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #131: GFLOPs: 2249.9300. Time: 27.5506 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #132: GFLOPs: 2241.8990. Time: 27.6492 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #133: GFLOPs: 2161.6133. Time: 28.6762 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #134: GFLOPs: 2176.2933. Time: 28.4827 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #135: GFLOPs: 2334.6149. Time: 26.5512 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #136: GFLOPs: 3514.7197. Time: 17.6363 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #137: GFLOPs: 3581.1958. Time: 17.3090 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #138: GFLOPs: 1694.9721. Time: 36.5710 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #139: GFLOPs: 3530.7506. Time: 17.5563 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #140: GFLOPs: 3531.0860. Time: 17.5546 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #141: GFLOPs: 2390.0399. Time: 25.9355 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #142: GFLOPs: 3428.2256. Time: 18.0813 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #143: GFLOPs: 3512.9685. Time: 17.6451 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #144: GFLOPs: 2345.9028. Time: 26.4234 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #145: GFLOPs: 2322.4364. Time: 26.6904 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #146: GFLOPs: 3567.9716. Time: 17.3731 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #147: GFLOPs: 2964.7405. Time: 20.9080 us. Best GFLOPs: 3595.8319
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #148: GFLOPs: 3596.3199. Time: 17.2362 us. Best GFLOPs: 3596.3199
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #149: GFLOPs: 3596.3914. Time: 17.2358 us. Best GFLOPs: 3596.3914
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #150: GFLOPs: 3596.4646. Time: 17.2355 us. Best GFLOPs: 3596.4646
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #151: GFLOPs: 3531.5477. Time: 17.5523 us. Best GFLOPs: 3596.4646
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #152: GFLOPs: 1784.6326. Time: 34.7337 us. Best GFLOPs: 3596.4646
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #153: GFLOPs: 2173.2813. Time: 28.5222 us. Best GFLOPs: 3596.4646
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #154: GFLOPs: 2195.8026. Time: 28.2297 us. Best GFLOPs: 3596.4646
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #155: GFLOPs: 3568.4464. Time: 17.3708 us. Best GFLOPs: 3596.4646
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #156: GFLOPs: 3596.7719. Time: 17.2340 us. Best GFLOPs: 3596.7719
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #157: GFLOPs: 3568.4212. Time: 17.3709 us. Best GFLOPs: 3596.7719
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #158: GFLOPs: 2305.6356. Time: 26.8849 us. Best GFLOPs: 3596.7719
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #159: GFLOPs: 3545.7376. Time: 17.4821 us. Best GFLOPs: 3596.7719
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #160: GFLOPs: 2589.4775. Time: 23.9380 us. Best GFLOPs: 3596.7719
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #161: GFLOPs: 3000.0930. Time: 20.6616 us. Best GFLOPs: 3596.7719
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #162: GFLOPs: 3814.0474. Time: 16.2522 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #163: GFLOPs: 3509.6499. Time: 17.6618 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #164: GFLOPs: 3372.6580. Time: 18.3792 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #165: GFLOPs: 3406.8133. Time: 18.1950 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #166: GFLOPs: 1958.6784. Time: 31.6473 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #167: GFLOPs: 3547.2662. Time: 17.4745 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #168: GFLOPs: 3546.0609. Time: 17.4805 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #169: GFLOPs: 3305.4098. Time: 18.7531 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #170: GFLOPs: 3284.1180. Time: 18.8747 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #171: GFLOPs: 3502.6176. Time: 17.6973 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #172: GFLOPs: 3372.9595. Time: 18.3776 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #173: GFLOPs: 1449.0563. Time: 42.7774 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #174: GFLOPs: 1448.9720. Time: 42.7799 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #175: GFLOPs: 3641.5390. Time: 17.0221 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #176: GFLOPs: 2311.0290. Time: 26.8222 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #177: GFLOPs: 3501.6217. Time: 17.7023 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #178: GFLOPs: 3374.4521. Time: 18.3694 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #179: GFLOPs: 3436.2719. Time: 18.0390 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #180: GFLOPs: 3546.1667. Time: 17.4799 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #181: GFLOPs: 2552.4172. Time: 24.2855 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #182: GFLOPs: 3284.3502. Time: 18.8734 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #183: GFLOPs: 499.3037. Time: 124.1465 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #184: GFLOPs: 3504.4475. Time: 17.6880 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #185: GFLOPs: 3598.2648. Time: 17.2269 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #186: GFLOPs: 3455.9714. Time: 17.9361 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #187: GFLOPs: 3621.3882. Time: 17.1169 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #188: GFLOPs: 1827.7471. Time: 33.9143 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #189: GFLOPs: 1687.3516. Time: 36.7362 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #190: GFLOPs: 96.3739. Time: 643.1908 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #191: GFLOPs: 137.1306. Time: 452.0277 us. Best GFLOPs: 3814.0474
2024-03-21 19:28:27 [INFO] [task_scheduler.cc:131] [Task #18: fused_nn_conv2d_add_nn_relu_12] Trial #192: GFLOPs: 1083.2733. Time: 57.2218 us. Best GFLOPs: 3814.0474
