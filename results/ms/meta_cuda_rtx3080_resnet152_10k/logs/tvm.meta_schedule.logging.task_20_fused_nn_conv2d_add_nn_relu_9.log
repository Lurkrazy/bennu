2024-03-22 04:15:25 [INFO] [task_scheduler.cc:160] Initializing Task #20: "fused_nn_conv2d_add_nn_relu_9"
2024-03-22 04:15:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1024), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14), T.int64(1024), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-22 04:15:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-22 04:15:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused % T.int64(256))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1024), rc_0 * T.int64(256) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 2, 4, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 16, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-22 04:15:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(256) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(256) + ax0_ax1_ax2_ax3_fused % T.int64(256))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(256) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 2, 4, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 16, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-22 04:15:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(50176)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(256) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(256) + ax0_ax1_ax2_ax3_fused % T.int64(256))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1024), rc_0_ry_0_rx_0_fused * T.int64(256) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) * T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 2, 4, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 16, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-22 04:40:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 04:40:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-22 04:40:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 489 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 04:40:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 978 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 04:40:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 1463 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 04:40:55 [INFO] [evolutionary_search.cc:723] Sampled 73 candidate(s)
2024-03-22 04:40:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 04:40:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 04:40:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 04:41:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 04:41:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9991  0.9975  0.9972  0.9971  0.9969  0.9947  0.9945  0.9931  0.9921  0.9918  0.9916  0.9908  0.9898  0.9895  0.9875
[17 : 32]:	0.9874  0.9874  0.9842  0.9840  0.9825  0.9819  0.9819  0.9814  0.9797  0.9783  0.9781  0.9774  0.9773  0.9773  0.9771  0.9767
[33 : 48]:	0.9765  0.9754  0.9749  0.9749  0.9746  0.9730  0.9725  0.9718  0.9716  0.9713  0.9700  0.9699  0.9695  0.9694  0.9691  0.9689
[49 : 64]:	0.9681  0.9678  0.9674  0.9668  0.9664  0.9659  0.9648  0.9646  0.9636  0.9636  0.9634  0.9633  0.9625  0.9610  0.9604  0.9603
2024-03-22 04:41:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 04:41:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #1: GFLOPs: 98.0573. Time: 2097.9724 us. Best GFLOPs: 98.0573
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #2: GFLOPs: 369.2533. Time: 557.1287 us. Best GFLOPs: 369.2533
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #3: GFLOPs: 1810.6735. Time: 113.6161 us. Best GFLOPs: 1810.6735
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #4: GFLOPs: 127.0057. Time: 1619.7822 us. Best GFLOPs: 1810.6735
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #5: GFLOPs: 1714.6752. Time: 119.9770 us. Best GFLOPs: 1810.6735
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #6: GFLOPs: 1181.6421. Time: 174.0981 us. Best GFLOPs: 1810.6735
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #7: GFLOPs: 4263.1673. Time: 48.2556 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #8: GFLOPs: 321.0578. Time: 640.7618 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #9: GFLOPs: 103.9855. Time: 1978.3680 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #10: GFLOPs: 42.9895. Time: 4785.3913 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #11: GFLOPs: 23.9392. Time: 8593.4931 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #12: GFLOPs: 2577.0018. Time: 79.8298 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #13: GFLOPs: 2345.3796. Time: 87.7136 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #14: GFLOPs: 966.2086. Time: 212.9164 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #15: GFLOPs: 221.4633. Time: 928.9197 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #16: GFLOPs: 2809.1035. Time: 73.2339 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #17: GFLOPs: 1799.2419. Time: 114.3379 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #18: GFLOPs: 26.8112. Time: 7672.9785 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #19: GFLOPs: 66.8634. Time: 3076.7457 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #20: GFLOPs: 11.8670. Time: 17335.6373 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #21: GFLOPs: 51.2307. Time: 4015.5954 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #22: GFLOPs: 740.8194. Time: 277.6947 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #23: GFLOPs: 1258.9334. Time: 163.4094 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #24: GFLOPs: 34.8991. Time: 5894.7462 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #25: GFLOPs: 422.1365. Time: 487.3343 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #26: GFLOPs: 15.8225. Time: 13001.8558 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #27: GFLOPs: 608.4014. Time: 338.1347 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #28: GFLOPs: 42.4757. Time: 4843.2762 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #29: GFLOPs: 1625.7165. Time: 126.5421 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #30: GFLOPs: 1090.6332. Time: 188.6258 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #31: GFLOPs: 20.7156. Time: 9930.7521 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #32: GFLOPs: 402.1703. Time: 511.5286 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #33: GFLOPs: 45.9904. Time: 4473.1435 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #34: GFLOPs: 45.5758. Time: 4513.8324 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #35: GFLOPs: 3396.5829. Time: 60.5672 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #36: GFLOPs: 1733.4229. Time: 118.6794 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #37: GFLOPs: 117.8004. Time: 1746.3575 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #38: GFLOPs: 40.6269. Time: 5063.6798 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #39: GFLOPs: 2874.5752. Time: 71.5659 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #40: GFLOPs: 885.6253. Time: 232.2897 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #41: GFLOPs: 1081.2757. Time: 190.2582 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #42: GFLOPs: 561.7995. Time: 366.1833 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #43: GFLOPs: 45.2358. Time: 4547.7620 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #44: GFLOPs: 2050.4195. Time: 100.3315 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #45: GFLOPs: 721.9239. Time: 284.9630 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #46: GFLOPs: 206.5126. Time: 996.1695 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #47: GFLOPs: 2473.9372. Time: 83.1555 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #48: GFLOPs: 582.1102. Time: 353.4066 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #49: GFLOPs: 1729.4946. Time: 118.9490 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #50: GFLOPs: 612.4572. Time: 335.8955 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #51: GFLOPs: 1097.2982. Time: 187.4801 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #52: GFLOPs: 1058.3598. Time: 194.3778 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #53: GFLOPs: 38.2839. Time: 5373.5797 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #54: GFLOPs: 97.1313. Time: 2117.9733 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #55: GFLOPs: 857.4166. Time: 239.9319 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #56: GFLOPs: 1448.9360. Time: 141.9812 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #57: GFLOPs: 1071.0977. Time: 192.0661 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #58: GFLOPs: 20.9654. Time: 9812.4334 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #59: GFLOPs: 34.9848. Time: 5880.3198 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #60: GFLOPs: 84.1926. Time: 2443.4638 us. Best GFLOPs: 4263.1673
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #61: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 159, in _worker_func
    costs: List[float] = f_run_evaluator(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 387, in default_run_evaluator
    return run_evaluator_common(rt_mod, device, evaluator_config, repeated_args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 117, in run_evaluator_common
    profile_result = evaluator(*args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/module.py", line 397, in evaluator
    blob = feval(*args)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  1: tvm::runtime::profiling::WrapTimeEvaluator(tvm::runtime::PackedFunc, DLDevice, int, int, int, int, int, int, int, tvm::runtime::PackedFunc)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*) [clone .isra.0]
  0: tvm::runtime::CUDADeviceAPI::StreamSync(DLDevice, void*)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 212
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(896), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1024), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused)
                                        v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2)
                                        v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(14))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2))
                                        v1 = T.axis.spatial(T.int64(1024), rc_0_ry_0_rx_0_fused)
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(8))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(1024), rc_0_ry_0_rx_0_fused + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[64, 1, 8, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1024, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #62: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(64), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(1024), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(98))
                                        v2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98) // T.int64(7))
                                        v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1568))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0 * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(1024), rc_0 * T.int64(16) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 32, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[64, 4, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119 = sch.split(loop=l117, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #63: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(512), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(4) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(512), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(1024), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(98))
                                        v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(98) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(196))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(392), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(392) + ax0_ax1_ax2_ax3_fused_1 < T.int64(1024))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(512), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(4) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(1024), rc_0 * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(512), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(49) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(49) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 16, 8, 1, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[512, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 392, 2], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119 = sch.split(loop=l117, factors=[None, 392], preserve_unit_iters=True)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-03-22 04:47:12 [INFO] [task_scheduler.cc:121] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #64: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(512), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(512), T.int64(14), T.int64(14)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(512), T.int64(1024), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(256) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(128), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(4))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(4) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(32))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(32)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(256) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(1024), rc_0 * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(256) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(1024), rc_0 * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(49) * T.int64(256) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(49) // T.int64(7) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 64, 2, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109 = sch.split(loop=l107, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b87)
l117, l118 = sch.split(loop=l116, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
l132, l133, l134, l135, l136, l137, l138, l139 = sch.get_loops(block=b121)
l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l140, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l140, ann_key="pragma_unroll_explicit", ann_val=1)
l160, l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b123)
b167 = sch.get_block(name="conv2d_nchw", func_name="main")
l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187 = sch.get_loops(block=b167)
b188 = sch.decompose_reduction(block=b167, loop=l171)
2024-03-22 05:41:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 05:41:51 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-03-22 05:41:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 423 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 05:41:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 857 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 05:41:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 1288 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 05:41:53 [INFO] [evolutionary_search.cc:723] Sampled 68 candidate(s)
2024-03-22 05:41:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 05:41:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 05:41:59 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 05:42:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 05:42:02 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.0158  1.9865  1.9522  1.9403  1.9153  1.4522  1.3375  1.3065  1.2888  1.2827  1.2648  1.2598  1.2574  1.2366  1.2315  1.2315
[17 : 32]:	1.2097  1.2097  1.1721  1.1549  1.1518  1.1490  1.1484  1.1436  1.1389  1.1389  1.1305  1.1294  1.1291  1.1251  1.1210  1.1206
[33 : 48]:	1.1172  1.1143  1.1121  1.1103  1.1095  1.1023  1.0895  1.0853  1.0791  1.0786  1.0785  1.0682  1.0636  1.0597  1.0589  1.0589
[49 : 64]:	1.0545  1.0495  1.0478  1.0415  1.0390  1.0390  1.0352  1.0330  1.0321  1.0316  1.0311  1.0290  1.0281  1.0281  1.0270  1.0223
2024-03-22 05:42:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 05:42:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #65: GFLOPs: 1610.9755. Time: 127.7000 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #66: GFLOPs: 1268.8084. Time: 162.1376 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #67: GFLOPs: 1942.3672. Time: 105.9128 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #68: GFLOPs: 1621.9734. Time: 126.8341 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #69: GFLOPs: 1622.1638. Time: 126.8193 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #70: GFLOPs: 1807.9200. Time: 113.7891 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #71: GFLOPs: 1610.6511. Time: 127.7257 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #72: GFLOPs: 1917.0996. Time: 107.3088 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #73: GFLOPs: 2010.4851. Time: 102.3244 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #74: GFLOPs: 1245.3886. Time: 165.1867 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #75: GFLOPs: 1608.4108. Time: 127.9036 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #76: GFLOPs: 1957.4766. Time: 105.0953 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #77: GFLOPs: 1610.4916. Time: 127.7384 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #78: GFLOPs: 1599.3708. Time: 128.6266 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #79: GFLOPs: 2872.7169. Time: 71.6122 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #80: GFLOPs: 2871.2683. Time: 71.6483 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #81: GFLOPs: 1962.2650. Time: 104.8388 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #82: GFLOPs: 1962.2910. Time: 104.8375 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #83: GFLOPs: 1820.8340. Time: 112.9821 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #84: GFLOPs: 1423.2175. Time: 144.5468 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #85: GFLOPs: 1470.1815. Time: 139.9294 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #86: GFLOPs: 1532.9606. Time: 134.1989 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #87: GFLOPs: 1670.8302. Time: 123.1254 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #88: GFLOPs: 1472.2623. Time: 139.7316 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #89: GFLOPs: 1414.5046. Time: 145.4372 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #90: GFLOPs: 1414.5486. Time: 145.4327 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #91: GFLOPs: 1466.2916. Time: 140.3006 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #92: GFLOPs: 1469.7574. Time: 139.9698 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #93: GFLOPs: 1355.8639. Time: 151.7273 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #94: GFLOPs: 1627.6358. Time: 126.3929 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #95: GFLOPs: 1460.6570. Time: 140.8418 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #96: GFLOPs: 1508.3175. Time: 136.3914 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #97: GFLOPs: 777.5006. Time: 264.5935 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #98: GFLOPs: 1361.9791. Time: 151.0461 us. Best GFLOPs: 4263.1673
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #99: GFLOPs: 4353.3172. Time: 47.2563 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #100: GFLOPs: 4234.0789. Time: 48.5871 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #101: GFLOPs: 4229.6116. Time: 48.6384 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #102: GFLOPs: 1691.0944. Time: 121.6500 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #103: GFLOPs: 3507.0712. Time: 58.6591 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #104: GFLOPs: 1247.1831. Time: 164.9490 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #105: GFLOPs: 2012.0786. Time: 102.2433 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #106: GFLOPs: 1458.0600. Time: 141.0927 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #107: GFLOPs: 4098.9363. Time: 50.1890 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #108: GFLOPs: 2981.3126. Time: 69.0037 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #109: GFLOPs: 1249.1709. Time: 164.6865 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #110: GFLOPs: 1432.7190. Time: 143.5882 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #111: GFLOPs: 1853.8291. Time: 110.9712 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #112: GFLOPs: 1853.9291. Time: 110.9652 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #113: GFLOPs: 1572.9291. Time: 130.7889 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #114: GFLOPs: 1671.2689. Time: 123.0931 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #115: GFLOPs: 1469.0045. Time: 140.0415 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #116: GFLOPs: 1355.0037. Time: 151.8236 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #117: GFLOPs: 1509.0056. Time: 136.3292 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #118: GFLOPs: 1684.9068. Time: 122.0967 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #119: GFLOPs: 1657.9054. Time: 124.0852 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #120: GFLOPs: 1412.2140. Time: 145.6731 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #121: GFLOPs: 1414.2645. Time: 145.4619 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #122: GFLOPs: 1350.6566. Time: 152.3123 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #123: GFLOPs: 1509.4483. Time: 136.2893 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #124: GFLOPs: 1346.2693. Time: 152.8087 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #125: GFLOPs: 1350.4969. Time: 152.3303 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #126: GFLOPs: 795.9670. Time: 258.4549 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #127: GFLOPs: 2491.5823. Time: 82.5666 us. Best GFLOPs: 4353.3172
2024-03-22 05:42:42 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #128: GFLOPs: 1284.7020. Time: 160.1318 us. Best GFLOPs: 4353.3172
2024-03-22 06:49:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 06:49:53 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-22 06:49:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 394 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 06:49:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 783 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 06:49:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 1167 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 06:49:55 [INFO] [evolutionary_search.cc:723] Sampled 63 candidate(s)
2024-03-22 06:49:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 06:49:59 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 06:50:01 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 06:50:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac62e5d1a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac62276218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac557aa158)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac5584c458)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac4d720d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac559812a8)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac62276148)]: 0 failure(s)
2024-03-22 06:50:04 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.3028  2.2730  2.2609  2.2559  2.1660  1.8829  1.8576  1.8576  1.8568  1.7326  1.6700  1.6444  1.6188  1.6147  1.6132  1.6058
[17 : 32]:	1.5738  1.5672  1.5664  1.5625  1.5467  1.5459  1.5178  1.4991  1.4790  1.4782  1.4695  1.4679  1.3122  1.2907  1.2898  1.2728
[33 : 48]:	1.2726  1.2667  1.2667  1.2528  1.2324  1.1963  1.1800  1.1750  1.1488  1.1488  1.1479  1.1479  1.1463  1.1341  1.1310  1.1303
[49 : 64]:	1.1297  1.1144  1.0981  1.0944  1.0935  1.0880  1.0875  1.0645  1.0640  1.0624  1.0599  1.0590  1.0492  1.0431  1.0370  1.0301
2024-03-22 06:50:04 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 06:50:04 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #129: GFLOPs: 2125.9550. Time: 96.7667 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #130: GFLOPs: 2203.0541. Time: 93.3802 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #131: GFLOPs: 1913.1744. Time: 107.5289 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #132: GFLOPs: 1905.0417. Time: 107.9880 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #133: GFLOPs: 1895.8771. Time: 108.5100 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #134: GFLOPs: 1840.4211. Time: 111.7796 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #135: GFLOPs: 1290.4540. Time: 159.4180 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #136: GFLOPs: 1290.4769. Time: 159.4152 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #137: GFLOPs: 1277.4917. Time: 161.0356 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #138: GFLOPs: 1840.3858. Time: 111.7818 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #139: GFLOPs: 949.2105. Time: 216.7292 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #140: GFLOPs: 1336.4490. Time: 153.9315 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #141: GFLOPs: 1663.8000. Time: 123.6456 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #142: GFLOPs: 1372.4787. Time: 149.8906 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #143: GFLOPs: 940.1340. Time: 218.8216 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #144: GFLOPs: 979.3202. Time: 210.0657 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #145: GFLOPs: 958.5010. Time: 214.6285 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #146: GFLOPs: 1203.7676. Time: 170.8981 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #147: GFLOPs: 1242.3177. Time: 165.5950 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #148: GFLOPs: 955.3608. Time: 215.3339 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #149: GFLOPs: 1579.2331. Time: 130.2668 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #150: GFLOPs: 1059.1751. Time: 194.2281 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #151: GFLOPs: 1203.8290. Time: 170.8894 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #152: GFLOPs: 1059.1052. Time: 194.2410 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #153: GFLOPs: 1217.4667. Time: 168.9751 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #154: GFLOPs: 1276.0192. Time: 161.2214 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #155: GFLOPs: 801.3047. Time: 256.7333 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #156: GFLOPs: 1853.4920. Time: 110.9914 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #157: GFLOPs: 758.8159. Time: 271.1087 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #158: GFLOPs: 758.8907. Time: 271.0820 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #159: GFLOPs: 1056.3306. Time: 194.7511 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #160: GFLOPs: 1387.5780. Time: 148.2595 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #161: GFLOPs: 872.8624. Time: 235.6862 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #162: GFLOPs: 3299.7526. Time: 62.3446 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #163: GFLOPs: 3283.8440. Time: 62.6466 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #164: GFLOPs: 753.2147. Time: 273.1248 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #165: GFLOPs: 855.9044. Time: 240.3558 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #166: GFLOPs: 773.7302. Time: 265.8829 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #167: GFLOPs: 2024.4889. Time: 101.6166 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #168: GFLOPs: 2278.6097. Time: 90.2838 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #169: GFLOPs: 1997.2274. Time: 103.0036 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #170: GFLOPs: 1997.1252. Time: 103.0089 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #171: GFLOPs: 1972.2112. Time: 104.3101 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #172: GFLOPs: 1972.1606. Time: 104.3128 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #173: GFLOPs: 2013.8765. Time: 102.1520 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #174: GFLOPs: 1828.2217. Time: 112.5255 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #175: GFLOPs: 2904.0638. Time: 70.8392 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #176: GFLOPs: 2491.8957. Time: 82.5563 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #177: GFLOPs: 853.3874. Time: 241.0647 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #178: GFLOPs: 1763.0943. Time: 116.6821 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #179: GFLOPs: 2000.1123. Time: 102.8550 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #180: GFLOPs: 1937.8924. Time: 106.1574 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #181: GFLOPs: 1936.3025. Time: 106.2446 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #182: GFLOPs: 3299.2461. Time: 62.3541 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #183: GFLOPs: 1927.9389. Time: 106.7055 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #184: GFLOPs: 1972.3958. Time: 104.3004 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #185: GFLOPs: 1962.2412. Time: 104.8401 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #186: GFLOPs: 1826.0604. Time: 112.6587 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #187: GFLOPs: 1997.2042. Time: 103.0048 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #188: GFLOPs: 2324.7410. Time: 88.4923 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #189: GFLOPs: 1131.9931. Time: 181.7340 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #190: GFLOPs: 2273.0753. Time: 90.5036 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #191: GFLOPs: 546.5937. Time: 376.3703 us. Best GFLOPs: 4353.3172
2024-03-22 06:50:52 [INFO] [task_scheduler.cc:131] [Task #20: fused_nn_conv2d_add_nn_relu_9] Trial #192: GFLOPs: 148.7182. Time: 1383.2977 us. Best GFLOPs: 4353.3172
