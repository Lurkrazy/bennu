2024-03-21 10:38:32 [INFO] [task_scheduler.cc:160] Initializing Task #154: "fused_nn_contrib_conv2d_winograd_without_weight_transform_2"
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        data_pad = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(30), T.int64(30)))
        input_tile = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)))
        B = T.alloc_buffer((T.int64(4), T.int64(4)))
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)))
        A = T.alloc_buffer((T.int64(4), T.int64(2)))
        inverse = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(2), T.int64(2)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(30), T.int64(30)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for ci, p, eps, nu in T.grid(T.int64(128), T.int64(196), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps, v_p % T.int64(14) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule": "None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps, v_p % T.int64(14) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(128), T.int64(196), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_eps, v_nu):T.min(v_eps, v_nu) + (T.max(v_eps, v_nu) + T.int64(1) - T.min(v_eps, v_nu))])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(32), T.int64(196), T.int64(128)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule": "None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(32), T.int64(196), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b):T.min(v_r_a, v_r_b) + (T.max(v_r_a, v_r_b) + T.int64(1) - T.min(v_r_a, v_r_b)), T.min(v_vh, v_vw):T.min(v_vh, v_vw) + (T.max(v_vh, v_vw) + T.int64(1) - T.min(v_vh, v_vw))])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(28)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for ci_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(401408)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(100352))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(100352) // T.int64(25088))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(25088) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(1024))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(98) + p_3 * T.int64(14) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(128) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(98)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(98) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(128) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 1, 1, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 14])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[1, 64, 2])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(401408)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(100352))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(100352) // T.int64(25088))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(25088) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(1024))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(98) + p_3 * T.int64(14) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(98)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(98) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(1024) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 1, 1, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 14])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[1, 64, 2])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-03-21 10:38:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
            data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
            bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)))
            inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(2), T.int64(2)), scope="local")
            data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
            bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)), scope="local")
            data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(784), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule": "None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for ci_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(401408)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(100352))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(100352) // T.int64(25088))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(25088) // T.int64(196))
                                    v3 = T.axis.spatial(T.int64(196), ax0_ax1_ax2_ax3_fused % T.int64(196))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(1024))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(1024) // T.int64(256))
                                    v2 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(64), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(14)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + nu_3 + nu_4)
                                    v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(98) + p_3 * T.int64(14) + p_4)
                                    v_ci = T.axis.reduce(T.int64(128), ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(2), T.int64(1), T.int64(2), T.int64(98)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused // T.int64(2) * T.int64(2) + ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(98) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x"):
                for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                        for ax2 in T.unroll(T.int64(2)):
                            for ax3 in T.unroll(T.int64(2)):
                                for ax4 in T.unroll(T.int64(4)):
                                    for ax5 in T.unroll(T.int64(4)):
                                        with T.block("inverse"):
                                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                            v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                            v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                            T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                            T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                            T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                            with T.init():
                                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                            inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                    for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                        with T.block("conv2d_winograd"):
                            v_n = T.axis.spatial(T.int64(1), T.int64(0))
                            v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) // T.int64(196))
                            v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                            v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                            T.where(n_co_h_0_w_0_fused_0 * T.int64(256) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                            T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                            T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                            conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[1, 2, 1, 2, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[16, 1, 1, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 14])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[1, 64, 2])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
2024-03-21 12:00:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:00:25 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 12:00:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 495 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:00:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 992 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:00:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1481 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:00:33 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-03-21 12:00:40 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 143 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:00:47 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:00:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:01:01 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:01:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9997  0.9989  0.9989  0.9979  0.9975  0.9970  0.9965  0.9953  0.9946  0.9933  0.9923  0.9921  0.9902  0.9901  0.9901
[17 : 32]:	0.9892  0.9890  0.9887  0.9883  0.9883  0.9879  0.9876  0.9872  0.9869  0.9867  0.9866  0.9863  0.9843  0.9841  0.9833  0.9822
[33 : 48]:	0.9817  0.9810  0.9806  0.9805  0.9793  0.9790  0.9785  0.9785  0.9785  0.9778  0.9757  0.9754  0.9754  0.9740  0.9730  0.9724
[49 : 64]:	0.9713  0.9707  0.9707  0.9703  0.9702  0.9695  0.9691  0.9688  0.9687  0.9684  0.9684  0.9677  0.9675  0.9670  0.9667  0.9666
2024-03-21 12:01:02 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:01:02 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #1: GFLOPs: 94.2964. Time: 489.5407 us. Best GFLOPs: 94.2964
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #2: GFLOPs: 1112.6492. Time: 41.4883 us. Best GFLOPs: 1112.6492
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #3: GFLOPs: 1370.2101. Time: 33.6897 us. Best GFLOPs: 1370.2101
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #4: GFLOPs: 89.8610. Time: 513.7038 us. Best GFLOPs: 1370.2101
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #5: GFLOPs: 1833.2782. Time: 25.1800 us. Best GFLOPs: 1833.2782
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #6: GFLOPs: 89.9837. Time: 513.0030 us. Best GFLOPs: 1833.2782
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #7: GFLOPs: 694.0024. Time: 66.5155 us. Best GFLOPs: 1833.2782
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #8: GFLOPs: 597.9868. Time: 77.1956 us. Best GFLOPs: 1833.2782
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #9: GFLOPs: 1985.2072. Time: 23.2529 us. Best GFLOPs: 1985.2072
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #10: GFLOPs: 2422.2711. Time: 19.0573 us. Best GFLOPs: 2422.2711
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #11: GFLOPs: 1339.8826. Time: 34.4522 us. Best GFLOPs: 2422.2711
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #12: GFLOPs: 1453.1398. Time: 31.7670 us. Best GFLOPs: 2422.2711
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #13: GFLOPs: 1263.2070. Time: 36.5434 us. Best GFLOPs: 2422.2711
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #14: GFLOPs: 1931.5305. Time: 23.8991 us. Best GFLOPs: 2422.2711
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #15: GFLOPs: 2853.7523. Time: 16.1759 us. Best GFLOPs: 2853.7523
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #16: GFLOPs: 263.3822. Time: 175.2659 us. Best GFLOPs: 2853.7523
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #17: GFLOPs: 1705.9270. Time: 27.0597 us. Best GFLOPs: 2853.7523
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #18: GFLOPs: 1072.1517. Time: 43.0554 us. Best GFLOPs: 2853.7523
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #19: GFLOPs: 876.9936. Time: 52.6366 us. Best GFLOPs: 2853.7523
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #20: GFLOPs: 2513.0276. Time: 18.3690 us. Best GFLOPs: 2853.7523
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #21: GFLOPs: 545.7725. Time: 84.5809 us. Best GFLOPs: 2853.7523
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #22: GFLOPs: 1032.4978. Time: 44.7090 us. Best GFLOPs: 2853.7523
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #23: GFLOPs: 439.5905. Time: 105.0112 us. Best GFLOPs: 2853.7523
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #24: GFLOPs: 3315.4094. Time: 13.9234 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #25: GFLOPs: 1552.6331. Time: 29.7314 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #26: GFLOPs: 2901.2897. Time: 15.9108 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #27: GFLOPs: 3148.9275. Time: 14.6596 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #28: GFLOPs: 1044.7318. Time: 44.1854 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #29: GFLOPs: 736.8979. Time: 62.6436 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #30: GFLOPs: 1570.0652. Time: 29.4013 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #31: GFLOPs: 1459.9273. Time: 31.6193 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #32: GFLOPs: 920.0184. Time: 50.1750 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #33: GFLOPs: 565.6403. Time: 81.6100 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #34: GFLOPs: 160.1894. Time: 288.1708 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #35: GFLOPs: 2000.0403. Time: 23.0805 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #36: GFLOPs: 1777.3015. Time: 25.9730 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #37: GFLOPs: 1444.5725. Time: 31.9554 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #38: GFLOPs: 84.8088. Time: 544.3061 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #39: GFLOPs: 306.4196. Time: 150.6494 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #40: GFLOPs: 2531.4082. Time: 18.2357 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #41: GFLOPs: 171.7082. Time: 268.8394 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #42: GFLOPs: 39.9821. Time: 1154.5659 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #43: GFLOPs: 1274.6836. Time: 36.2144 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #44: GFLOPs: 54.2393. Time: 851.0795 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #45: GFLOPs: 84.1019. Time: 548.8808 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #46: GFLOPs: 745.4174. Time: 61.9276 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #47: GFLOPs: 1156.2683. Time: 39.9232 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #48: GFLOPs: 911.5070. Time: 50.6435 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #49: GFLOPs: 131.4394. Time: 351.2030 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #50: GFLOPs: 1119.4069. Time: 41.2378 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #51: GFLOPs: 802.7797. Time: 57.5026 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #52: GFLOPs: 483.5121. Time: 95.4721 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #53: GFLOPs: 2482.1483. Time: 18.5976 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #54: GFLOPs: 1631.5887. Time: 28.2926 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #55: GFLOPs: 2528.2767. Time: 18.2583 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #56: GFLOPs: 109.3228. Time: 422.2535 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #57: GFLOPs: 27.9287. Time: 1652.8516 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #58: GFLOPs: 1097.4449. Time: 42.0631 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #59: GFLOPs: 1020.8848. Time: 45.2176 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #60: GFLOPs: 1223.9653. Time: 37.7151 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #61: GFLOPs: 3269.2303. Time: 14.1201 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #62: GFLOPs: 1838.1854. Time: 25.1128 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #63: GFLOPs: 84.6184. Time: 545.5304 us. Best GFLOPs: 3315.4094
2024-03-21 12:23:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #64: GFLOPs: 735.4020. Time: 62.7710 us. Best GFLOPs: 3315.4094
2024-03-21 12:31:41 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:31:42 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 12:31:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 437 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:31:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 870 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:31:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1308 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:31:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1744 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:31:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 2168 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:31:54 [INFO] [evolutionary_search.cc:723] Sampled 72 candidate(s)
2024-03-21 12:32:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:32:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:32:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:32:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:32:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4367  1.3768  1.3624  1.3152  1.3129  1.3111  1.2924  1.2866  1.2777  1.2663  1.2610  1.2558  1.2477  1.2467  1.2084  1.1921
[17 : 32]:	1.1862  1.1801  1.1790  1.1767  1.1704  1.1683  1.1683  1.1656  1.1613  1.1593  1.1579  1.1555  1.1513  1.1486  1.1475  1.1402
[33 : 48]:	1.1397  1.1377  1.1307  1.1274  1.1254  1.1173  1.1163  1.1162  1.1148  1.1125  1.1103  1.1089  1.1061  1.1054  1.1054  1.1036
[49 : 64]:	1.1034  1.1031  1.1029  1.1013  1.1011  1.1008  1.0999  1.0945  1.0929  1.0927  1.0924  1.0919  1.0910  1.0879  1.0861  1.0860
2024-03-21 12:32:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:32:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #65: GFLOPs: 2258.9732. Time: 20.4349 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #66: GFLOPs: 1779.3489. Time: 25.9432 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #67: GFLOPs: 2412.9887. Time: 19.1306 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #68: GFLOPs: 3209.4667. Time: 14.3830 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #69: GFLOPs: 2519.8137. Time: 18.3196 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #70: GFLOPs: 3309.4748. Time: 13.9484 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #71: GFLOPs: 3033.1623. Time: 15.2191 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #72: GFLOPs: 2328.2081. Time: 19.8272 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #73: GFLOPs: 2406.0157. Time: 19.1860 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #74: GFLOPs: 2243.7314. Time: 20.5737 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #75: GFLOPs: 3149.3825. Time: 14.6575 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #76: GFLOPs: 3037.1524. Time: 15.1991 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #77: GFLOPs: 792.5310. Time: 58.2462 us. Best GFLOPs: 3315.4094
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #78: GFLOPs: 3379.2578. Time: 13.6604 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #79: GFLOPs: 1605.4542. Time: 28.7532 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #80: GFLOPs: 3222.9713. Time: 14.3228 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #81: GFLOPs: 774.7792. Time: 59.5807 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #82: GFLOPs: 2869.4665. Time: 16.0873 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #83: GFLOPs: 695.6193. Time: 66.3609 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #84: GFLOPs: 1764.4074. Time: 26.1628 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #85: GFLOPs: 3179.6891. Time: 14.5177 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #86: GFLOPs: 2067.2550. Time: 22.3301 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #87: GFLOPs: 2067.3379. Time: 22.3292 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #88: GFLOPs: 1801.7534. Time: 25.6206 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #89: GFLOPs: 2905.4512. Time: 15.8880 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #90: GFLOPs: 1428.3168. Time: 32.3191 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #91: GFLOPs: 1139.5745. Time: 40.5080 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #92: GFLOPs: 3230.2439. Time: 14.2905 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #93: GFLOPs: 1436.2721. Time: 32.1401 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #94: GFLOPs: 2845.8272. Time: 16.2209 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #95: GFLOPs: 2809.4494. Time: 16.4309 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #96: GFLOPs: 2842.3456. Time: 16.2408 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #97: GFLOPs: 1466.2670. Time: 31.4826 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #98: GFLOPs: 1739.5481. Time: 26.5367 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #99: GFLOPs: 456.8518. Time: 101.0435 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #100: GFLOPs: 553.2714. Time: 83.4345 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #101: GFLOPs: 2793.4476. Time: 16.5251 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #102: GFLOPs: 1614.3238. Time: 28.5952 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #103: GFLOPs: 2605.4082. Time: 17.7177 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #104: GFLOPs: 2814.7646. Time: 16.3999 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #105: GFLOPs: 1864.6653. Time: 24.7561 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #106: GFLOPs: 2625.5493. Time: 17.5818 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #107: GFLOPs: 2814.4517. Time: 16.4017 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #108: GFLOPs: 681.1833. Time: 67.7672 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #109: GFLOPs: 2578.1409. Time: 17.9051 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #110: GFLOPs: 1821.8565. Time: 25.3378 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #111: GFLOPs: 1790.3949. Time: 25.7831 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #112: GFLOPs: 1397.7380. Time: 33.0262 us. Best GFLOPs: 3379.2578
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #113: GFLOPs: 3553.7760. Time: 12.9895 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #114: GFLOPs: 2697.6236. Time: 17.1121 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #115: GFLOPs: 2392.9260. Time: 19.2910 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #116: GFLOPs: 2620.8947. Time: 17.6130 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #117: GFLOPs: 2172.1585. Time: 21.2516 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #118: GFLOPs: 2449.6620. Time: 18.8442 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #119: GFLOPs: 1606.8673. Time: 28.7279 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #120: GFLOPs: 2640.6109. Time: 17.4815 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #121: GFLOPs: 1604.2805. Time: 28.7742 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #122: GFLOPs: 1658.8664. Time: 27.8274 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #123: GFLOPs: 1689.2941. Time: 27.3262 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #124: GFLOPs: 2192.2247. Time: 21.0571 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #125: GFLOPs: 2155.3712. Time: 21.4172 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #126: GFLOPs: 2150.3879. Time: 21.4668 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #127: GFLOPs: 1371.1155. Time: 33.6674 us. Best GFLOPs: 3553.7760
2024-03-21 12:33:25 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #128: GFLOPs: 1190.9662. Time: 38.7601 us. Best GFLOPs: 3553.7760
2024-03-21 12:41:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:41:02 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 12:41:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 399 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:41:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 793 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:41:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1185 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:41:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1583 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:41:11 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-03-21 12:41:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:41:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:41:38 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:41:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:41:51 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	2.2017  2.1234  1.8848  1.8482  1.8188  1.8020  1.7948  1.7811  1.7787  1.7687  1.7543  1.7296  1.7212  1.7142  1.7109  1.7093
[17 : 32]:	1.7060  1.6965  1.6959  1.6812  1.6745  1.6687  1.6565  1.6557  1.6508  1.6502  1.6429  1.6411  1.6410  1.6325  1.6274  1.6274
[33 : 48]:	1.5961  1.5899  1.5868  1.5853  1.5699  1.5661  1.5638  1.5591  1.5513  1.5470  1.5470  1.5448  1.5317  1.5297  1.4994  1.4979
[49 : 64]:	1.4962  1.4786  1.4471  1.4246  1.4093  1.3939  1.3915  1.3895  1.3830  1.3804  1.3756  1.3711  1.3624  1.3565  1.3439  1.3408
2024-03-21 12:41:51 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:41:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #129: GFLOPs: 1975.2340. Time: 23.3704 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #130: GFLOPs: 2245.8135. Time: 20.5547 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #131: GFLOPs: 2687.7843. Time: 17.1747 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #132: GFLOPs: 1172.5885. Time: 39.3675 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #133: GFLOPs: 955.5923. Time: 48.3071 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #134: GFLOPs: 1172.7254. Time: 39.3629 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #135: GFLOPs: 2378.8992. Time: 19.4047 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #136: GFLOPs: 2225.3646. Time: 20.7435 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #137: GFLOPs: 2116.4932. Time: 21.8106 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #138: GFLOPs: 1157.9490. Time: 39.8652 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #139: GFLOPs: 3202.3888. Time: 14.4148 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #140: GFLOPs: 1563.3242. Time: 29.5281 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #141: GFLOPs: 960.1779. Time: 48.0764 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #142: GFLOPs: 1105.5314. Time: 41.7554 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #143: GFLOPs: 1000.7613. Time: 46.1268 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #144: GFLOPs: 1286.6850. Time: 35.8766 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #145: GFLOPs: 1520.8273. Time: 30.3532 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #146: GFLOPs: 1543.5612. Time: 29.9061 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #147: GFLOPs: 1332.0955. Time: 34.6536 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #148: GFLOPs: 2892.0076. Time: 15.9619 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #149: GFLOPs: 3011.8753. Time: 15.3266 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #150: GFLOPs: 1986.3616. Time: 23.2394 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #151: GFLOPs: 1960.0389. Time: 23.5515 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #152: GFLOPs: 2881.6608. Time: 16.0192 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #153: GFLOPs: 1864.2993. Time: 24.7610 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #154: GFLOPs: 2163.1923. Time: 21.3397 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #155: GFLOPs: 1946.9287. Time: 23.7101 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #156: GFLOPs: 2013.5070. Time: 22.9261 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #157: GFLOPs: 1861.4952. Time: 24.7983 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #158: GFLOPs: 633.5318. Time: 72.8644 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #159: GFLOPs: 1974.9699. Time: 23.3735 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #160: GFLOPs: 1986.8269. Time: 23.2340 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #161: GFLOPs: 1593.2279. Time: 28.9738 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #162: GFLOPs: 1705.1039. Time: 27.0728 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #163: GFLOPs: 1510.4711. Time: 30.5613 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #164: GFLOPs: 2016.3254. Time: 22.8941 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #165: GFLOPs: 2050.7979. Time: 22.5092 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #166: GFLOPs: 2078.4240. Time: 22.2101 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #167: GFLOPs: 3079.0782. Time: 14.9921 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #168: GFLOPs: 1908.8612. Time: 24.1830 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #169: GFLOPs: 3281.2074. Time: 14.0686 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #170: GFLOPs: 3293.4959. Time: 14.0161 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #171: GFLOPs: 3110.9479. Time: 14.8385 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #172: GFLOPs: 3293.6401. Time: 14.0155 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #173: GFLOPs: 1157.2582. Time: 39.8890 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #174: GFLOPs: 2581.8828. Time: 17.8792 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #175: GFLOPs: 987.1171. Time: 46.7644 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #176: GFLOPs: 2682.1742. Time: 17.2106 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #177: GFLOPs: 1190.3204. Time: 38.7811 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #178: GFLOPs: 1576.2020. Time: 29.2868 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #179: GFLOPs: 1146.2356. Time: 40.2726 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #180: GFLOPs: 1255.1386. Time: 36.7783 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #181: GFLOPs: 1180.0563. Time: 39.1184 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #182: GFLOPs: 2378.0342. Time: 19.4118 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #183: GFLOPs: 1399.6241. Time: 32.9817 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #184: GFLOPs: 2377.8711. Time: 19.4131 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #185: GFLOPs: 1110.6141. Time: 41.5643 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #186: GFLOPs: 553.4118. Time: 83.4133 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #187: GFLOPs: 3282.8590. Time: 14.0615 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #188: GFLOPs: 1285.6142. Time: 35.9065 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #189: GFLOPs: 1989.0585. Time: 23.2079 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #190: GFLOPs: 535.0231. Time: 86.2802 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #191: GFLOPs: 1413.7801. Time: 32.6514 us. Best GFLOPs: 3553.7760
2024-03-21 12:42:43 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #192: GFLOPs: 1240.8496. Time: 37.2019 us. Best GFLOPs: 3553.7760
2024-03-21 12:53:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 12:53:59 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 12:54:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 392 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:54:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 794 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:54:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1184 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:54:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1585 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:54:07 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-03-21 12:54:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:54:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:54:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:54:45 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 76 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 12:54:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5627  1.5603  1.5232  1.5034  1.4712  1.4649  1.4519  1.4347  1.4281  1.4263  1.4097  1.3839  1.3740  1.3639  1.3427  1.3216
[17 : 32]:	1.3200  1.3188  1.3107  1.2854  1.2722  1.2678  1.2620  1.2531  1.2440  1.2405  1.2199  1.2158  1.2149  1.2037  1.1981  1.1929
[33 : 48]:	1.1916  1.1914  1.1900  1.1899  1.1885  1.1865  1.1852  1.1788  1.1705  1.1682  1.1635  1.1571  1.1554  1.1526  1.1461  1.1454
[49 : 64]:	1.1421  1.1421  1.1369  1.1287  1.1270  1.1270  1.1228  1.1202  1.1160  1.1138  1.1101  1.1100  1.1077  1.1076  1.1074  1.1047
2024-03-21 12:54:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 12:54:49 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #193: GFLOPs: 2346.6918. Time: 19.6711 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #194: GFLOPs: 1692.9799. Time: 27.2667 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #195: GFLOPs: 1716.4145. Time: 26.8944 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #196: GFLOPs: 1764.9406. Time: 26.1549 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #197: GFLOPs: 2268.4277. Time: 20.3497 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #198: GFLOPs: 3511.2506. Time: 13.1469 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #199: GFLOPs: 3511.7081. Time: 13.1451 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #200: GFLOPs: 1693.7755. Time: 27.2539 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #201: GFLOPs: 1739.0541. Time: 26.5443 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #202: GFLOPs: 1654.3582. Time: 27.9032 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #203: GFLOPs: 1654.7393. Time: 27.8968 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #204: GFLOPs: 1772.4356. Time: 26.0443 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #205: GFLOPs: 1739.7462. Time: 26.5337 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #206: GFLOPs: 3506.1727. Time: 13.1659 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #207: GFLOPs: 1974.3285. Time: 23.3811 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #208: GFLOPs: 2657.5814. Time: 17.3699 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #209: GFLOPs: 1942.6906. Time: 23.7618 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #210: GFLOPs: 2706.8821. Time: 17.0535 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #211: GFLOPs: 1648.2215. Time: 28.0071 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #212: GFLOPs: 1588.8213. Time: 29.0542 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #213: GFLOPs: 1660.5256. Time: 27.7996 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #214: GFLOPs: 1453.6066. Time: 31.7568 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #215: GFLOPs: 2266.9697. Time: 20.3628 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #216: GFLOPs: 2346.9449. Time: 19.6689 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #217: GFLOPs: 2643.1273. Time: 17.4649 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #218: GFLOPs: 1697.9811. Time: 27.1864 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #219: GFLOPs: 1747.2012. Time: 26.4205 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #220: GFLOPs: 1456.2410. Time: 31.6994 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #221: GFLOPs: 2598.5467. Time: 17.7645 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #222: GFLOPs: 2233.9287. Time: 20.6640 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #223: GFLOPs: 3161.4906. Time: 14.6013 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #224: GFLOPs: 3302.2220. Time: 13.9790 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #225: GFLOPs: 2737.4450. Time: 16.8631 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #226: GFLOPs: 1327.8372. Time: 34.7647 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #227: GFLOPs: 1588.6511. Time: 29.0573 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #228: GFLOPs: 3379.4954. Time: 13.6594 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #229: GFLOPs: 3037.9831. Time: 15.1949 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #230: GFLOPs: 1642.9145. Time: 28.0976 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #231: GFLOPs: 3161.7487. Time: 14.6001 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #232: GFLOPs: 2587.3266. Time: 17.8416 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #233: GFLOPs: 3158.2446. Time: 14.6163 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #234: GFLOPs: 2657.2509. Time: 17.3721 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #235: GFLOPs: 1584.6700. Time: 29.1303 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #236: GFLOPs: 1588.6514. Time: 29.0573 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #237: GFLOPs: 1197.1305. Time: 38.5605 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #238: GFLOPs: 3279.7114. Time: 14.0750 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #239: GFLOPs: 2676.9662. Time: 17.2441 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #240: GFLOPs: 1118.7686. Time: 41.2614 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #241: GFLOPs: 1226.1515. Time: 37.6478 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #242: GFLOPs: 1225.8820. Time: 37.6561 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #243: GFLOPs: 1692.0405. Time: 27.2818 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #244: GFLOPs: 1570.8219. Time: 29.3871 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #245: GFLOPs: 2522.5095. Time: 18.3000 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #246: GFLOPs: 1824.9504. Time: 25.2949 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #247: GFLOPs: 1974.1686. Time: 23.3830 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #248: GFLOPs: 2958.1857. Time: 15.6048 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #249: GFLOPs: 3245.7374. Time: 14.2223 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #250: GFLOPs: 2212.3444. Time: 20.8656 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #251: GFLOPs: 2127.5357. Time: 21.6974 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #252: GFLOPs: 1969.8064. Time: 23.4347 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #253: GFLOPs: 1060.8679. Time: 43.5134 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #254: GFLOPs: 2450.6576. Time: 18.8365 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #255: GFLOPs: 67.7119. Time: 681.7402 us. Best GFLOPs: 3553.7760
2024-03-21 12:55:44 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #256: GFLOPs: 1015.0312. Time: 45.4783 us. Best GFLOPs: 3553.7760
2024-03-21 13:08:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 13:08:58 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 13:09:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:09:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 786 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:09:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1188 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:09:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1582 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:09:06 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 13:09:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:09:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:09:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:09:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:09:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.8810  1.8584  1.8493  1.8256  1.7700  1.7411  1.6929  1.6820  1.6365  1.5966  1.5768  1.5670  1.5595  1.5535  1.5157  1.5042
[17 : 32]:	1.4982  1.4935  1.4900  1.4881  1.4695  1.4674  1.4649  1.4636  1.4612  1.4590  1.4562  1.4433  1.4335  1.4335  1.4321  1.4320
[33 : 48]:	1.4320  1.4290  1.4242  1.4218  1.4114  1.4111  1.4076  1.3947  1.3914  1.3877  1.3865  1.3783  1.3715  1.3682  1.3642  1.3491
[49 : 64]:	1.3453  1.3452  1.3316  1.3310  1.3290  1.3135  1.3048  1.3033  1.2960  1.2899  1.2884  1.2814  1.2733  1.2713  1.2658  1.2616
2024-03-21 13:09:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 13:09:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #257: GFLOPs: 1888.0053. Time: 24.4501 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #258: GFLOPs: 2862.6768. Time: 16.1254 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #259: GFLOPs: 1901.7655. Time: 24.2732 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #260: GFLOPs: 958.7489. Time: 48.1481 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #261: GFLOPs: 2477.1196. Time: 18.6353 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #262: GFLOPs: 2902.6300. Time: 15.9035 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #263: GFLOPs: 2731.9918. Time: 16.8968 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #264: GFLOPs: 2740.8396. Time: 16.8423 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #265: GFLOPs: 1730.9327. Time: 26.6688 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #266: GFLOPs: 1622.0024. Time: 28.4598 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #267: GFLOPs: 2119.7867. Time: 21.7767 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #268: GFLOPs: 2580.3627. Time: 17.8897 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #269: GFLOPs: 1216.8273. Time: 37.9363 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #270: GFLOPs: 2888.1294. Time: 15.9833 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #271: GFLOPs: 3467.7648. Time: 13.3117 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #272: GFLOPs: 1714.3939. Time: 26.9261 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #273: GFLOPs: 2203.0003. Time: 20.9541 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #274: GFLOPs: 2514.3210. Time: 18.3596 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #275: GFLOPs: 3367.1417. Time: 13.7095 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #276: GFLOPs: 2614.2082. Time: 17.6581 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #277: GFLOPs: 3200.9394. Time: 14.4214 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #278: GFLOPs: 3174.3606. Time: 14.5421 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #279: GFLOPs: 2693.6437. Time: 17.1374 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #280: GFLOPs: 2377.6688. Time: 19.4148 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #281: GFLOPs: 2751.8121. Time: 16.7751 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #282: GFLOPs: 2760.9457. Time: 16.7196 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #283: GFLOPs: 3018.0053. Time: 15.2955 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #284: GFLOPs: 1754.1253. Time: 26.3162 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #285: GFLOPs: 2945.3455. Time: 15.6728 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #286: GFLOPs: 2945.8224. Time: 15.6703 us. Best GFLOPs: 3553.7760
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #287: GFLOPs: 3585.8561. Time: 12.8733 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #288: GFLOPs: 2841.8927. Time: 16.2434 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #289: GFLOPs: 2845.5909. Time: 16.2223 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #290: GFLOPs: 2684.3597. Time: 17.1966 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #291: GFLOPs: 2684.1038. Time: 17.1983 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #292: GFLOPs: 2288.5936. Time: 20.1704 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #293: GFLOPs: 3314.9234. Time: 13.9255 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #294: GFLOPs: 3416.5012. Time: 13.5115 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #295: GFLOPs: 2653.2704. Time: 17.3981 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #296: GFLOPs: 3401.6327. Time: 13.5705 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #297: GFLOPs: 3025.0388. Time: 15.2599 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #298: GFLOPs: 1729.6595. Time: 26.6884 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #299: GFLOPs: 2715.0959. Time: 17.0019 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #300: GFLOPs: 3091.8917. Time: 14.9300 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #301: GFLOPs: 3020.9949. Time: 15.2804 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #302: GFLOPs: 3020.2162. Time: 15.2843 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #303: GFLOPs: 2396.0834. Time: 19.2656 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #304: GFLOPs: 2062.4283. Time: 22.3823 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #305: GFLOPs: 2517.2074. Time: 18.3385 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #306: GFLOPs: 1744.4860. Time: 26.4616 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #307: GFLOPs: 2649.2946. Time: 17.4242 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #308: GFLOPs: 3308.8799. Time: 13.9509 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #309: GFLOPs: 2920.6197. Time: 15.8055 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #310: GFLOPs: 2133.2705. Time: 21.6390 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #311: GFLOPs: 1851.5922. Time: 24.9309 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #312: GFLOPs: 2849.9238. Time: 16.1976 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #313: GFLOPs: 3436.5222. Time: 13.4327 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #314: GFLOPs: 1973.9027. Time: 23.3861 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #315: GFLOPs: 3300.9299. Time: 13.9845 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #316: GFLOPs: 3269.6452. Time: 14.1183 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #317: GFLOPs: 1974.4220. Time: 23.3800 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #318: GFLOPs: 132.4866. Time: 348.4270 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #319: GFLOPs: 1273.1805. Time: 36.2572 us. Best GFLOPs: 3585.8561
2024-03-21 13:10:39 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #320: GFLOPs: 298.7426. Time: 154.5207 us. Best GFLOPs: 3585.8561
2024-03-21 13:28:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 13:28:39 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 13:28:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 396 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:28:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 791 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:28:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1187 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:28:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 1582 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:28:48 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2024-03-21 13:28:56 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:29:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:29:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:29:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd27de258)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd777e4e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd82638f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4544888)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd1a266d8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd78e7fa8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd81416a8)]: 0 failure(s)
2024-03-21 13:29:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4945  1.4866  1.4486  1.3850  1.3768  1.3255  1.3255  1.3235  1.3028  1.3027  1.3027  1.3019  1.2993  1.2926  1.2897  1.2852
[17 : 32]:	1.2830  1.2715  1.2708  1.2708  1.2704  1.2575  1.2504  1.2504  1.2053  1.1985  1.1941  1.1930  1.1907  1.1888  1.1878  1.1780
[33 : 48]:	1.1757  1.1716  1.1690  1.1570  1.1453  1.1452  1.1414  1.1411  1.1409  1.1388  1.1380  1.1370  1.1328  1.1261  1.1261  1.1234
[49 : 64]:	1.1105  1.1057  1.0994  1.0980  1.0969  1.0850  1.0845  1.0820  1.0791  1.0759  1.0742  1.0737  1.0731  1.0681  1.0637  1.0556
2024-03-21 13:29:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 13:29:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:121] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #321: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) // T.int64(49) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(784))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(49))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(8))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(256))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) // T.int64(49) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(8) + ci_1 * T.int64(4) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) // T.int64(49) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 2, 2, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 49, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[16, 2, 4])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135 = sch.split(loop=l133, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 196, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b148)
l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b149)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b151)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b153)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:121] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #322: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(25), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                            T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(1024) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(44) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.where(ci_p_fused_0 * T.int64(1024) + ci_p_fused_1 < T.int64(25088))
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) // T.int64(49) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) + p_3_init + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(8)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) // T.int64(784))
                                    v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784) // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(392) // T.int64(49))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) % T.int64(49))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(196), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(64))
                                        v2 = T.axis.spatial(T.int64(128), ci_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(64) // T.int64(8))
                                        v3 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(784) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(196) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(256))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) // T.int64(49) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) + p_3 + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0_fused * T.int64(8) + ci_1 * T.int64(8) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(32) * T.int64(2) + eps_1_nu_1_co_1_p_1_fused // T.int64(2) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused % T.int64(32) // T.int64(16) * T.int64(2) + eps_2_nu_2_co_2_p_2_fused // T.int64(98) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_0_nu_0_co_0_p_0_fused % T.int64(16) // T.int64(4) * T.int64(8) + eps_1_nu_1_co_1_p_1_fused % T.int64(2) * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(98) // T.int64(49) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(4) * T.int64(49) + eps_2_nu_2_co_2_p_2_fused % T.int64(49) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(98), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(64) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[2, 2, 1, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[2, 1, 2, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[4, 2, 2, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[4, 1, 49, 1, 1])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[16, 1, 8])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
l117 = sch.fuse(l88, preserve_unit_iters=True)
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l117, ann_key="software_pipeline_async_stages", ann_val=[0])
v118 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v118)
l119, l120, l121, l122, l123, l124 = sch.get_loops(block=b3)
l125 = sch.fuse(l119, l120, l121, l122, preserve_unit_iters=True)
v126 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l127, l128 = sch.split(loop=l125, factors=[None, v126], preserve_unit_iters=True)
sch.bind(loop=l127, thread_axis="blockIdx.x")
sch.bind(loop=l128, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l129, l130, l131, l132, l133 = sch.get_loops(block=b95)
l134, l135 = sch.split(loop=l133, factors=[None, 196], preserve_unit_iters=True)
sch.bind(loop=l135, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 196, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b148)
l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b149)
l185, l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b151)
l206, l207, l208, l209, l210, l211, l212, l213 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l206, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l206, ann_key="pragma_unroll_explicit", ann_val=1)
l214, l215, l216, l217 = sch.get_loops(block=b153)
b218 = sch.get_block(name="data_pack", func_name="main")
l219, l220, l221, l222, l223, l224 = sch.get_loops(block=b218)
b225 = sch.decompose_reduction(block=b218, loop=l223)
b226 = sch.get_block(name="bgemm", func_name="main")
l227, l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240 = sch.get_loops(block=b226)
b241 = sch.decompose_reduction(block=b226, loop=l230)
b242 = sch.get_block(name="inverse", func_name="main")
l243, l244, l245, l246, l247, l248, l249, l250 = sch.get_loops(block=b242)
b251 = sch.decompose_reduction(block=b242, loop=l249)
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:121] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #323: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), "float32"), conv2d_winograd: T.Buffer((T.int64(1), T.int64(32), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"layout_free_buffers": [1], "tir.noalias": T.bool(True)})
        # with T.block("root"):
        input_tile_local = T.alloc_buffer((T.int64(128), T.int64(196), T.int64(4), T.int64(4)), scope="local")
        data_pack = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)))
        bgemm = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)))
        inverse_local = T.alloc_buffer((T.int64(32), T.int64(196), T.int64(2), T.int64(2)), scope="local")
        data_pack_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="local")
        bgemm_local = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(32), T.int64(196)), scope="local")
        data_pack_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(196)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(4), T.int64(4), T.int64(128), T.int64(32)), scope="shared")
        for ci_p_fused_0 in T.thread_binding(T.int64(196), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ci_p_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                    with T.block("input_tile"):
                        v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax0)
                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax1)
                        v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                        T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                        T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                        T.block_attr({"schedule_rule": "None"})
                        input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0))
                for eps in T.unroll(T.int64(4)):
                    for nu in T.unroll(T.int64(4)):
                        with T.block("data_pack_init"):
                            v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                            v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                            T.reads()
                            T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                            T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                        for r_a in T.unroll(T.int64(4)):
                            for r_b in T.unroll(T.int64(4)):
                                with T.block("data_pack_update"):
                                    v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                    v_ci = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196))
                                    v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196))
                                    v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                    T.reads(data_pack_local[v_eps, v_nu, v_ci, v_p], input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                    T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                    T.block_attr({"schedule_rule": "conv2d_nchw_winograd_data_pack"})
                                    data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                    with T.block("data_pack_local"):
                        v0, v1 = T.axis.remap("SS", [ax0, ax1])
                        v2 = T.axis.spatial(T.int64(128), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) // T.int64(196) + ax2)
                        v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(128) + ci_p_fused_1) % T.int64(196) + ax3)
                        T.reads(data_pack_local[v0, v1, v2, v3])
                        T.writes(data_pack[v0, v1, v2, v3])
                        data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
        for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for eps_3_init, nu_3_init, co_3_init, p_3_init, eps_4_init, nu_4_init, co_4_init, p_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_init"):
                            v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + eps_3_init + eps_4_init)
                            v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3_init + nu_4_init)
                            v_co = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3_init * T.int64(2) + co_4_init)
                            v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3_init * T.int64(7) + p_4_init)
                            T.reads()
                            T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                    for ci_0 in range(T.int64(32)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("data_pack_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(56))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(14))
                                        v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(224))
                                        T.reads(data_pack[v0, v1, v2, v3])
                                        T.writes(data_pack_shared[v0, v1, v2, v3])
                                        data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(4), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(128))
                                        v2 = T.axis.spatial(T.int64(128), ci_0 * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(128) // T.int64(32))
                                        v3 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(32))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                            with T.block("bgemm_update"):
                                v_eps = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + eps_3 + eps_4)
                                v_nu = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + nu_3 + nu_4)
                                v_co = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + co_3 * T.int64(2) + co_4)
                                v_p = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + p_3 * T.int64(7) + p_4)
                                v_ci = T.axis.reduce(T.int64(128), ci_0 * T.int64(4) + ci_1 * T.int64(4) + ci_2)
                                T.reads(bgemm_local[v_eps, v_nu, v_co, v_p], data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(7)):
                        with T.block("bgemm_local"):
                            v0 = T.axis.spatial(T.int64(4), eps_0_nu_0_co_0_p_0_fused // T.int64(14) + ax0)
                            v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(32), eps_1_nu_1_co_1_p_1_fused * T.int64(16) + eps_2_nu_2_co_2_p_2_fused % T.int64(16) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused % T.int64(14) * T.int64(14) + eps_2_nu_2_co_2_p_2_fused % T.int64(2) * T.int64(7) + ax3)
                            T.reads(bgemm_local[v0, v1, v2, v3])
                            T.writes(bgemm[v0, v1, v2, v3])
                            bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
        for n_co_h_0_w_0_fused_0 in T.thread_binding(T.int64(13), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for n_co_h_0_w_0_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                for ax0, ax1 in T.grid(T.int64(1), T.int64(1)):
                    for ax2 in T.unroll(T.int64(2)):
                        for ax3 in T.unroll(T.int64(2)):
                            with T.block("inverse_init"):
                                v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                v_vh, v_vw = T.axis.remap("SS", [ax2, ax3])
                                T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                T.reads()
                                T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                            for ax4 in T.unroll(T.int64(4)):
                                for ax5 in T.unroll(T.int64(4)):
                                    with T.block("inverse_update"):
                                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196) + ax0)
                                        v_p = T.axis.spatial(T.int64(196), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) + ax1)
                                        v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                                        T.reads(inverse_local[v_co, v_p, v_vh, v_vw], bgemm[v_r_a, v_r_b, v_co, v_p])
                                        T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                        T.block_attr({"schedule_rule": "conv2d_nchw_winograd_inverse"})
                                        inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
                for h_1, w_1 in T.grid(T.int64(2), T.int64(2)):
                    with T.block("conv2d_winograd"):
                        v_n = T.axis.spatial(T.int64(1), T.int64(0))
                        v_co = T.axis.spatial(T.int64(32), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) // T.int64(196))
                        v_h = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(196) // T.int64(14) * T.int64(2) + h_1)
                        v_w = T.axis.spatial(T.int64(28), (n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1) % T.int64(14) * T.int64(2) + w_1)
                        T.where(n_co_h_0_w_0_fused_0 * T.int64(512) + n_co_h_0_w_0_fused_1 < T.int64(6272))
                        T.reads(inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                        T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                        conv2d_winograd[v_n, v_co, v_h, v_w] = inverse_local[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
b5, b6 = sch.get_producers(block=b2)
sch.compute_inline(block=b6)
b7, = sch.get_consumers(block=b2)
l8, l9, l10, l11 = sch.get_loops(block=b7)
l12, l13 = sch.split(loop=l10, factors=[None, 2], preserve_unit_iters=True)
l14, l15 = sch.split(loop=l11, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l12, l14, l13, l15)
sch.compute_at(block=b2, loop=l14, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l16, l17, l18, l19, l20, l21, l22, l23, l24, l25 = sch.get_loops(block=b2)
sch.unroll(loop=l22)
sch.unroll(loop=l23)
sch.unroll(loop=l24)
sch.unroll(loop=l25)
b26, b27 = sch.get_producers(block=b0)
sch.compute_inline(block=b27)
b28, = sch.get_producers(block=b26)
l29, l30, l31, l32, l33, l34 = sch.get_loops(block=b0)
sch.reorder(l31, l32, l29, l30, l33, l34)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l33)
sch.unroll(loop=l34)
l35 = sch.fuse(l31, l32, preserve_unit_iters=True)
v36 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l37, l38 = sch.split(loop=l35, factors=[None, v36], preserve_unit_iters=True)
sch.bind(loop=l37, thread_axis="blockIdx.x")
sch.bind(loop=l38, thread_axis="threadIdx.x")
b39 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b39, loop=l38, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b26, loop=l38, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b26, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b28)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l40, l41, l42, l43, l44 = sch.get_loops(block=b1)
v45, v46, v47, v48, v49 = sch.sample_perfect_tile(loop=l40, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 1])
l50, l51, l52, l53, l54 = sch.split(loop=l40, factors=[v45, v46, v47, v48, v49], preserve_unit_iters=True)
v55, v56, v57, v58, v59 = sch.sample_perfect_tile(loop=l41, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 1])
l60, l61, l62, l63, l64 = sch.split(loop=l41, factors=[v55, v56, v57, v58, v59], preserve_unit_iters=True)
v65, v66, v67, v68, v69 = sch.sample_perfect_tile(loop=l42, n=5, max_innermost_factor=64, decision=[1, 2, 8, 1, 2])
l70, l71, l72, l73, l74 = sch.split(loop=l42, factors=[v65, v66, v67, v68, v69], preserve_unit_iters=True)
v75, v76, v77, v78, v79 = sch.sample_perfect_tile(loop=l43, n=5, max_innermost_factor=64, decision=[14, 1, 2, 1, 7])
l80, l81, l82, l83, l84 = sch.split(loop=l43, factors=[v75, v76, v77, v78, v79], preserve_unit_iters=True)
v85, v86, v87 = sch.sample_perfect_tile(loop=l44, n=3, max_innermost_factor=64, decision=[32, 1, 4])
l88, l89, l90 = sch.split(loop=l44, factors=[v85, v86, v87], preserve_unit_iters=True)
sch.reorder(l50, l60, l70, l80, l51, l61, l71, l81, l52, l62, l72, l82, l88, l89, l53, l63, l73, l83, l90, l54, l64, l74, l84)
l91 = sch.fuse(l50, l60, l70, l80, preserve_unit_iters=True)
sch.bind(loop=l91, thread_axis="blockIdx.x")
l92 = sch.fuse(l51, l61, l71, l81, preserve_unit_iters=True)
sch.bind(loop=l92, thread_axis="vthread.x")
l93 = sch.fuse(l52, l62, l72, l82, preserve_unit_iters=True)
sch.bind(loop=l93, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b94 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b94, loop=l93, preserve_unit_loops=True, index=-1)
b95 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b95, loop=l88, preserve_unit_loops=True, index=-1)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b95)
l104 = sch.fuse(l100, l101, l102, l103, preserve_unit_iters=True)
v105 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch", ann_val=v105)
b106 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b106, loop=l88, preserve_unit_loops=True, index=-1)
l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b106)
l115 = sch.fuse(l111, l112, l113, l114, preserve_unit_iters=True)
v116 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch", ann_val=v116)
v117 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v117)
l118, l119, l120, l121, l122, l123 = sch.get_loops(block=b3)
l124 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v125 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l126, l127 = sch.split(loop=l124, factors=[None, v125], preserve_unit_iters=True)
sch.bind(loop=l126, thread_axis="blockIdx.x")
sch.bind(loop=l127, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b95, ann_key="meta_schedule.cooperative_fetch")
l128, l129, l130, l131, l132 = sch.get_loops(block=b95)
l133, l134, l135 = sch.split(loop=l132, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l135)
sch.bind(loop=l134, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b106, ann_key="meta_schedule.cooperative_fetch")
l136, l137, l138, l139, l140 = sch.get_loops(block=b106)
l141, l142, l143 = sch.split(loop=l140, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l143)
sch.bind(loop=l142, thread_axis="threadIdx.x")
b144 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b144, ann_key="meta_schedule.unroll_explicit")
b145, b146, b147, b148, b149, b150, b151, b152, b153 = sch.get_child_blocks(b144)
l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b145)
l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b146)
sch.annotate(block_or_loop=l160, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l160, ann_key="pragma_unroll_explicit", ann_val=1)
l166, l167, l168, l169, l170, l171 = sch.get_loops(block=b147)
l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b148)
l179, l180, l181, l182, l183, l184, l185 = sch.get_loops(block=b149)
l186, l187, l188, l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199 = sch.get_loops(block=b150)
sch.annotate(block_or_loop=l186, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l186, ann_key="pragma_unroll_explicit", ann_val=1)
l200, l201, l202, l203, l204, l205, l206 = sch.get_loops(block=b151)
l207, l208, l209, l210, l211, l212, l213, l214 = sch.get_loops(block=b152)
sch.annotate(block_or_loop=l207, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l207, ann_key="pragma_unroll_explicit", ann_val=1)
l215, l216, l217, l218 = sch.get_loops(block=b153)
b219 = sch.get_block(name="data_pack", func_name="main")
l220, l221, l222, l223, l224, l225 = sch.get_loops(block=b219)
b226 = sch.decompose_reduction(block=b219, loop=l224)
b227 = sch.get_block(name="bgemm", func_name="main")
l228, l229, l230, l231, l232, l233, l234, l235, l236, l237, l238, l239, l240, l241 = sch.get_loops(block=b227)
b242 = sch.decompose_reduction(block=b227, loop=l231)
b243 = sch.get_block(name="inverse", func_name="main")
l244, l245, l246, l247, l248, l249, l250, l251 = sch.get_loops(block=b243)
b252 = sch.decompose_reduction(block=b243, loop=l250)
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #324: GFLOPs: 2295.0767. Time: 20.1135 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #325: GFLOPs: 2412.7530. Time: 19.1325 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #326: GFLOPs: 2259.1036. Time: 20.4337 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #327: GFLOPs: 2376.0410. Time: 19.4281 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #328: GFLOPs: 2443.0192. Time: 18.8954 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #329: GFLOPs: 2805.7969. Time: 16.4523 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #330: GFLOPs: 3581.9626. Time: 12.8873 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #331: GFLOPs: 3532.2536. Time: 13.0687 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #332: GFLOPs: 2318.2476. Time: 19.9124 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #333: GFLOPs: 2421.7669. Time: 19.0613 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #334: GFLOPs: 2362.4553. Time: 19.5398 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #335: GFLOPs: 2503.2044. Time: 18.4411 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #336: GFLOPs: 2497.5820. Time: 18.4826 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #337: GFLOPs: 2400.6718. Time: 19.2288 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #338: GFLOPs: 3205.9777. Time: 14.3987 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #339: GFLOPs: 2456.6073. Time: 18.7909 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #340: GFLOPs: 2257.5507. Time: 20.4478 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #341: GFLOPs: 2015.2730. Time: 22.9060 us. Best GFLOPs: 3585.8561
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #342: GFLOPs: 3593.4213. Time: 12.8462 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #343: GFLOPs: 2139.1511. Time: 21.5796 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #344: GFLOPs: 2111.4592. Time: 21.8626 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #345: GFLOPs: 2170.2277. Time: 21.2705 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #346: GFLOPs: 2602.2042. Time: 17.7395 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #347: GFLOPs: 2149.1835. Time: 21.4788 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #348: GFLOPs: 2149.2050. Time: 21.4786 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #349: GFLOPs: 2110.0851. Time: 21.8768 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #350: GFLOPs: 1866.6591. Time: 24.7297 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #351: GFLOPs: 2877.8345. Time: 16.0405 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #352: GFLOPs: 3431.2029. Time: 13.4536 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #353: GFLOPs: 2111.3598. Time: 21.8636 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #354: GFLOPs: 2754.8017. Time: 16.7569 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #355: GFLOPs: 2501.5846. Time: 18.4531 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #356: GFLOPs: 2236.4732. Time: 20.6405 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #357: GFLOPs: 2812.3862. Time: 16.4138 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #358: GFLOPs: 1908.4648. Time: 24.1880 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #359: GFLOPs: 2645.5355. Time: 17.4490 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #360: GFLOPs: 2590.7343. Time: 17.8181 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #361: GFLOPs: 2847.7546. Time: 16.2099 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #362: GFLOPs: 2407.8873. Time: 19.1711 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #363: GFLOPs: 2439.0763. Time: 18.9260 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #364: GFLOPs: 2549.1376. Time: 18.1088 us. Best GFLOPs: 3593.4213
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #365: GFLOPs: 3604.4049. Time: 12.8071 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #366: GFLOPs: 2173.3249. Time: 21.2402 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #367: GFLOPs: 2144.7036. Time: 21.5237 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #368: GFLOPs: 2192.6622. Time: 21.0529 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #369: GFLOPs: 2922.9779. Time: 15.7928 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #370: GFLOPs: 2462.1522. Time: 18.7486 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #371: GFLOPs: 3338.4788. Time: 13.8272 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #372: GFLOPs: 2139.5407. Time: 21.5756 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #373: GFLOPs: 2131.8597. Time: 21.6534 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #374: GFLOPs: 2912.2582. Time: 15.8509 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #375: GFLOPs: 1816.5898. Time: 25.4113 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #376: GFLOPs: 2754.1641. Time: 16.7608 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #377: GFLOPs: 2842.0840. Time: 16.2423 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #378: GFLOPs: 2429.3361. Time: 19.0019 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #379: GFLOPs: 3014.0412. Time: 15.3156 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #380: GFLOPs: 2421.2691. Time: 19.0652 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #381: GFLOPs: 3378.4610. Time: 13.6636 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #382: GFLOPs: 88.5676. Time: 521.2053 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #383: GFLOPs: 112.1795. Time: 411.5006 us. Best GFLOPs: 3604.4049
2024-03-21 13:30:24 [INFO] [task_scheduler.cc:131] [Task #154: fused_nn_contrib_conv2d_winograd_without_weight_transform_2] Trial #384: GFLOPs: 3069.1134. Time: 15.0408 us. Best GFLOPs: 3604.4049
