2024-03-20 22:52:34 [INFO] [task_scheduler.cc:160] Initializing Task #62: "fused_nn_conv2d_add_nn_relu_30"
2024-03-20 22:52:34 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(544), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(544), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(544), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(544), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(544), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-20 22:52:34 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-20 22:52:34 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(544), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(544), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(544), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(544), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(15232)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(544), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(69632)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(544))
                                    v1 = T.axis.spatial(T.int64(544), ax0_ax1_ax2_ax3_fused % T.int64(544))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(17), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(544), rc_0 * T.int64(544) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 17, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-20 22:52:34 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(544), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(544), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(544), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(544), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(15232)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(544), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(69632)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(544))
                                    v1 = T.axis.spatial(T.int64(544), ax0_ax1_ax2_ax3_fused % T.int64(544))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(17), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(544), rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 17, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 22:52:34 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(544), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(544), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(544), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(544), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(15232)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(544), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(69632)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(544))
                                    v1 = T.axis.spatial(T.int64(544), ax0_ax1_ax2_ax3_fused % T.int64(544))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(17), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(544), rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 2, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 17, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 23:22:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-20 23:22:33 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-20 23:22:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1d4c218)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a081a0f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37cdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299fae0098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2eda498)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39f2d18)]: 483 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a37cdb28)]: 0 failure(s)
2024-03-20 23:22:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1d4c218)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a081a0f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37cdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299fae0098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2eda498)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39f2d18)]: 962 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a37cdb28)]: 0 failure(s)
2024-03-20 23:22:34 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-03-20 23:22:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1d4c218)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a081a0f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37cdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299fae0098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2eda498)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39f2d18)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a37cdb28)]: 0 failure(s)
2024-03-20 23:22:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1d4c218)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a081a0f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37cdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299fae0098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2eda498)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39f2d18)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a37cdb28)]: 0 failure(s)
2024-03-20 23:22:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1d4c218)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a081a0f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37cdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299fae0098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2eda498)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39f2d18)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a37cdb28)]: 0 failure(s)
2024-03-20 23:22:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1d4c218)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a081a0f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a37cdc28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x57299fae0098)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2eda498)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a39f2d18)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a37cdb28)]: 0 failure(s)
2024-03-20 23:22:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9996  0.9994  0.9993  0.9980  0.9978  0.9975  0.9961  0.9961  0.9959  0.9956  0.9949  0.9948  0.9947  0.9943  0.9940
[17 : 32]:	0.9939  0.9935  0.9933  0.9929  0.9920  0.9912  0.9909  0.9879  0.9872  0.9867  0.9862  0.9856  0.9847  0.9842  0.9841  0.9839
[33 : 48]:	0.9837  0.9821  0.9817  0.9805  0.9802  0.9796  0.9796  0.9789  0.9786  0.9783  0.9781  0.9779  0.9779  0.9777  0.9776  0.9746
[49 : 64]:	0.9740  0.9740  0.9725  0.9714  0.9712  0.9684  0.9679  0.9669  0.9653  0.9646  0.9642  0.9639  0.9638  0.9632  0.9630  0.9621
2024-03-20 23:22:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-20 23:22:40 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #1: GFLOPs: 287.5920. Time: 95.0858 us. Best GFLOPs: 287.5920
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #2: GFLOPs: 69.3367. Time: 394.3932 us. Best GFLOPs: 287.5920
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #3: GFLOPs: 188.3701. Time: 145.1713 us. Best GFLOPs: 287.5920
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #4: GFLOPs: 308.7711. Time: 88.5637 us. Best GFLOPs: 308.7711
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #5: GFLOPs: 131.1178. Time: 208.5600 us. Best GFLOPs: 308.7711
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #6: GFLOPs: 872.5982. Time: 31.3385 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #7: GFLOPs: 289.2972. Time: 94.5254 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #8: GFLOPs: 20.2831. Time: 1348.2121 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #9: GFLOPs: 746.4809. Time: 36.6331 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #10: GFLOPs: 481.6267. Time: 56.7782 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #11: GFLOPs: 287.6565. Time: 95.0645 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #12: GFLOPs: 265.4698. Time: 103.0095 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #13: GFLOPs: 752.6372. Time: 36.3335 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #14: GFLOPs: 111.5848. Time: 245.0685 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #15: GFLOPs: 17.7094. Time: 1544.1447 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #16: GFLOPs: 310.5312. Time: 88.0617 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #17: GFLOPs: 521.6529. Time: 52.4217 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #18: GFLOPs: 14.8354. Time: 1843.2893 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #19: GFLOPs: 128.1358. Time: 213.4136 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #20: GFLOPs: 408.0970. Time: 67.0084 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #21: GFLOPs: 302.6839. Time: 90.3448 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #22: GFLOPs: 15.1013. Time: 1810.8343 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #23: GFLOPs: 157.8265. Time: 173.2657 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #24: GFLOPs: 15.3829. Time: 1777.6867 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #25: GFLOPs: 161.8155. Time: 168.9944 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #26: GFLOPs: 523.8485. Time: 52.2020 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #27: GFLOPs: 26.1214. Time: 1046.8780 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #28: GFLOPs: 257.8503. Time: 106.0535 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #29: GFLOPs: 404.6214. Time: 67.5840 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #30: GFLOPs: 17.4775. Time: 1564.6400 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #31: GFLOPs: 22.9095. Time: 1193.6522 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #32: GFLOPs: 303.6819. Time: 90.0479 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #33: GFLOPs: 311.8885. Time: 87.6785 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #34: GFLOPs: 194.9445. Time: 140.2754 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #35: GFLOPs: 27.2602. Time: 1003.1449 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #36: GFLOPs: 301.9789. Time: 90.5557 us. Best GFLOPs: 872.5982
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #37: GFLOPs: 1939.9385. Time: 14.0963 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #38: GFLOPs: 170.2982. Time: 160.5767 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #39: GFLOPs: 27.1627. Time: 1006.7456 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #40: GFLOPs: 385.9762. Time: 70.8487 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #41: GFLOPs: 59.8646. Time: 456.7965 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #42: GFLOPs: 330.8164. Time: 82.6619 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #43: GFLOPs: 672.3135. Time: 40.6744 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #44: GFLOPs: 25.8453. Time: 1058.0615 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #45: GFLOPs: 214.3450. Time: 127.5790 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #46: GFLOPs: 198.3883. Time: 137.8404 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #47: GFLOPs: 384.3151. Time: 71.1550 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #48: GFLOPs: 193.8287. Time: 141.0830 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #49: GFLOPs: 9.4716. Time: 2887.1534 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #50: GFLOPs: 111.8010. Time: 244.5946 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #51: GFLOPs: 264.7611. Time: 103.2853 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #52: GFLOPs: 158.3458. Time: 172.6974 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #53: GFLOPs: 470.9227. Time: 58.0688 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #54: GFLOPs: 461.0555. Time: 59.3116 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #55: GFLOPs: 1249.5395. Time: 21.8848 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #56: GFLOPs: 267.4549. Time: 102.2450 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #57: GFLOPs: 355.3360. Time: 76.9579 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #58: GFLOPs: 57.3965. Time: 476.4387 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #59: GFLOPs: 1803.7003. Time: 15.1610 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #60: GFLOPs: 409.0925. Time: 66.8453 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #61: GFLOPs: 227.1711. Time: 120.3759 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #62: GFLOPs: 851.0542. Time: 32.1318 us. Best GFLOPs: 1939.9385
2024-03-21 00:12:15 [INFO] [task_scheduler.cc:131] [Task #62: fused_nn_conv2d_add_nn_relu_30] Trial #63: GFLOPs: 440.2674. Time: 62.1121 us. Best GFLOPs: 1939.9385
