2024-03-21 16:45:31 [INFO] [task_scheduler.cc:160] Initializing Task #25: "fused_nn_conv2d_add_nn_relu_17"
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(12), T.int64(18)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3)])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3)], T.float32(0))
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(128), T.int64(1), T.int64(7)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3456)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(216))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(216) // T.int64(18))
                                    v3 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(18))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v1 = T.axis.spatial(T.int64(128), rc_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(6), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), xx_3 * T.int64(3) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0 * T.int64(16) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(6), T.int64(12)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + ax2)
                                v3 = T.axis.spatial(T.int64(12), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[24, 1, 1, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 6, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 3])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 8, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3456)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(216))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(216) // T.int64(18))
                                    v3 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(18))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(6), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), xx_3 * T.int64(3) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(6), T.int64(12)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + ax2)
                                v3 = T.axis.spatial(T.int64(12), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[24, 1, 1, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 6, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 3])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 8, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(24), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(8), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3456)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(216))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(216) // T.int64(18))
                                    v3 = T.axis.spatial(T.int64(18), ax0_ax1_ax2_ax3_fused % T.int64(18))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(896)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(6), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), xx_3 * T.int64(3) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(6), T.int64(12)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused * T.int64(6) + ax2)
                                v3 = T.axis.spatial(T.int64(12), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[24, 1, 1, 8, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 6, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 3])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 8, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 7, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 17:04:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:04:26 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 17:04:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 490 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 17:04:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 974 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 17:04:28 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-03-21 17:04:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 17:04:31 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 87 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 17:04:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 17:04:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 17:04:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9974  0.9970  0.9969  0.9965  0.9946  0.9936  0.9933  0.9928  0.9918  0.9916  0.9914  0.9902  0.9887  0.9886  0.9882
[17 : 32]:	0.9882  0.9877  0.9876  0.9874  0.9874  0.9872  0.9868  0.9860  0.9845  0.9842  0.9840  0.9829  0.9817  0.9812  0.9809  0.9803
[33 : 48]:	0.9802  0.9799  0.9798  0.9797  0.9795  0.9782  0.9780  0.9771  0.9769  0.9768  0.9766  0.9757  0.9738  0.9734  0.9731  0.9725
[49 : 64]:	0.9722  0.9711  0.9710  0.9709  0.9691  0.9686  0.9683  0.9682  0.9679  0.9677  0.9667  0.9661  0.9655  0.9647  0.9646  0.9637
2024-03-21 17:04:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:04:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #1: GFLOPs: 239.9313. Time: 206.7280 us. Best GFLOPs: 239.9313
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #2: GFLOPs: 277.9525. Time: 178.4496 us. Best GFLOPs: 277.9525
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #3: GFLOPs: 227.7172. Time: 217.8162 us. Best GFLOPs: 277.9525
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #4: GFLOPs: 1308.2959. Time: 37.9123 us. Best GFLOPs: 1308.2959
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #5: GFLOPs: 1745.5798. Time: 28.4149 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #6: GFLOPs: 60.9751. Time: 813.4545 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #7: GFLOPs: 764.6705. Time: 64.8652 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #8: GFLOPs: 1196.4362. Time: 41.4569 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #9: GFLOPs: 909.2328. Time: 54.5520 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #10: GFLOPs: 53.4756. Time: 927.5354 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #11: GFLOPs: 1625.1162. Time: 30.5212 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #12: GFLOPs: 904.2935. Time: 54.8500 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #13: GFLOPs: 73.3616. Time: 676.1098 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #14: GFLOPs: 9.6994. Time: 5113.7535 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #15: GFLOPs: 630.8636. Time: 78.6232 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #16: GFLOPs: 1245.2001. Time: 39.8334 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #17: GFLOPs: 25.0831. Time: 1977.4444 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #18: GFLOPs: 357.5491. Time: 138.7237 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #19: GFLOPs: 246.3869. Time: 201.3115 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #20: GFLOPs: 634.0467. Time: 78.2285 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #21: GFLOPs: 188.1428. Time: 263.6322 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #22: GFLOPs: 497.8285. Time: 99.6337 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #23: GFLOPs: 71.3380. Time: 695.2890 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #24: GFLOPs: 342.5256. Time: 144.8082 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #25: GFLOPs: 29.0937. Time: 1704.8548 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #26: GFLOPs: 658.1491. Time: 75.3636 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #27: GFLOPs: 566.3508. Time: 87.5791 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #28: GFLOPs: 1466.2599. Time: 33.8279 us. Best GFLOPs: 1745.5798
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #29: GFLOPs: 1804.1839. Time: 27.4919 us. Best GFLOPs: 1804.1839
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #30: GFLOPs: 442.0141. Time: 112.2148 us. Best GFLOPs: 1804.1839
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #31: GFLOPs: 99.6154. Time: 497.9202 us. Best GFLOPs: 1804.1839
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #32: GFLOPs: 2171.2142. Time: 22.8446 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #33: GFLOPs: 799.0511. Time: 62.0743 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #34: GFLOPs: 1913.7047. Time: 25.9186 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #35: GFLOPs: 227.8715. Time: 217.6688 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #36: GFLOPs: 1160.5446. Time: 42.7390 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #37: GFLOPs: 77.0662. Time: 643.6090 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #38: GFLOPs: 648.8096. Time: 76.4485 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #39: GFLOPs: 524.1262. Time: 94.6347 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #40: GFLOPs: 548.1829. Time: 90.4817 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #41: GFLOPs: 21.9508. Time: 2259.6266 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #42: GFLOPs: 23.3744. Time: 2122.0053 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #43: GFLOPs: 182.1729. Time: 272.2716 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #44: GFLOPs: 1339.9835. Time: 37.0158 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #45: GFLOPs: 335.3915. Time: 147.8884 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #46: GFLOPs: 1713.1855. Time: 28.9522 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #47: GFLOPs: 120.8548. Time: 410.4141 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #48: GFLOPs: 313.4332. Time: 158.2491 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #49: GFLOPs: 114.5200. Time: 433.1165 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #50: GFLOPs: 718.9747. Time: 68.9878 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #51: GFLOPs: 546.4347. Time: 90.7712 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #52: GFLOPs: 184.3191. Time: 269.1014 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #53: GFLOPs: 661.6286. Time: 74.9673 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #54: GFLOPs: 548.0813. Time: 90.4985 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #55: GFLOPs: 630.1712. Time: 78.7096 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #56: GFLOPs: 401.8531. Time: 123.4294 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #57: GFLOPs: 855.1279. Time: 58.0036 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #58: GFLOPs: 2159.4638. Time: 22.9689 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #59: GFLOPs: 209.5061. Time: 236.7498 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #60: GFLOPs: 255.8649. Time: 193.8543 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #61: GFLOPs: 286.1230. Time: 173.3538 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #62: GFLOPs: 365.8852. Time: 135.5630 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #63: GFLOPs: 594.6098. Time: 83.4169 us. Best GFLOPs: 2171.2142
2024-03-21 17:36:10 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #64: GFLOPs: 669.7749. Time: 74.0555 us. Best GFLOPs: 2171.2142
2024-03-21 18:54:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 18:54:44 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 18:54:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 423 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 18:54:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 847 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 18:54:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 1262 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 18:54:47 [INFO] [evolutionary_search.cc:723] Sampled 82 candidate(s)
2024-03-21 18:54:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 18:54:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 18:54:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 18:54:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071b5d6be8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd74918)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c3c8148)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bf46a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071634d328)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd3a788)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071bd74818)]: 0 failure(s)
2024-03-21 18:54:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.6011  1.6011  1.5827  1.5320  1.1161  1.0654  0.9793  0.9601  0.9470  0.9470  0.9454  0.9374  0.9345  0.9344  0.9337  0.9328
[17 : 32]:	0.9297  0.9285  0.9282  0.9233  0.9228  0.9158  0.9098  0.9098  0.9096  0.9072  0.9016  0.9011  0.8985  0.8981  0.8918  0.8902
[33 : 48]:	0.8902  0.8887  0.8869  0.8863  0.8863  0.8857  0.8852  0.8840  0.8840  0.8840  0.8833  0.8819  0.8807  0.8807  0.8801  0.8801
[49 : 64]:	0.8801  0.8795  0.8795  0.8793  0.8790  0.8781  0.8780  0.8762  0.8760  0.8745  0.8743  0.8736  0.8733  0.8721  0.8715  0.8715
2024-03-21 18:54:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 18:54:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #65: GFLOPs: 1481.0323. Time: 33.4905 us. Best GFLOPs: 2171.2142
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #66: GFLOPs: 1482.7341. Time: 33.4521 us. Best GFLOPs: 2171.2142
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #67: GFLOPs: 1435.0425. Time: 34.5638 us. Best GFLOPs: 2171.2142
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #68: GFLOPs: 1513.6578. Time: 32.7686 us. Best GFLOPs: 2171.2142
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #69: GFLOPs: 2203.2465. Time: 22.5125 us. Best GFLOPs: 2203.2465
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #70: GFLOPs: 2228.7845. Time: 22.2545 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #71: GFLOPs: 1521.9104. Time: 32.5910 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #72: GFLOPs: 1956.1482. Time: 25.3562 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #73: GFLOPs: 2174.0832. Time: 22.8145 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #74: GFLOPs: 2100.4397. Time: 23.6143 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #75: GFLOPs: 2045.1451. Time: 24.2528 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #76: GFLOPs: 1782.6350. Time: 27.8243 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #77: GFLOPs: 2076.4459. Time: 23.8872 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #78: GFLOPs: 1837.6540. Time: 26.9912 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #79: GFLOPs: 1704.4465. Time: 29.1007 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #80: GFLOPs: 945.1101. Time: 52.4812 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #81: GFLOPs: 953.0041. Time: 52.0465 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #82: GFLOPs: 1790.3499. Time: 27.7044 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #83: GFLOPs: 937.8110. Time: 52.8897 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #84: GFLOPs: 861.1256. Time: 57.5996 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #85: GFLOPs: 892.0135. Time: 55.6051 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #86: GFLOPs: 525.2564. Time: 94.4311 us. Best GFLOPs: 2228.7845
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #87: GFLOPs: 2267.4943. Time: 21.8746 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #88: GFLOPs: 1941.5578. Time: 25.5468 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #89: GFLOPs: 528.3083. Time: 93.8855 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #90: GFLOPs: 1504.7392. Time: 32.9629 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #91: GFLOPs: 2142.0556. Time: 23.1556 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #92: GFLOPs: 2211.6735. Time: 22.4267 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #93: GFLOPs: 892.2946. Time: 55.5876 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #94: GFLOPs: 2257.0418. Time: 21.9759 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #95: GFLOPs: 2096.9726. Time: 23.6534 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #96: GFLOPs: 973.0631. Time: 50.9736 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #97: GFLOPs: 2027.0273. Time: 24.4696 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #98: GFLOPs: 2239.4364. Time: 22.1487 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #99: GFLOPs: 971.5951. Time: 51.0506 us. Best GFLOPs: 2267.4943
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #100: GFLOPs: 3299.0605. Time: 15.0347 us. Best GFLOPs: 3299.0605
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #101: GFLOPs: 3388.6409. Time: 14.6373 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #102: GFLOPs: 3314.9434. Time: 14.9627 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #103: GFLOPs: 2064.3974. Time: 24.0266 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #104: GFLOPs: 1025.6021. Time: 48.3623 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #105: GFLOPs: 2158.5487. Time: 22.9786 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #106: GFLOPs: 2097.0767. Time: 23.6522 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #107: GFLOPs: 2456.1019. Time: 20.1948 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #108: GFLOPs: 364.3985. Time: 136.1161 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #109: GFLOPs: 474.5783. Time: 104.5149 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #110: GFLOPs: 473.5048. Time: 104.7519 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #111: GFLOPs: 479.2586. Time: 103.4943 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #112: GFLOPs: 465.9598. Time: 106.4480 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #113: GFLOPs: 470.6897. Time: 105.3784 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #114: GFLOPs: 1027.2101. Time: 48.2866 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #115: GFLOPs: 2027.3106. Time: 24.4662 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #116: GFLOPs: 975.8854. Time: 50.8262 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #117: GFLOPs: 3316.1928. Time: 14.9571 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #118: GFLOPs: 2520.1650. Time: 19.6815 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #119: GFLOPs: 1040.7028. Time: 47.6606 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #120: GFLOPs: 515.6817. Time: 96.1844 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #121: GFLOPs: 1719.9058. Time: 28.8391 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #122: GFLOPs: 1688.1512. Time: 29.3816 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #123: GFLOPs: 2198.6030. Time: 22.5600 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #124: GFLOPs: 1835.7030. Time: 27.0199 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #125: GFLOPs: 1783.5086. Time: 27.8106 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #126: GFLOPs: 128.2854. Time: 386.6420 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #127: GFLOPs: 37.6525. Time: 1317.3221 us. Best GFLOPs: 3388.6409
2024-03-21 18:56:04 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_conv2d_add_nn_relu_17] Trial #128: GFLOPs: 502.8865. Time: 98.6316 us. Best GFLOPs: 3388.6409
