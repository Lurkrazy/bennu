2024-03-21 16:45:31 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_nn_avg_pool2d_2"
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(768), T.int64(12), T.int64(12), T.int64(3), T.int64(3)):
            with T.block("pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(768), T.int64(12), T.int64(12)):
            with T.block("pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_avg"})
                pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            pool_sum = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(216), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                        with T.block("pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(768), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(144))
                            v_ax2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(144) // T.int64(12))
                            v_ax3 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(12))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                            T.writes(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(1728), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(768), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(144))
                        v_ax2 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(144) // T.int64(12))
                        v_ax3 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(12))
                        T.reads(pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(27648), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        with T.block("pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(36) + ax1)
                            v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(36) // T.int64(3) + ax2)
                            v_ax3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(3) * T.int64(4) + ax3)
                            v_rv0 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) // T.int64(3))
                            v_rv1 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) % T.int64(3))
                            T.where(ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1 < T.int64(9))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                            T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                    with T.block("pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(36))
                        v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(36) // T.int64(3))
                        v_ax3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(3) * T.int64(4) + ax3_1)
                        T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=0)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-03-21 17:02:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:02:52 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 17:02:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07165c1228)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b07166ef288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd42698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b2f65c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e16d438)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b07166ee9d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166ef188)]: 0 failure(s)
2024-03-21 17:02:53 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-21 17:02:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07165c1228)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b07166ef288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd42698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b2f65c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e16d438)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b07166ee9d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166ef188)]: 0 failure(s)
2024-03-21 17:02:53 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07165c1228)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b07166ef288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd42698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b2f65c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e16d438)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b07166ee9d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166ef188)]: 0 failure(s)
2024-03-21 17:02:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07165c1228)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b07166ef288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd42698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b2f65c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e16d438)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b07166ee9d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166ef188)]: 0 failure(s)
2024-03-21 17:02:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b07165c1228)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b07166ef288)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd42698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b2f65c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e16d438)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b07166ee9d8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b07166ef188)]: 0 failure(s)
2024-03-21 17:02:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9962  0.9796  0.9714  0.9570  0.9556  0.9525  0.9505  0.9486  0.9466  0.9433  0.9432  0.9395  0.9332  0.9324  0.9322  0.9180
[17 : 32]:	0.9118  0.9038  0.8910  0.8876  0.8839  0.8818  0.8776  0.8709  0.8691  0.8635  0.8537  0.8512  0.8509  0.8505  0.8477  0.8368
[33 : 48]:	0.8326  0.8266  0.8193  0.8119  0.8117  0.8051  0.7970  0.7927  0.7878  0.7864  0.7821  0.7805  0.7788  0.7775  0.7746  0.7716
[49 : 64]:	0.7703  0.7686  0.7683  0.7614  0.7595  0.7500  0.7441  0.7382  0.7365  0.7357  0.7226  0.7223  0.7191  0.7154  0.7147  0.7143
2024-03-21 17:02:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:02:54 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #1: GFLOPs: 527.8916. Time: 5.0279 us. Best GFLOPs: 527.8916
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #2: GFLOPs: 467.3035. Time: 5.6798 us. Best GFLOPs: 527.8916
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #3: GFLOPs: 603.0299. Time: 4.4015 us. Best GFLOPs: 603.0299
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #4: GFLOPs: 203.4304. Time: 13.0473 us. Best GFLOPs: 603.0299
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #5: GFLOPs: 479.8802. Time: 5.5310 us. Best GFLOPs: 603.0299
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_avg_pool2d_2] Trial #6: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  43: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  42: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  41: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  40: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  39: tvm::transform::Pass::operator()(tvm::IRModule) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  35: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  34: _ZN3tvm7runtime13PackedFuncObj
  33: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  30: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  26: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  25: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  22: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  21: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  18: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  14: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  13: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  5: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  4: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  3: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  2: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  1: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::EvaluateNode const*)
  0: tvm::tir::ThreadAllreduceBuilder::MakeAllreduce(tvm::tir::CallNode const*)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/lower_thread_allreduce.cc", line 383
InternalError: Check failed: (!load_remap_.count(buffers[i]->data.get())) is false: 

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(9216), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(12) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ax3)
                        v_rv0 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(256) + ax4_ax5_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(256) + ax4_ax5_fused_1) % T.int64(3))
                        T.where(ax4_ax5_fused_0 * T.int64(256) + ax4_ax5_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                        T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(12))
                    v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(12))
                    v_ax3 = T.axis.spatial(T.int64(12), ax3_1)
                    T.where(T.Mul(T.int64(0), T.int64(256)) + ax3_1 < T.int64(12))
                    T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=6)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #7: GFLOPs: 571.1175. Time: 4.6474 us. Best GFLOPs: 603.0299
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #8: GFLOPs: 604.9853. Time: 4.3872 us. Best GFLOPs: 604.9853
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #9: GFLOPs: 527.3745. Time: 5.0329 us. Best GFLOPs: 604.9853
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #10: GFLOPs: 562.4415. Time: 4.7191 us. Best GFLOPs: 604.9853
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_avg_pool2d_2] Trial #11: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  43: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  42: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  41: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  40: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  39: tvm::transform::Pass::operator()(tvm::IRModule) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  35: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  34: _ZN3tvm7runtime13PackedFuncObj
  33: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  30: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  26: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  25: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  22: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  21: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  18: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  14: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  13: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  5: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  4: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  3: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  2: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  1: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::EvaluateNode const*)
  0: tvm::tir::ThreadAllreduceBuilder::MakeAllreduce(tvm::tir::CallNode const*)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/lower_thread_allreduce.cc", line 383
InternalError: Check failed: (!load_remap_.count(buffers[i]->data.get())) is false: 

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(9216), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(12) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ax3)
                        v_rv0 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1) % T.int64(3))
                        T.where(ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                        T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(12))
                    v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(12))
                    v_ax3 = T.axis.spatial(T.int64(12), ax3_1)
                    T.where(T.Mul(T.int64(0), T.int64(32)) + ax3_1 < T.int64(12))
                    T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=3)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_avg_pool2d_2] Trial #12: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  43: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  42: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  41: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  40: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  39: tvm::transform::Pass::operator()(tvm::IRModule) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  35: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  34: _ZN3tvm7runtime13PackedFuncObj
  33: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  30: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  26: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  25: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  22: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  21: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  18: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  14: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  13: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  5: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  4: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  3: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  2: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  1: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::EvaluateNode const*)
  0: tvm::tir::ThreadAllreduceBuilder::MakeAllreduce(tvm::tir::CallNode const*)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/lower_thread_allreduce.cc", line 383
InternalError: Check failed: (!load_remap_.count(buffers[i]->data.get())) is false: 

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(9216), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(12) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ax3)
                        v_rv0 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1) % T.int64(3))
                        T.where(ax4_ax5_fused_0 * T.int64(512) + ax4_ax5_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                        T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(12))
                    v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(12))
                    v_ax3 = T.axis.spatial(T.int64(12), ax3_1)
                    T.where(T.Mul(T.int64(0), T.int64(512)) + ax3_1 < T.int64(12))
                    T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #13: GFLOPs: 607.6327. Time: 4.3681 us. Best GFLOPs: 607.6327
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #14: GFLOPs: 600.5306. Time: 4.4198 us. Best GFLOPs: 607.6327
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #15: GFLOPs: 602.2793. Time: 4.4069 us. Best GFLOPs: 607.6327
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #16: GFLOPs: 608.7185. Time: 4.3603 us. Best GFLOPs: 608.7185
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #17: GFLOPs: 463.5094. Time: 5.7263 us. Best GFLOPs: 608.7185
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #18: GFLOPs: 609.1368. Time: 4.3573 us. Best GFLOPs: 609.1368
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #19: GFLOPs: 590.0656. Time: 4.4982 us. Best GFLOPs: 609.1368
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #20: GFLOPs: 608.1984. Time: 4.3640 us. Best GFLOPs: 609.1368
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #21: GFLOPs: 586.6361. Time: 4.5245 us. Best GFLOPs: 609.1368
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #22: GFLOPs: 610.1477. Time: 4.3501 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #23: GFLOPs: 571.9994. Time: 4.6402 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #24: GFLOPs: 440.1932. Time: 6.0296 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #25: GFLOPs: 464.0035. Time: 5.7202 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #26: GFLOPs: 588.8541. Time: 4.5074 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #27: GFLOPs: 14.4900. Time: 183.1747 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #28: GFLOPs: 571.1353. Time: 4.6472 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #29: GFLOPs: 440.1309. Time: 6.0305 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #30: GFLOPs: 469.3462. Time: 5.6551 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #31: GFLOPs: 580.6891. Time: 4.5708 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #32: GFLOPs: 147.3885. Time: 18.0082 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #33: GFLOPs: 588.1438. Time: 4.5129 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #34: GFLOPs: 571.7202. Time: 4.6425 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #35: GFLOPs: 561.0382. Time: 4.7309 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #36: GFLOPs: 376.8378. Time: 7.0434 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #37: GFLOPs: 566.1166. Time: 4.6884 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_avg_pool2d_2] Trial #38: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  43: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  42: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  41: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  40: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  39: tvm::transform::Pass::operator()(tvm::IRModule) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  35: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  34: _ZN3tvm7runtime13PackedFuncObj
  33: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  30: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  26: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  25: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  22: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  21: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  18: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  14: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  13: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  5: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  4: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  3: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  2: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  1: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::EvaluateNode const*)
  0: tvm::tir::ThreadAllreduceBuilder::MakeAllreduce(tvm::tir::CallNode const*)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/lower_thread_allreduce.cc", line 383
InternalError: Check failed: (!load_remap_.count(buffers[i]->data.get())) is false: 

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(27648), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(36) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(36) // T.int64(3) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(3) * T.int64(4) + ax3)
                        v_rv0 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) % T.int64(3))
                        T.where(ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                        T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(36))
                    v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(36) // T.int64(3))
                    v_ax3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(3) * T.int64(4) + ax3_1)
                    T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=0)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #39: GFLOPs: 439.8531. Time: 6.0343 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #40: GFLOPs: 202.9870. Time: 13.0758 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #41: GFLOPs: 578.5949. Time: 4.5873 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #42: GFLOPs: 603.9362. Time: 4.3948 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #43: GFLOPs: 459.9093. Time: 5.7712 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #44: GFLOPs: 14.4903. Time: 183.1711 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #45: GFLOPs: 565.8800. Time: 4.6904 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #46: GFLOPs: 526.9029. Time: 5.0374 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #47: GFLOPs: 471.8471. Time: 5.6251 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #48: GFLOPs: 603.9683. Time: 4.3946 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #49: GFLOPs: 569.2193. Time: 4.6629 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #50: GFLOPs: 586.2698. Time: 4.5273 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #51: GFLOPs: 587.5570. Time: 4.5174 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_avg_pool2d_2] Trial #52: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  43: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  42: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  41: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  40: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  39: tvm::transform::Pass::operator()(tvm::IRModule) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  35: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  34: _ZN3tvm7runtime13PackedFuncObj
  33: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  30: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  26: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  25: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  22: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  21: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  18: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  14: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  13: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  5: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  4: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  3: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  2: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  1: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::EvaluateNode const*)
  0: tvm::tir::ThreadAllreduceBuilder::MakeAllreduce(tvm::tir::CallNode const*)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/lower_thread_allreduce.cc", line 383
InternalError: Check failed: (!load_remap_.count(buffers[i]->data.get())) is false: 

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(9216), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(12) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ax3)
                        v_rv0 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1) % T.int64(3))
                        T.where(ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                        T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(12))
                    v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(12))
                    v_ax3 = T.axis.spatial(T.int64(12), ax3_1)
                    T.where(T.Mul(T.int64(0), T.int64(32)) + ax3_1 < T.int64(12))
                    T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=3)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #53: GFLOPs: 376.8628. Time: 7.0429 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_avg_pool2d_2] Trial #54: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  43: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  42: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  41: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  40: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  39: tvm::transform::Pass::operator()(tvm::IRModule) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  35: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  34: _ZN3tvm7runtime13PackedFuncObj
  33: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  30: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  26: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  25: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  22: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  21: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  18: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  14: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  13: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  5: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  4: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  3: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  2: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  1: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::EvaluateNode const*)
  0: tvm::tir::ThreadAllreduceBuilder::MakeAllreduce(tvm::tir::CallNode const*)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/lower_thread_allreduce.cc", line 383
InternalError: Check failed: (!load_remap_.count(buffers[i]->data.get())) is false: 

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(27648), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(3)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(36) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(36) // T.int64(3) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(3) * T.int64(4) + ax3)
                        v_rv0 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) % T.int64(3))
                        T.where(ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                        T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(36))
                    v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(36) // T.int64(3))
                    v_ax3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(3) * T.int64(4) + ax3_1)
                    T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=0)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #55: GFLOPs: 469.3830. Time: 5.6547 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #56: GFLOPs: 598.6242. Time: 4.4338 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #57: GFLOPs: 471.7087. Time: 5.6268 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #58: GFLOPs: 440.1899. Time: 6.0297 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #59: GFLOPs: 600.8954. Time: 4.4171 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #60: GFLOPs: 60.0553. Time: 44.1961 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #61: GFLOPs: 608.4522. Time: 4.3622 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_avg_pool2d_2] Trial #62: GFLOPs: 601.2401. Time: 4.4146 us. Best GFLOPs: 610.1477
2024-03-21 17:36:09 [INFO] [task_scheduler.cc:121] [Task #23: fused_nn_avg_pool2d_2] Trial #63: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  43: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}>(tvm::__mk_TVM22::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::TVMRetValue)
  42: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  41: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  40: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  39: tvm::transform::Pass::operator()(tvm::IRModule) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  35: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  34: _ZN3tvm7runtime13PackedFuncObj
  33: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerThreadAllreduce()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  32: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  30: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  29: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  28: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  27: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  26: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  25: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  24: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  23: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  22: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  21: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  20: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  19: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  18: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AllocateNode const*)
  17: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  16: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  15: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  14: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  13: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  12: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  11: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  10: tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> tvm::tir::StmtMutator::Internal::MutateArray<tvm::tir::Stmt, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}>(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, std::enable_if<std::is_base_of<tvm::runtime::ObjectRef, tvm::tir::Stmt>::value, void>::type> const&, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  9: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  8: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  7: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runti
  5: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::AttrStmtNode const*)
  4: tvm::tir::StmtMutator::VisitStmt(tvm::tir::Stmt const&)
  3: tvm::tir::StmtFunctor<tvm::tir::Stmt (tvm::tir::Stmt const&)>::VisitStmt(tvm::tir::Stmt const&)
  2: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runtime9
  1: tvm::tir::ThreadAllreduceBuilder::VisitStmt_(tvm::tir::EvaluateNode const*)
  0: tvm::tir::ThreadAllreduceBuilder::MakeAllreduce(tvm::tir::CallNode const*)
  File "/home/canesche/tvm-0.16.dev0/src/tir/transforms/lower_thread_allreduce.cc", line 383
InternalError: Check failed: (!load_remap_.count(buffers[i]->data.get())) is false: 

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), pool_avg: T.Buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(12), T.int64(12)), scope="shared")
        for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(9216), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(12), T.int64(1)):
                for ax4_ax5_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("pool_sum"):
                        v_ax0 = T.axis.spatial(T.int64(1), ax0)
                        v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(12) + ax1)
                        v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(12) + ax2)
                        v_ax3 = T.axis.spatial(T.int64(12), ax3)
                        v_rv0 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1) % T.int64(3))
                        T.where(ax4_ax5_fused_0 * T.int64(128) + ax4_ax5_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1])
                        T.writes(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                        pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 + v_rv0, v_ax3 + v_rv1]
            for ax3_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("pool_avg"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(768), ax0_ax1_ax2_ax3_0_fused // T.int64(12))
                    v_ax2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_0_fused % T.int64(12))
                    v_ax3 = T.axis.spatial(T.int64(12), ax3_1)
                    T.where(T.Mul(T.int64(0), T.int64(128)) + ax3_1 < T.int64(12))
                    T.reads(pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] / T.Cast("float32", T.max((T.min(T.int64(2), T.int64(13) - v_ax2) + T.int64(1) - T.max(T.int64(0) - v_ax2, T.int64(0))) * (T.min(T.int64(2), T.int64(13) - v_ax3) + T.int64(1) - T.max(T.int64(0) - v_ax3, T.int64(0))), T.int64(1)))
b0 = sch.get_block(name="pool_sum", func_name="main")
b1 = sch.get_block(name="pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=5)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
sch.enter_postproc()
b31 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b31, ann_key="meta_schedule.unroll_explicit")
b32, b33 = sch.get_child_blocks(b31)
l34, l35, l36, l37, l38, l39, l40 = sch.get_loops(block=b32)
sch.annotate(block_or_loop=l34, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l34, ann_key="pragma_unroll_explicit", ann_val=1)
l41, l42 = sch.get_loops(block=b33)
