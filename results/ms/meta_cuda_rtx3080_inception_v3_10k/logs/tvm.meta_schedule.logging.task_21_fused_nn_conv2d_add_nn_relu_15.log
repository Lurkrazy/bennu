2024-03-21 16:45:31 [INFO] [task_scheduler.cc:160] Initializing Task #21: "fused_nn_conv2d_add_nn_relu_15"
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(160), T.int64(18), T.int64(12)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(3) <= v_i2 and v_i2 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(3), v_i3], T.float32(0))
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12), T.int64(160), T.int64(7), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(12), T.int64(12)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(144), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(5), T.int64(7), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4608)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(144))
                                    v2 = T.axis.spatial(T.int64(18), ry_0 + ax0_ax1_ax2_ax3_fused % T.int64(144) // T.int64(12))
                                    v3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1536)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(160), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(7), ry_0)
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(36) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(3) + ff_3 * T.int64(3) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(36) // T.int64(12) * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(12) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(160), rc_0 * T.int64(32) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(7), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(36) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(36) // T.int64(12) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(12) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 4, 4, 1, 3])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 12, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 8, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(144), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(35), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4608)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused // T.int64(7) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(144))
                                    v2 = T.axis.spatial(T.int64(18), rc_0_ry_0_rx_0_fused % T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(144) // T.int64(12))
                                    v3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1536)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused // T.int64(7) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(36) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(3) + ff_3 * T.int64(3) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(36) // T.int64(12) * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(12) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused // T.int64(7) * T.int64(32) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7) + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(36) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(36) // T.int64(12) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(12) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 4, 4, 1, 3])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 12, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 8, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(144), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(35), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4608)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused // T.int64(7) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(144))
                                    v2 = T.axis.spatial(T.int64(18), rc_0_ry_0_rx_0_fused % T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(144) // T.int64(12))
                                    v3 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1536)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused // T.int64(7) * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(2), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(36) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(3) + ff_3 * T.int64(3) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(36) // T.int64(12) * T.int64(4) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(12) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused // T.int64(7) * T.int64(32) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(7), rc_0_ry_0_rx_0_fused % T.int64(7) + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(4), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(36) * T.int64(12) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(3) + ax1)
                                v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(36) // T.int64(12) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(12) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 4, 4, 1, 3])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 1, 2, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 12, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[5, 8, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 17:01:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:01:38 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 17:01:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 490 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 17:01:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 979 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 17:01:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 1472 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 17:01:41 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-03-21 17:01:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 124 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 17:01:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 17:01:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 17:01:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 17:01:49 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9994  0.9991  0.9989  0.9982  0.9980  0.9979  0.9976  0.9975  0.9974  0.9972  0.9958  0.9948  0.9947  0.9947  0.9946
[17 : 32]:	0.9924  0.9910  0.9898  0.9896  0.9881  0.9880  0.9876  0.9861  0.9857  0.9852  0.9851  0.9848  0.9846  0.9846  0.9840  0.9813
[33 : 48]:	0.9811  0.9808  0.9799  0.9798  0.9796  0.9780  0.9776  0.9765  0.9759  0.9757  0.9755  0.9751  0.9748  0.9747  0.9742  0.9737
[49 : 64]:	0.9735  0.9733  0.9732  0.9720  0.9713  0.9711  0.9709  0.9697  0.9689  0.9685  0.9683  0.9670  0.9666  0.9665  0.9658  0.9652
2024-03-21 17:01:49 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:01:49 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #1: GFLOPs: 112.7679. Time: 549.6849 us. Best GFLOPs: 112.7679
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #2: GFLOPs: 265.6720. Time: 233.3208 us. Best GFLOPs: 265.6720
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #3: GFLOPs: 17.5689. Time: 3528.2085 us. Best GFLOPs: 265.6720
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #4: GFLOPs: 439.8211. Time: 140.9364 us. Best GFLOPs: 439.8211
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #5: GFLOPs: 38.5930. Time: 1606.1683 us. Best GFLOPs: 439.8211
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #6: GFLOPs: 622.9924. Time: 99.4985 us. Best GFLOPs: 622.9924
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #7: GFLOPs: 1257.0777. Time: 49.3103 us. Best GFLOPs: 1257.0777
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #8: GFLOPs: 44.8796. Time: 1381.1796 us. Best GFLOPs: 1257.0777
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #9: GFLOPs: 151.7886. Time: 408.3759 us. Best GFLOPs: 1257.0777
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #10: GFLOPs: 178.6197. Time: 347.0323 us. Best GFLOPs: 1257.0777
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #11: GFLOPs: 32.8004. Time: 1889.8210 us. Best GFLOPs: 1257.0777
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #12: GFLOPs: 294.4689. Time: 210.5038 us. Best GFLOPs: 1257.0777
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #13: GFLOPs: 1010.0834. Time: 61.3680 us. Best GFLOPs: 1257.0777
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #14: GFLOPs: 244.8053. Time: 253.2086 us. Best GFLOPs: 1257.0777
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #15: GFLOPs: 2419.4682. Time: 25.6200 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #16: GFLOPs: 165.0202. Time: 375.6318 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #17: GFLOPs: 783.7135. Time: 79.0937 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #18: GFLOPs: 1384.9863. Time: 44.7563 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #19: GFLOPs: 52.7274. Time: 1175.6093 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #20: GFLOPs: 225.0363. Time: 275.4525 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #21: GFLOPs: 278.7350. Time: 222.3862 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #22: GFLOPs: 346.8853. Time: 178.6954 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #23: GFLOPs: 74.1687. Time: 835.7546 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #24: GFLOPs: 43.8809. Time: 1412.6147 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #25: GFLOPs: 1042.9111. Time: 59.4363 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #26: GFLOPs: 297.7265. Time: 208.2005 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #27: GFLOPs: 287.0466. Time: 215.9469 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #28: GFLOPs: 202.7817. Time: 305.6824 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #29: GFLOPs: 302.2435. Time: 205.0890 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #30: GFLOPs: 1363.8137. Time: 45.4511 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #31: GFLOPs: 161.2612. Time: 384.3876 us. Best GFLOPs: 2419.4682
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #32: GFLOPs: 3505.0388. Time: 17.6851 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #33: GFLOPs: 55.1306. Time: 1124.3634 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #34: GFLOPs: 207.7192. Time: 298.4164 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #35: GFLOPs: 316.8693. Time: 195.6227 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #36: GFLOPs: 1.0919. Time: 56772.2673 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #37: GFLOPs: 579.4655. Time: 106.9724 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #38: GFLOPs: 18.3346. Time: 3380.8726 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #39: GFLOPs: 239.7569. Time: 258.5402 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #40: GFLOPs: 151.3465. Time: 409.5688 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #41: GFLOPs: 964.6604. Time: 64.2577 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #42: GFLOPs: 588.0318. Time: 105.4141 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #43: GFLOPs: 143.8655. Time: 430.8664 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #44: GFLOPs: 207.9122. Time: 298.1393 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #45: GFLOPs: 358.3287. Time: 172.9887 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #46: GFLOPs: 620.2119. Time: 99.9446 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #47: GFLOPs: 246.5602. Time: 251.4064 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #48: GFLOPs: 228.5636. Time: 271.2016 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #49: GFLOPs: 807.9523. Time: 76.7209 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #50: GFLOPs: 164.0894. Time: 377.7625 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #51: GFLOPs: 22.6977. Time: 2730.9776 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #52: GFLOPs: 960.8013. Time: 64.5157 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #53: GFLOPs: 27.8135. Time: 2228.6563 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #54: GFLOPs: 21.4945. Time: 2883.8473 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #55: GFLOPs: 290.2579. Time: 213.5577 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #56: GFLOPs: 125.0255. Time: 495.7934 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #57: GFLOPs: 331.2209. Time: 187.1464 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #58: GFLOPs: 40.6132. Time: 1526.2720 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #59: GFLOPs: 1723.2483. Time: 35.9709 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #60: GFLOPs: 1410.5822. Time: 43.9441 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #61: GFLOPs: 470.5278. Time: 131.7389 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #62: GFLOPs: 105.5249. Time: 587.4142 us. Best GFLOPs: 3505.0388
2024-03-21 17:36:08 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #63: GFLOPs: 265.5152. Time: 233.4586 us. Best GFLOPs: 3505.0388
2024-03-21 18:24:37 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 18:24:37 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2024-03-21 18:24:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 429 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 18:24:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 856 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 18:24:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 1291 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 18:24:40 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-03-21 18:24:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 18:24:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 18:24:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 18:24:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071e182338)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd744c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071669fd78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071c86cb98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b07180c49e8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd74d48)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071be88a08)]: 0 failure(s)
2024-03-21 18:24:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.1254  1.0986  1.0978  1.0609  1.0451  1.0339  1.0200  0.9911  0.9911  0.9911  0.9911  0.9901  0.9834  0.9824  0.9781  0.9574
[17 : 32]:	0.9563  0.9455  0.9455  0.9455  0.9455  0.9455  0.9444  0.9378  0.9356  0.9340  0.9340  0.9340  0.9330  0.9330  0.9330  0.9263
[33 : 48]:	0.9220  0.9220  0.9209  0.9209  0.9182  0.9177  0.9143  0.9117  0.9076  0.9058  0.9010  0.9003  0.8971  0.8971  0.8964  0.8964
[49 : 64]:	0.8949  0.8937  0.8911  0.8887  0.8882  0.8871  0.8809  0.8782  0.8782  0.8761  0.8713  0.8683  0.8653  0.8645  0.8645  0.8633
2024-03-21 18:24:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 18:24:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:121] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #64: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(20), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) // T.int64(108))
                                    v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(108) // T.int64(6))
                                    v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(648) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(56))
                                        v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(648) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(648) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(336))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 6, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[20, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 216], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 216, 3], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:121] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #65: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(20), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) // T.int64(108))
                                    v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(108) // T.int64(6))
                                    v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(56))
                                        v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(336))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 6, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[20, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 216], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 216, 4], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:121] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #66: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(20), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) // T.int64(108))
                                    v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(108) // T.int64(6))
                                    v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(432) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(56))
                                        v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(432) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(432) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(336))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 6, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[20, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 216], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 216, 2], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:121] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #67: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(20), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(648) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(108))
                                        v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(648) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(108) // T.int64(6))
                                        v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(648) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(864))
                                        T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(56))
                                        v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(864) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(336))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 6, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[20, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 216, 3], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114 = sch.get_loops(block=b87)
l115, l116, l117 = sch.split(loop=l114, factors=[None, 216, 4], preserve_unit_iters=True)
sch.vectorize(loop=l117)
sch.bind(loop=l116, thread_axis="threadIdx.x")
b118 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b118, ann_key="meta_schedule.unroll_explicit")
b119, b120, b121, b122 = sch.get_child_blocks(b118)
l123, l124, l125, l126, l127, l128, l129 = sch.get_loops(block=b119)
l130, l131, l132, l133, l134, l135, l136 = sch.get_loops(block=b120)
l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l137, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l137, ann_key="pragma_unroll_explicit", ann_val=1)
l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b122)
b162 = sch.get_block(name="conv2d_nchw", func_name="main")
l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180 = sch.get_loops(block=b162)
b181 = sch.decompose_reduction(block=b162, loop=l166)
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:121] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #68: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(18), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(24) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(24) // T.int64(6) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3_init + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(20), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(18)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) // T.int64(216))
                                    v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) % T.int64(216) // T.int64(12))
                                    v3 = T.axis.spatial(T.int64(12), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) % T.int64(12))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(96), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(12) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(56))
                                        v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(288) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(672))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(24) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(24) // T.int64(6) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + xx_3 + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(12) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(6) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(24) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(6) // T.int64(2) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(24) // T.int64(6) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(6) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 3, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 3, 4, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 6, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[20, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 96], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 96, 3], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:121] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #69: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(20), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) // T.int64(108))
                                    v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(108) // T.int64(6))
                                    v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) // T.int64(56))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1 < T.int64(336))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 6, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[20, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 216], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115 = sch.split(loop=l113, factors=[None, 216], preserve_unit_iters=True)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b116 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b116, ann_key="meta_schedule.unroll_explicit")
b117, b118, b119, b120 = sch.get_child_blocks(b116)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b117)
l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b118)
l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b119)
sch.annotate(block_or_loop=l133, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l133, ann_key="pragma_unroll_explicit", ann_val=1)
l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b120)
b158 = sch.get_block(name="conv2d_nchw", func_name="main")
l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176 = sch.get_loops(block=b158)
b177 = sch.decompose_reduction(block=b158, loop=l162)
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:121] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #70: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(20), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) // T.int64(108))
                                    v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(108) // T.int64(6))
                                    v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(216), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(648) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(56))
                                        v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(648) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(648) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(336))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(4) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 1, 6, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[20, 2, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 216], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 216, 3], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:121] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #71: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(160), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(12), T.int64(12)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(160), T.int64(18), T.int64(12)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(192), T.int64(160), T.int64(7), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(20), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(12)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) // T.int64(108))
                                    v2 = T.axis.spatial(T.int64(18), (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) % T.int64(108) // T.int64(6))
                                    v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) % T.int64(6))
                                    T.reads(p0[v0, v1, v2 - T.int64(3), v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v2 and v2 < T.int64(15), p0[v0, v1, v2 - T.int64(3), v3], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(72), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(56))
                                        v1 = T.axis.spatial(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56) // T.int64(7))
                                        v2 = T.axis.spatial(T.int64(7), (ax0_ax1_ax2_ax3_fused_0 * T.int64(216) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(72) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(336))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(160), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_1 * T.int64(7) + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(6) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(36) + ax1)
                            v2 = T.axis.spatial(T.int64(12), nn_2_ff_2_yy_2_xx_2_fused % T.int64(36) // T.int64(3) + ax2)
                            v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(6) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(3) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[32, 3, 2, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 12, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 3, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[20, 4, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 72], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 72, 3], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #72: GFLOPs: 3494.4749. Time: 17.7385 us. Best GFLOPs: 3505.0388
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #73: GFLOPs: 3575.9245. Time: 17.3345 us. Best GFLOPs: 3575.9245
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #74: GFLOPs: 3575.9796. Time: 17.3342 us. Best GFLOPs: 3575.9796
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #75: GFLOPs: 3479.3266. Time: 17.8158 us. Best GFLOPs: 3575.9796
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #76: GFLOPs: 3519.2238. Time: 17.6138 us. Best GFLOPs: 3575.9796
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #77: GFLOPs: 3519.1290. Time: 17.6142 us. Best GFLOPs: 3575.9796
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #78: GFLOPs: 2082.9669. Time: 29.7589 us. Best GFLOPs: 3575.9796
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #79: GFLOPs: 3499.5413. Time: 17.7128 us. Best GFLOPs: 3575.9796
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #80: GFLOPs: 3499.3305. Time: 17.7139 us. Best GFLOPs: 3575.9796
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #81: GFLOPs: 3696.4802. Time: 16.7691 us. Best GFLOPs: 3696.4802
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #82: GFLOPs: 3542.7462. Time: 17.4968 us. Best GFLOPs: 3696.4802
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #83: GFLOPs: 3543.1747. Time: 17.4947 us. Best GFLOPs: 3696.4802
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #84: GFLOPs: 3543.5326. Time: 17.4929 us. Best GFLOPs: 3696.4802
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #85: GFLOPs: 3543.9422. Time: 17.4909 us. Best GFLOPs: 3696.4802
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #86: GFLOPs: 3544.1639. Time: 17.4898 us. Best GFLOPs: 3696.4802
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #87: GFLOPs: 3721.3860. Time: 16.6569 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #88: GFLOPs: 2881.9120. Time: 21.5089 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #89: GFLOPs: 3256.8560. Time: 19.0327 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #90: GFLOPs: 2955.8185. Time: 20.9711 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #91: GFLOPs: 2955.6555. Time: 20.9723 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #92: GFLOPs: 2955.9525. Time: 20.9702 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #93: GFLOPs: 2955.8336. Time: 20.9710 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #94: GFLOPs: 3257.0216. Time: 19.0317 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #95: GFLOPs: 3243.6513. Time: 19.1102 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #96: GFLOPs: 3135.8350. Time: 19.7672 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #97: GFLOPs: 3107.3923. Time: 19.9482 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #98: GFLOPs: 3136.6685. Time: 19.7620 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #99: GFLOPs: 3107.4964. Time: 19.9475 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #100: GFLOPs: 3478.3915. Time: 17.8205 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #101: GFLOPs: 3492.7913. Time: 17.7471 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #102: GFLOPs: 3130.0551. Time: 19.8037 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #103: GFLOPs: 3541.7518. Time: 17.5017 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #104: GFLOPs: 3267.2312. Time: 18.9723 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #105: GFLOPs: 3606.9119. Time: 17.1856 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #106: GFLOPs: 3219.3836. Time: 19.2542 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #107: GFLOPs: 2998.5570. Time: 20.6722 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #108: GFLOPs: 3463.2167. Time: 17.8986 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #109: GFLOPs: 3527.9810. Time: 17.5701 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #110: GFLOPs: 3604.0257. Time: 17.1993 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #111: GFLOPs: 3518.9865. Time: 17.6150 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #112: GFLOPs: 3027.4642. Time: 20.4748 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #113: GFLOPs: 3237.7330. Time: 19.1451 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #114: GFLOPs: 2998.6046. Time: 20.6719 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #115: GFLOPs: 3610.4628. Time: 17.1687 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #116: GFLOPs: 2939.0287. Time: 21.0909 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #117: GFLOPs: 2939.2429. Time: 21.0894 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #118: GFLOPs: 3517.9402. Time: 17.6202 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #119: GFLOPs: 3661.8848. Time: 16.9276 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #120: GFLOPs: 3547.9664. Time: 17.4711 us. Best GFLOPs: 3721.3860
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #121: GFLOPs: 3727.5950. Time: 16.6292 us. Best GFLOPs: 3727.5950
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #122: GFLOPs: 3530.5452. Time: 17.5573 us. Best GFLOPs: 3727.5950
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #123: GFLOPs: 2707.6389. Time: 22.8933 us. Best GFLOPs: 3727.5950
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #124: GFLOPs: 3150.7050. Time: 19.6740 us. Best GFLOPs: 3727.5950
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #125: GFLOPs: 370.7425. Time: 167.1964 us. Best GFLOPs: 3727.5950
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #126: GFLOPs: 579.5693. Time: 106.9532 us. Best GFLOPs: 3727.5950
2024-03-21 18:26:01 [INFO] [task_scheduler.cc:131] [Task #21: fused_nn_conv2d_add_nn_relu_15] Trial #127: GFLOPs: 83.0957. Time: 745.9689 us. Best GFLOPs: 3727.5950
