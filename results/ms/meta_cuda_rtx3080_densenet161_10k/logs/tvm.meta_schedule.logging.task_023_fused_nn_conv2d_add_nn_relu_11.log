2024-03-21 07:30:17 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_nn_conv2d_add_nn_relu_11"
2024-03-21 07:30:17 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1632), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1632), T.int64(7), T.int64(7)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(7), T.int64(7)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(7), T.int64(7)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1632), T.int64(7), T.int64(7)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(7), T.int64(7), T.int64(1632), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(7), T.int64(7)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(7), T.int64(7)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:17 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:17 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1632), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(7), T.int64(7)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1632), T.int64(7), T.int64(7)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(17), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9216)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(24) + ff_3 * T.int64(24) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(7), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1632), rc_0 * T.int64(96) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(24) + ax1)
                                v2 = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(7), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 1, 1, 24])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[17, 6, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:17 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1632), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(7), T.int64(7)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1632), T.int64(7), T.int64(7)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(17), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9216)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(24) + ff_3 * T.int64(24) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(7), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(24) + ax1)
                                v2 = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(7), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 1, 1, 24])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[17, 6, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:17 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1632), T.int64(7), T.int64(7)), "float32"), p1: T.Buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(7), T.int64(7)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(7), T.int64(7)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1632), T.int64(7), T.int64(7)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(1632), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(17), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4704)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(49))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(49) // T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9216)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(24) + ff_3 * T.int64(24) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(7), xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1632), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(24) + ax1)
                                v2 = T.axis.spatial(T.int64(7), nn_2_ff_2_yy_2_xx_2_fused + ax2)
                                v3 = T.axis.spatial(T.int64(7), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 1, 1, 24])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[17, 6, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:40:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 07:40:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 07:40:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57c8418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8e627b0a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f3d6ec78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f49af5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8ec1c6188)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f407ec38)]: 488 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f69d48e8)]: 0 failure(s)
2024-03-21 07:40:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57c8418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8e627b0a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f3d6ec78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f49af5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8ec1c6188)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f407ec38)]: 972 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f69d48e8)]: 0 failure(s)
2024-03-21 07:40:17 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2024-03-21 07:40:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57c8418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8e627b0a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f3d6ec78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f49af5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8ec1c6188)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f407ec38)]: 146 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f69d48e8)]: 0 failure(s)
2024-03-21 07:40:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57c8418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8e627b0a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f3d6ec78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f49af5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8ec1c6188)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f407ec38)]: 136 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f69d48e8)]: 0 failure(s)
2024-03-21 07:40:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57c8418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8e627b0a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f3d6ec78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f49af5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8ec1c6188)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f407ec38)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f69d48e8)]: 0 failure(s)
2024-03-21 07:40:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8f57c8418)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8e627b0a8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f3d6ec78)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f49af5a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8ec1c6188)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f407ec38)]: 109 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8f69d48e8)]: 0 failure(s)
2024-03-21 07:40:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9982  0.9961  0.9960  0.9960  0.9948  0.9939  0.9928  0.9928  0.9928  0.9926  0.9925  0.9923  0.9922  0.9916  0.9908  0.9907
[17 : 32]:	0.9895  0.9885  0.9884  0.9880  0.9879  0.9871  0.9870  0.9841  0.9832  0.9821  0.9805  0.9802  0.9802  0.9787  0.9767  0.9753
[33 : 48]:	0.9752  0.9748  0.9741  0.9734  0.9725  0.9723  0.9704  0.9704  0.9703  0.9670  0.9669  0.9666  0.9663  0.9656  0.9649  0.9648
[49 : 64]:	0.9638  0.9634  0.9634  0.9620  0.9610  0.9609  0.9598  0.9577  0.9574  0.9564  0.9559  0.9558  0.9551  0.9549  0.9548  0.9536
2024-03-21 07:40:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 07:40:22 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #1: GFLOPs: 145.4564. Time: 211.2422 us. Best GFLOPs: 145.4564
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #2: GFLOPs: 104.9603. Time: 292.7442 us. Best GFLOPs: 145.4564
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #3: GFLOPs: 84.2224. Time: 364.8260 us. Best GFLOPs: 145.4564
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #4: GFLOPs: 81.0850. Time: 378.9421 us. Best GFLOPs: 145.4564
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #5: GFLOPs: 160.2281. Time: 191.7675 us. Best GFLOPs: 160.2281
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #6: GFLOPs: 8.5309. Time: 3601.7736 us. Best GFLOPs: 160.2281
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #7: GFLOPs: 190.4869. Time: 161.3052 us. Best GFLOPs: 190.4869
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #8: GFLOPs: 86.7286. Time: 354.2838 us. Best GFLOPs: 190.4869
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #9: GFLOPs: 214.3395. Time: 143.3545 us. Best GFLOPs: 214.3395
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #10: GFLOPs: 92.1793. Time: 333.3342 us. Best GFLOPs: 214.3395
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #11: GFLOPs: 117.3094. Time: 261.9272 us. Best GFLOPs: 214.3395
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #12: GFLOPs: 73.4358. Time: 418.4137 us. Best GFLOPs: 214.3395
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #13: GFLOPs: 257.4666. Time: 119.3418 us. Best GFLOPs: 257.4666
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #14: GFLOPs: 108.7789. Time: 282.4676 us. Best GFLOPs: 257.4666
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #15: GFLOPs: 483.7548. Time: 63.5167 us. Best GFLOPs: 483.7548
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #16: GFLOPs: 141.0351. Time: 217.8645 us. Best GFLOPs: 483.7548
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #17: GFLOPs: 297.9873. Time: 103.1135 us. Best GFLOPs: 483.7548
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #18: GFLOPs: 383.3125. Time: 80.1605 us. Best GFLOPs: 483.7548
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #19: GFLOPs: 111.8539. Time: 274.7024 us. Best GFLOPs: 483.7548
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #20: GFLOPs: 99.6132. Time: 308.4585 us. Best GFLOPs: 483.7548
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #21: GFLOPs: 132.9902. Time: 231.0435 us. Best GFLOPs: 483.7548
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #22: GFLOPs: 18.8274. Time: 1632.0082 us. Best GFLOPs: 483.7548
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #23: GFLOPs: 143.3435. Time: 214.3560 us. Best GFLOPs: 483.7548
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #24: GFLOPs: 969.0342. Time: 31.7084 us. Best GFLOPs: 969.0342
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #25: GFLOPs: 131.4613. Time: 233.7306 us. Best GFLOPs: 969.0342
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #26: GFLOPs: 90.9093. Time: 337.9908 us. Best GFLOPs: 969.0342
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #27: GFLOPs: 94.2692. Time: 325.9444 us. Best GFLOPs: 969.0342
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #28: GFLOPs: 385.8367. Time: 79.6361 us. Best GFLOPs: 969.0342
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #29: GFLOPs: 1033.5390. Time: 29.7294 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #30: GFLOPs: 101.2315. Time: 303.5275 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #31: GFLOPs: 142.6456. Time: 215.4046 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #32: GFLOPs: 105.9212. Time: 290.0885 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #33: GFLOPs: 277.7888. Time: 110.6111 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #34: GFLOPs: 239.5505. Time: 128.2675 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #35: GFLOPs: 243.8841. Time: 125.9883 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #36: GFLOPs: 473.3014. Time: 64.9196 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #37: GFLOPs: 130.2332. Time: 235.9347 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #38: GFLOPs: 567.4277. Time: 54.1506 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #39: GFLOPs: 169.3267. Time: 181.4630 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #40: GFLOPs: 580.6595. Time: 52.9166 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #41: GFLOPs: 143.4662. Time: 214.1726 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #42: GFLOPs: 502.3400. Time: 61.1668 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #43: GFLOPs: 96.0460. Time: 319.9147 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #44: GFLOPs: 247.6365. Time: 124.0792 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #45: GFLOPs: 167.3207. Time: 183.6385 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #46: GFLOPs: 436.5253. Time: 70.3889 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #47: GFLOPs: 65.8506. Time: 466.6096 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #48: GFLOPs: 270.4146. Time: 113.6275 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #49: GFLOPs: 601.5420. Time: 51.0796 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #50: GFLOPs: 493.5552. Time: 62.2555 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #51: GFLOPs: 317.0778. Time: 96.9053 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #52: GFLOPs: 148.2391. Time: 207.2768 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #53: GFLOPs: 376.5174. Time: 81.6072 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #54: GFLOPs: 88.1438. Time: 348.5953 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #55: GFLOPs: 319.6564. Time: 96.1236 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #56: GFLOPs: 97.7742. Time: 314.2602 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #57: GFLOPs: 15.9395. Time: 1927.6997 us. Best GFLOPs: 1033.5390
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #58: GFLOPs: 1033.6411. Time: 29.7265 us. Best GFLOPs: 1033.6411
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #59: GFLOPs: 301.6515. Time: 101.8610 us. Best GFLOPs: 1033.6411
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #60: GFLOPs: 873.0630. Time: 35.1939 us. Best GFLOPs: 1033.6411
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #61: GFLOPs: 27.3859. Time: 1121.9855 us. Best GFLOPs: 1033.6411
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #62: GFLOPs: 91.8203. Time: 334.6377 us. Best GFLOPs: 1033.6411
2024-03-21 09:10:06 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_add_nn_relu_11] Trial #63: GFLOPs: 39.1083. Time: 785.6777 us. Best GFLOPs: 1033.6411
