2024-03-20 22:52:37 [INFO] [task_scheduler.cc:160] Initializing Task #118: "fused_nn_conv2d_add_nn_relu_57"
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(512), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_0 * T.int64(64) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 128, 1, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 4, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 4, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(512), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 128, 1, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 4, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 4, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(64), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(64), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(512), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(28), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(7168)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(112))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(112) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(8192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(64), rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_1_ff_1_yy_1_xx_1_fused // T.int64(4) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(4) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 128, 1, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 4, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 1, 14, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 4, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 23:58:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-20 23:58:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-20 23:58:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44057d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2c54378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a2f1c3e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ab1e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299db0ac38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a5445ba8)]: 476 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a335c0f8)]: 0 failure(s)
2024-03-20 23:58:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44057d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2c54378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a2f1c3e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ab1e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299db0ac38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a5445ba8)]: 957 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a335c0f8)]: 0 failure(s)
2024-03-20 23:58:10 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2024-03-20 23:58:12 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44057d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2c54378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a2f1c3e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ab1e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299db0ac38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a5445ba8)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a335c0f8)]: 0 failure(s)
2024-03-20 23:58:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44057d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2c54378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a2f1c3e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ab1e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299db0ac38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a5445ba8)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a335c0f8)]: 0 failure(s)
2024-03-20 23:58:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44057d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2c54378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a2f1c3e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ab1e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299db0ac38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a5445ba8)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a335c0f8)]: 0 failure(s)
2024-03-20 23:58:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a44057d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2c54378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a2f1c3e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ab1e18)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x57299db0ac38)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a5445ba8)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a335c0f8)]: 0 failure(s)
2024-03-20 23:58:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9991  0.9975  0.9962  0.9958  0.9948  0.9947  0.9943  0.9939  0.9936  0.9934  0.9920  0.9917  0.9913  0.9910  0.9903
[17 : 32]:	0.9901  0.9893  0.9874  0.9865  0.9861  0.9858  0.9850  0.9838  0.9835  0.9815  0.9812  0.9801  0.9796  0.9789  0.9783  0.9783
[33 : 48]:	0.9782  0.9781  0.9778  0.9772  0.9763  0.9762  0.9760  0.9754  0.9746  0.9727  0.9706  0.9693  0.9684  0.9679  0.9671  0.9640
[49 : 64]:	0.9632  0.9620  0.9615  0.9614  0.9613  0.9602  0.9598  0.9597  0.9596  0.9589  0.9579  0.9555  0.9542  0.9539  0.9538  0.9535
2024-03-20 23:58:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-20 23:58:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #1: GFLOPs: 124.5582. Time: 418.9451 us. Best GFLOPs: 124.5582
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #2: GFLOPs: 137.4745. Time: 379.5835 us. Best GFLOPs: 137.4745
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #3: GFLOPs: 76.0902. Time: 685.8051 us. Best GFLOPs: 137.4745
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #4: GFLOPs: 69.4584. Time: 751.2843 us. Best GFLOPs: 137.4745
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #5: GFLOPs: 2857.0931. Time: 18.2644 us. Best GFLOPs: 2857.0931
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #6: GFLOPs: 111.1274. Time: 469.5785 us. Best GFLOPs: 2857.0931
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #7: GFLOPs: 68.5268. Time: 761.4984 us. Best GFLOPs: 2857.0931
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #8: GFLOPs: 2506.2793. Time: 20.8209 us. Best GFLOPs: 2857.0931
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #9: GFLOPs: 2342.6898. Time: 22.2748 us. Best GFLOPs: 2857.0931
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #10: GFLOPs: 58.1866. Time: 896.8229 us. Best GFLOPs: 2857.0931
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #11: GFLOPs: 515.1364. Time: 101.2995 us. Best GFLOPs: 2857.0931
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #12: GFLOPs: 97.3132. Time: 536.2381 us. Best GFLOPs: 2857.0931
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #13: GFLOPs: 3543.1362. Time: 14.7279 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #14: GFLOPs: 668.3653. Time: 78.0756 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #15: GFLOPs: 2453.5847. Time: 21.2681 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #16: GFLOPs: 802.9419. Time: 64.9898 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #17: GFLOPs: 846.3744. Time: 61.6548 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #18: GFLOPs: 14.5741. Time: 3580.5258 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #19: GFLOPs: 2169.4976. Time: 24.0531 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #20: GFLOPs: 319.8482. Time: 163.1494 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #21: GFLOPs: 38.3544. Time: 1360.5500 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #22: GFLOPs: 98.4387. Time: 530.1069 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #23: GFLOPs: 6.7362. Time: 7746.6389 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #24: GFLOPs: 217.0731. Time: 240.3938 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #25: GFLOPs: 176.0024. Time: 296.4904 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #26: GFLOPs: 14.8345. Time: 3517.6870 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #27: GFLOPs: 3000.2422. Time: 17.3929 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #28: GFLOPs: 165.2898. Time: 315.7064 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #29: GFLOPs: 3404.0182. Time: 15.3298 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #30: GFLOPs: 457.5093. Time: 114.0590 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #31: GFLOPs: 909.6093. Time: 57.3686 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #32: GFLOPs: 1784.3147. Time: 29.2454 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #33: GFLOPs: 2161.8565. Time: 24.1381 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #34: GFLOPs: 398.4902. Time: 130.9519 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #35: GFLOPs: 2342.3957. Time: 22.2776 us. Best GFLOPs: 3543.1362
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #36: GFLOPs: 4143.2118. Time: 12.5948 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #37: GFLOPs: 211.9783. Time: 246.1716 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #38: GFLOPs: 2412.2320. Time: 21.6327 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #39: GFLOPs: 2544.5475. Time: 20.5078 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #40: GFLOPs: 64.4362. Time: 809.8399 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #41: GFLOPs: 977.9000. Time: 53.3623 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #42: GFLOPs: 74.9795. Time: 695.9644 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #43: GFLOPs: 213.1892. Time: 244.7734 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #44: GFLOPs: 685.6606. Time: 76.1062 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #45: GFLOPs: 3998.2990. Time: 13.0513 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #46: GFLOPs: 1131.4433. Time: 46.1208 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #47: GFLOPs: 265.4193. Time: 196.6060 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #48: GFLOPs: 664.4277. Time: 78.5383 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #49: GFLOPs: 1680.1567. Time: 31.0584 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #50: GFLOPs: 142.2010. Time: 366.9667 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #51: GFLOPs: 271.5090. Time: 192.1964 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #52: GFLOPs: 2961.9075. Time: 17.6181 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #53: GFLOPs: 1961.9113. Time: 26.5981 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #54: GFLOPs: 134.9955. Time: 386.5539 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #55: GFLOPs: 37.2402. Time: 1401.2560 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #56: GFLOPs: 1704.4662. Time: 30.6155 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #57: GFLOPs: 1184.1731. Time: 44.0671 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #58: GFLOPs: 2183.8490. Time: 23.8950 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #59: GFLOPs: 126.2225. Time: 413.4210 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #60: GFLOPs: 3040.6201. Time: 17.1620 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #61: GFLOPs: 83.1263. Time: 627.7558 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #62: GFLOPs: 488.5984. Time: 106.8015 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #63: GFLOPs: 30.2563. Time: 1724.6984 us. Best GFLOPs: 4143.2118
2024-03-21 00:13:06 [INFO] [task_scheduler.cc:131] [Task #118: fused_nn_conv2d_add_nn_relu_57] Trial #64: GFLOPs: 772.1470. Time: 67.5817 us. Best GFLOPs: 4143.2118
