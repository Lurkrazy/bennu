2024-03-21 10:38:31 [INFO] [task_scheduler.cc:160] Initializing Task #145: "fused_nn_conv2d_add_nn_relu_71"
2024-03-21 10:38:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 10:38:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(16), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6272)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(16) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 2, 4, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 8, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 10:38:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6272)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 2, 4, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 8, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 10:38:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(6272)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(392))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(392) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(16))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(16) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(14) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(4) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) // T.int64(2) * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 2, 4, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 7, 2, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 2, 7, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 8, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 11:54:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:54:19 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:54:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6eac278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd4432ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6d66618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd5d84cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5510e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd22bb438)]: 481 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd44329b8)]: 0 failure(s)
2024-03-21 11:54:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6eac278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd4432ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6d66618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd5d84cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5510e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd22bb438)]: 950 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd44329b8)]: 0 failure(s)
2024-03-21 11:54:20 [INFO] [evolutionary_search.cc:723] Sampled 74 candidate(s)
2024-03-21 11:54:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6eac278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd4432ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6d66618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd5d84cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5510e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd22bb438)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd44329b8)]: 0 failure(s)
2024-03-21 11:54:23 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6eac278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd4432ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6d66618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd5d84cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5510e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd22bb438)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd44329b8)]: 0 failure(s)
2024-03-21 11:54:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6eac278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd4432ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6d66618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd5d84cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5510e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd22bb438)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd44329b8)]: 0 failure(s)
2024-03-21 11:54:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd6eac278)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd4432ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd6d66618)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd5d84cf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd5510e58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd22bb438)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd44329b8)]: 0 failure(s)
2024-03-21 11:54:26 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9985  0.9980  0.9949  0.9923  0.9918  0.9915  0.9909  0.9905  0.9900  0.9884  0.9873  0.9872  0.9852  0.9841  0.9836
[17 : 32]:	0.9826  0.9826  0.9823  0.9814  0.9810  0.9802  0.9785  0.9785  0.9784  0.9770  0.9763  0.9761  0.9760  0.9757  0.9756  0.9754
[33 : 48]:	0.9729  0.9710  0.9695  0.9695  0.9691  0.9690  0.9689  0.9686  0.9682  0.9676  0.9675  0.9667  0.9667  0.9663  0.9662  0.9643
[49 : 64]:	0.9637  0.9636  0.9631  0.9625  0.9618  0.9617  0.9609  0.9605  0.9597  0.9581  0.9579  0.9578  0.9575  0.9575  0.9567  0.9567
2024-03-21 11:54:26 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:54:26 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #1: GFLOPs: 25.1124. Time: 2054.0017 us. Best GFLOPs: 25.1124
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #2: GFLOPs: 71.3104. Time: 723.3297 us. Best GFLOPs: 71.3104
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #3: GFLOPs: 525.4139. Time: 98.1720 us. Best GFLOPs: 525.4139
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #4: GFLOPs: 725.8663. Time: 71.0612 us. Best GFLOPs: 725.8663
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #5: GFLOPs: 18.3679. Time: 2808.2044 us. Best GFLOPs: 725.8663
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #6: GFLOPs: 74.2395. Time: 694.7907 us. Best GFLOPs: 725.8663
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #7: GFLOPs: 4177.7365. Time: 12.3466 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #8: GFLOPs: 1105.5159. Time: 46.6578 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #9: GFLOPs: 1555.4307. Time: 33.1618 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #10: GFLOPs: 196.6554. Time: 262.2909 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #11: GFLOPs: 2764.5098. Time: 18.6583 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #12: GFLOPs: 20.9696. Time: 2459.7940 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #13: GFLOPs: 654.9413. Time: 78.7566 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #14: GFLOPs: 971.3743. Time: 53.1010 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #15: GFLOPs: 76.8731. Time: 670.9877 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #16: GFLOPs: 487.4513. Time: 105.8176 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #17: GFLOPs: 4155.7058. Time: 12.4121 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #18: GFLOPs: 606.1507. Time: 85.0959 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #19: GFLOPs: 1545.6789. Time: 33.3711 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #20: GFLOPs: 1201.0136. Time: 42.9478 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #21: GFLOPs: 867.4953. Time: 59.4596 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #22: GFLOPs: 101.6202. Time: 507.5852 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #23: GFLOPs: 1309.2900. Time: 39.3961 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #24: GFLOPs: 2791.4326. Time: 18.4783 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #25: GFLOPs: 3926.4672. Time: 13.1367 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #26: GFLOPs: 1537.6466. Time: 33.5454 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #27: GFLOPs: 2529.2211. Time: 20.3940 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #28: GFLOPs: 20.2287. Time: 2549.8880 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #29: GFLOPs: 649.7554. Time: 79.3852 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #30: GFLOPs: 1087.2217. Time: 47.4429 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #31: GFLOPs: 370.5199. Time: 139.2123 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #32: GFLOPs: 408.9268. Time: 126.1373 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #33: GFLOPs: 855.4169. Time: 60.2992 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #34: GFLOPs: 666.2225. Time: 77.4230 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #35: GFLOPs: 644.3731. Time: 80.0482 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #36: GFLOPs: 198.1914. Time: 260.2581 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #37: GFLOPs: 901.2992. Time: 57.2295 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #38: GFLOPs: 537.4839. Time: 95.9674 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #39: GFLOPs: 2209.3682. Time: 23.3465 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #40: GFLOPs: 305.9815. Time: 168.5753 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #41: GFLOPs: 231.3409. Time: 222.9650 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #42: GFLOPs: 35.7415. Time: 1443.1671 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #43: GFLOPs: 821.1322. Time: 62.8168 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #44: GFLOPs: 735.2393. Time: 70.1553 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #45: GFLOPs: 2356.4621. Time: 21.8891 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #46: GFLOPs: 559.5994. Time: 92.1747 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #47: GFLOPs: 2550.2981. Time: 20.2255 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #48: GFLOPs: 1722.0862. Time: 29.9526 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #49: GFLOPs: 588.3064. Time: 87.6770 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #50: GFLOPs: 299.4932. Time: 172.2274 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #51: GFLOPs: 697.3235. Time: 73.9699 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #52: GFLOPs: 1615.9751. Time: 31.9194 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #53: GFLOPs: 269.7861. Time: 191.1919 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #54: GFLOPs: 591.5096. Time: 87.2022 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #55: GFLOPs: 874.5185. Time: 58.9821 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #56: GFLOPs: 314.7668. Time: 163.8703 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #57: GFLOPs: 147.2256. Time: 350.3530 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #58: GFLOPs: 82.2137. Time: 627.4007 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #59: GFLOPs: 721.9258. Time: 71.4491 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #60: GFLOPs: 1377.7680. Time: 37.4380 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #61: GFLOPs: 19.3611. Time: 2664.1516 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #62: GFLOPs: 106.2936. Time: 485.2684 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #63: GFLOPs: 89.0554. Time: 579.2004 us. Best GFLOPs: 4177.7365
2024-03-21 12:23:12 [INFO] [task_scheduler.cc:131] [Task #145: fused_nn_conv2d_add_nn_relu_71] Trial #64: GFLOPs: 1002.3291. Time: 51.4611 us. Best GFLOPs: 4177.7365
