2024-03-21 16:45:33 [INFO] [task_scheduler.cc:160] Initializing Task #66: "fused_nn_global_avg_pool2d"
2024-03-21 16:45:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1), T.int64(5), T.int64(5)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
2024-03-21 16:45:33 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-03-21 16:45:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(5), T.int64(5)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=5)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-03-21 16:45:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(5), T.int64(5)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(2048), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(5), (ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1) // T.int64(5))
                            v_rv1 = T.axis.reduce(T.int64(5), (ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1) % T.int64(5))
                            T.where(ax4_ax5_fused_0 * T.int64(32) + ax4_ax5_fused_1 < T.int64(25))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(5) + v_rv0, v_ax3 * T.int64(5) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(32)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.040000000000000001)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=3)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-03-21 17:33:57 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:33:57 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 17:33:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0716696a58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071be9def8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c335f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bfb2198)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0715b404c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b5027c8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b3a6c08)]: 0 failure(s)
2024-03-21 17:33:58 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-21 17:33:58 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0716696a58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071be9def8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c335f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bfb2198)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0715b404c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b5027c8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b3a6c08)]: 0 failure(s)
2024-03-21 17:33:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0716696a58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071be9def8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c335f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bfb2198)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0715b404c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b5027c8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b3a6c08)]: 0 failure(s)
2024-03-21 17:33:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0716696a58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071be9def8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c335f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bfb2198)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0715b404c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b5027c8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b3a6c08)]: 0 failure(s)
2024-03-21 17:33:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b0716696a58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071be9def8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071c335f38)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071bfb2198)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b0715b404c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b5027c8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b3a6c08)]: 0 failure(s)
2024-03-21 17:33:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9975  0.9887  0.9813  0.9813  0.9780  0.9683  0.9651  0.9608  0.9557  0.9511  0.9381  0.9356  0.9325  0.9306  0.9296  0.9294
[17 : 32]:	0.9245  0.9218  0.9198  0.9175  0.9156  0.9149  0.9065  0.9058  0.9019  0.8974  0.8847  0.8822  0.8736  0.8583  0.8502  0.8480
[33 : 48]:	0.8442  0.8410  0.8357  0.8345  0.8343  0.8296  0.8250  0.8180  0.8128  0.8112  0.8089  0.8030  0.7863  0.7834  0.7823  0.7813
[49 : 64]:	0.7790  0.7785  0.7758  0.7631  0.7624  0.7620  0.7615  0.7439  0.7408  0.7388  0.7311  0.7281  0.7275  0.7159  0.7141  0.7059
2024-03-21 17:33:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:33:58 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 18.8749. Time: 2.8211 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 11.9023. Time: 4.4737 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 12.0135. Time: 4.4323 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 11.9014. Time: 4.4741 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 11.9710. Time: 4.4481 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 11.8882. Time: 4.4790 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 11.9057. Time: 4.4725 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 11.8851. Time: 4.4802 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 9.0403. Time: 5.8900 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 11.9404. Time: 4.4595 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 5.6758. Time: 9.3816 us. Best GFLOPs: 18.8749
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 18.8840. Time: 2.8197 us. Best GFLOPs: 18.8840
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 11.9396. Time: 4.4598 us. Best GFLOPs: 18.8840
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 5.6691. Time: 9.3927 us. Best GFLOPs: 18.8840
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 11.8991. Time: 4.4750 us. Best GFLOPs: 18.8840
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 11.9564. Time: 4.4535 us. Best GFLOPs: 18.8840
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 11.8931. Time: 4.4772 us. Best GFLOPs: 18.8840
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 11.8920. Time: 4.4776 us. Best GFLOPs: 18.8840
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 11.9197. Time: 4.4672 us. Best GFLOPs: 18.8840
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 18.6062. Time: 2.8618 us. Best GFLOPs: 18.8840
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 18.8846. Time: 2.8196 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 9.0201. Time: 5.9033 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 11.9331. Time: 4.4622 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 11.9171. Time: 4.4682 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 11.8924. Time: 4.4775 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 11.8865. Time: 4.4797 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 11.8998. Time: 4.4747 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 11.9100. Time: 4.4709 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 11.8915. Time: 4.4778 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 11.8344. Time: 4.4994 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 11.8696. Time: 4.4861 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 9.0220. Time: 5.9020 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 11.9260. Time: 4.4649 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 11.9188. Time: 4.4676 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 9.0064. Time: 5.9122 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 11.9071. Time: 4.4719 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 11.9384. Time: 4.4602 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 11.9005. Time: 4.4744 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 11.9287. Time: 4.4639 us. Best GFLOPs: 18.8846
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 18.8874. Time: 2.8192 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 8.9811. Time: 5.9289 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 10.1871. Time: 5.2270 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 11.8571. Time: 4.4908 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 11.8529. Time: 4.4924 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 11.9052. Time: 4.4727 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 11.8878. Time: 4.4792 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 11.9041. Time: 4.4731 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 18.0798. Time: 2.9452 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 11.9498. Time: 4.4560 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 11.8877. Time: 4.4793 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 11.8854. Time: 4.4801 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 9.0075. Time: 5.9115 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 8.9857. Time: 5.9259 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 10.1861. Time: 5.2275 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 9.0082. Time: 5.9111 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 18.5984. Time: 2.8630 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 15.9424. Time: 3.3400 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 8.9889. Time: 5.9237 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 11.8833. Time: 4.4809 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 11.9051. Time: 4.4727 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 9.0162. Time: 5.9058 us. Best GFLOPs: 18.8874
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 18.8878. Time: 2.8192 us. Best GFLOPs: 18.8878
2024-03-21 17:36:43 [INFO] [task_scheduler.cc:131] [Task #66: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 11.8902. Time: 4.4783 us. Best GFLOPs: 18.8878
