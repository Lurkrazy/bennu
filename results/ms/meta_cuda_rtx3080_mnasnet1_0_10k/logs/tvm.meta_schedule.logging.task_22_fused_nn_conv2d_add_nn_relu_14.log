2024-03-21 19:46:25 [INFO] [task_scheduler.cc:160] Initializing Task #22: "fused_nn_conv2d_add_nn_relu_14"
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(576), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(576), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(16), T.int64(16)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(576), T.int64(16), T.int64(16)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(15) and T.int64(1) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(576), T.int64(14), T.int64(14), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(576), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(576), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(576), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(576), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(576), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(21), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(3), T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(16), di_0 + b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(16), dj_0 + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + ax0_ax1_ax2_ax3_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2, v3 = T.axis.remap("SS", [di_0, dj_0])
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + b_1_c_1_i_1_j_1_fused * T.int64(32) + b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + b_1_c_1_i_1_j_1_fused * T.int64(32) + b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 6, 16, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(576), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(576), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(576), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(21), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(16), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(16), di_0_dj_0_fused % T.int64(3) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + ax0_ax1_ax2_ax3_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + b_1_c_1_i_1_j_1_fused * T.int64(32) + b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + b_1_c_1_i_1_j_1_fused * T.int64(32) + b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 6, 16, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 19:46:25 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(576), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(576), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(14), T.int64(14)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(576), T.int64(16), T.int64(16)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(576), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(21), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(6), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(5376)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v2 = T.axis.spatial(T.int64(16), di_0_dj_0_fused // T.int64(3) + b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(16), di_0_dj_0_fused % T.int64(3) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(15) and T.int64(1) <= v3 and v3 < T.int64(15), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + ax0_ax1_ax2_ax3_fused)
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + b_1_c_1_i_1_j_1_fused * T.int64(32) + b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused // T.int64(3) + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused % T.int64(3) + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(7)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(576), b_0_c_0_i_0_j_0_fused // T.int64(7) * T.int64(192) + b_1_c_1_i_1_j_1_fused * T.int64(32) + b_2_c_2_i_2_j_2_fused // T.int64(4) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(14), b_0_c_0_i_0_j_0_fused % T.int64(7) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(4) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(7) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[3, 6, 16, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 2, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 2, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 20:10:36 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:10:36 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 20:10:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 502 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 20:10:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 1006 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 20:10:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 1499 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 20:10:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 2000 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 20:10:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 2498 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 20:10:41 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-03-21 20:10:44 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 20:10:46 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 123 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 20:10:48 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 20:10:50 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 20:10:50 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9991  0.9985  0.9976  0.9976  0.9973  0.9970  0.9969  0.9951  0.9932  0.9918  0.9917  0.9915  0.9910  0.9907  0.9906
[17 : 32]:	0.9901  0.9889  0.9886  0.9869  0.9864  0.9858  0.9849  0.9848  0.9848  0.9847  0.9832  0.9820  0.9817  0.9815  0.9813  0.9812
[33 : 48]:	0.9807  0.9805  0.9803  0.9793  0.9793  0.9792  0.9791  0.9790  0.9776  0.9765  0.9764  0.9745  0.9741  0.9734  0.9734  0.9717
[49 : 64]:	0.9710  0.9706  0.9694  0.9690  0.9684  0.9683  0.9678  0.9674  0.9667  0.9665  0.9664  0.9655  0.9653  0.9652  0.9652  0.9651
2024-03-21 20:10:50 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:10:51 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #1: GFLOPs: 16.1191. Time: 140.0776 us. Best GFLOPs: 16.1191
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #2: GFLOPs: 159.6104. Time: 14.1464 us. Best GFLOPs: 159.6104
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #3: GFLOPs: 254.6450. Time: 8.8669 us. Best GFLOPs: 254.6450
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #4: GFLOPs: 41.4580. Time: 54.4628 us. Best GFLOPs: 254.6450
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #5: GFLOPs: 431.4694. Time: 5.2331 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #6: GFLOPs: 45.7089. Time: 49.3978 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #7: GFLOPs: 65.2256. Time: 34.6171 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #8: GFLOPs: 136.0809. Time: 16.5925 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #9: GFLOPs: 149.4361. Time: 15.1096 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #10: GFLOPs: 91.7868. Time: 24.5996 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #11: GFLOPs: 48.1437. Time: 46.8996 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #12: GFLOPs: 129.8219. Time: 17.3924 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #13: GFLOPs: 113.2501. Time: 19.9375 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #14: GFLOPs: 55.8290. Time: 40.4435 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #15: GFLOPs: 168.3900. Time: 13.4089 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #16: GFLOPs: 228.9818. Time: 9.8607 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #17: GFLOPs: 125.8984. Time: 17.9345 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #18: GFLOPs: 93.9110. Time: 24.0432 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #19: GFLOPs: 378.3007. Time: 5.9686 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #20: GFLOPs: 263.9514. Time: 8.5543 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #21: GFLOPs: 168.4287. Time: 13.4058 us. Best GFLOPs: 431.4694
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #22: GFLOPs: 507.0214. Time: 4.4533 us. Best GFLOPs: 507.0214
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #23: GFLOPs: 128.1716. Time: 17.6164 us. Best GFLOPs: 507.0214
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #24: GFLOPs: 74.8317. Time: 30.1733 us. Best GFLOPs: 507.0214
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #25: GFLOPs: 347.7196. Time: 6.4935 us. Best GFLOPs: 507.0214
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #26: GFLOPs: 57.0275. Time: 39.5936 us. Best GFLOPs: 507.0214
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #27: GFLOPs: 520.8629. Time: 4.3350 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #28: GFLOPs: 130.8810. Time: 17.2517 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #29: GFLOPs: 291.7485. Time: 7.7393 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #30: GFLOPs: 42.0163. Time: 53.7392 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #31: GFLOPs: 73.3159. Time: 30.7972 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #32: GFLOPs: 149.7351. Time: 15.0794 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #33: GFLOPs: 137.1375. Time: 16.4646 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #34: GFLOPs: 164.0173. Time: 13.7664 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #35: GFLOPs: 86.8245. Time: 26.0056 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #36: GFLOPs: 114.3107. Time: 19.7525 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #37: GFLOPs: 369.1297. Time: 6.1169 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #38: GFLOPs: 28.8715. Time: 78.2059 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #39: GFLOPs: 136.9460. Time: 16.4877 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #40: GFLOPs: 373.3647. Time: 6.0475 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #41: GFLOPs: 330.2910. Time: 6.8362 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #42: GFLOPs: 384.5255. Time: 5.8720 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #43: GFLOPs: 96.2745. Time: 23.4529 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #44: GFLOPs: 124.7154. Time: 18.1046 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #45: GFLOPs: 87.8968. Time: 25.6883 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #46: GFLOPs: 228.9245. Time: 9.8632 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #47: GFLOPs: 379.2626. Time: 5.9534 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #48: GFLOPs: 315.5430. Time: 7.1557 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #49: GFLOPs: 264.9199. Time: 8.5230 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #50: GFLOPs: 93.6572. Time: 24.1084 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #51: GFLOPs: 222.3217. Time: 10.1561 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #52: GFLOPs: 125.1639. Time: 18.0397 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #53: GFLOPs: 379.6655. Time: 5.9471 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #54: GFLOPs: 188.0546. Time: 12.0067 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #55: GFLOPs: 293.3875. Time: 7.6960 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #56: GFLOPs: 92.5346. Time: 24.4008 us. Best GFLOPs: 520.8629
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #57: GFLOPs: 522.9191. Time: 4.3179 us. Best GFLOPs: 522.9191
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #58: GFLOPs: 253.3869. Time: 8.9110 us. Best GFLOPs: 522.9191
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #59: GFLOPs: 267.9214. Time: 8.4275 us. Best GFLOPs: 522.9191
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #60: GFLOPs: 89.0125. Time: 25.3663 us. Best GFLOPs: 522.9191
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #61: GFLOPs: 416.8362. Time: 5.4168 us. Best GFLOPs: 522.9191
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #62: GFLOPs: 336.0923. Time: 6.7182 us. Best GFLOPs: 522.9191
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #63: GFLOPs: 259.6098. Time: 8.6974 us. Best GFLOPs: 522.9191
2024-03-21 20:21:58 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #64: GFLOPs: 125.3876. Time: 18.0075 us. Best GFLOPs: 522.9191
2024-03-21 21:13:38 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 21:13:38 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 21:13:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 434 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 21:13:40 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 878 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 21:13:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 1309 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 21:13:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 1746 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 21:13:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 2178 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 21:13:42 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-03-21 21:13:45 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 146 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 21:13:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 21:13:53 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 21:13:57 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec3725e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed9f5a48)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7b60d8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ed6cfc68)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed610d08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed8663f8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed9f5948)]: 0 failure(s)
2024-03-21 21:13:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9843  0.9843  0.9708  0.9682  0.9677  0.9648  0.9549  0.9483  0.9470  0.9406  0.9368  0.9362  0.9362  0.9358  0.9354  0.9354
[17 : 32]:	0.9354  0.9222  0.9222  0.9044  0.8951  0.8951  0.8912  0.8912  0.8911  0.8903  0.8899  0.8898  0.8898  0.8895  0.8889  0.8887
[33 : 48]:	0.8856  0.8856  0.8825  0.8825  0.8825  0.8805  0.8713  0.8713  0.8703  0.8689  0.8684  0.8684  0.8670  0.8657  0.8657  0.8649
[49 : 64]:	0.8631  0.8627  0.8623  0.8557  0.8546  0.8442  0.8442  0.8403  0.8398  0.8395  0.8394  0.8389  0.8385  0.8378  0.8364  0.8342
2024-03-21 21:13:59 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 21:13:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #65: GFLOPs: 515.9444. Time: 4.3763 us. Best GFLOPs: 522.9191
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #66: GFLOPs: 511.9565. Time: 4.4104 us. Best GFLOPs: 522.9191
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #67: GFLOPs: 652.6601. Time: 3.4596 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #68: GFLOPs: 497.2644. Time: 4.5407 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #69: GFLOPs: 514.6415. Time: 4.3874 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #70: GFLOPs: 539.0065. Time: 4.1890 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #71: GFLOPs: 521.7056. Time: 4.3280 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #72: GFLOPs: 542.0386. Time: 4.1656 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #73: GFLOPs: 537.3705. Time: 4.2018 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #74: GFLOPs: 525.7504. Time: 4.2947 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #75: GFLOPs: 512.4866. Time: 4.4058 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #76: GFLOPs: 514.6114. Time: 4.3876 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #77: GFLOPs: 512.6907. Time: 4.4041 us. Best GFLOPs: 652.6601
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #78: GFLOPs: 653.2826. Time: 3.4563 us. Best GFLOPs: 653.2826
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #79: GFLOPs: 663.3887. Time: 3.4036 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #80: GFLOPs: 321.1784. Time: 7.0301 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #81: GFLOPs: 323.5363. Time: 6.9789 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #82: GFLOPs: 510.0560. Time: 4.4268 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #83: GFLOPs: 509.5848. Time: 4.4309 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #84: GFLOPs: 656.5591. Time: 3.4390 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #85: GFLOPs: 639.1183. Time: 3.5329 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #86: GFLOPs: 512.1170. Time: 4.4090 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #87: GFLOPs: 505.9264. Time: 4.4629 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #88: GFLOPs: 259.3775. Time: 8.7051 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #89: GFLOPs: 652.9859. Time: 3.4578 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #90: GFLOPs: 651.5722. Time: 3.4653 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #91: GFLOPs: 654.6145. Time: 3.4492 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #92: GFLOPs: 321.3000. Time: 7.0275 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #93: GFLOPs: 319.4201. Time: 7.0688 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #94: GFLOPs: 525.2548. Time: 4.2987 us. Best GFLOPs: 663.3887
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #95: GFLOPs: 681.9693. Time: 3.3109 us. Best GFLOPs: 681.9693
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #96: GFLOPs: 904.6095. Time: 2.4960 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #97: GFLOPs: 520.8053. Time: 4.3354 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #98: GFLOPs: 512.5222. Time: 4.4055 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #99: GFLOPs: 512.5719. Time: 4.4051 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #100: GFLOPs: 513.4039. Time: 4.3979 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #101: GFLOPs: 512.1210. Time: 4.4090 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #102: GFLOPs: 543.0706. Time: 4.1577 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #103: GFLOPs: 513.1750. Time: 4.3999 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #104: GFLOPs: 514.5898. Time: 4.3878 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #105: GFLOPs: 464.5786. Time: 4.8601 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #106: GFLOPs: 497.5136. Time: 4.5384 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #107: GFLOPs: 514.1038. Time: 4.3920 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #108: GFLOPs: 520.7838. Time: 4.3356 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #109: GFLOPs: 469.7468. Time: 4.8067 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #110: GFLOPs: 512.3060. Time: 4.4074 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #111: GFLOPs: 524.1267. Time: 4.3080 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #112: GFLOPs: 543.1603. Time: 4.1570 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #113: GFLOPs: 469.1535. Time: 4.8128 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #114: GFLOPs: 321.2809. Time: 7.0279 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #115: GFLOPs: 468.5012. Time: 4.8195 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #116: GFLOPs: 657.6677. Time: 3.4332 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #117: GFLOPs: 512.6315. Time: 4.4046 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #118: GFLOPs: 528.9087. Time: 4.2690 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #119: GFLOPs: 306.5248. Time: 7.3662 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #120: GFLOPs: 518.7205. Time: 4.3529 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #121: GFLOPs: 511.0234. Time: 4.4184 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #122: GFLOPs: 603.9256. Time: 3.7387 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #123: GFLOPs: 648.0993. Time: 3.4839 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #124: GFLOPs: 322.1268. Time: 7.0094 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #125: GFLOPs: 523.9747. Time: 4.3092 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #126: GFLOPs: 178.9130. Time: 12.6202 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #127: GFLOPs: 150.1146. Time: 15.0413 us. Best GFLOPs: 904.6095
2024-03-21 21:14:42 [INFO] [task_scheduler.cc:131] [Task #22: fused_nn_conv2d_add_nn_relu_14] Trial #128: GFLOPs: 86.8762. Time: 25.9901 us. Best GFLOPs: 904.6095
