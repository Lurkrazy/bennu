2024-03-21 22:20:39 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_conv2d_add_clip_2"
2024-03-21 22:20:39 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(16), T.int64(112), T.int64(112)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(96), T.int64(112), T.int64(112), T.int64(16), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(96), T.int64(112), T.int64(112)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(96), T.int64(112), T.int64(112)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3])
                compute[v_i0, v_i1, v_i2, v_i3] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3], T.float32(6)), T.float32(0))
2024-03-21 22:20:39 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 22:20:39 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(672), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(14336)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(16), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(1792))
                                    v2 = T.axis.spatial(T.int64(112), ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(16), rc_0 * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(224) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(224) // T.int64(16) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(16) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(16), rc_0 * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(8), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(224) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(224) // T.int64(16) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(16) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 1, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 16, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 22:20:39 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(672), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(14336)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(1792))
                                    v2 = T.axis.spatial(T.int64(112), ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(224) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(224) // T.int64(16) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(16) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(8), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(224) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(224) // T.int64(16) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(16) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 1, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 16, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 22:20:39 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(672), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(14336)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(1792))
                                    v2 = T.axis.spatial(T.int64(112), ax0_ax1_ax2_ax3_fused % T.int64(1792) // T.int64(16))
                                    v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + ax0_ax1_ax2_ax3_fused % T.int64(16))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(768)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused // T.int64(8))
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(4), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(224) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(224) // T.int64(16) * T.int64(8) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(16) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(16), rc_0_ry_0_rx_0_fused * T.int64(8) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(8), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(224) * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(224) // T.int64(16) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(16) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 3, 1, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 1, 2, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 16, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 1, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 22:23:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 22:23:45 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 22:23:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 474 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:23:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 960 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:23:46 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2024-03-21 22:23:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 133 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:23:49 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:23:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 94 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:23:52 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:23:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9967  0.9966  0.9963  0.9955  0.9954  0.9949  0.9943  0.9927  0.9925  0.9919  0.9918  0.9901  0.9882  0.9875  0.9875
[17 : 32]:	0.9868  0.9868  0.9861  0.9859  0.9848  0.9847  0.9843  0.9840  0.9837  0.9835  0.9830  0.9826  0.9824  0.9815  0.9815  0.9813
[33 : 48]:	0.9806  0.9806  0.9805  0.9793  0.9792  0.9785  0.9776  0.9776  0.9774  0.9772  0.9769  0.9769  0.9767  0.9751  0.9751  0.9749
[49 : 64]:	0.9745  0.9723  0.9723  0.9722  0.9721  0.9705  0.9699  0.9687  0.9678  0.9673  0.9665  0.9663  0.9658  0.9644  0.9642  0.9637
2024-03-21 22:23:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 22:23:52 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #1: GFLOPs: 262.8226. Time: 160.3661 us. Best GFLOPs: 262.8226
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #2: GFLOPs: 28.5193. Time: 1477.8694 us. Best GFLOPs: 262.8226
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #3: GFLOPs: 166.9538. Time: 252.4521 us. Best GFLOPs: 262.8226
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #4: GFLOPs: 58.5420. Time: 719.9595 us. Best GFLOPs: 262.8226
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #5: GFLOPs: 450.4848. Time: 93.5611 us. Best GFLOPs: 450.4848
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #6: GFLOPs: 95.0809. Time: 443.2838 us. Best GFLOPs: 450.4848
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #7: GFLOPs: 1746.5998. Time: 24.1314 us. Best GFLOPs: 1746.5998
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_add_clip_2] Trial #8: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(12), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(4), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(4) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) * T.int64(4) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused)
                                    v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(112))
                                    v3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(112))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2)
                                        v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused)
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(96))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(4) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(16), rc_0_ry_0_rx_0_fused + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(4)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) * T.int64(4) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 12, 1, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 2, 4, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 28, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115, l116 = sch.split(loop=l113, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l116)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b117 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b117, ann_key="meta_schedule.unroll_explicit")
b118, b119, b120, b121 = sch.get_child_blocks(b117)
l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b118)
l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b119)
l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l135, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l135, ann_key="pragma_unroll_explicit", ann_val=1)
l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b121)
b160 = sch.get_block(name="conv2d_nchw", func_name="main")
l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177, l178 = sch.get_loops(block=b160)
b179 = sch.decompose_reduction(block=b160, loop=l164)
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #9: GFLOPs: 179.2966. Time: 235.0733 us. Best GFLOPs: 1746.5998
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #10: GFLOPs: 22.8291. Time: 1846.2320 us. Best GFLOPs: 1746.5998
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #11: GFLOPs: 1105.3726. Time: 38.1300 us. Best GFLOPs: 1746.5998
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #12: GFLOPs: 727.9589. Time: 57.8987 us. Best GFLOPs: 1746.5998
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #13: GFLOPs: 45.6171. Time: 923.9487 us. Best GFLOPs: 1746.5998
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #14: GFLOPs: 326.4157. Time: 129.1232 us. Best GFLOPs: 1746.5998
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #15: GFLOPs: 249.8887. Time: 168.6665 us. Best GFLOPs: 1746.5998
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #16: GFLOPs: 779.6908. Time: 54.0571 us. Best GFLOPs: 1746.5998
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #17: GFLOPs: 133.5297. Time: 315.6440 us. Best GFLOPs: 1746.5998
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #18: GFLOPs: 2701.0805. Time: 15.6041 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #19: GFLOPs: 110.7107. Time: 380.7023 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_add_clip_2] Trial #20: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(8) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(7) * T.int64(28) + yy_3_init * T.int64(28) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(16), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3136))
                                        v2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3136) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6272))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(16), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(252) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(192))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(28), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(7) * T.int64(28) + yy_3 * T.int64(28) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(16), rc_0 * T.int64(2) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(8) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(7) * T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 4, 3, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 28])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 2, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 2, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119, l120 = sch.split(loop=l117, factors=[None, 84, 3], preserve_unit_iters=True)
sch.vectorize(loop=l120)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b121 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b121, ann_key="meta_schedule.unroll_explicit")
b122, b123, b124, b125 = sch.get_child_blocks(b121)
l126, l127, l128, l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b122)
l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b123)
l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l144, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l144, ann_key="pragma_unroll_explicit", ann_val=1)
l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b125)
b171 = sch.get_block(name="conv2d_nchw", func_name="main")
l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190, l191 = sch.get_loops(block=b171)
b192 = sch.decompose_reduction(block=b171, loop=l175)
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #21: GFLOPs: 740.8012. Time: 56.8949 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #22: GFLOPs: 23.9326. Time: 1761.1034 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #23: GFLOPs: 1742.0810. Time: 24.1940 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #24: GFLOPs: 812.7677. Time: 51.8572 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #25: GFLOPs: 127.7017. Time: 330.0490 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #26: GFLOPs: 2377.3806. Time: 17.7287 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #27: GFLOPs: 811.8307. Time: 51.9170 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #28: GFLOPs: 1205.2727. Time: 34.9695 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #29: GFLOPs: 86.0252. Time: 489.9475 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #30: GFLOPs: 123.3810. Time: 341.6071 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #31: GFLOPs: 124.4301. Time: 338.7269 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #32: GFLOPs: 2439.5953. Time: 17.2766 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_add_clip_2] Trial #33: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(28), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(32) + ff_3_init * T.int64(8) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(7) * T.int64(28) + yy_3_init * T.int64(28) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(19)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("pad_temp_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(16), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3136))
                                        v2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3136) // T.int64(28))
                                        v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6272))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(96), (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(16), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 < T.int64(192))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(28), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(32) + ff_3 * T.int64(8) + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(7) * T.int64(28) + yy_3 * T.int64(28) + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(16), rc_0 * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(28), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_2_ff_2_yy_2_xx_2_fused // T.int64(28) * T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_2_ff_2_yy_2_xx_2_fused % T.int64(28) // T.int64(7) * T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 3, 4, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 4, 1, 28])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 2, 7, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[8, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106, l107 = sch.get_loops(block=b74)
l108, l109, l110 = sch.split(loop=l107, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l110)
sch.bind(loop=l109, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l111, l112, l113, l114, l115, l116, l117 = sch.get_loops(block=b87)
l118, l119 = sch.split(loop=l117, factors=[None, 84], preserve_unit_iters=True)
sch.bind(loop=l119, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b122)
l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l142, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l142, ann_key="pragma_unroll_explicit", ann_val=1)
l162, l163, l164, l165, l166, l167, l168 = sch.get_loops(block=b124)
b169 = sch.get_block(name="conv2d_nchw", func_name="main")
l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b169)
b190 = sch.decompose_reduction(block=b169, loop=l173)
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #34: GFLOPs: 1861.7548. Time: 22.6388 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #35: GFLOPs: 979.8337. Time: 43.0153 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #36: GFLOPs: 100.4414. Time: 419.6261 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #37: GFLOPs: 2485.4942. Time: 16.9575 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #38: GFLOPs: 2294.6105. Time: 18.3682 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #39: GFLOPs: 2624.1617. Time: 16.0614 us. Best GFLOPs: 2701.0805
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #40: GFLOPs: 2724.9908. Time: 15.4671 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #41: GFLOPs: 2465.8698. Time: 17.0925 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #42: GFLOPs: 2535.0680. Time: 16.6259 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #43: GFLOPs: 1500.9894. Time: 28.0800 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #44: GFLOPs: 154.8812. Time: 272.1301 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #45: GFLOPs: 403.0212. Time: 104.5797 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #46: GFLOPs: 10.5645. Time: 3989.5826 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #47: GFLOPs: 498.7883. Time: 84.5005 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #48: GFLOPs: 2476.7556. Time: 17.0174 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #49: GFLOPs: 2424.9541. Time: 17.3809 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #50: GFLOPs: 701.8001. Time: 60.0568 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #51: GFLOPs: 262.5744. Time: 160.5177 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #52: GFLOPs: 2568.0158. Time: 16.4126 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #53: GFLOPs: 1229.9815. Time: 34.2671 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #54: GFLOPs: 300.3708. Time: 140.3194 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #55: GFLOPs: 2015.7529. Time: 20.9092 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_add_clip_2] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(96), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(96), T.int64(112), T.int64(112)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(16), T.int64(112), T.int64(112)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(96), T.int64(16), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(392), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(196) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(196) // T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(8) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(16), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(66)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused)
                                    v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) // T.int64(112))
                                    v3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1) % T.int64(112))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1 < T.int64(3136))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(96), ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1)
                                    v1 = T.axis.spatial(T.int64(16), rc_0_ry_0_rx_0_fused)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(196) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(196) // T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(8) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(16), rc_0_ry_0_rx_0_fused + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(8)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(96), nn_1_ff_1_yy_1_xx_1_fused // T.int64(196) * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(196) // T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(16) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(8) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 24, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 28, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 2, 4, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[16, 1, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115 = sch.split(loop=l113, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b116 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b116, ann_key="meta_schedule.unroll_explicit")
b117, b118, b119, b120 = sch.get_child_blocks(b116)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b117)
l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b118)
l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b119)
sch.annotate(block_or_loop=l133, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l133, ann_key="pragma_unroll_explicit", ann_val=1)
l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b120)
b158 = sch.get_block(name="conv2d_nchw", func_name="main")
l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176 = sch.get_loops(block=b158)
b177 = sch.decompose_reduction(block=b158, loop=l162)
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #57: GFLOPs: 175.0020. Time: 240.8420 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #58: GFLOPs: 1654.0374. Time: 25.4818 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #59: GFLOPs: 222.9914. Time: 189.0110 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #60: GFLOPs: 536.7331. Time: 78.5266 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #61: GFLOPs: 81.4958. Time: 517.1781 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #62: GFLOPs: 235.1136. Time: 179.2659 us. Best GFLOPs: 2724.9908
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #63: GFLOPs: 675.8364. Time: 62.3640 us. Best GFLOPs: 2724.9908
2024-03-21 22:58:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 22:58:49 [INFO] [evolutionary_search.cc:715] Picked top 59 candidate(s) from database
2024-03-21 22:58:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 431 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:58:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 859 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:58:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 1288 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:58:51 [INFO] [evolutionary_search.cc:723] Sampled 71 candidate(s)
2024-03-21 22:58:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 84 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:58:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:58:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:58:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 74 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 22:59:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.4181  1.3738  1.3718  1.3683  1.3477  1.3256  1.3072  1.2806  1.2741  1.2402  1.2196  1.0721  1.0263  1.0262  1.0262  1.0176
[17 : 32]:	1.0173  1.0166  1.0166  1.0143  1.0099  1.0028  1.0000  0.9974  0.9971  0.9970  0.9966  0.9952  0.9945  0.9945  0.9945  0.9932
[33 : 48]:	0.9932  0.9931  0.9924  0.9924  0.9921  0.9917  0.9915  0.9896  0.9879  0.9877  0.9864  0.9860  0.9851  0.9845  0.9843  0.9824
[49 : 64]:	0.9824  0.9822  0.9805  0.9790  0.9789  0.9788  0.9786  0.9783  0.9720  0.9716  0.9715  0.9675  0.9675  0.9667  0.9657  0.9651
2024-03-21 22:59:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 22:59:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #64: GFLOPs: 441.2269. Time: 95.5242 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #65: GFLOPs: 194.4895. Time: 216.7101 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #66: GFLOPs: 553.5615. Time: 76.1394 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #67: GFLOPs: 563.2816. Time: 74.8255 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #68: GFLOPs: 529.7497. Time: 79.5618 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #69: GFLOPs: 353.6191. Time: 119.1899 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #70: GFLOPs: 543.8288. Time: 77.5020 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #71: GFLOPs: 550.8676. Time: 76.5117 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #72: GFLOPs: 525.4681. Time: 80.2101 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #73: GFLOPs: 570.9125. Time: 73.8254 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #74: GFLOPs: 525.5468. Time: 80.1981 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #75: GFLOPs: 2407.7468. Time: 17.5051 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #76: GFLOPs: 2687.6541. Time: 15.6820 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #77: GFLOPs: 2694.0960. Time: 15.6445 us. Best GFLOPs: 2724.9908
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #78: GFLOPs: 2739.5089. Time: 15.3852 us. Best GFLOPs: 2739.5089
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #79: GFLOPs: 3451.7964. Time: 12.2104 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #80: GFLOPs: 2755.8589. Time: 15.2939 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #81: GFLOPs: 2371.4387. Time: 17.7731 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #82: GFLOPs: 2403.9118. Time: 17.5330 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #83: GFLOPs: 3389.0366. Time: 12.4365 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #84: GFLOPs: 2693.1717. Time: 15.6499 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #85: GFLOPs: 2696.9462. Time: 15.6280 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #86: GFLOPs: 2667.4101. Time: 15.8010 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #87: GFLOPs: 3445.5661. Time: 12.2325 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #88: GFLOPs: 2722.9296. Time: 15.4789 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #89: GFLOPs: 2411.5646. Time: 17.4774 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #90: GFLOPs: 2574.8597. Time: 16.3690 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #91: GFLOPs: 2692.2822. Time: 15.6551 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #92: GFLOPs: 2560.6160. Time: 16.4600 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #93: GFLOPs: 2877.7094. Time: 14.6463 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #94: GFLOPs: 2875.3289. Time: 14.6584 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #95: GFLOPs: 2325.0125. Time: 18.1280 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #96: GFLOPs: 2325.1677. Time: 18.1268 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #97: GFLOPs: 2692.3888. Time: 15.6544 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #98: GFLOPs: 2424.7996. Time: 17.3820 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #99: GFLOPs: 2677.5794. Time: 15.7410 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #100: GFLOPs: 2686.0878. Time: 15.6912 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #101: GFLOPs: 2683.5173. Time: 15.7062 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #102: GFLOPs: 2694.4721. Time: 15.6423 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #103: GFLOPs: 1444.6111. Time: 29.1759 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #104: GFLOPs: 2683.4977. Time: 15.7063 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #105: GFLOPs: 2693.5386. Time: 15.6478 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #106: GFLOPs: 2722.0177. Time: 15.4840 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #107: GFLOPs: 2615.3968. Time: 16.1153 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #108: GFLOPs: 3339.1350. Time: 12.6224 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #109: GFLOPs: 2949.3662. Time: 14.2905 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #110: GFLOPs: 2822.9674. Time: 14.9303 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #111: GFLOPs: 2949.2289. Time: 14.2911 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #112: GFLOPs: 2952.0469. Time: 14.2775 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #113: GFLOPs: 2822.6113. Time: 14.9322 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #114: GFLOPs: 3017.2127. Time: 13.9691 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #115: GFLOPs: 2768.6923. Time: 15.2230 us. Best GFLOPs: 3451.7964
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #116: GFLOPs: 4467.2988. Time: 9.4347 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #117: GFLOPs: 2357.5621. Time: 17.8777 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #118: GFLOPs: 2948.8299. Time: 14.2931 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #119: GFLOPs: 2341.5096. Time: 18.0003 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #120: GFLOPs: 2775.2862. Time: 15.1868 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #121: GFLOPs: 4285.0413. Time: 9.8360 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #122: GFLOPs: 2558.6084. Time: 16.4730 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #123: GFLOPs: 2496.7432. Time: 16.8811 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #124: GFLOPs: 4216.0278. Time: 9.9970 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #125: GFLOPs: 1499.2098. Time: 28.1134 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #126: GFLOPs: 1.4592. Time: 28884.7350 us. Best GFLOPs: 4467.2988
2024-03-21 22:59:59 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #127: GFLOPs: 197.5062. Time: 213.4001 us. Best GFLOPs: 4467.2988
2024-03-21 23:41:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 23:41:46 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 23:41:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 381 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 23:41:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 764 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 23:41:47 [INFO] [evolutionary_search.cc:723] Sampled 56 candidate(s)
2024-03-21 23:41:49 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 23:41:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 74 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 23:41:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 61 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 23:41:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-21 23:41:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9830  0.9640  0.9599  0.9465  0.9452  0.9414  0.9350  0.9284  0.9279  0.9277  0.9275  0.9233  0.9233  0.9228  0.9193  0.9112
[17 : 32]:	0.9094  0.9071  0.9056  0.9047  0.9046  0.8989  0.8842  0.8838  0.8806  0.8773  0.8769  0.8762  0.8735  0.8716  0.8647  0.8631
[33 : 48]:	0.8613  0.8598  0.8589  0.8574  0.8567  0.8541  0.8496  0.8489  0.8485  0.8397  0.8353  0.8328  0.8275  0.8262  0.8200  0.8153
[49 : 64]:	0.8141  0.8127  0.8122  0.8102  0.8075  0.8059  0.8054  0.8016  0.7983  0.7982  0.7902  0.7868  0.7867  0.7853  0.7821  0.7821
2024-03-21 23:41:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 23:41:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #128: GFLOPs: 3855.1529. Time: 10.9329 us. Best GFLOPs: 4467.2988
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #129: GFLOPs: 4742.3458. Time: 8.8876 us. Best GFLOPs: 4742.3458
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #130: GFLOPs: 4712.3521. Time: 8.9441 us. Best GFLOPs: 4742.3458
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #131: GFLOPs: 4531.8780. Time: 9.3003 us. Best GFLOPs: 4742.3458
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #132: GFLOPs: 4357.3069. Time: 9.6729 us. Best GFLOPs: 4742.3458
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #133: GFLOPs: 5109.0598. Time: 8.2496 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #134: GFLOPs: 1398.5742. Time: 30.1363 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #135: GFLOPs: 2638.7163. Time: 15.9729 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #136: GFLOPs: 4570.0924. Time: 9.2225 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #137: GFLOPs: 4257.0095. Time: 9.9008 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #138: GFLOPs: 4262.4148. Time: 9.8883 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #139: GFLOPs: 4335.3118. Time: 9.7220 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #140: GFLOPs: 4335.0143. Time: 9.7227 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #141: GFLOPs: 4483.5516. Time: 9.4005 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #142: GFLOPs: 4657.6445. Time: 9.0492 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #143: GFLOPs: 4437.6532. Time: 9.4978 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #144: GFLOPs: 2756.6612. Time: 15.2895 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #145: GFLOPs: 4202.9271. Time: 10.0282 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #146: GFLOPs: 1389.7918. Time: 30.3267 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #147: GFLOPs: 4317.4882. Time: 9.7621 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #148: GFLOPs: 4578.1302. Time: 9.2063 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #149: GFLOPs: 1375.1450. Time: 30.6497 us. Best GFLOPs: 5109.0598
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #150: GFLOPs: 5534.3194. Time: 7.6157 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #151: GFLOPs: 2963.6764. Time: 14.2215 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #152: GFLOPs: 4901.9301. Time: 8.5982 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #153: GFLOPs: 4531.2644. Time: 9.3016 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #154: GFLOPs: 1369.8270. Time: 30.7687 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #155: GFLOPs: 4537.4381. Time: 9.2889 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #156: GFLOPs: 4632.4239. Time: 9.0984 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #157: GFLOPs: 1362.1590. Time: 30.9419 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #158: GFLOPs: 1367.2440. Time: 30.8269 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #159: GFLOPs: 3835.5332. Time: 10.9888 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #160: GFLOPs: 1742.7663. Time: 24.1844 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #161: GFLOPs: 1431.1548. Time: 29.4502 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #162: GFLOPs: 2254.3501. Time: 18.6962 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #163: GFLOPs: 2357.4265. Time: 17.8788 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #164: GFLOPs: 4171.6483. Time: 10.1034 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #165: GFLOPs: 1740.4328. Time: 24.2169 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #166: GFLOPs: 211.3196. Time: 199.4507 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #167: GFLOPs: 3900.2314. Time: 10.8065 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #168: GFLOPs: 3723.9711. Time: 11.3180 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #169: GFLOPs: 2944.1379. Time: 14.3159 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #170: GFLOPs: 4654.7066. Time: 9.0549 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #171: GFLOPs: 4235.9224. Time: 9.9501 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #172: GFLOPs: 2953.4779. Time: 14.2706 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #173: GFLOPs: 2852.8157. Time: 14.7741 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #174: GFLOPs: 2994.3337. Time: 14.0759 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #175: GFLOPs: 2938.6499. Time: 14.3426 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #176: GFLOPs: 2392.4759. Time: 17.6168 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #177: GFLOPs: 2349.9653. Time: 17.9355 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #178: GFLOPs: 2287.9512. Time: 18.4217 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #179: GFLOPs: 4413.4380. Time: 9.5499 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #180: GFLOPs: 1381.3026. Time: 30.5131 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #181: GFLOPs: 4357.8472. Time: 9.6717 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #182: GFLOPs: 4364.0104. Time: 9.6581 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #183: GFLOPs: 4251.7851. Time: 9.9130 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #184: GFLOPs: 4295.8943. Time: 9.8112 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #185: GFLOPs: 3800.7281. Time: 11.0894 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #186: GFLOPs: 2879.6062. Time: 14.6367 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #187: GFLOPs: 2335.7719. Time: 18.0445 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #188: GFLOPs: 4559.8073. Time: 9.2433 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #189: GFLOPs: 1054.3855. Time: 39.9738 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #190: GFLOPs: 80.4267. Time: 524.0528 us. Best GFLOPs: 5534.3194
2024-03-21 23:42:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #191: GFLOPs: 177.6345. Time: 237.2728 us. Best GFLOPs: 5534.3194
2024-03-22 00:26:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 00:26:07 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-22 00:26:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 374 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:26:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 761 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:26:09 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2024-03-22 00:26:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:26:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:26:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:26:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 90 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:26:18 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0009  0.9996  0.9993  0.9969  0.9953  0.9912  0.9909  0.9904  0.9899  0.9872  0.9831  0.9297  0.9294  0.9293  0.9190  0.9186
[17 : 32]:	0.9104  0.9094  0.9067  0.8929  0.8781  0.8659  0.8612  0.8603  0.8595  0.8585  0.8582  0.8566  0.8548  0.8527  0.8522  0.8518
[33 : 48]:	0.8517  0.8499  0.8497  0.8496  0.8452  0.8425  0.8413  0.8411  0.8388  0.8384  0.8364  0.8363  0.8362  0.8348  0.8345  0.8333
[49 : 64]:	0.8331  0.8326  0.8325  0.8320  0.8318  0.8314  0.8304  0.8300  0.8296  0.8290  0.8289  0.8277  0.8259  0.8256  0.8249  0.8241
2024-03-22 00:26:18 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 00:26:18 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #192: GFLOPs: 5152.4518. Time: 8.1802 us. Best GFLOPs: 5534.3194
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #193: GFLOPs: 5459.3950. Time: 7.7202 us. Best GFLOPs: 5534.3194
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #194: GFLOPs: 5554.3167. Time: 7.5883 us. Best GFLOPs: 5554.3167
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #195: GFLOPs: 5533.7478. Time: 7.6165 us. Best GFLOPs: 5554.3167
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #196: GFLOPs: 5424.0546. Time: 7.7705 us. Best GFLOPs: 5554.3167
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #197: GFLOPs: 5467.6109. Time: 7.7086 us. Best GFLOPs: 5554.3167
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #198: GFLOPs: 5564.8116. Time: 7.5740 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #199: GFLOPs: 5529.8779. Time: 7.6218 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #200: GFLOPs: 5475.2949. Time: 7.6978 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #201: GFLOPs: 5520.1207. Time: 7.6353 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #202: GFLOPs: 5362.7298. Time: 7.8594 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #203: GFLOPs: 5500.0665. Time: 7.6632 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #204: GFLOPs: 5467.2787. Time: 7.7091 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #205: GFLOPs: 5421.1019. Time: 7.7748 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #206: GFLOPs: 5482.9678. Time: 7.6870 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #207: GFLOPs: 5384.5401. Time: 7.8276 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #208: GFLOPs: 5544.7320. Time: 7.6014 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #209: GFLOPs: 5420.6524. Time: 7.7754 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #210: GFLOPs: 5443.2800. Time: 7.7431 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #211: GFLOPs: 5377.0591. Time: 7.8385 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #212: GFLOPs: 4805.7188. Time: 8.7704 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #213: GFLOPs: 4046.1896. Time: 10.4167 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #214: GFLOPs: 5037.8018. Time: 8.3663 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #215: GFLOPs: 4235.0153. Time: 9.9522 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #216: GFLOPs: 4324.9930. Time: 9.7452 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #217: GFLOPs: 5503.4341. Time: 7.6585 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #218: GFLOPs: 4551.8238. Time: 9.2596 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #219: GFLOPs: 5077.6107. Time: 8.3007 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #220: GFLOPs: 4923.4816. Time: 8.5606 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #221: GFLOPs: 4435.1302. Time: 9.5032 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #222: GFLOPs: 4280.3498. Time: 9.8468 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #223: GFLOPs: 4668.9243. Time: 9.0273 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #224: GFLOPs: 4371.6939. Time: 9.6411 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #225: GFLOPs: 4735.2266. Time: 8.9009 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #226: GFLOPs: 5504.0801. Time: 7.6576 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #227: GFLOPs: 4712.9290. Time: 8.9430 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #228: GFLOPs: 4986.6808. Time: 8.4521 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #229: GFLOPs: 4384.1040. Time: 9.6138 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #230: GFLOPs: 2517.2820. Time: 16.7434 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #231: GFLOPs: 4516.9543. Time: 9.3310 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #232: GFLOPs: 4928.0089. Time: 8.5527 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #233: GFLOPs: 4798.7337. Time: 8.7831 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #234: GFLOPs: 4356.0628. Time: 9.6757 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #235: GFLOPs: 4579.2383. Time: 9.2041 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #236: GFLOPs: 4204.9299. Time: 10.0234 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #237: GFLOPs: 4552.4636. Time: 9.2582 us. Best GFLOPs: 5564.8116
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #238: GFLOPs: 5787.7815. Time: 7.2822 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #239: GFLOPs: 4578.8069. Time: 9.2050 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #240: GFLOPs: 4424.8816. Time: 9.5252 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #241: GFLOPs: 4434.5679. Time: 9.5044 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #242: GFLOPs: 4541.9380. Time: 9.2797 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #243: GFLOPs: 4541.9390. Time: 9.2797 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #244: GFLOPs: 4350.0822. Time: 9.6890 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #245: GFLOPs: 4604.6658. Time: 9.1533 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #246: GFLOPs: 4561.2380. Time: 9.2404 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #247: GFLOPs: 4034.5291. Time: 10.4468 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #248: GFLOPs: 4530.6341. Time: 9.3029 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #249: GFLOPs: 4580.8066. Time: 9.2010 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #250: GFLOPs: 4550.4594. Time: 9.2623 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #251: GFLOPs: 4636.0893. Time: 9.0912 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #252: GFLOPs: 4493.4936. Time: 9.3797 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #253: GFLOPs: 570.7923. Time: 73.8409 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #254: GFLOPs: 2424.2896. Time: 17.3856 us. Best GFLOPs: 5787.7815
2024-03-22 00:27:04 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #255: GFLOPs: 2358.9361. Time: 17.8673 us. Best GFLOPs: 5787.7815
2024-03-22 00:28:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 00:28:11 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-22 00:28:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 376 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:28:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 752 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:28:12 [INFO] [evolutionary_search.cc:723] Sampled 68 candidate(s)
2024-03-22 00:28:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:28:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:28:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:28:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785ae2df8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e99e38)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e91c58)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff7849c7ec8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785bbfa08)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e60798)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e910c8)]: 0 failure(s)
2024-03-22 00:28:21 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0012  1.0012  0.9942  0.9918  0.9876  0.9868  0.9816  0.9811  0.9756  0.9715  0.9703  0.9692  0.9686  0.9669  0.9655  0.9648
[17 : 32]:	0.9634  0.9625  0.9622  0.9619  0.9609  0.9601  0.9588  0.9585  0.9585  0.9584  0.9583  0.9578  0.9554  0.9550  0.9548  0.9546
[33 : 48]:	0.9543  0.9531  0.9525  0.9522  0.9518  0.9467  0.9466  0.9455  0.9451  0.9445  0.9435  0.9422  0.9415  0.9414  0.9406  0.9406
[49 : 64]:	0.9402  0.9398  0.9385  0.9375  0.9351  0.9345  0.9340  0.9329  0.9329  0.9325  0.9324  0.9323  0.9319  0.9318  0.9314  0.9305
2024-03-22 00:28:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 00:28:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #256: GFLOPs: 535.8867. Time: 78.6506 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #257: GFLOPs: 5675.2406. Time: 7.4266 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #258: GFLOPs: 4558.7907. Time: 9.2454 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #259: GFLOPs: 4865.0428. Time: 8.6634 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #260: GFLOPs: 5640.8097. Time: 7.4719 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #261: GFLOPs: 5664.4398. Time: 7.4408 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #262: GFLOPs: 5683.8776. Time: 7.4153 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #263: GFLOPs: 4520.6761. Time: 9.3233 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #264: GFLOPs: 237.5058. Time: 177.4602 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #265: GFLOPs: 1832.1094. Time: 23.0051 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #266: GFLOPs: 3606.4544. Time: 11.6868 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #267: GFLOPs: 4888.2290. Time: 8.6223 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #268: GFLOPs: 4460.7925. Time: 9.4485 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #269: GFLOPs: 5511.6574. Time: 7.6470 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #270: GFLOPs: 5591.9281. Time: 7.5373 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #271: GFLOPs: 5520.1392. Time: 7.6353 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #272: GFLOPs: 5521.2088. Time: 7.6338 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #273: GFLOPs: 5511.0623. Time: 7.6479 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #274: GFLOPs: 5486.9334. Time: 7.6815 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #275: GFLOPs: 5473.2598. Time: 7.7007 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #276: GFLOPs: 5603.5662. Time: 7.5216 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #277: GFLOPs: 5166.0025. Time: 8.1587 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #278: GFLOPs: 5497.8703. Time: 7.6662 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #279: GFLOPs: 5542.0025. Time: 7.6052 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #280: GFLOPs: 5540.6112. Time: 7.6071 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #281: GFLOPs: 237.5897. Time: 177.3976 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #282: GFLOPs: 5566.7503. Time: 7.5714 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #283: GFLOPs: 5603.3252. Time: 7.5219 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #284: GFLOPs: 5721.2759. Time: 7.3669 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #285: GFLOPs: 5440.1267. Time: 7.7476 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #286: GFLOPs: 4890.2057. Time: 8.6188 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #287: GFLOPs: 3693.0316. Time: 11.4128 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #288: GFLOPs: 5513.7081. Time: 7.6442 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #289: GFLOPs: 5591.6171. Time: 7.5377 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #290: GFLOPs: 5573.6132. Time: 7.5620 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #291: GFLOPs: 5498.9983. Time: 7.6646 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #292: GFLOPs: 5550.2880. Time: 7.5938 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #293: GFLOPs: 5422.8047. Time: 7.7723 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #294: GFLOPs: 530.1939. Time: 79.4951 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #295: GFLOPs: 5367.7479. Time: 7.8521 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #296: GFLOPs: 5530.9513. Time: 7.6204 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #297: GFLOPs: 4764.7789. Time: 8.8457 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #298: GFLOPs: 5361.6484. Time: 7.8610 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #299: GFLOPs: 5453.3941. Time: 7.7287 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #300: GFLOPs: 3698.9167. Time: 11.3946 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #301: GFLOPs: 5377.3080. Time: 7.8381 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #302: GFLOPs: 5376.0696. Time: 7.8399 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #303: GFLOPs: 1769.4832. Time: 23.8193 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #304: GFLOPs: 5400.3868. Time: 7.8046 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #305: GFLOPs: 5378.0192. Time: 7.8371 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #306: GFLOPs: 5033.5836. Time: 8.3733 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #307: GFLOPs: 5467.6744. Time: 7.7085 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #308: GFLOPs: 5351.1655. Time: 7.8764 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #309: GFLOPs: 5523.8676. Time: 7.6301 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #310: GFLOPs: 5374.1294. Time: 7.8427 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #311: GFLOPs: 5375.2072. Time: 7.8412 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #312: GFLOPs: 5375.2072. Time: 7.8412 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #313: GFLOPs: 3640.9590. Time: 11.5760 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #314: GFLOPs: 5390.7283. Time: 7.8186 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #315: GFLOPs: 5513.4613. Time: 7.6445 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #316: GFLOPs: 5411.2576. Time: 7.7889 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #317: GFLOPs: 2604.0172. Time: 16.1857 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #318: GFLOPs: 103.9521. Time: 405.4542 us. Best GFLOPs: 5787.7815
2024-03-22 00:29:11 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_add_clip_2] Trial #319: GFLOPs: 130.2439. Time: 323.6070 us. Best GFLOPs: 5787.7815
