2024-03-20 22:52:36 [INFO] [task_scheduler.cc:160] Initializing Task #97: "fused_nn_conv2d_add_nn_relu_47"
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(100352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(256), rc_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(128) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 2, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 16, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(100352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(128) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(128) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 2, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 16, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(100352)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(128) + ax0_ax1_ax2_ax3_fused // T.int64(784))
                                    v2 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(784) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(128) + ax0_ax1_ax2_ax3_fused % T.int64(128))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4), T.int64(7), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(128) + rc_1 * T.int64(8) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(8) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(28), ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 2, 2, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 1, 7, 4])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 16, 8])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 23:43:32 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-20 23:43:32 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-20 23:43:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a3762178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a58a6788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a44393f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a59356e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a1d51f58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4d17318)]: 478 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a58a6688)]: 0 failure(s)
2024-03-20 23:43:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a3762178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a58a6788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a44393f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a59356e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a1d51f58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4d17318)]: 962 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a58a6688)]: 0 failure(s)
2024-03-20 23:43:33 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2024-03-20 23:43:35 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a3762178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a58a6788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a44393f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a59356e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a1d51f58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4d17318)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a58a6688)]: 0 failure(s)
2024-03-20 23:43:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a3762178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a58a6788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a44393f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a59356e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a1d51f58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4d17318)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a58a6688)]: 0 failure(s)
2024-03-20 23:43:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a3762178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a58a6788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a44393f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a59356e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a1d51f58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4d17318)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a58a6688)]: 0 failure(s)
2024-03-20 23:43:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a3762178)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a58a6788)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a44393f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a59356e8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a1d51f58)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a4d17318)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a58a6688)]: 0 failure(s)
2024-03-20 23:43:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9990  0.9990  0.9989  0.9985  0.9957  0.9948  0.9946  0.9946  0.9944  0.9944  0.9941  0.9934  0.9928  0.9926  0.9901
[17 : 32]:	0.9894  0.9893  0.9888  0.9866  0.9866  0.9861  0.9852  0.9847  0.9839  0.9837  0.9824  0.9809  0.9798  0.9790  0.9780  0.9773
[33 : 48]:	0.9770  0.9764  0.9760  0.9751  0.9743  0.9735  0.9734  0.9726  0.9724  0.9719  0.9714  0.9703  0.9698  0.9692  0.9688  0.9686
[49 : 64]:	0.9668  0.9663  0.9650  0.9649  0.9633  0.9624  0.9623  0.9622  0.9600  0.9598  0.9597  0.9579  0.9577  0.9573  0.9569  0.9568
2024-03-20 23:43:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-20 23:43:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #1: GFLOPs: 458.2793. Time: 112.5535 us. Best GFLOPs: 458.2793
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #2: GFLOPs: 4563.5357. Time: 11.3028 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #3: GFLOPs: 342.4399. Time: 150.6277 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #4: GFLOPs: 1061.0927. Time: 48.6111 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #5: GFLOPs: 39.8832. Time: 1293.2989 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #6: GFLOPs: 40.3565. Time: 1278.1331 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #7: GFLOPs: 293.3194. Time: 175.8524 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #8: GFLOPs: 76.6893. Time: 672.5962 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #9: GFLOPs: 3013.9500. Time: 17.1141 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #10: GFLOPs: 351.0277. Time: 146.9426 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #11: GFLOPs: 822.8703. Time: 62.6842 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #12: GFLOPs: 2609.4314. Time: 19.7671 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #13: GFLOPs: 64.1041. Time: 804.6428 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #14: GFLOPs: 151.9778. Time: 339.3977 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #15: GFLOPs: 1383.5763. Time: 37.2809 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #16: GFLOPs: 28.3000. Time: 1822.6456 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #17: GFLOPs: 1284.8109. Time: 40.1467 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #18: GFLOPs: 550.8972. Time: 93.6308 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #19: GFLOPs: 1160.7056. Time: 44.4393 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #20: GFLOPs: 186.9381. Time: 275.9251 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #21: GFLOPs: 663.1507. Time: 77.7816 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #22: GFLOPs: 20.9928. Time: 2457.0755 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #23: GFLOPs: 8.0286. Time: 6424.6401 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #24: GFLOPs: 797.2173. Time: 64.7012 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #25: GFLOPs: 1016.1648. Time: 50.7604 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #26: GFLOPs: 1053.4467. Time: 48.9640 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #27: GFLOPs: 336.7718. Time: 153.1629 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #28: GFLOPs: 130.1850. Time: 396.2125 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #29: GFLOPs: 35.0718. Time: 1470.7246 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #30: GFLOPs: 353.5013. Time: 145.9144 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #31: GFLOPs: 56.5550. Time: 912.0489 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #32: GFLOPs: 387.0862. Time: 133.2544 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #33: GFLOPs: 14.0198. Time: 3679.1589 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #34: GFLOPs: 331.9147. Time: 155.4041 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #35: GFLOPs: 404.2412. Time: 127.5994 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #36: GFLOPs: 441.2216. Time: 116.9048 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #37: GFLOPs: 458.0945. Time: 112.5989 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #38: GFLOPs: 42.6059. Time: 1210.6517 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #39: GFLOPs: 462.2289. Time: 111.5918 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #40: GFLOPs: 1431.9001. Time: 36.0227 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #41: GFLOPs: 1069.6144. Time: 48.2239 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #42: GFLOPs: 13.5368. Time: 3810.4177 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #43: GFLOPs: 340.1711. Time: 151.6323 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #44: GFLOPs: 625.0602. Time: 82.5215 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #45: GFLOPs: 17.1973. Time: 2999.3562 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #46: GFLOPs: 277.5290. Time: 185.8578 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #47: GFLOPs: 350.2630. Time: 147.2634 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #48: GFLOPs: 3076.8782. Time: 16.7640 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #49: GFLOPs: 337.7264. Time: 152.7299 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #50: GFLOPs: 2557.0558. Time: 20.1720 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #51: GFLOPs: 48.6468. Time: 1060.3143 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #52: GFLOPs: 64.9416. Time: 794.2664 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #53: GFLOPs: 442.8909. Time: 116.4642 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #54: GFLOPs: 1245.7026. Time: 41.4071 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #55: GFLOPs: 166.0288. Time: 310.6745 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #56: GFLOPs: 312.3735. Time: 165.1258 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #57: GFLOPs: 656.8627. Time: 78.5262 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #58: GFLOPs: 273.8465. Time: 188.3571 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #59: GFLOPs: 381.6475. Time: 135.1533 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #60: GFLOPs: 72.8552. Time: 707.9927 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #61: GFLOPs: 55.1800. Time: 934.7756 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #62: GFLOPs: 613.8939. Time: 84.0225 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #63: GFLOPs: 1123.6741. Time: 45.9038 us. Best GFLOPs: 4563.5357
2024-03-21 00:12:44 [INFO] [task_scheduler.cc:131] [Task #97: fused_nn_conv2d_add_nn_relu_47] Trial #64: GFLOPs: 2443.5898. Time: 21.1087 us. Best GFLOPs: 4563.5357
