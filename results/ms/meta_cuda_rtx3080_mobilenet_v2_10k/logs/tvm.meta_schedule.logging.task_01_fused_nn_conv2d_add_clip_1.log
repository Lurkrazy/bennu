2024-03-21 22:20:39 [INFO] [task_scheduler.cc:160] Initializing Task #1: "fused_nn_conv2d_add_clip_1"
2024-03-21 22:20:39 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(32), T.int64(114), T.int64(114)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112)):
            with T.block("compute"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(T_add[v_i0, v_i1, v_i2, v_i3])
                T.writes(compute[v_i0, v_i1, v_i2, v_i3])
                compute[v_i0, v_i1, v_i2, v_i3] = T.max(T.min(T_add[v_i0, v_i1, v_i2, v_i3], T.float32(6)), T.float32(0))
2024-03-21 22:20:39 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 22:20:39 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12768)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(3192))
                                    v2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(3192) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(114), dj_0 + b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), dj_0)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + b_1_c_1_i_1_j_1_fused // T.int64(112) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(112) // T.int64(14) * T.int64(14) + i_3 * T.int64(14) + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + b_1_c_1_i_1_j_1_fused // T.int64(112) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(112) // T.int64(14) * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 8, 1, 1, 14])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 14, 2, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-03-21 22:20:39 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12768)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(3192))
                                    v2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(3192) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(114), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + b_1_c_1_i_1_j_1_fused // T.int64(112) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(112) // T.int64(14) * T.int64(14) + i_3 * T.int64(14) + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + b_1_c_1_i_1_j_1_fused // T.int64(112) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(112) // T.int64(14) * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 8, 1, 1, 14])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 14, 2, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 22:20:39 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(224), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12768)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(3192))
                                    v2 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(3192) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(114), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + b_1_c_1_i_1_j_1_fused // T.int64(112) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(112) // T.int64(14) * T.int64(14) + i_3 * T.int64(14) + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused + j_3 + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_1 * T.int64(3) + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), di_0_dj_0_fused + dj_1 + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(1)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(4) + b_1_c_1_i_1_j_1_fused // T.int64(112) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(112) // T.int64(14) * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(compute[v0, v1, v2, v3])
                                compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 8, 1, 1, 14])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[4, 14, 2, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 22:21:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 22:21:21 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 22:21:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 501 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 22:21:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 1006 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 22:21:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 1509 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 22:21:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 2015 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 22:21:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 2518 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 22:21:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 3019 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 22:21:28 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 22:21:30 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 131 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 22:21:33 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 112 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 22:21:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 114 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 22:21:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 115 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 22:21:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9964  0.9950  0.9947  0.9945  0.9943  0.9936  0.9929  0.9917  0.9917  0.9917  0.9914  0.9913  0.9903  0.9900  0.9896
[17 : 32]:	0.9887  0.9867  0.9843  0.9829  0.9823  0.9821  0.9821  0.9818  0.9807  0.9787  0.9779  0.9777  0.9773  0.9771  0.9761  0.9756
[33 : 48]:	0.9752  0.9742  0.9740  0.9733  0.9726  0.9726  0.9711  0.9709  0.9709  0.9704  0.9688  0.9685  0.9684  0.9683  0.9681  0.9679
[49 : 64]:	0.9673  0.9673  0.9673  0.9669  0.9667  0.9657  0.9657  0.9653  0.9652  0.9652  0.9624  0.9623  0.9615  0.9603  0.9602  0.9592
2024-03-21 22:21:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 22:21:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 22:51:50 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_clip_1] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(224), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(112) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(2) * T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(5)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(912))
                                        v2 = T.axis.spatial(T.int64(114), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(912) // T.int64(8))
                                        v3 = T.axis.spatial(T.int64(114), dj_0 + b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(8))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(1824))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), dj_0)
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(112) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(2) * T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(112) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(112) // T.int64(2) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_1_c_1_i_1_j_1_fused * T.int64(4) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 1, 2, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 56, 2, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 2, 2, 2, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 224, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 224, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-03-21 22:51:50 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_clip_1] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(128), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(16) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(16) * T.int64(7) + i_3_init * T.int64(7) + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(25)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(16) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1026))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(16) * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1026) // T.int64(114))
                                        v3 = T.axis.spatial(T.int64(114), (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(114))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4104))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(16) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(36))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(16) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(16) * T.int64(7) + i_3 * T.int64(7) + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(16) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(16) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(28) + b_2_c_2_i_2_j_2_fused % T.int64(28) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 2, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[16, 1, 1, 1, 7])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 4, 28, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-03-21 22:51:50 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_clip_1] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(56) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(56) // T.int64(14) * T.int64(2) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(4) + j_3_init * T.int64(4) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(11)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(1140))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(1140) // T.int64(114))
                                        v3 = T.axis.spatial(T.int64(114), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(114))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4560))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(224), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 < T.int64(36))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(56) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(56) // T.int64(14) * T.int64(2) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(4) + j_3 * T.int64(4) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(56) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(56) // T.int64(14) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(14) * T.int64(4) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 4, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 4, 2, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 14, 1, 4])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 224, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 224], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_clip_1] Trial #4: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), compute: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(224), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(4) + b_1_c_1_i_1_j_1_fused * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(4) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(56) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(3), T.int64(3)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(16)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(114), di_0 + b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(2) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(448) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(114), dj_0 + b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2, v3 = T.axis.remap("SS", [di_0, dj_0])
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(4) + b_1_c_1_i_1_j_1_fused * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(4) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(56) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(4) + b_1_c_1_i_1_j_1_fused * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(56) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(2) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(56) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(compute[v0, v1, v2, v3])
                            compute[v0, v1, v2, v3] = T.max(T.min(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(6)), T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="compute", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 2, 4, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 56, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99 = sch.split(loop=l97, factors=[None, 112], preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #5: GFLOPs: 439.8055. Time: 19.1666 us. Best GFLOPs: 439.8055
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #6: GFLOPs: 527.0849. Time: 15.9928 us. Best GFLOPs: 527.0849
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #7: GFLOPs: 415.3175. Time: 20.2967 us. Best GFLOPs: 527.0849
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #8: GFLOPs: 107.4467. Time: 78.4535 us. Best GFLOPs: 527.0849
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #9: GFLOPs: 148.7697. Time: 56.6619 us. Best GFLOPs: 527.0849
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #10: GFLOPs: 444.3619. Time: 18.9701 us. Best GFLOPs: 527.0849
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #11: GFLOPs: 256.3286. Time: 32.8858 us. Best GFLOPs: 527.0849
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #12: GFLOPs: 289.0293. Time: 29.1651 us. Best GFLOPs: 527.0849
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #13: GFLOPs: 250.5442. Time: 33.6450 us. Best GFLOPs: 527.0849
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #14: GFLOPs: 1120.7154. Time: 7.5216 us. Best GFLOPs: 1120.7154
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #15: GFLOPs: 843.5738. Time: 9.9927 us. Best GFLOPs: 1120.7154
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #16: GFLOPs: 953.4491. Time: 8.8411 us. Best GFLOPs: 1120.7154
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #17: GFLOPs: 621.4382. Time: 13.5646 us. Best GFLOPs: 1120.7154
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #18: GFLOPs: 526.5410. Time: 16.0093 us. Best GFLOPs: 1120.7154
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #19: GFLOPs: 630.2056. Time: 13.3759 us. Best GFLOPs: 1120.7154
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #20: GFLOPs: 339.0937. Time: 24.8591 us. Best GFLOPs: 1120.7154
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #21: GFLOPs: 535.5632. Time: 15.7396 us. Best GFLOPs: 1120.7154
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #22: GFLOPs: 417.8074. Time: 20.1757 us. Best GFLOPs: 1120.7154
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #23: GFLOPs: 1143.7548. Time: 7.3701 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #24: GFLOPs: 128.3162. Time: 65.6937 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #25: GFLOPs: 829.7399. Time: 10.1593 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #26: GFLOPs: 86.4977. Time: 97.4542 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #27: GFLOPs: 782.2907. Time: 10.7755 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #28: GFLOPs: 175.5420. Time: 48.0202 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #29: GFLOPs: 241.5470. Time: 34.8983 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #30: GFLOPs: 275.5640. Time: 30.5902 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #31: GFLOPs: 177.3677. Time: 47.5260 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #32: GFLOPs: 327.6182. Time: 25.7299 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #33: GFLOPs: 282.4441. Time: 29.8451 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #34: GFLOPs: 435.0177. Time: 19.3775 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #35: GFLOPs: 713.0474. Time: 11.8219 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #36: GFLOPs: 491.8180. Time: 17.1396 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #37: GFLOPs: 127.5016. Time: 66.1134 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #38: GFLOPs: 466.1089. Time: 18.0850 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #39: GFLOPs: 115.5675. Time: 72.9406 us. Best GFLOPs: 1143.7548
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #40: GFLOPs: 1435.4065. Time: 5.8726 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #41: GFLOPs: 413.0689. Time: 20.4072 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #42: GFLOPs: 449.1303. Time: 18.7686 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #43: GFLOPs: 667.8907. Time: 12.6212 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #44: GFLOPs: 638.0839. Time: 13.2108 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #45: GFLOPs: 324.4809. Time: 25.9786 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #46: GFLOPs: 1193.7862. Time: 7.0612 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #47: GFLOPs: 51.7035. Time: 163.0368 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #48: GFLOPs: 1208.2644. Time: 6.9766 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #49: GFLOPs: 565.2043. Time: 14.9142 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #50: GFLOPs: 121.4906. Time: 69.3845 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #51: GFLOPs: 1318.1692. Time: 6.3949 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #52: GFLOPs: 34.6841. Time: 243.0386 us. Best GFLOPs: 1435.4065
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #53: GFLOPs: 1441.7039. Time: 5.8469 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #54: GFLOPs: 127.1957. Time: 66.2724 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #55: GFLOPs: 779.2166. Time: 10.8180 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #56: GFLOPs: 870.2661. Time: 9.6862 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #57: GFLOPs: 376.6966. Time: 22.3776 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #58: GFLOPs: 308.2756. Time: 27.3443 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #59: GFLOPs: 355.2564. Time: 23.7281 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #60: GFLOPs: 123.3249. Time: 68.3525 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #61: GFLOPs: 428.5727. Time: 19.6689 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #62: GFLOPs: 612.6166. Time: 13.7599 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #63: GFLOPs: 259.3777. Time: 32.4992 us. Best GFLOPs: 1441.7039
2024-03-21 22:51:51 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #64: GFLOPs: 835.0044. Time: 10.0952 us. Best GFLOPs: 1441.7039
2024-03-21 23:28:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 23:28:58 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2024-03-21 23:28:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 444 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 890 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 1338 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 1784 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 2229 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 2671 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 3119 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 3565 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:06 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-03-21 23:29:09 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:17 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 92 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 67 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-21 23:29:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0707  0.9901  0.9862  0.9818  0.9604  0.9549  0.9549  0.9506  0.9505  0.9463  0.9442  0.9429  0.9429  0.9407  0.9402  0.9380
[17 : 32]:	0.9337  0.9318  0.9237  0.9233  0.9213  0.9188  0.9148  0.9085  0.9018  0.8997  0.8997  0.8997  0.8970  0.8937  0.8921  0.8920
[33 : 48]:	0.8901  0.8878  0.8833  0.8793  0.8793  0.8793  0.8789  0.8772  0.8713  0.8689  0.8651  0.8646  0.8645  0.8640  0.8551  0.8528
[49 : 64]:	0.8526  0.8506  0.8491  0.8489  0.8487  0.8486  0.8431  0.8429  0.8429  0.8429  0.8396  0.8364  0.8344  0.8337  0.8337  0.8325
2024-03-21 23:29:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 23:29:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #65: GFLOPs: 1458.3727. Time: 5.7801 us. Best GFLOPs: 1458.3727
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #66: GFLOPs: 1428.0161. Time: 5.9030 us. Best GFLOPs: 1458.3727
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #67: GFLOPs: 1532.3843. Time: 5.5009 us. Best GFLOPs: 1532.3843
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #68: GFLOPs: 1437.4495. Time: 5.8643 us. Best GFLOPs: 1532.3843
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #69: GFLOPs: 1449.9507. Time: 5.8137 us. Best GFLOPs: 1532.3843
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #70: GFLOPs: 1429.7588. Time: 5.8958 us. Best GFLOPs: 1532.3843
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #71: GFLOPs: 1429.8100. Time: 5.8956 us. Best GFLOPs: 1532.3843
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #72: GFLOPs: 1658.2753. Time: 5.0833 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #73: GFLOPs: 1443.6905. Time: 5.8389 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #74: GFLOPs: 1418.8426. Time: 5.9412 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #75: GFLOPs: 1653.3578. Time: 5.0985 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #76: GFLOPs: 1423.5746. Time: 5.9214 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #77: GFLOPs: 1426.6352. Time: 5.9087 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #78: GFLOPs: 1645.7318. Time: 5.1221 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #79: GFLOPs: 1424.4368. Time: 5.9178 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #80: GFLOPs: 1427.7857. Time: 5.9039 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #81: GFLOPs: 1445.1855. Time: 5.8329 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #82: GFLOPs: 1425.6498. Time: 5.9128 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #83: GFLOPs: 1562.1193. Time: 5.3962 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #84: GFLOPs: 1476.3933. Time: 5.7096 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #85: GFLOPs: 1558.7900. Time: 5.4078 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #86: GFLOPs: 1416.1542. Time: 5.9524 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #87: GFLOPs: 1558.7022. Time: 5.4081 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #88: GFLOPs: 1414.4402. Time: 5.9596 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #89: GFLOPs: 1447.5156. Time: 5.8235 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #90: GFLOPs: 1436.5828. Time: 5.8678 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #91: GFLOPs: 1459.4236. Time: 5.7760 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #92: GFLOPs: 1459.2243. Time: 5.7767 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #93: GFLOPs: 1637.8925. Time: 5.1466 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #94: GFLOPs: 1405.9536. Time: 5.9956 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #95: GFLOPs: 1550.7718. Time: 5.4357 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #96: GFLOPs: 1652.1465. Time: 5.1022 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #97: GFLOPs: 1550.6790. Time: 5.4360 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #98: GFLOPs: 1030.2542. Time: 8.1820 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #99: GFLOPs: 1329.6152. Time: 6.3399 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #100: GFLOPs: 1558.7305. Time: 5.4080 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #101: GFLOPs: 1558.9996. Time: 5.4070 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #102: GFLOPs: 1558.6209. Time: 5.4084 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #103: GFLOPs: 1405.1256. Time: 5.9992 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #104: GFLOPs: 1128.8510. Time: 7.4674 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #105: GFLOPs: 1398.6365. Time: 6.0270 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #106: GFLOPs: 1570.1533. Time: 5.3686 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #107: GFLOPs: 1402.7333. Time: 6.0094 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #108: GFLOPs: 1465.8072. Time: 5.7508 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #109: GFLOPs: 1502.9010. Time: 5.6089 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #110: GFLOPs: 1468.9923. Time: 5.7383 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #111: GFLOPs: 1363.3759. Time: 6.1829 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #112: GFLOPs: 1201.6685. Time: 7.0149 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #113: GFLOPs: 1440.5145. Time: 5.8518 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #114: GFLOPs: 1241.8140. Time: 6.7881 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #115: GFLOPs: 1197.3465. Time: 7.0402 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #116: GFLOPs: 1426.9541. Time: 5.9074 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #117: GFLOPs: 1272.1230. Time: 6.6264 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #118: GFLOPs: 1426.7443. Time: 5.9083 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #119: GFLOPs: 1441.6650. Time: 5.8471 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #120: GFLOPs: 1267.5003. Time: 6.6505 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #121: GFLOPs: 1260.2714. Time: 6.6887 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #122: GFLOPs: 1562.8254. Time: 5.3938 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #123: GFLOPs: 1318.3487. Time: 6.3940 us. Best GFLOPs: 1658.2753
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #124: GFLOPs: 1673.0061. Time: 5.0386 us. Best GFLOPs: 1673.0061
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #125: GFLOPs: 1358.4348. Time: 6.2054 us. Best GFLOPs: 1673.0061
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #126: GFLOPs: 352.1230. Time: 23.9393 us. Best GFLOPs: 1673.0061
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #127: GFLOPs: 706.5905. Time: 11.9299 us. Best GFLOPs: 1673.0061
2024-03-21 23:30:05 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #128: GFLOPs: 179.0799. Time: 47.0715 us. Best GFLOPs: 1673.0061
2024-03-22 00:27:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 00:27:05 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-22 00:27:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 406 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 811 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 1215 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 1616 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 2022 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 2424 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 2825 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 3229 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:12 [INFO] [evolutionary_search.cc:723] Sampled 51 candidate(s)
2024-03-22 00:27:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 78 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 79 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ff785c30548)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ff785e60dc8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ff785e60768)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ff785342a78)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ff785409388)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ff785e9bd88)]: 69 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ff785e60288)]: 0 failure(s)
2024-03-22 00:27:29 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.5581  1.5580  1.4949  1.4913  1.4867  1.4600  0.9666  0.9666  0.9666  0.9602  0.9602  0.9539  0.9539  0.9492  0.9485  0.9485
[17 : 32]:	0.9485  0.9456  0.9416  0.9396  0.9396  0.9354  0.9339  0.9339  0.9300  0.9267  0.9267  0.9256  0.9251  0.9251  0.9225  0.9176
[33 : 48]:	0.9174  0.9174  0.9172  0.9163  0.9163  0.9160  0.9143  0.9143  0.9113  0.9097  0.9097  0.9095  0.9093  0.9089  0.9089  0.9089
[49 : 64]:	0.9081  0.9069  0.9058  0.9053  0.9045  0.9039  0.9033  0.9033  0.9028  0.9026  0.9025  0.9025  0.9023  0.9023  0.9018  0.9017
2024-03-22 00:27:29 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 00:27:29 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #129: GFLOPs: 873.4866. Time: 9.6505 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #130: GFLOPs: 878.3457. Time: 9.5971 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #131: GFLOPs: 584.7092. Time: 14.4167 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #132: GFLOPs: 656.2895. Time: 12.8443 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #133: GFLOPs: 369.8220. Time: 22.7936 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #134: GFLOPs: 846.2352. Time: 9.9613 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #135: GFLOPs: 1650.1343. Time: 5.1084 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #136: GFLOPs: 1656.9210. Time: 5.0875 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #137: GFLOPs: 1652.6753. Time: 5.1006 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #138: GFLOPs: 1639.8144. Time: 5.1406 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #139: GFLOPs: 1646.2549. Time: 5.1205 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #140: GFLOPs: 1636.7804. Time: 5.1501 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #141: GFLOPs: 1647.4433. Time: 5.1168 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #142: GFLOPs: 1569.5599. Time: 5.3707 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #143: GFLOPs: 1648.7163. Time: 5.1128 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #144: GFLOPs: 1643.4560. Time: 5.1292 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #145: GFLOPs: 1644.8047. Time: 5.1250 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #146: GFLOPs: 1666.8410. Time: 5.0572 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #147: GFLOPs: 1639.5137. Time: 5.1415 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #148: GFLOPs: 1496.2166. Time: 5.6339 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #149: GFLOPs: 1496.0164. Time: 5.6347 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #150: GFLOPs: 1650.4414. Time: 5.1075 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #151: GFLOPs: 1566.3975. Time: 5.3815 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #152: GFLOPs: 1465.3217. Time: 5.7527 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #153: GFLOPs: 1647.3639. Time: 5.1170 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #154: GFLOPs: 1566.4513. Time: 5.3813 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #155: GFLOPs: 1583.6757. Time: 5.3228 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #156: GFLOPs: 1439.6208. Time: 5.8554 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #157: GFLOPs: 1567.3390. Time: 5.3783 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #158: GFLOPs: 1567.1357. Time: 5.3790 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #159: GFLOPs: 1650.3819. Time: 5.1076 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #160: GFLOPs: 1656.0639. Time: 5.0901 us. Best GFLOPs: 1673.0061
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #161: GFLOPs: 1683.1244. Time: 5.0083 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #162: GFLOPs: 1669.8730. Time: 5.0480 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #163: GFLOPs: 1567.4475. Time: 5.3779 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #164: GFLOPs: 1482.0956. Time: 5.6876 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #165: GFLOPs: 1562.1893. Time: 5.3960 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #166: GFLOPs: 1409.1204. Time: 5.9821 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #167: GFLOPs: 1481.4897. Time: 5.6899 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #168: GFLOPs: 1565.6112. Time: 5.3842 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #169: GFLOPs: 1648.3819. Time: 5.1138 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #170: GFLOPs: 1536.5028. Time: 5.4862 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #171: GFLOPs: 1535.1477. Time: 5.4910 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #172: GFLOPs: 1460.1426. Time: 5.7731 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #173: GFLOPs: 1569.4725. Time: 5.3710 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #174: GFLOPs: 1567.1834. Time: 5.3788 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #175: GFLOPs: 1567.5685. Time: 5.3775 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #176: GFLOPs: 1567.4040. Time: 5.3780 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #177: GFLOPs: 1680.7685. Time: 5.0153 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #178: GFLOPs: 1666.8560. Time: 5.0572 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #179: GFLOPs: 1553.5140. Time: 5.4261 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #180: GFLOPs: 1443.2101. Time: 5.8408 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #181: GFLOPs: 1433.4467. Time: 5.8806 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #182: GFLOPs: 1566.8487. Time: 5.3800 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #183: GFLOPs: 1534.4933. Time: 5.4934 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #184: GFLOPs: 1536.1725. Time: 5.4874 us. Best GFLOPs: 1683.1244
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #185: GFLOPs: 1853.4261. Time: 4.5481 us. Best GFLOPs: 1853.4261
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #186: GFLOPs: 1424.0547. Time: 5.9194 us. Best GFLOPs: 1853.4261
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #187: GFLOPs: 1651.9105. Time: 5.1029 us. Best GFLOPs: 1853.4261
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #188: GFLOPs: 1427.8076. Time: 5.9039 us. Best GFLOPs: 1853.4261
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #189: GFLOPs: 1559.5150. Time: 5.4052 us. Best GFLOPs: 1853.4261
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #190: GFLOPs: 466.5911. Time: 18.0663 us. Best GFLOPs: 1853.4261
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #191: GFLOPs: 197.3654. Time: 42.7105 us. Best GFLOPs: 1853.4261
2024-03-22 00:28:11 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_clip_1] Trial #192: GFLOPs: 278.0075. Time: 30.3214 us. Best GFLOPs: 1853.4261
