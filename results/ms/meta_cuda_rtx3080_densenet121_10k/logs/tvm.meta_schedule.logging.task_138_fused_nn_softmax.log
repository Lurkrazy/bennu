2024-03-20 22:52:37 [INFO] [task_scheduler.cc:160] Initializing Task #138: "fused_nn_softmax"
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
        T_softmax_exp = T.alloc_buffer((T.int64(1), T.int64(1000)))
        T_softmax_expsum = T.alloc_buffer((T.int64(1),))
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_maxelem"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(p0[v_i0, v_k])
                T.writes(T_softmax_maxelem[v_i0])
                with T.init():
                    T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_exp"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0])
                T.writes(T_softmax_exp[v_i0, v_i1])
                T_softmax_exp[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0])
        for i0, k in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_expsum"):
                v_i0, v_k = T.axis.remap("SR", [i0, k])
                T.reads(T_softmax_exp[v_i0, v_k])
                T.writes(T_softmax_expsum[v_i0])
                with T.init():
                    T_softmax_expsum[v_i0] = T.float32(0)
                T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T_softmax_exp[v_i0, v_k]
        for i0, i1 in T.grid(T.int64(1), T.int64(1000)):
            with T.block("T_softmax_norm"):
                v_i0, v_i1 = T.axis.remap("SS", [i0, i1])
                T.reads(T_softmax_exp[v_i0, v_i1], T_softmax_expsum[v_i0])
                T.writes(T_softmax_norm[v_i0, v_i1])
                T.block_attr({"axis": 1})
                T_softmax_norm[v_i0, v_i1] = T_softmax_exp[v_i0, v_i1] / T_softmax_expsum[v_i0]
2024-03-20 22:52:37 [INFO] [task_scheduler.cc:164] Total 4 design space(s) generated
2024-03-20 22:52:38 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(32) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v5)
l6, l7 = sch.get_loops(block=b3)
l8 = sch.fuse(l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13 = sch.get_loops(block=b2)
l14 = sch.fuse(l12, preserve_unit_iters=True)
l15, l16 = sch.split(loop=l14, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b0)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-03-20 22:52:38 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum = T.alloc_buffer((T.int64(1),))
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for k_0 in range(T.int64(4)):
                    for k_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k_0 * T.int64(256) + k_1)
                            T.where(k_0 * T.int64(256) + k_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum[v_i0])
                            with T.init():
                                T_softmax_expsum[v_i0] = T.float32(0)
                            T_softmax_expsum[v_i0] = T_softmax_expsum[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
            for i0_i1_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for i0_i1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("T_softmax_norm"):
                        v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_i1 = T.axis.spatial(T.int64(1000), i0_i1_fused_0 * T.int64(128) + i0_i1_fused_1)
                        T.where(i0_i1_fused_0 * T.int64(128) + i0_i1_fused_1 < T.int64(1000))
                        T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum[v_i0])
                        T.writes(T_softmax_norm[v_i0, v_i1])
                        T.block_attr({"axis": 1})
                        T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
v5 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=6)
l6, l7 = sch.get_loops(block=b0)
l8, l9 = sch.split(loop=l7, factors=[None, v5], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="threadIdx.x")
v10 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v10)
l11, l12 = sch.get_loops(block=b3)
l13 = sch.fuse(l11, l12, preserve_unit_iters=True)
v14 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
l15, l16 = sch.split(loop=l13, factors=[None, v14], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="blockIdx.x")
sch.bind(loop=l16, thread_axis="threadIdx.x")
l17, l18 = sch.get_loops(block=b2)
l19 = sch.fuse(l17, preserve_unit_iters=True)
l20, l21 = sch.split(loop=l19, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
l22, l23, l24 = sch.get_loops(block=b0)
l25 = sch.fuse(l22, preserve_unit_iters=True)
sch.bind(loop=l25, thread_axis="blockIdx.x")
2024-03-20 22:52:38 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem = T.alloc_buffer((T.int64(1),))
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused_0 in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for i0_fused_1 in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                    for k in range(T.int64(1000)):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_k = T.axis.reduce(T.int64(1000), k)
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem[v_i0])
                            with T.init():
                                T_softmax_maxelem[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem[v_i0] = T.max(T_softmax_maxelem[v_i0], p0[v_i0, v_k])
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(63)):
                    for ax1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(16) + ax1_1)
                            T.where(ax1_0 * T.int64(16) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem[v_i0])
                for i1_0 in range(T.int64(63)):
                    for i1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(16) + i1_1)
                            T.where(i1_0 * T.int64(16) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
v16 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v16)
l17, l18, l19 = sch.get_loops(block=b3)
l20 = sch.fuse(l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
l21, l22 = sch.get_loops(block=b0)
l23 = sch.fuse(l21, preserve_unit_iters=True)
l24, l25 = sch.split(loop=l23, factors=[None, 1], preserve_unit_iters=True)
sch.bind(loop=l24, thread_axis="blockIdx.x")
sch.bind(loop=l25, thread_axis="threadIdx.x")
2024-03-20 22:52:38 [INFO] [task_scheduler.cc:170] Design space #3:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1000)), "float32"), T_softmax_norm: T.Buffer((T.int64(1), T.int64(1000)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            T_softmax_maxelem_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            T_softmax_expsum_shared = T.alloc_buffer((T.int64(1),), scope="shared")
            for i0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(63)):
                    for ax1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_maxelem"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(16) + ax1_1)
                            T.where(ax1_0 * T.int64(16) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k])
                            T.writes(T_softmax_maxelem_shared[v_i0])
                            with T.init():
                                T_softmax_maxelem_shared[v_i0] = T.float32(-3.4028234663852886e+38)
                            T_softmax_maxelem_shared[v_i0] = T.max(T_softmax_maxelem_shared[v_i0], p0[v_i0, v_k])
                for ax0, ax1_0 in T.grid(T.int64(1), T.int64(63)):
                    for ax1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_expsum"):
                            v_i0 = T.axis.spatial(T.int64(1), ax0)
                            v_k = T.axis.reduce(T.int64(1000), ax1_0 * T.int64(16) + ax1_1)
                            T.where(ax1_0 * T.int64(16) + ax1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_k], T_softmax_maxelem_shared[v_i0])
                            T.writes(T_softmax_expsum_shared[v_i0])
                            with T.init():
                                T_softmax_expsum_shared[v_i0] = T.float32(0)
                            T_softmax_expsum_shared[v_i0] = T_softmax_expsum_shared[v_i0] + T.exp(p0[v_i0, v_k] - T_softmax_maxelem_shared[v_i0])
                for i1_0 in range(T.int64(63)):
                    for i1_1 in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        with T.block("T_softmax_norm"):
                            v_i0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_i1 = T.axis.spatial(T.int64(1000), i1_0 * T.int64(16) + i1_1)
                            T.where(i1_0 * T.int64(16) + i1_1 < T.int64(1000))
                            T.reads(p0[v_i0, v_i1], T_softmax_maxelem_shared[v_i0], T_softmax_expsum_shared[v_i0])
                            T.writes(T_softmax_norm[v_i0, v_i1])
                            T.block_attr({"axis": 1})
                            T_softmax_norm[v_i0, v_i1] = T.exp(p0[v_i0, v_i1] - T_softmax_maxelem_shared[v_i0]) / T_softmax_expsum_shared[v_i0]
b0 = sch.get_block(name="T_softmax_maxelem", func_name="main")
b1 = sch.get_block(name="T_softmax_exp", func_name="main")
b2 = sch.get_block(name="T_softmax_expsum", func_name="main")
b3 = sch.get_block(name="T_softmax_norm", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.compute_inline(block=b1)
b5, = sch.get_consumers(block=b2)
l6, l7 = sch.get_loops(block=b5)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=2)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b2, loop=l6, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="shared")
l11, l12, l13 = sch.get_loops(block=b2)
l14, l15 = sch.split(loop=l13, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l15, thread_axis="threadIdx.x")
b16, b17 = sch.get_consumers(block=b0)
l18, l19, l20, l21 = sch.get_loops(block=b16)
sch.compute_at(block=b0, loop=l18, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l22, l23, l24 = sch.get_loops(block=b0)
l25, l26 = sch.split(loop=l24, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l26, thread_axis="threadIdx.x")
v27 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v27)
l28, l29, l30 = sch.get_loops(block=b3)
l31 = sch.fuse(l28, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
2024-03-21 00:11:02 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 00:11:02 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 00:11:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a015c968)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3901698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a401e358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ce8a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2dc4068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a04b5288)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x57299f2ecd68)]: 0 failure(s)
2024-03-21 00:11:02 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-21 00:11:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a015c968)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3901698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a401e358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ce8a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2dc4068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a04b5288)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x57299f2ecd68)]: 0 failure(s)
2024-03-21 00:11:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a015c968)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3901698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a401e358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ce8a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2dc4068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a04b5288)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x57299f2ecd68)]: 0 failure(s)
2024-03-21 00:11:03 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a015c968)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3901698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a401e358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ce8a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2dc4068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a04b5288)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x57299f2ecd68)]: 0 failure(s)
2024-03-21 00:11:03 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a015c968)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a3901698)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a401e358)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a6ce8a28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a2dc4068)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a04b5288)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x57299f2ecd68)]: 0 failure(s)
2024-03-21 00:11:03 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9974  0.9974  0.9960  0.9922  0.9898  0.9892  0.9860  0.9802  0.9762  0.9758  0.9744  0.9739  0.9724  0.9694  0.9646  0.9609
[17 : 32]:	0.9559  0.9539  0.9516  0.9441  0.9388  0.9320  0.9177  0.9177  0.9145  0.9114  0.9101  0.9051  0.9050  0.9004  0.8997  0.8961
[33 : 48]:	0.8923  0.8914  0.8824  0.8804  0.8774  0.8763  0.8754  0.8666  0.8655  0.8654  0.8564  0.8522  0.8446  0.8414  0.8400  0.8202
[49 : 64]:	0.8153  0.8140  0.7934  0.7896  0.7882  0.7854  0.7847  0.7771  0.7702  0.7684  0.7678  0.7674  0.7660  0.7641  0.7602  0.7577
2024-03-21 00:11:03 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 00:11:03 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #1: GFLOPs: 0.4287. Time: 9.3314 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #2: GFLOPs: 0.1829. Time: 21.8675 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #3: GFLOPs: 0.1501. Time: 26.6561 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #4: GFLOPs: 0.2187. Time: 18.2936 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #5: GFLOPs: 0.1485. Time: 26.9276 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #6: GFLOPs: 0.1501. Time: 26.6545 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #7: GFLOPs: 0.4286. Time: 9.3319 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #8: GFLOPs: 0.1501. Time: 26.6557 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #9: GFLOPs: 0.1478. Time: 27.0622 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #10: GFLOPs: 0.1478. Time: 27.0558 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #11: GFLOPs: 0.1213. Time: 32.9878 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #12: GFLOPs: 0.1478. Time: 27.0551 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #13: GFLOPs: 0.2169. Time: 18.4409 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #14: GFLOPs: 0.1501. Time: 26.6504 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #15: GFLOPs: 0.2170. Time: 18.4372 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #16: GFLOPs: 0.4178. Time: 9.5732 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #17: GFLOPs: 0.1469. Time: 27.2261 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #18: GFLOPs: 0.1479. Time: 27.0541 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #19: GFLOPs: 0.2024. Time: 19.7659 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #20: GFLOPs: 0.1482. Time: 26.9901 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #21: GFLOPs: 0.3880. Time: 10.3100 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #22: GFLOPs: 0.2176. Time: 18.3785 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #23: GFLOPs: 0.1514. Time: 26.4194 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #24: GFLOPs: 0.1469. Time: 27.2272 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #25: GFLOPs: 0.1478. Time: 27.0547 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #26: GFLOPs: 0.1464. Time: 27.3270 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #27: GFLOPs: 0.2170. Time: 18.4329 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #28: GFLOPs: 0.1228. Time: 32.5809 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #29: GFLOPs: 0.4210. Time: 9.5022 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #30: GFLOPs: 0.1314. Time: 30.4310 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #31: GFLOPs: 0.1464. Time: 27.3270 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #32: GFLOPs: 0.1228. Time: 32.5832 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #33: GFLOPs: 0.2069. Time: 19.3372 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #34: GFLOPs: 0.1501. Time: 26.6531 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #35: GFLOPs: 0.1463. Time: 27.3319 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #36: GFLOPs: 0.1656. Time: 24.1531 us. Best GFLOPs: 0.4287
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #37: GFLOPs: 1.7415. Time: 2.2968 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #38: GFLOPs: 0.1493. Time: 26.7971 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #39: GFLOPs: 0.2170. Time: 18.4345 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #40: GFLOPs: 0.1501. Time: 26.6562 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #41: GFLOPs: 0.1501. Time: 26.6523 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #42: GFLOPs: 0.1500. Time: 26.6722 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #43: GFLOPs: 0.4397. Time: 9.0979 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #44: GFLOPs: 0.1501. Time: 26.6523 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #45: GFLOPs: 0.2171. Time: 18.4278 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #46: GFLOPs: 0.2109. Time: 18.9690 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #47: GFLOPs: 0.5372. Time: 7.4456 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #48: GFLOPs: 0.1492. Time: 26.8025 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #49: GFLOPs: 0.2038. Time: 19.6227 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #50: GFLOPs: 1.3967. Time: 2.8639 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #51: GFLOPs: 0.1223. Time: 32.7118 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #52: GFLOPs: 0.1478. Time: 27.0545 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #53: GFLOPs: 0.1478. Time: 27.0652 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #54: GFLOPs: 0.1486. Time: 26.9245 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #55: GFLOPs: 0.1228. Time: 32.5812 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #56: GFLOPs: 0.2182. Time: 18.3301 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #57: GFLOPs: 0.1471. Time: 27.1868 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #58: GFLOPs: 0.3136. Time: 12.7531 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #59: GFLOPs: 0.1493. Time: 26.7846 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #60: GFLOPs: 0.4094. Time: 9.7709 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #61: GFLOPs: 0.1501. Time: 26.6506 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #62: GFLOPs: 0.1314. Time: 30.4397 us. Best GFLOPs: 1.7415
2024-03-21 00:13:32 [INFO] [task_scheduler.cc:131] [Task #138: fused_nn_softmax] Trial #63: GFLOPs: 0.3471. Time: 11.5226 us. Best GFLOPs: 1.7415
