2024-03-21 13:42:26 [INFO] [task_scheduler.cc:160] Initializing Task #96: "fused_nn_conv2d_add_nn_relu_47"
2024-03-21 13:42:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1280), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1280), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4480)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0 * T.int64(320) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(14) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(10240)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(320))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0 * T.int64(320) + ax0_ax1_ax2_ax3_fused % T.int64(320))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1280), rc_0 * T.int64(320) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 1, 8, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 80, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4480)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(320) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(14) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(10240)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(320))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(320) + ax0_ax1_ax2_ax3_fused % T.int64(320))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(320) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 1, 8, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 80, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1280), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1280), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4480)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(320) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(14) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(10240)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(320))
                                    v1 = T.axis.spatial(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(320) + ax0_ax1_ax2_ax3_fused % T.int64(320))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(80), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1280), rc_0_ry_0_rx_0_fused * T.int64(320) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(7) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 1, 8, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 80, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 14:32:51 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 14:32:51 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 14:32:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0fa3568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ed9df218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f06b10e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2988638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f9f58c28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f2fcea38)]: 491 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f04fe7b8)]: 0 failure(s)
2024-03-21 14:32:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0fa3568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ed9df218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f06b10e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2988638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f9f58c28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f2fcea38)]: 977 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f04fe7b8)]: 0 failure(s)
2024-03-21 14:32:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0fa3568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ed9df218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f06b10e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2988638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f9f58c28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f2fcea38)]: 1455 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f04fe7b8)]: 0 failure(s)
2024-03-21 14:32:53 [INFO] [evolutionary_search.cc:723] Sampled 81 candidate(s)
2024-03-21 14:32:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0fa3568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ed9df218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f06b10e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2988638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f9f58c28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f2fcea38)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f04fe7b8)]: 0 failure(s)
2024-03-21 14:32:56 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0fa3568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ed9df218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f06b10e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2988638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f9f58c28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f2fcea38)]: 106 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f04fe7b8)]: 0 failure(s)
2024-03-21 14:32:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0fa3568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ed9df218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f06b10e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2988638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f9f58c28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f2fcea38)]: 63 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f04fe7b8)]: 0 failure(s)
2024-03-21 14:32:58 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0fa3568)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2ed9df218)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f06b10e8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f2988638)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f9f58c28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f2fcea38)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f04fe7b8)]: 0 failure(s)
2024-03-21 14:32:58 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9994  0.9993  0.9992  0.9982  0.9952  0.9949  0.9931  0.9930  0.9922  0.9914  0.9900  0.9894  0.9887  0.9885  0.9880
[17 : 32]:	0.9865  0.9857  0.9851  0.9835  0.9830  0.9818  0.9817  0.9808  0.9804  0.9803  0.9800  0.9792  0.9786  0.9785  0.9780  0.9771
[33 : 48]:	0.9769  0.9766  0.9764  0.9763  0.9758  0.9749  0.9737  0.9732  0.9724  0.9714  0.9707  0.9707  0.9703  0.9695  0.9694  0.9689
[49 : 64]:	0.9678  0.9675  0.9672  0.9662  0.9660  0.9656  0.9654  0.9653  0.9634  0.9632  0.9614  0.9610  0.9609  0.9603  0.9596  0.9588
2024-03-21 14:32:58 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 14:32:59 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #1: GFLOPs: 986.0966. Time: 65.1817 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #2: GFLOPs: 46.3699. Time: 1386.1471 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #3: GFLOPs: 459.2306. Time: 139.9634 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #4: GFLOPs: 321.2354. Time: 200.0883 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #5: GFLOPs: 144.4766. Time: 444.8848 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #6: GFLOPs: 437.1843. Time: 147.0214 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #7: GFLOPs: 67.9818. Time: 945.4804 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #8: GFLOPs: 901.6773. Time: 71.2843 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #9: GFLOPs: 247.7550. Time: 259.4315 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #10: GFLOPs: 567.6273. Time: 113.2353 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #11: GFLOPs: 116.1450. Time: 553.4069 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #12: GFLOPs: 45.4486. Time: 1414.2450 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #13: GFLOPs: 117.1063. Time: 548.8640 us. Best GFLOPs: 986.0966
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #14: GFLOPs: 1293.6114. Time: 49.6868 us. Best GFLOPs: 1293.6114
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #15: GFLOPs: 512.7341. Time: 125.3583 us. Best GFLOPs: 1293.6114
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #16: GFLOPs: 605.6420. Time: 106.1278 us. Best GFLOPs: 1293.6114
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #17: GFLOPs: 40.7603. Time: 1576.9114 us. Best GFLOPs: 1293.6114
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #18: GFLOPs: 19.3185. Time: 3327.1410 us. Best GFLOPs: 1293.6114
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #19: GFLOPs: 45.0244. Time: 1427.5705 us. Best GFLOPs: 1293.6114
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #20: GFLOPs: 243.0015. Time: 264.5064 us. Best GFLOPs: 1293.6114
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #21: GFLOPs: 1523.4067. Time: 42.1919 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #22: GFLOPs: 144.3938. Time: 445.1401 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #23: GFLOPs: 11.2549. Time: 5710.9048 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #24: GFLOPs: 1382.8685. Time: 46.4798 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #25: GFLOPs: 866.7531. Time: 74.1566 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #26: GFLOPs: 328.0575. Time: 195.9274 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #27: GFLOPs: 405.6428. Time: 158.4533 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #28: GFLOPs: 222.1458. Time: 289.3391 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #29: GFLOPs: 57.2724. Time: 1122.2756 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #30: GFLOPs: 31.3273. Time: 2051.7388 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #31: GFLOPs: 202.5630. Time: 317.3110 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #32: GFLOPs: 878.5883. Time: 73.1576 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #33: GFLOPs: 236.4106. Time: 271.8806 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #34: GFLOPs: 66.8869. Time: 960.9568 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #35: GFLOPs: 82.7564. Time: 776.6827 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #36: GFLOPs: 1356.6646. Time: 47.3776 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #37: GFLOPs: 10.2013. Time: 6300.7359 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #38: GFLOPs: 292.5120. Time: 219.7361 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #39: GFLOPs: 466.6964. Time: 137.7243 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #40: GFLOPs: 285.1704. Time: 225.3931 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #41: GFLOPs: 240.4408. Time: 267.3234 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #42: GFLOPs: 406.1011. Time: 158.2745 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #43: GFLOPs: 502.2384. Time: 127.9780 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #44: GFLOPs: 591.0127. Time: 108.7548 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #45: GFLOPs: 646.1627. Time: 99.4726 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #46: GFLOPs: 495.3129. Time: 129.7674 us. Best GFLOPs: 1523.4067
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #47: GFLOPs: 2106.9442. Time: 30.5065 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #48: GFLOPs: 670.4862. Time: 95.8639 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #49: GFLOPs: 335.1605. Time: 191.7752 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #50: GFLOPs: 275.3481. Time: 233.4334 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #51: GFLOPs: 188.3541. Time: 341.2480 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #52: GFLOPs: 233.3079. Time: 275.4963 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #53: GFLOPs: 982.5591. Time: 65.4164 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #54: GFLOPs: 1858.4122. Time: 34.5862 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #55: GFLOPs: 860.7661. Time: 74.6724 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #56: GFLOPs: 503.7283. Time: 127.5995 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #57: GFLOPs: 183.6920. Time: 349.9088 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #58: GFLOPs: 222.0644. Time: 289.4452 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #59: GFLOPs: 235.6403. Time: 272.7694 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #60: GFLOPs: 191.9919. Time: 334.7821 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #61: GFLOPs: 256.3630. Time: 250.7205 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #62: GFLOPs: 57.3821. Time: 1120.1305 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #63: GFLOPs: 371.4876. Time: 173.0218 us. Best GFLOPs: 2106.9442
2024-03-21 15:48:26 [INFO] [task_scheduler.cc:131] [Task #96: fused_nn_conv2d_add_nn_relu_47] Trial #64: GFLOPs: 157.6760. Time: 407.6425 us. Best GFLOPs: 2106.9442
