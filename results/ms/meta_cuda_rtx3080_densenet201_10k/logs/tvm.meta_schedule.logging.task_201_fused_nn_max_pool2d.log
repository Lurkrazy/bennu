2024-03-21 13:42:33 [INFO] [task_scheduler.cc:160] Initializing Task #201: "fused_nn_max_pool2d"
2024-03-21 13:42:33 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(114), T.int64(114)))
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(114), T.int64(114)):
            with T.block("pad_temp"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1)])
                T.writes(pad_temp[v_ax0, v_ax1, v_ax2, v_ax3])
                pad_temp[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1) <= v_ax2 and v_ax2 < T.int64(113) and T.int64(1) <= v_ax3 and v_ax3 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 - T.int64(1), v_ax3 - T.int64(1)], T.float32(-3.4028234663852886e+38))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], pad_temp[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1])
2024-03-21 13:42:33 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-03-21 13:42:33 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(3136), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
2024-03-21 13:42:33 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(200704), thread="blockIdx.x"):
                for rv0_rv1_fused_0 in range(T.int64(2)):
                    for rv0_rv1_fused_1 in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        with T.block("pool_max"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                            v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                            v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                            v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(8) + rv0_rv1_fused_1) // T.int64(3))
                            v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(8) + rv0_rv1_fused_1) % T.int64(3))
                            T.where(rv0_rv1_fused_0 * T.int64(8) + rv0_rv1_fused_1 < T.int64(9))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                            T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=1)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
2024-03-21 15:38:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:38:40 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 15:38:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f57d9bb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f044f528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f94c7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6f195a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f247e698)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6ed34f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa379f78)]: 0 failure(s)
2024-03-21 15:38:41 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-21 15:38:42 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f57d9bb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f044f528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f94c7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6f195a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f247e698)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6ed34f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa379f78)]: 0 failure(s)
2024-03-21 15:38:42 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f57d9bb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f044f528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f94c7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6f195a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f247e698)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6ed34f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa379f78)]: 0 failure(s)
2024-03-21 15:38:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f57d9bb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f044f528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f94c7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6f195a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f247e698)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6ed34f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa379f78)]: 0 failure(s)
2024-03-21 15:38:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f57d9bb8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f044f528)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f94c7fb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f6f195a8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f247e698)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f6ed34f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2fa379f78)]: 0 failure(s)
2024-03-21 15:38:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9920  0.9595  0.9457  0.9055  0.8858  0.8811  0.8792  0.8699  0.8675  0.8673  0.8459  0.8026  0.7899  0.7696  0.7367  0.7230
[17 : 32]:	0.7225  0.7185  0.6910  0.6834  0.6728  0.6708  0.6508  0.6451  0.6302  0.6208  0.5675  0.5465  0.5373  0.5340  0.4998  0.4972
[33 : 48]:	0.4914  0.4843  0.4436  0.4270  0.3684  0.3629  0.3446  0.3385  0.3230  0.3084  0.3057  0.2784  0.2780  0.2624  0.2563  0.2555
[49 : 64]:	0.2512  0.2467  0.2178  0.1979  0.1965  0.1943  0.1906  0.1810  0.1496  0.1433  0.1110  0.0988  0.0931  0.0799  0.0552  0.0516
2024-03-21 15:38:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:38:43 [INFO] [evolutionary_search.cc:730] Sending 61 candidates(s) for measurement
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:121] [Task #201: fused_nn_max_pool2d] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
sch.enter_postproc()
b14 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b14, ann_key="meta_schedule.unroll_explicit")
b15, = sch.get_child_blocks(b14)
l16, l17, l18, l19 = sch.get_loops(block=b15)
sch.annotate(block_or_loop=l16, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l16, ann_key="pragma_unroll_explicit", ann_val=1)
b20 = sch.get_block(name="pool_max", func_name="main")
l21, l22, l23, l24 = sch.get_loops(block=b20)
b25 = sch.decompose_reduction(block=b20, loop=l23)
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:121] [Task #201: fused_nn_max_pool2d] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(200704), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for rv0_rv1_fused_0 in range(T.int64(1)):
                for rv0_rv1_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("pool_max"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(128) + rv0_rv1_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(128) + rv0_rv1_fused_1) % T.int64(3))
                        T.where(rv0_rv1_fused_0 * T.int64(128) + rv0_rv1_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=5)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.enter_postproc()
b21 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b21, ann_key="meta_schedule.unroll_explicit")
b22, = sch.get_child_blocks(b21)
l23, l24, l25 = sch.get_loops(block=b22)
sch.annotate(block_or_loop=l23, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l23, ann_key="pragma_unroll_explicit", ann_val=1)
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:121] [Task #201: fused_nn_max_pool2d] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(6272), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                with T.block("pool_max_init"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3136))
                    v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3136) // T.int64(56))
                    v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                    T.reads()
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1 in T.grid(T.int64(3), T.int64(3)):
                    with T.block("pool_max_update"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                        v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                        T.reads(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v11 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l12, l13 = sch.split(loop=l10, factors=[None, v11], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="blockIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.x")
sch.enter_postproc()
b14 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b14, ann_key="meta_schedule.unroll_explicit")
b15, = sch.get_child_blocks(b14)
l16, l17, l18, l19 = sch.get_loops(block=b15)
sch.annotate(block_or_loop=l16, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l16, ann_key="pragma_unroll_explicit", ann_val=1)
b20 = sch.get_block(name="pool_max", func_name="main")
l21, l22, l23, l24 = sch.get_loops(block=b20)
b25 = sch.decompose_reduction(block=b20, loop=l23)
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:121] [Task #201: fused_nn_max_pool2d] Trial #4: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(200704), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for rv0_rv1_fused_0 in range(T.int64(2)):
                for rv0_rv1_fused_1 in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                    with T.block("pool_max"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(8) + rv0_rv1_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(8) + rv0_rv1_fused_1) % T.int64(3))
                        T.where(rv0_rv1_fused_0 * T.int64(8) + rv0_rv1_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=1)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.enter_postproc()
b21 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b21, ann_key="meta_schedule.unroll_explicit")
b22, = sch.get_child_blocks(b21)
l23, l24, l25 = sch.get_loops(block=b22)
sch.annotate(block_or_loop=l23, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l23, ann_key="pragma_unroll_explicit", ann_val=1)
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:121] [Task #201: fused_nn_max_pool2d] Trial #5: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0_ax1_ax2_ax3_fused in T.thread_binding(T.int64(200704), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for rv0_rv1_fused_0 in range(T.int64(1)):
                for rv0_rv1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("pool_max"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                        v_rv0 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1) // T.int64(3))
                        v_rv1 = T.axis.reduce(T.int64(3), (rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1) % T.int64(3))
                        T.where(rv0_rv1_fused_0 * T.int64(512) + rv0_rv1_fused_1 < T.int64(9))
                        T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)])
                        T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3])
                        with T.init():
                            pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(-3.4028234663852886e+38)
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3], T.if_then_else(T.int64(1) <= v_ax2 * T.int64(2) + v_rv0 and v_ax2 * T.int64(2) + v_rv0 < T.int64(113) and T.int64(1) <= v_ax3 * T.int64(2) + v_rv1 and v_ax3 * T.int64(2) + v_rv1 < T.int64(113), p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0 - T.int64(1), v_ax3 * T.int64(2) + v_rv1 - T.int64(1)], T.float32(-3.4028234663852886e+38)))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="pool_max", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
sch.compute_inline(block=b0)
v3 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=7)
l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
l10 = sch.fuse(l8, l9, preserve_unit_iters=True)
l11, l12 = sch.split(loop=l10, factors=[None, v3], preserve_unit_iters=True)
sch.bind(loop=l12, thread_axis="threadIdx.x")
v13 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v13)
l14, l15, l16, l17, l18, l19 = sch.get_loops(block=b1)
l20 = sch.fuse(l14, l15, l16, l17, preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.enter_postproc()
b21 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b21, ann_key="meta_schedule.unroll_explicit")
b22, = sch.get_child_blocks(b21)
l23, l24, l25 = sch.get_loops(block=b22)
sch.annotate(block_or_loop=l23, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l23, ann_key="pragma_unroll_explicit", ann_val=1)
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #6: GFLOPs: 459.3235. Time: 3.9326 us. Best GFLOPs: 459.3235
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #7: GFLOPs: 14.5644. Time: 124.0236 us. Best GFLOPs: 459.3235
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #8: GFLOPs: 15.1335. Time: 119.3602 us. Best GFLOPs: 459.3235
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #9: GFLOPs: 490.2389. Time: 3.6846 us. Best GFLOPs: 490.2389
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #10: GFLOPs: 536.3368. Time: 3.3679 us. Best GFLOPs: 536.3368
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #11: GFLOPs: 496.3631. Time: 3.6391 us. Best GFLOPs: 536.3368
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #12: GFLOPs: 497.2466. Time: 3.6327 us. Best GFLOPs: 536.3368
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #13: GFLOPs: 12.1145. Time: 149.1053 us. Best GFLOPs: 536.3368
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #14: GFLOPs: 491.5261. Time: 3.6750 us. Best GFLOPs: 536.3368
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #15: GFLOPs: 15.1424. Time: 119.2899 us. Best GFLOPs: 536.3368
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #16: GFLOPs: 429.1422. Time: 4.2092 us. Best GFLOPs: 536.3368
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #17: GFLOPs: 11.7581. Time: 153.6245 us. Best GFLOPs: 536.3368
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #18: GFLOPs: 496.1156. Time: 3.6410 us. Best GFLOPs: 536.3368
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #19: GFLOPs: 538.9899. Time: 3.3513 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #20: GFLOPs: 5.6564. Time: 319.3422 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #21: GFLOPs: 2.7611. Time: 654.2155 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #22: GFLOPs: 496.4041. Time: 3.6388 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #23: GFLOPs: 15.0275. Time: 120.2019 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #24: GFLOPs: 341.4053. Time: 5.2909 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #25: GFLOPs: 476.9941. Time: 3.7869 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #26: GFLOPs: 15.0273. Time: 120.2034 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #27: GFLOPs: 15.0329. Time: 120.1590 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #28: GFLOPs: 15.0413. Time: 120.0918 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #29: GFLOPs: 477.6331. Time: 3.7818 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #30: GFLOPs: 15.0211. Time: 120.2535 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #31: GFLOPs: 15.0285. Time: 120.1944 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #32: GFLOPs: 478.3185. Time: 3.7764 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #33: GFLOPs: 15.0417. Time: 120.0884 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #34: GFLOPs: 5.6563. Time: 319.3519 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #35: GFLOPs: 11.7166. Time: 154.1686 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #36: GFLOPs: 15.0202. Time: 120.2604 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #37: GFLOPs: 5.6559. Time: 319.3722 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #38: GFLOPs: 15.0407. Time: 120.0965 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #39: GFLOPs: 11.7164. Time: 154.1711 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #40: GFLOPs: 15.0195. Time: 120.2659 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #41: GFLOPs: 488.0838. Time: 3.7009 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #42: GFLOPs: 395.1594. Time: 4.5712 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #43: GFLOPs: 15.0269. Time: 120.2072 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #44: GFLOPs: 339.1691. Time: 5.3258 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #45: GFLOPs: 15.0404. Time: 120.0987 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #46: GFLOPs: 15.0327. Time: 120.1606 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #47: GFLOPs: 2.7608. Time: 654.2693 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #48: GFLOPs: 11.6806. Time: 154.6447 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #49: GFLOPs: 392.2783. Time: 4.6047 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #50: GFLOPs: 15.0316. Time: 120.1696 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #51: GFLOPs: 15.0329. Time: 120.1592 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #52: GFLOPs: 487.8922. Time: 3.7023 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #53: GFLOPs: 15.0375. Time: 120.1218 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #54: GFLOPs: 15.0329. Time: 120.1588 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #55: GFLOPs: 338.8213. Time: 5.3312 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #56: GFLOPs: 2.7611. Time: 654.2155 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #57: GFLOPs: 2.7609. Time: 654.2490 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #58: GFLOPs: 474.0599. Time: 3.8104 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #59: GFLOPs: 485.2927. Time: 3.7222 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #60: GFLOPs: 15.0179. Time: 120.2788 us. Best GFLOPs: 538.9899
2024-03-21 15:50:45 [INFO] [task_scheduler.cc:131] [Task #201: fused_nn_max_pool2d] Trial #61: GFLOPs: 338.8750. Time: 5.3304 us. Best GFLOPs: 538.9899
