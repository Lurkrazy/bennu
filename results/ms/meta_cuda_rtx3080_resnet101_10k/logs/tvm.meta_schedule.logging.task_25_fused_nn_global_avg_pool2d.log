2024-03-22 00:52:27 [INFO] [task_scheduler.cc:160] Initializing Task #25: "fused_nn_global_avg_pool2d"
2024-03-22 00:52:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1), T.int64(7), T.int64(7)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2048), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule": "meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
2024-03-22 00:52:27 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2024-03-22 00:52:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            adaptive_pool_sum = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(64), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2024-03-22 00:52:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"), adaptive_pool_avg: T.Buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            adaptive_pool_sum_shared = T.alloc_buffer((T.int64(1), T.int64(2048), T.int64(1), T.int64(1)), scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(2048), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused + ax1)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) // T.int64(7))
                            v_rv1 = T.axis.reduce(T.int64(7), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) % T.int64(7))
                            T.where(ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1 < T.int64(49))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(7) + v_rv0, v_ax3 * T.int64(7) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.where(T.Mul(T.int64(0), T.int64(64)) + ax3_1 < T.int64(1))
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.020408163265306121)
b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2024-03-22 01:22:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 01:22:10 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-22 01:22:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c886d5e7078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c8860d9aad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d800ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c88676b97b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8860ebb7c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c8860e00a88)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c8860dff118)]: 0 failure(s)
2024-03-22 01:22:11 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-22 01:22:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c886d5e7078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c8860d9aad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d800ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c88676b97b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8860ebb7c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c8860e00a88)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c8860dff118)]: 0 failure(s)
2024-03-22 01:22:11 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c886d5e7078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c8860d9aad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d800ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c88676b97b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8860ebb7c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c8860e00a88)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c8860dff118)]: 0 failure(s)
2024-03-22 01:22:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c886d5e7078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c8860d9aad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d800ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c88676b97b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8860ebb7c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c8860e00a88)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c8860dff118)]: 0 failure(s)
2024-03-22 01:22:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5c886d5e7078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5c8860d9aad8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5c885d800ba8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5c88676b97b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5c8860ebb7c8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5c8860e00a88)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5c8860dff118)]: 0 failure(s)
2024-03-22 01:22:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9958  0.9924  0.9901  0.9849  0.9800  0.9757  0.9750  0.9670  0.9545  0.9525  0.9510  0.9489  0.9325  0.9312  0.9305  0.9275
[17 : 32]:	0.9248  0.9232  0.9102  0.9083  0.9050  0.9010  0.8974  0.8938  0.8929  0.8869  0.8867  0.8844  0.8832  0.8800  0.8791  0.8729
[33 : 48]:	0.8649  0.8643  0.8642  0.8562  0.8558  0.8489  0.8477  0.8425  0.8397  0.8179  0.8128  0.8088  0.8051  0.7888  0.7813  0.7761
[49 : 64]:	0.7755  0.7747  0.7745  0.7737  0.7651  0.7628  0.7624  0.7600  0.7502  0.7441  0.7362  0.7359  0.7359  0.7281  0.7280  0.7251
2024-03-22 01:22:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 01:22:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #1: GFLOPs: 23.2839. Time: 4.3979 us. Best GFLOPs: 23.2839
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #2: GFLOPs: 20.1232. Time: 5.0886 us. Best GFLOPs: 23.2839
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #3: GFLOPs: 23.1660. Time: 4.4203 us. Best GFLOPs: 23.2839
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #4: GFLOPs: 22.9719. Time: 4.4576 us. Best GFLOPs: 23.2839
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #5: GFLOPs: 20.1242. Time: 5.0884 us. Best GFLOPs: 23.2839
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #6: GFLOPs: 22.9754. Time: 4.4569 us. Best GFLOPs: 23.2839
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #7: GFLOPs: 20.1265. Time: 5.0878 us. Best GFLOPs: 23.2839
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #8: GFLOPs: 35.6909. Time: 2.8691 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #9: GFLOPs: 22.9493. Time: 4.4620 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #10: GFLOPs: 35.5474. Time: 2.8807 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #11: GFLOPs: 14.3289. Time: 7.1464 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #12: GFLOPs: 23.2753. Time: 4.3995 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #13: GFLOPs: 14.3164. Time: 7.1526 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #14: GFLOPs: 22.9502. Time: 4.4618 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #15: GFLOPs: 14.3295. Time: 7.1461 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #16: GFLOPs: 30.2552. Time: 3.3845 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #17: GFLOPs: 20.1231. Time: 5.0887 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #18: GFLOPs: 23.1099. Time: 4.4310 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #19: GFLOPs: 35.5495. Time: 2.8805 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #20: GFLOPs: 20.1218. Time: 5.0890 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #21: GFLOPs: 23.2221. Time: 4.4096 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #22: GFLOPs: 14.2669. Time: 7.1774 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #23: GFLOPs: 6.7647. Time: 15.1374 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #24: GFLOPs: 23.1175. Time: 4.4295 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #25: GFLOPs: 35.5476. Time: 2.8806 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #26: GFLOPs: 23.0744. Time: 4.4378 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #27: GFLOPs: 20.1244. Time: 5.0884 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #28: GFLOPs: 10.8986. Time: 9.3957 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #29: GFLOPs: 23.2910. Time: 4.3966 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #30: GFLOPs: 20.1255. Time: 5.0881 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #31: GFLOPs: 14.0838. Time: 7.2708 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #32: GFLOPs: 20.1267. Time: 5.0878 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #33: GFLOPs: 35.0176. Time: 2.9242 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #34: GFLOPs: 20.1255. Time: 5.0881 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #35: GFLOPs: 20.1260. Time: 5.0879 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #36: GFLOPs: 14.0856. Time: 7.2698 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #37: GFLOPs: 14.0849. Time: 7.2702 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #38: GFLOPs: 34.1781. Time: 2.9961 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #39: GFLOPs: 23.4020. Time: 4.3757 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #40: GFLOPs: 23.5162. Time: 4.3544 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #41: GFLOPs: 20.1265. Time: 5.0878 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #42: GFLOPs: 35.6857. Time: 2.8695 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #43: GFLOPs: 23.2660. Time: 4.4013 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #44: GFLOPs: 6.7434. Time: 15.1853 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #45: GFLOPs: 14.0861. Time: 7.2696 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #46: GFLOPs: 6.7442. Time: 15.1833 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #47: GFLOPs: 20.1283. Time: 5.0874 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #48: GFLOPs: 35.6767. Time: 2.8702 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #49: GFLOPs: 30.2470. Time: 3.3855 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #50: GFLOPs: 14.0848. Time: 7.2702 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #51: GFLOPs: 19.3222. Time: 5.2996 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #52: GFLOPs: 23.2685. Time: 4.4008 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #53: GFLOPs: 14.0858. Time: 7.2697 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #54: GFLOPs: 23.4353. Time: 4.3695 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #55: GFLOPs: 35.5758. Time: 2.8784 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #56: GFLOPs: 35.6900. Time: 2.8692 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #57: GFLOPs: 35.6704. Time: 2.8707 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #58: GFLOPs: 14.0865. Time: 7.2694 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #59: GFLOPs: 20.1268. Time: 5.0877 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #60: GFLOPs: 23.2269. Time: 4.4087 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #61: GFLOPs: 6.7501. Time: 15.1702 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #62: GFLOPs: 6.7444. Time: 15.1829 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #63: GFLOPs: 23.4425. Time: 4.3681 us. Best GFLOPs: 35.6909
2024-03-22 01:24:28 [INFO] [task_scheduler.cc:131] [Task #25: fused_nn_global_avg_pool2d] Trial #64: GFLOPs: 6.7509. Time: 15.1683 us. Best GFLOPs: 35.6909
