2024-03-24 09:01:37 [INFO] [task_scheduler.cc:160] Initializing Task #8: "fused_nn_max_pool2d_2"
2024-03-24 09:01:37 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(3), T.int64(3)):
            with T.block("pool_max"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                T.block_attr({"schedule_rule": "meta_schedule.pool_max"})
                with T.init():
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
2024-03-24 09:01:37 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-24 09:01:37 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 0, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(1)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(1), T.int64(9)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(1)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_0, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_0, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 9])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l12, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-03-24 09:01:37 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            pool_max_rf = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(9)))
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(1), T.int64(9)):
                with T.block("pool_max_rf"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_0 = T.axis.remap("SSSSSSR", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_0])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
                    T.writes(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    with T.init():
                        pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.float32(-3.4028234663852886e+38)
                    pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1] = T.max(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) // T.int64(3), v_ax3 * T.int64(2) + (vrv0_rv1_fused_0 * T.int64(9) + vrv0_rv1_fused_1) % T.int64(3), v_ax4])
            for ax0, ax1, ax2, ax3, ax4, rv0_rv1_fused_1 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(9)):
                with T.block("pool_max"):
                    vrv0_rv1_fused_1, v_ax0, v_ax1, v_ax2, v_ax3, v_ax4 = T.axis.remap("RSSSSS", [rv0_rv1_fused_1, ax0, ax1, ax2, ax3, ax4])
                    T.reads(pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    T.block_attr({"meta_schedule.random_compute_producer": 1})
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], pool_max_rf[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, vrv0_rv1_fused_1])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
l2, l3, l4, l5, l6, l7, l8 = sch.get_loops(block=b0)
l9 = sch.fuse(l7, l8, preserve_unit_iters=True)
v10, v11 = sch.sample_perfect_tile(loop=l9, n=2, max_innermost_factor=64, decision=[1, 9])
l12, l13 = sch.split(loop=l9, factors=[v10, v11], preserve_unit_iters=True)
b14 = sch.rfactor(loop=l13, factor_axis=5)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.random_compute_producer", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v15 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v15)
2024-03-24 09:01:37 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(64), T.int64(13), T.int64(13), T.int64(4)), "float32"), pool_max: T.Buffer((T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.parallel": 128, "meta_schedule.unroll_explicit": 64, "meta_schedule.vectorize": 64})
            for ax0, ax1, ax2, ax3, ax4, rv0, rv1 in T.grid(T.int64(1), T.int64(64), T.int64(6), T.int64(6), T.int64(4), T.int64(3), T.int64(3)):
                with T.block("pool_max"):
                    v_ax0, v_ax1, v_ax2, v_ax3, v_ax4, v_rv0, v_rv1 = T.axis.remap("SSSSSRR", [ax0, ax1, ax2, ax3, ax4, rv0, rv1])
                    T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
                    T.writes(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4])
                    with T.init():
                        pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.float32(-3.4028234663852886e+38)
                    pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4] = T.max(pool_max[v_ax0, v_ax1, v_ax2, v_ax3, v_ax4], p0[v_ax0, v_ax1, v_ax2 * T.int64(2) + v_rv0, v_ax3 * T.int64(2) + v_rv1, v_ax4])
b0 = sch.get_block(name="pool_max", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b0, ann_key="schedule_rule")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.parallel", ann_val=128)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.vectorize", ann_val=64)
v2 = sch.sample_categorical(candidates=[0, 16, 64, 512], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v2)
2024-03-24 09:06:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-24 09:06:21 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-24 09:06:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dc9d6958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dcea13d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dcdb3d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dc7fcee8)]: 0 failure(s)
2024-03-24 09:06:21 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2024-03-24 09:06:21 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dc9d6958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dcea13d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dcdb3d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dc7fcee8)]: 0 failure(s)
2024-03-24 09:06:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dc9d6958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dcea13d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dcdb3d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dc7fcee8)]: 0 failure(s)
2024-03-24 09:06:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dc9d6958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dcea13d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dcdb3d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dc7fcee8)]: 0 failure(s)
2024-03-24 09:06:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x63f1dc9d6958)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteParallelVectorizeUnroll(0x63f1dcea13d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteReductionBlock(0x63f1dcdb3d98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteLayout(0x63f1dc7fcee8)]: 0 failure(s)
2024-03-24 09:06:22 [INFO] [evolutionary_search.cc:649] Scores of the best 50 candidates:
[1 : 16]:	0.9976  0.9938  0.9501  0.8855  0.8850  0.8706  0.8464  0.8141  0.8064  0.8003  0.7851  0.7698  0.7526  0.7257  0.7233  0.7217
[17 : 32]:	0.6917  0.6727  0.6703  0.6621  0.6601  0.6258  0.6195  0.5950  0.5945  0.5738  0.5689  0.5667  0.5622  0.5057  0.4916  0.4823
[33 : 48]:	0.4600  0.4360  0.4226  0.3700  0.3332  0.3311  0.3202  0.2982  0.2919  0.2779  0.2656  0.2491  0.2014  0.1760  0.1196  0.0273
[49 : 50]:	0.0255  0.0243
2024-03-24 09:06:22 [INFO] [evolutionary_search.cc:727] Got 50 candidate(s) with evolutionary search
2024-03-24 09:06:22 [INFO] [evolutionary_search.cc:730] Sending 50 candidates(s) for measurement
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #1: GFLOPs: 11.4872. Time: 7.2206 us. Best GFLOPs: 11.4872
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #2: GFLOPs: 11.0993. Time: 7.4729 us. Best GFLOPs: 11.4872
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #3: GFLOPs: 11.3676. Time: 7.2966 us. Best GFLOPs: 11.4872
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #4: GFLOPs: 7.7411. Time: 10.7148 us. Best GFLOPs: 11.4872
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #5: GFLOPs: 9.4665. Time: 8.7619 us. Best GFLOPs: 11.4872
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #6: GFLOPs: 8.4831. Time: 9.7776 us. Best GFLOPs: 11.4872
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #7: GFLOPs: 22.4015. Time: 3.7026 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #8: GFLOPs: 8.4808. Time: 9.7802 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #9: GFLOPs: 22.0415. Time: 3.7631 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #10: GFLOPs: 11.4924. Time: 7.2173 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #11: GFLOPs: 8.5593. Time: 9.6906 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #12: GFLOPs: 6.6529. Time: 12.4673 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #13: GFLOPs: 11.5449. Time: 7.1844 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #14: GFLOPs: 14.1072. Time: 5.8796 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #15: GFLOPs: 7.9450. Time: 10.4398 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #16: GFLOPs: 7.6906. Time: 10.7851 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #17: GFLOPs: 8.4899. Time: 9.7698 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #18: GFLOPs: 11.1219. Time: 7.4577 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #19: GFLOPs: 6.9357. Time: 11.9590 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #20: GFLOPs: 9.2223. Time: 8.9939 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #21: GFLOPs: 7.7161. Time: 10.7495 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #22: GFLOPs: 6.8951. Time: 12.0294 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #23: GFLOPs: 9.7014. Time: 8.5497 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #24: GFLOPs: 9.1690. Time: 9.0462 us. Best GFLOPs: 22.4015
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #25: GFLOPs: 23.0023. Time: 3.6059 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #26: GFLOPs: 9.3181. Time: 8.9014 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #27: GFLOPs: 8.7684. Time: 9.4594 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #28: GFLOPs: 10.8240. Time: 7.6630 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #29: GFLOPs: 9.0594. Time: 9.1556 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #30: GFLOPs: 20.9647. Time: 3.9564 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #31: GFLOPs: 8.6294. Time: 9.6118 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #32: GFLOPs: 6.9960. Time: 11.8560 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #33: GFLOPs: 11.4720. Time: 7.2301 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #34: GFLOPs: 6.9146. Time: 11.9954 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #35: GFLOPs: 7.0317. Time: 11.7957 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #36: GFLOPs: 8.5679. Time: 9.6807 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #37: GFLOPs: 9.2014. Time: 9.0143 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #38: GFLOPs: 8.7263. Time: 9.5051 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #39: GFLOPs: 20.9375. Time: 3.9615 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #40: GFLOPs: 9.7171. Time: 8.5359 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #41: GFLOPs: 8.7297. Time: 9.5014 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #42: GFLOPs: 9.4731. Time: 8.7557 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #43: GFLOPs: 10.7207. Time: 7.7368 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #44: GFLOPs: 7.7302. Time: 10.7298 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #45: GFLOPs: 9.6997. Time: 8.5512 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #46: GFLOPs: 6.8778. Time: 12.0597 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #47: GFLOPs: 7.0368. Time: 11.7871 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #48: GFLOPs: 8.9456. Time: 9.2721 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #49: GFLOPs: 10.7662. Time: 7.7041 us. Best GFLOPs: 23.0023
2024-03-24 09:10:37 [INFO] [task_scheduler.cc:131] [Task #8: fused_nn_max_pool2d_2] Trial #50: GFLOPs: 8.6199. Time: 9.6223 us. Best GFLOPs: 23.0023
