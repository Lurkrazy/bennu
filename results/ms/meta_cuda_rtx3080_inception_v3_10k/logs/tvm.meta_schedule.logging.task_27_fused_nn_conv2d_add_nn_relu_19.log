2024-03-21 16:45:31 [INFO] [task_scheduler.cc:160] Initializing Task #27: "fused_nn_conv2d_add_nn_relu_19"
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(12), T.int64(18)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3)])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(3) <= v_i3 and v_i3 < T.int64(15), p0[v_i0, v_i1, v_i2, v_i3 - T.int64(3)], T.float32(0))
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(12), T.int64(12), T.int64(128), T.int64(1), T.int64(7)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(12), T.int64(12)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(12), T.int64(12)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(32), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(96) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3584)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v1 = T.axis.spatial(T.int64(128), rc_0 * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(6), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), yy_3 * T.int64(6) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0 * T.int64(4) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_0 * T.int64(7) + rx_1 * T.int64(7) + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(12), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 6])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[6, 1, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 4, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(96) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3584)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(6), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), yy_3 * T.int64(6) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_1 * T.int64(7) + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(12), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 6])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[6, 1, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 4, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(7)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(12)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(12), T.int64(18)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(7)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(6), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(32), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v2 = T.axis.spatial(T.int64(12), ax0_ax1_ax2_ax3_fused % T.int64(96) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(18), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3 - T.int64(3)])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(3) <= v3 and v3 < T.int64(15), p0[v0, v1, v2, v3 - T.int64(3)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3584)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(28) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(8), T.int64(6), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(12), yy_3 * T.int64(6) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(4) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_1 * T.int64(7) + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(12), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(12), ax2)
                                v3 = T.axis.spatial(T.int64(12), nn_0_ff_0_yy_0_xx_0_fused * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 16, 1, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 2, 6])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[6, 1, 1, 2, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[32, 4, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 17:06:30 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:06:30 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 17:06:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 476 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 17:06:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 958 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 17:06:31 [INFO] [evolutionary_search.cc:723] Sampled 66 candidate(s)
2024-03-21 17:06:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 99 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 17:06:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 17:06:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 67 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 17:06:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 17:06:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9985  0.9981  0.9981  0.9975  0.9974  0.9953  0.9940  0.9927  0.9927  0.9926  0.9921  0.9886  0.9885  0.9856  0.9844  0.9843
[17 : 32]:	0.9842  0.9841  0.9817  0.9814  0.9804  0.9783  0.9778  0.9775  0.9774  0.9773  0.9769  0.9764  0.9757  0.9756  0.9750  0.9738
[33 : 48]:	0.9730  0.9730  0.9704  0.9691  0.9685  0.9668  0.9666  0.9664  0.9656  0.9656  0.9646  0.9637  0.9637  0.9634  0.9610  0.9602
[49 : 64]:	0.9600  0.9598  0.9597  0.9593  0.9591  0.9577  0.9570  0.9546  0.9543  0.9538  0.9512  0.9505  0.9491  0.9479  0.9476  0.9473
2024-03-21 17:06:39 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:06:39 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #1: GFLOPs: 2424.3990. Time: 13.6393 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #2: GFLOPs: 497.2825. Time: 66.4954 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #3: GFLOPs: 688.2995. Time: 48.0416 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #4: GFLOPs: 28.4381. Time: 1162.7704 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #5: GFLOPs: 407.5583. Time: 81.1344 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #6: GFLOPs: 456.8072. Time: 72.3872 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #7: GFLOPs: 818.5749. Time: 40.3958 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #8: GFLOPs: 208.4933. Time: 158.5998 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #9: GFLOPs: 292.2184. Time: 113.1585 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #10: GFLOPs: 33.3718. Time: 990.8670 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #11: GFLOPs: 202.8110. Time: 163.0434 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #12: GFLOPs: 286.8869. Time: 115.2615 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #13: GFLOPs: 631.7368. Time: 52.3430 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #14: GFLOPs: 359.4948. Time: 91.9819 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #15: GFLOPs: 388.0461. Time: 85.2141 us. Best GFLOPs: 2424.3990
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #16: GFLOPs: 2497.7737. Time: 13.2386 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #17: GFLOPs: 218.5664. Time: 151.2904 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #18: GFLOPs: 184.8073. Time: 178.9270 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #19: GFLOPs: 540.6143. Time: 61.1656 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #20: GFLOPs: 290.2218. Time: 113.9370 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #21: GFLOPs: 286.9199. Time: 115.2482 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #22: GFLOPs: 328.8433. Time: 100.5555 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #23: GFLOPs: 307.2045. Time: 107.6384 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #24: GFLOPs: 535.7641. Time: 61.7193 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #25: GFLOPs: 863.2796. Time: 38.3039 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #26: GFLOPs: 169.6176. Time: 194.9503 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #27: GFLOPs: 641.7507. Time: 51.5263 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #28: GFLOPs: 380.6934. Time: 86.8599 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #29: GFLOPs: 408.9226. Time: 80.8637 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #30: GFLOPs: 2449.5322. Time: 13.4993 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #31: GFLOPs: 560.2318. Time: 59.0238 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #32: GFLOPs: 936.7016. Time: 35.3015 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #33: GFLOPs: 430.6457. Time: 76.7847 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #34: GFLOPs: 163.7155. Time: 201.9785 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #35: GFLOPs: 300.8295. Time: 109.9194 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #36: GFLOPs: 49.8303. Time: 663.5927 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #37: GFLOPs: 263.6268. Time: 125.4311 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #38: GFLOPs: 300.5430. Time: 110.0242 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #39: GFLOPs: 394.2190. Time: 83.8798 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #40: GFLOPs: 53.7491. Time: 615.2104 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #41: GFLOPs: 277.5745. Time: 119.1284 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #42: GFLOPs: 441.0547. Time: 74.9726 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #43: GFLOPs: 409.1345. Time: 80.8219 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #44: GFLOPs: 10.4676. Time: 3158.9761 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #45: GFLOPs: 272.7347. Time: 121.2424 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #46: GFLOPs: 333.1306. Time: 99.2614 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #47: GFLOPs: 372.1590. Time: 88.8518 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #48: GFLOPs: 977.0081. Time: 33.8452 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #49: GFLOPs: 111.2789. Time: 297.1542 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #50: GFLOPs: 698.1817. Time: 47.3616 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #51: GFLOPs: 368.6438. Time: 89.6991 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #52: GFLOPs: 1009.5946. Time: 32.7528 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #53: GFLOPs: 882.6343. Time: 37.4640 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #54: GFLOPs: 71.2228. Time: 464.2757 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #55: GFLOPs: 549.8778. Time: 60.1352 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #56: GFLOPs: 253.8197. Time: 130.2775 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #57: GFLOPs: 202.1505. Time: 163.5762 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #58: GFLOPs: 150.9116. Time: 219.1151 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #59: GFLOPs: 293.9903. Time: 112.4765 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #60: GFLOPs: 397.5700. Time: 83.1728 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #61: GFLOPs: 723.8820. Time: 45.6801 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #62: GFLOPs: 736.0334. Time: 44.9260 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #63: GFLOPs: 38.0233. Time: 869.6521 us. Best GFLOPs: 2497.7737
2024-03-21 17:36:11 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #64: GFLOPs: 334.0288. Time: 98.9945 us. Best GFLOPs: 2497.7737
2024-03-21 18:44:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 18:44:56 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2024-03-21 18:44:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 428 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 18:44:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 862 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 18:44:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 1284 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 18:44:58 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2024-03-21 18:45:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 18:45:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 18:45:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 104 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 18:45:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c3c8408)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071bd87388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd8ba98)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071b38d5c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071b38d738)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071b3788b8)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b154b28)]: 0 failure(s)
2024-03-21 18:45:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9751  0.9735  0.9676  0.9670  0.9666  0.9642  0.9626  0.9619  0.9619  0.9560  0.9554  0.9554  0.9544  0.9537  0.9527  0.9524
[17 : 32]:	0.9481  0.9469  0.9435  0.9428  0.9427  0.9427  0.9415  0.9409  0.9400  0.9397  0.9387  0.9385  0.9363  0.9347  0.9322  0.9307
[33 : 48]:	0.9303  0.9295  0.9293  0.9281  0.9272  0.9245  0.9239  0.9203  0.9201  0.9137  0.9133  0.9131  0.9123  0.9113  0.9087  0.9082
[49 : 64]:	0.9040  0.9030  0.9023  0.9021  0.9017  0.9009  0.9007  0.9005  0.9004  0.9001  0.8989  0.8988  0.8977  0.8926  0.8888  0.8872
2024-03-21 18:45:13 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 18:45:13 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #65: GFLOPs: 2403.3490. Time: 13.7587 us. Best GFLOPs: 2497.7737
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #66: GFLOPs: 2490.0753. Time: 13.2795 us. Best GFLOPs: 2497.7737
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #67: GFLOPs: 2392.3782. Time: 13.8218 us. Best GFLOPs: 2497.7737
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #68: GFLOPs: 2416.7391. Time: 13.6825 us. Best GFLOPs: 2497.7737
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #69: GFLOPs: 2437.9877. Time: 13.5632 us. Best GFLOPs: 2497.7737
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #70: GFLOPs: 2513.5532. Time: 13.1555 us. Best GFLOPs: 2513.5532
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #71: GFLOPs: 2436.9106. Time: 13.5692 us. Best GFLOPs: 2513.5532
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #72: GFLOPs: 2439.7769. Time: 13.5533 us. Best GFLOPs: 2513.5532
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #73: GFLOPs: 2515.7012. Time: 13.1443 us. Best GFLOPs: 2515.7012
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #74: GFLOPs: 1303.1299. Time: 25.3751 us. Best GFLOPs: 2515.7012
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #75: GFLOPs: 2518.1360. Time: 13.1315 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #76: GFLOPs: 1324.7358. Time: 24.9612 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #77: GFLOPs: 1324.3283. Time: 24.9689 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #78: GFLOPs: 2515.6000. Time: 13.1448 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #79: GFLOPs: 2464.8621. Time: 13.4154 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #80: GFLOPs: 2050.5372. Time: 16.1260 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #81: GFLOPs: 1358.2326. Time: 24.3456 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #82: GFLOPs: 1317.2623. Time: 25.1028 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #83: GFLOPs: 1486.4663. Time: 22.2454 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #84: GFLOPs: 2274.3488. Time: 14.5391 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #85: GFLOPs: 2176.8105. Time: 15.1906 us. Best GFLOPs: 2518.1360
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #86: GFLOPs: 2798.8143. Time: 11.8146 us. Best GFLOPs: 2798.8143
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #87: GFLOPs: 2458.7309. Time: 13.4488 us. Best GFLOPs: 2798.8143
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #88: GFLOPs: 2506.1256. Time: 13.1945 us. Best GFLOPs: 2798.8143
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #89: GFLOPs: 3245.5653. Time: 10.1884 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #90: GFLOPs: 2453.3468. Time: 13.4783 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #91: GFLOPs: 2440.5084. Time: 13.5492 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #92: GFLOPs: 2543.1539. Time: 13.0024 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #93: GFLOPs: 2569.3648. Time: 12.8697 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #94: GFLOPs: 2490.7867. Time: 13.2757 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #95: GFLOPs: 2440.6282. Time: 13.5486 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #96: GFLOPs: 2768.8752. Time: 11.9424 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #97: GFLOPs: 2545.1611. Time: 12.9921 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #98: GFLOPs: 1308.5940. Time: 25.2691 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #99: GFLOPs: 1324.6984. Time: 24.9619 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #100: GFLOPs: 1314.4670. Time: 25.1562 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #101: GFLOPs: 1316.0465. Time: 25.1260 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #102: GFLOPs: 2439.4741. Time: 13.5550 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #103: GFLOPs: 3090.3357. Time: 10.7001 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #104: GFLOPs: 2519.7950. Time: 13.1229 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #105: GFLOPs: 2818.1962. Time: 11.7334 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #106: GFLOPs: 2447.5648. Time: 13.5102 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #107: GFLOPs: 2399.0927. Time: 13.7831 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #108: GFLOPs: 2723.9778. Time: 12.1392 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #109: GFLOPs: 2471.6462. Time: 13.3785 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #110: GFLOPs: 2523.7140. Time: 13.1025 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #111: GFLOPs: 2558.4532. Time: 12.9246 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #112: GFLOPs: 2763.4087. Time: 11.9660 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #113: GFLOPs: 2195.3012. Time: 15.0626 us. Best GFLOPs: 3245.5653
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #114: GFLOPs: 3459.8109. Time: 9.5575 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #115: GFLOPs: 3459.4163. Time: 9.5586 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #116: GFLOPs: 1313.9962. Time: 25.1652 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #117: GFLOPs: 1298.7458. Time: 25.4607 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #118: GFLOPs: 2719.4300. Time: 12.1595 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #119: GFLOPs: 1313.7855. Time: 25.1693 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #120: GFLOPs: 2549.6121. Time: 12.9694 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #121: GFLOPs: 3180.0913. Time: 10.3981 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #122: GFLOPs: 2398.6156. Time: 13.7859 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #123: GFLOPs: 2473.7489. Time: 13.3672 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #124: GFLOPs: 2021.6617. Time: 16.3564 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #125: GFLOPs: 2369.7112. Time: 13.9540 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #126: GFLOPs: 287.0254. Time: 115.2059 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #127: GFLOPs: 353.3767. Time: 93.5744 us. Best GFLOPs: 3459.8109
2024-03-21 18:46:25 [INFO] [task_scheduler.cc:131] [Task #27: fused_nn_conv2d_add_nn_relu_19] Trial #128: GFLOPs: 39.6186. Time: 834.6341 us. Best GFLOPs: 3459.8109
