2024-03-21 19:46:24 [INFO] [task_scheduler.cc:160] Initializing Task #1: "fused_nn_conv2d_add_nn_relu_1"
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        PaddedInput = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)))
        DepthwiseConv2d = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(32), T.int64(114), T.int64(114)):
            with T.block("PaddedInput"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(PaddedInput[v_i0, v_i1, v_i2, v_i3])
                PaddedInput[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(113) and T.int64(1) <= v_i3 and v_i3 < T.int64(113), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0))
        for b, c, i, j, di, dj in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112), T.int64(3), T.int64(3)):
            with T.block("DepthwiseConv2d"):
                v_b, v_c, v_i, v_j, v_di, v_dj = T.axis.remap("SSSSRR", [b, c, i, j, di, dj])
                T.reads(PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj], p1[v_c, T.int64(0), v_di, v_dj])
                T.writes(DepthwiseConv2d[v_b, v_c, v_i, v_j])
                with T.init():
                    DepthwiseConv2d[v_b, v_c, v_i, v_j] = T.float32(0)
                DepthwiseConv2d[v_b, v_c, v_i, v_j] = DepthwiseConv2d[v_b, v_c, v_i, v_j] + PaddedInput[v_b, v_c, v_i + v_di, v_j + v_dj] * p1[v_c, T.int64(0), v_di, v_dj]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = DepthwiseConv2d[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(112), T.int64(112)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for di_0, dj_0 in T.grid(T.int64(3), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(51072)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(3192))
                                    v2 = T.axis.spatial(T.int64(114), di_0 + b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(3192) // T.int64(114))
                                    v3 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(114))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(48)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(7) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(28) + j_3 * T.int64(14) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0 + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(28)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(28) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 1, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 2, 2, 7, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 2, 2, 14])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(51072)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(3192))
                                    v2 = T.axis.spatial(T.int64(114), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(3192) // T.int64(114))
                                    v3 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(114))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(48)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(7) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(28) + j_3 * T.int64(14) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(28)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(28) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 1, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 2, 2, 7, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 2, 2, 14])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 19:46:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
            PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
            for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(32), thread="vthread.x"):
                    for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(51072)):
                                with T.block("PaddedInput_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(3192))
                                    v2 = T.axis.spatial(T.int64(114), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(3192) // T.int64(114))
                                    v3 = T.axis.spatial(T.int64(114), ax0_ax1_ax2_ax3_fused % T.int64(114))
                                    T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                    T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(48)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(3))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(7), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14)):
                                with T.block("DepthwiseConv2d"):
                                    v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                    v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(2) + c_3 + c_4)
                                    v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(7) + i_3 + i_4)
                                    v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(28) + j_3 * T.int64(14) + j_4)
                                    v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                    v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                    T.reads(PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                    T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                                    DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(7), T.int64(28)):
                            with T.block("DepthwiseConv2d_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(16) + b_1_c_1_i_1_j_1_fused // T.int64(4) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(4) // T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused // T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(2) * T.int64(28) + ax3)
                                T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 8, 1, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 2, 2, 7, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 2, 2, 14])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
2024-03-21 19:47:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 19:47:09 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 19:47:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 506 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 1010 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 1511 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 2014 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 2519 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 3026 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 3531 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:17 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 19:47:19 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 128 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:22 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 111 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:24 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 85 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 19:47:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9989  0.9985  0.9983  0.9975  0.9964  0.9953  0.9950  0.9948  0.9946  0.9932  0.9932  0.9917  0.9910  0.9906  0.9903  0.9903
[17 : 32]:	0.9899  0.9892  0.9890  0.9889  0.9886  0.9882  0.9880  0.9879  0.9879  0.9879  0.9878  0.9876  0.9873  0.9866  0.9866  0.9864
[33 : 48]:	0.9847  0.9838  0.9826  0.9804  0.9794  0.9794  0.9793  0.9787  0.9787  0.9785  0.9778  0.9769  0.9753  0.9748  0.9738  0.9738
[49 : 64]:	0.9735  0.9732  0.9708  0.9699  0.9698  0.9694  0.9690  0.9668  0.9645  0.9645  0.9635  0.9623  0.9614  0.9606  0.9598  0.9597
2024-03-21 19:47:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 19:47:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #1: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(14), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(8) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(29)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(912))
                                        v2 = T.axis.spatial(T.int64(114), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(912) // T.int64(114))
                                        v3 = T.axis.spatial(T.int64(114), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(114))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3648))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(12))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(3), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(8) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_1_c_1_i_1_j_1_fused // T.int64(7) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(8) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused % T.int64(7) * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(8) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 2, 1, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 4, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 8, 2, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 32, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107, l108 = sch.split(loop=l105, factors=[None, 32, 3], preserve_unit_iters=True)
sch.vectorize(loop=l108)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b110)
l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b111)
l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l128, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l128, ann_key="pragma_unroll_explicit", ann_val=1)
l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b113)
b151 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b151)
b168 = sch.decompose_reduction(block=b151, loop=l155)
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #2: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(64), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(16) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + i_3_init + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(16) * T.int64(7) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(72)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3420))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3420) // T.int64(114))
                                        v3 = T.axis.spatial(T.int64(114), (ax0_ax1_ax2_ax3_fused_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(114))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6840))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1 < T.int64(18))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(28), T.int64(7), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(16) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + i_3 + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(16) * T.int64(7) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(28), T.int64(7)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(4) * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(4) * T.int64(28) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_2_c_2_i_2_j_2_fused % T.int64(16) * T.int64(7) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[16, 1, 2, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 1, 1, 28, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 1, 16, 7, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 32, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #3: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_1_c_1_i_1_j_1_fused * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) * T.int64(4) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(67)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(232))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(232) // T.int64(4))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(56) * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(4))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(7424))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(288))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_1_c_1_i_1_j_1_fused * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) * T.int64(4) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 * T.int64(3) + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(1)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_1_c_1_i_1_j_1_fused * T.int64(2) + b_2_c_2_i_2_j_2_fused // T.int64(28) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(2) * T.int64(4) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) * T.int64(2) + b_2_c_2_i_2_j_2_fused % T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 16, 2, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 14, 2, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[56, 1, 2, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #4: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(16) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(14) + i_3_init * T.int64(14) + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(2) + j_3_init * T.int64(2) + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(87)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(348))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(56) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(348) // T.int64(6))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(32), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(9))
                                        v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(9) // T.int64(3))
                                        v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(288))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(16) + b_2_c_2_i_2_j_2_fused // T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(14) + i_3 * T.int64(14) + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(2) + j_3 * T.int64(2) + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 * T.int64(3) + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(16) + b_2_c_2_i_2_j_2_fused // T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused // T.int64(28) * T.int64(56) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(28) * T.int64(4) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 2, 16, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 4, 1, 14])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[28, 2, 1, 1, 2])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 64, 2], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b110 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b110, ann_key="meta_schedule.unroll_explicit")
b111, b112, b113, b114 = sch.get_child_blocks(b110)
l115, l116, l117, l118, l119, l120, l121, l122 = sch.get_loops(block=b111)
l123, l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b112)
l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147 = sch.get_loops(block=b113)
sch.annotate(block_or_loop=l131, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l131, ann_key="pragma_unroll_explicit", ann_val=1)
l148, l149, l150, l151, l152, l153, l154 = sch.get_loops(block=b114)
b155 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172 = sch.get_loops(block=b155)
b173 = sch.decompose_reduction(block=b155, loop=l159)
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #5: Error in running:
LocalRunner: An exception occurred
Traceback (most recent call last):
  File "/home/canesche/tvm-0.16.dev0/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 152, in _worker_func
    repeated_args: List[T_ARGUMENT_LIST] = f_alloc_argument(
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/local_runner.py", line 360, in default_alloc_argument
    return alloc_argument_common(f_random_fill, device, args_info, alloc_repeat)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 74, in alloc_argument_common
    arg: Any = dispatcher.get(arg_type, None)(*arg_info)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/meta_schedule/runner/utils.py", line 56, in alloc_tensor
    arg = ndarray.empty(shape=shape, dtype=dtype, device=device)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/runtime/ndarray.py", line 391, in empty
    arr = _ffi_api.TVMArrayAllocWithScope(shape, dtype, device, mem_scope)
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/_ctypes/packed_func.py", line 239, in __call__
    raise_last_ffi_error()
  File "/home/canesche/tvm-0.16.dev0/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm.error.InternalError: Traceback (most recent call last):
  4: _ZN3tvm7runtime13PackedFuncObj
  3: tvm::runtime::TypedPackedFunc<tvm::runtime::NDArray (tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>::AssignTypedLambda<tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)>(tvm::runtime::NDArray (*)(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  2: tvm::runtime::NDArray::Empty(tvm::runtime::ShapeTuple, DLDataType, DLDevice, tvm::runtime::Optional<tvm::runtime::String>)
  1: tvm::runtime::DeviceAPI::AllocDataSpace(DLDevice, int, long const*, DLDataType, tvm::runtime::Optional<tvm::runtime::String>)
  0: tvm::runtime::CUDADeviceAPI::AllocDataSpace(DLDevice, unsigned long, unsigned long, DLDataType)
  File "/home/canesche/tvm-0.16.dev0/src/runtime/cuda/cuda_device_api.cc", line 126
InternalError: Check failed: (e == cudaSuccess || e == cudaErrorCudartUnloading) is false: CUDA: misaligned address

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(16) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + c_3_init + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(14) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(4) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0, dj_0 in T.grid(T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(29)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) // T.int64(300))
                                        v2 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(14) * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(300) // T.int64(10))
                                        v3 = T.axis.spatial(T.int64(114), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(10))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(4800))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(16) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) // T.int64(9))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(9) // T.int64(3))
                                    v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(144))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(3), T.int64(3), T.int64(1), T.int64(4), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(16) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + c_3 + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(14) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(4) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0 * T.int64(3) + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_0 * T.int64(3) + dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(56) * T.int64(16) + b_1_c_1_i_1_j_1_fused // T.int64(2) * T.int64(8) + b_2_c_2_i_2_j_2_fused // T.int64(28) * T.int64(4) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(56) // T.int64(14) * T.int64(28) + b_1_c_1_i_1_j_1_fused % T.int64(2) * T.int64(14) + b_2_c_2_i_2_j_2_fused % T.int64(28) // T.int64(4) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(4) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 2, 2, 4, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 2, 7, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 4, 2, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v91 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v91)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 56, 3], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b79)
l107, l108 = sch.split(loop=l106, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
b109 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b109, ann_key="meta_schedule.unroll_explicit")
b110, b111, b112, b113 = sch.get_child_blocks(b109)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b110)
l122, l123, l124, l125, l126, l127, l128 = sch.get_loops(block=b111)
l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145 = sch.get_loops(block=b112)
sch.annotate(block_or_loop=l129, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l129, ann_key="pragma_unroll_explicit", ann_val=1)
l146, l147, l148, l149, l150, l151, l152 = sch.get_loops(block=b113)
b153 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170 = sch.get_loops(block=b153)
b171 = sch.decompose_reduction(block=b153, loop=l157)
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:121] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #6: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32"), p1: T.Buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), "float32"), p2: T.Buffer((T.int64(1), T.int64(32), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        DepthwiseConv2d_local = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(112), T.int64(112)), scope="local")
        PaddedInput_shared = T.alloc_buffer((T.int64(1), T.int64(32), T.int64(114), T.int64(114)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(32), T.int64(1), T.int64(3), T.int64(3)), scope="shared")
        for b_0_c_0_i_0_j_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for b_1_c_1_i_1_j_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for b_2_c_2_i_2_j_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for b_3_init, c_3_init, i_3_init, j_3_init, b_4_init, c_4_init, i_4_init, j_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                        with T.block("DepthwiseConv2d_init"):
                            v_b = T.axis.spatial(T.int64(1), b_3_init + b_4_init)
                            v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(32) * T.int64(2) + c_3_init * T.int64(2) + c_4_init)
                            v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(32) // T.int64(8) * T.int64(2) + i_3_init * T.int64(2) + i_4_init)
                            v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(8) * T.int64(2) + j_3_init + j_4_init)
                            T.reads()
                            T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = T.float32(0)
                    for di_0_dj_0_fused in T.serial(T.int64(3), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(15)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("PaddedInput_shared"):
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(912))
                                        v2 = T.axis.spatial(T.int64(114), di_0_dj_0_fused + b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(912) // T.int64(114))
                                        v3 = T.axis.spatial(T.int64(114), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(114))
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) * T.int64(4) + ax0_ax1_ax2_ax3_fused_2 < T.int64(3648))
                                        T.reads(p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)])
                                        T.writes(PaddedInput_shared[v0, v1, v2, v3])
                                        PaddedInput_shared[v0, v1, v2, v3] = T.if_then_else(T.int64(1) <= v2 and v2 < T.int64(113) and T.int64(1) <= v3 and v3 < T.int64(113), p0[v0, v1, v2 - T.int64(1), v3 - T.int64(1)], T.float32(0))
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(3))
                                    v1 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v2 = T.axis.spatial(T.int64(3), di_0_dj_0_fused)
                                    v3 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(3))
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(12))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for di_1, dj_1, b_3, c_3, i_3, j_3, di_2, dj_2, b_4, c_4, i_4, j_4 in T.grid(T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2), T.int64(1)):
                            with T.block("DepthwiseConv2d_update"):
                                v_b = T.axis.spatial(T.int64(1), b_3 + b_4)
                                v_c = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(32) * T.int64(2) + c_3 * T.int64(2) + c_4)
                                v_i = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(32) // T.int64(8) * T.int64(2) + i_3 * T.int64(2) + i_4)
                                v_j = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(8) * T.int64(2) + j_3 + j_4)
                                v_di = T.axis.reduce(T.int64(3), di_0_dj_0_fused + di_1 + di_2)
                                v_dj = T.axis.reduce(T.int64(3), dj_1 + dj_2)
                                T.reads(DepthwiseConv2d_local[v_b, v_c, v_i, v_j], PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj], p1_shared[v_c, T.int64(0), v_di, v_dj])
                                T.writes(DepthwiseConv2d_local[v_b, v_c, v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                DepthwiseConv2d_local[v_b, v_c, v_i, v_j] = DepthwiseConv2d_local[v_b, v_c, v_i, v_j] + PaddedInput_shared[v_b, v_c, v_i + v_di, v_j + v_dj] * p1_shared[v_c, T.int64(0), v_di, v_dj]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(2), T.int64(2)):
                        with T.block("DepthwiseConv2d_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(32), b_0_c_0_i_0_j_0_fused // T.int64(14) * T.int64(4) + b_2_c_2_i_2_j_2_fused // T.int64(32) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(112), b_0_c_0_i_0_j_0_fused % T.int64(14) * T.int64(8) + b_2_c_2_i_2_j_2_fused % T.int64(32) // T.int64(8) * T.int64(2) + ax2)
                            v3 = T.axis.spatial(T.int64(112), b_1_c_1_i_1_j_1_fused * T.int64(16) + b_2_c_2_i_2_j_2_fused % T.int64(8) * T.int64(2) + ax3)
                            T.reads(DepthwiseConv2d_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(DepthwiseConv2d_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="PaddedInput", func_name="main")
b1 = sch.get_block(name="DepthwiseConv2d", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l5, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 2, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l6, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[14, 1, 4, 1, 2])
l36, l37, l38, l39, l40 = sch.split(loop=l7, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 8, 2, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l8, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l54, l55, l56 = sch.split(loop=l9, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 3, 1])
l60, l61, l62 = sch.split(loop=l10, factors=[v57, v58, v59], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l55, l61, l19, l29, l39, l49, l56, l62, l20, l30, l40, l50)
l63 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l63, thread_axis="blockIdx.x")
l64 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l64, thread_axis="vthread.x")
l65 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l65, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b66 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b66, loop=l65, preserve_unit_loops=True, index=-1)
b67 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b67, loop=l60, preserve_unit_loops=True, index=-1)
l68, l69, l70, l71, l72, l73, l74, l75, l76 = sch.get_loops(block=b67)
l77 = sch.fuse(l73, l74, l75, l76, preserve_unit_iters=True)
v78 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch", ann_val=v78)
b79 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l60, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b79)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
l91 = sch.fuse(l54, l60, preserve_unit_iters=True)
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l91, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v92 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v92)
sch.enter_postproc()
sch.unannotate(block_or_loop=b67, ann_key="meta_schedule.cooperative_fetch")
l93, l94, l95, l96, l97 = sch.get_loops(block=b67)
l98, l99, l100 = sch.split(loop=l97, factors=[None, 64, 4], preserve_unit_iters=True)
sch.vectorize(loop=l100)
sch.bind(loop=l99, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l101, l102, l103, l104, l105 = sch.get_loops(block=b79)
l106, l107 = sch.split(loop=l105, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l107, thread_axis="threadIdx.x")
b108 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b108, ann_key="meta_schedule.unroll_explicit")
b109, b110, b111, b112 = sch.get_child_blocks(b108)
l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b109)
l120, l121, l122, l123, l124, l125 = sch.get_loops(block=b110)
l126, l127, l128, l129, l130, l131, l132, l133, l134, l135, l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b111)
sch.annotate(block_or_loop=l126, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l126, ann_key="pragma_unroll_explicit", ann_val=1)
l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b112)
b149 = sch.get_block(name="DepthwiseConv2d", func_name="main")
l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162, l163, l164, l165 = sch.get_loops(block=b149)
b166 = sch.decompose_reduction(block=b149, loop=l153)
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #7: GFLOPs: 695.4112. Time: 11.5445 us. Best GFLOPs: 695.4112
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #8: GFLOPs: 387.6704. Time: 20.7087 us. Best GFLOPs: 695.4112
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #9: GFLOPs: 687.8549. Time: 11.6713 us. Best GFLOPs: 695.4112
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #10: GFLOPs: 214.2718. Time: 37.4672 us. Best GFLOPs: 695.4112
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #11: GFLOPs: 768.7110. Time: 10.4437 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #12: GFLOPs: 360.4350. Time: 22.2735 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #13: GFLOPs: 419.4292. Time: 19.1407 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #14: GFLOPs: 519.8796. Time: 15.4423 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #15: GFLOPs: 480.7217. Time: 16.7002 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #16: GFLOPs: 334.8489. Time: 23.9755 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #17: GFLOPs: 693.1239. Time: 11.5826 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #18: GFLOPs: 192.1725. Time: 41.7758 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #19: GFLOPs: 534.5420. Time: 15.0188 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #20: GFLOPs: 271.5785. Time: 29.5611 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #21: GFLOPs: 416.3937. Time: 19.2802 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #22: GFLOPs: 399.8780. Time: 20.0765 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #23: GFLOPs: 305.7818. Time: 26.2545 us. Best GFLOPs: 768.7110
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #24: GFLOPs: 921.3524. Time: 8.7135 us. Best GFLOPs: 921.3524
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #25: GFLOPs: 305.2439. Time: 26.3008 us. Best GFLOPs: 921.3524
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #26: GFLOPs: 750.4609. Time: 10.6976 us. Best GFLOPs: 921.3524
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #27: GFLOPs: 303.4504. Time: 26.4563 us. Best GFLOPs: 921.3524
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #28: GFLOPs: 101.1917. Time: 79.3362 us. Best GFLOPs: 921.3524
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #29: GFLOPs: 969.4140. Time: 8.2815 us. Best GFLOPs: 969.4140
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #30: GFLOPs: 70.3227. Time: 114.1617 us. Best GFLOPs: 969.4140
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #31: GFLOPs: 168.6924. Time: 47.5905 us. Best GFLOPs: 969.4140
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #32: GFLOPs: 1023.0722. Time: 7.8471 us. Best GFLOPs: 1023.0722
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #33: GFLOPs: 38.7456. Time: 207.2017 us. Best GFLOPs: 1023.0722
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #34: GFLOPs: 930.2784. Time: 8.6298 us. Best GFLOPs: 1023.0722
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #35: GFLOPs: 774.8191. Time: 10.3613 us. Best GFLOPs: 1023.0722
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #36: GFLOPs: 1023.0954. Time: 7.8469 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #37: GFLOPs: 190.0668. Time: 42.2386 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #38: GFLOPs: 959.0286. Time: 8.3711 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #39: GFLOPs: 129.1482. Time: 62.1624 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #40: GFLOPs: 383.4957. Time: 20.9342 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #41: GFLOPs: 668.1931. Time: 12.0147 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #42: GFLOPs: 233.3646. Time: 34.4018 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #43: GFLOPs: 452.5676. Time: 17.7391 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #44: GFLOPs: 501.3539. Time: 16.0130 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #45: GFLOPs: 187.9035. Time: 42.7249 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #46: GFLOPs: 86.0142. Time: 93.3353 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #47: GFLOPs: 534.9596. Time: 15.0070 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #48: GFLOPs: 259.4844. Time: 30.9389 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #49: GFLOPs: 823.7298. Time: 9.7461 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #50: GFLOPs: 608.9742. Time: 13.1831 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #51: GFLOPs: 656.4067. Time: 12.2305 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #52: GFLOPs: 535.1440. Time: 15.0019 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #53: GFLOPs: 231.7097. Time: 34.6475 us. Best GFLOPs: 1023.0954
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #54: GFLOPs: 1196.2679. Time: 6.7110 us. Best GFLOPs: 1196.2679
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #55: GFLOPs: 174.1314. Time: 46.1040 us. Best GFLOPs: 1196.2679
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #56: GFLOPs: 913.9568. Time: 8.7840 us. Best GFLOPs: 1196.2679
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #57: GFLOPs: 568.7671. Time: 14.1150 us. Best GFLOPs: 1196.2679
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #58: GFLOPs: 303.8675. Time: 26.4199 us. Best GFLOPs: 1196.2679
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #59: GFLOPs: 539.2847. Time: 14.8867 us. Best GFLOPs: 1196.2679
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #60: GFLOPs: 440.5292. Time: 18.2239 us. Best GFLOPs: 1196.2679
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #61: GFLOPs: 146.5814. Time: 54.7693 us. Best GFLOPs: 1196.2679
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #62: GFLOPs: 562.3308. Time: 14.2766 us. Best GFLOPs: 1196.2679
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #63: GFLOPs: 160.7984. Time: 49.9269 us. Best GFLOPs: 1196.2679
2024-03-21 20:21:49 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #64: GFLOPs: 1198.6290. Time: 6.6978 us. Best GFLOPs: 1198.6290
2024-03-21 20:47:46 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 20:47:46 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2024-03-21 20:47:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 443 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:47:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 893 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:47:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 1337 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:47:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 1788 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:47:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 2239 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:47:52 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 2686 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:47:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 3134 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:47:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 3582 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:47:54 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2024-03-21 20:47:57 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 121 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:48:01 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:48:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:48:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 108 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 20:48:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0224  1.0162  1.0004  0.9975  0.9957  0.9957  0.9957  0.9799  0.9769  0.9743  0.9731  0.9681  0.9669  0.9662  0.9659  0.9653
[17 : 32]:	0.9597  0.9591  0.9545  0.9535  0.9483  0.9471  0.9434  0.9433  0.9431  0.9420  0.9389  0.9383  0.9369  0.9346  0.9345  0.9321
[33 : 48]:	0.9287  0.9281  0.9229  0.9179  0.9179  0.9128  0.9128  0.9123  0.9061  0.9021  0.9021  0.9015  0.9010  0.8912  0.8911  0.8910
[49 : 64]:	0.8841  0.8792  0.8755  0.8740  0.8710  0.8708  0.8704  0.8700  0.8695  0.8616  0.8615  0.8557  0.8549  0.8544  0.8538  0.8537
2024-03-21 20:48:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 20:48:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #65: GFLOPs: 890.4887. Time: 9.0155 us. Best GFLOPs: 1198.6290
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #66: GFLOPs: 886.0902. Time: 9.0602 us. Best GFLOPs: 1198.6290
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #67: GFLOPs: 1208.9785. Time: 6.6404 us. Best GFLOPs: 1208.9785
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #68: GFLOPs: 1204.8584. Time: 6.6632 us. Best GFLOPs: 1208.9785
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #69: GFLOPs: 1202.9588. Time: 6.6737 us. Best GFLOPs: 1208.9785
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #70: GFLOPs: 1302.3573. Time: 6.1643 us. Best GFLOPs: 1302.3573
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #71: GFLOPs: 1197.2629. Time: 6.7054 us. Best GFLOPs: 1302.3573
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #72: GFLOPs: 1190.4628. Time: 6.7437 us. Best GFLOPs: 1302.3573
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #73: GFLOPs: 885.5286. Time: 9.0660 us. Best GFLOPs: 1302.3573
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #74: GFLOPs: 885.2290. Time: 9.0690 us. Best GFLOPs: 1302.3573
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #75: GFLOPs: 885.5718. Time: 9.0655 us. Best GFLOPs: 1302.3573
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #76: GFLOPs: 1318.8675. Time: 6.0872 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #77: GFLOPs: 881.0233. Time: 9.1123 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #78: GFLOPs: 1283.0605. Time: 6.2570 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #79: GFLOPs: 879.1354. Time: 9.1319 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #80: GFLOPs: 878.9781. Time: 9.1335 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #81: GFLOPs: 880.0483. Time: 9.1224 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #82: GFLOPs: 881.2932. Time: 9.1095 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #83: GFLOPs: 881.0111. Time: 9.1124 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #84: GFLOPs: 877.7153. Time: 9.1467 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #85: GFLOPs: 878.5929. Time: 9.1375 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #86: GFLOPs: 931.2404. Time: 8.6209 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #87: GFLOPs: 1219.4806. Time: 6.5833 us. Best GFLOPs: 1318.8675
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #88: GFLOPs: 1386.9593. Time: 5.7883 us. Best GFLOPs: 1386.9593
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #89: GFLOPs: 880.0474. Time: 9.1224 us. Best GFLOPs: 1386.9593
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #90: GFLOPs: 917.2153. Time: 8.7528 us. Best GFLOPs: 1386.9593
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #91: GFLOPs: 1179.4705. Time: 6.8066 us. Best GFLOPs: 1386.9593
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #92: GFLOPs: 1505.2119. Time: 5.3336 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #93: GFLOPs: 1134.6016. Time: 7.0758 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #94: GFLOPs: 1191.4359. Time: 6.7382 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #95: GFLOPs: 1303.9533. Time: 6.1568 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #96: GFLOPs: 977.0487. Time: 8.2167 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #97: GFLOPs: 1160.5680. Time: 6.9174 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #98: GFLOPs: 1378.8585. Time: 5.8223 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #99: GFLOPs: 1505.1118. Time: 5.3339 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #100: GFLOPs: 819.9612. Time: 9.7909 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #101: GFLOPs: 820.1986. Time: 9.7881 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #102: GFLOPs: 830.9454. Time: 9.6615 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #103: GFLOPs: 830.8197. Time: 9.6629 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #104: GFLOPs: 1366.9294. Time: 5.8731 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #105: GFLOPs: 876.6337. Time: 9.1579 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #106: GFLOPs: 838.4113. Time: 9.5754 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #107: GFLOPs: 837.6113. Time: 9.5846 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #108: GFLOPs: 1351.3250. Time: 5.9410 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #109: GFLOPs: 1464.1049. Time: 5.4833 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #110: GFLOPs: 842.8959. Time: 9.5245 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #111: GFLOPs: 1081.4550. Time: 7.4235 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #112: GFLOPs: 1189.1463. Time: 6.7512 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #113: GFLOPs: 885.1495. Time: 9.0698 us. Best GFLOPs: 1505.2119
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #114: GFLOPs: 1575.4315. Time: 5.0958 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #115: GFLOPs: 924.8491. Time: 8.6805 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #116: GFLOPs: 842.3790. Time: 9.5303 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #117: GFLOPs: 948.4526. Time: 8.4645 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #118: GFLOPs: 1012.8185. Time: 7.9266 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #119: GFLOPs: 706.7362. Time: 11.3595 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #120: GFLOPs: 1162.8333. Time: 6.9040 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #121: GFLOPs: 1025.1371. Time: 7.8313 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #122: GFLOPs: 857.6086. Time: 9.3611 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #123: GFLOPs: 1502.5067. Time: 5.3432 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #124: GFLOPs: 993.7424. Time: 8.0787 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #125: GFLOPs: 963.2652. Time: 8.3343 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #126: GFLOPs: 34.7819. Time: 230.8143 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #127: GFLOPs: 663.1155. Time: 12.1067 us. Best GFLOPs: 1575.4315
2024-03-21 20:48:55 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #128: GFLOPs: 154.9353. Time: 51.8162 us. Best GFLOPs: 1575.4315
2024-03-21 21:53:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 21:53:44 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2024-03-21 21:53:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 401 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:53:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 804 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:53:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 1200 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:53:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 1605 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:53:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 2011 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:53:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 2413 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:53:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 2813 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:53:50 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2024-03-21 21:53:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 105 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:53:57 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 81 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:54:01 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:54:05 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x6521ec24c588)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x6521ed7d8d28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x6521ed7d8c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x6521ec60dbb8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x6521ed568528)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x6521ed7ab118)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x6521ed7d8748)]: 0 failure(s)
2024-03-21 21:54:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9948  0.9948  0.9948  0.9896  0.9894  0.9894  0.9880  0.9849  0.9828  0.9796  0.9769  0.9709  0.9708  0.9558  0.9553  0.9544
[17 : 32]:	0.9512  0.9512  0.9484  0.9484  0.9465  0.9465  0.9465  0.9465  0.9464  0.9434  0.9429  0.9413  0.9410  0.9382  0.9379  0.9358
[33 : 48]:	0.9358  0.9335  0.9335  0.9324  0.9321  0.9309  0.9309  0.9308  0.9296  0.9294  0.9282  0.9246  0.9227  0.9218  0.9218  0.9218
[49 : 64]:	0.9210  0.9195  0.9135  0.9135  0.9113  0.9076  0.9076  0.9063  0.9056  0.8975  0.8969  0.8830  0.8829  0.8801  0.8796  0.8795
2024-03-21 21:54:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 21:54:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #129: GFLOPs: 1598.5937. Time: 5.0220 us. Best GFLOPs: 1598.5937
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #130: GFLOPs: 1598.5715. Time: 5.0221 us. Best GFLOPs: 1598.5937
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #131: GFLOPs: 1590.2206. Time: 5.0485 us. Best GFLOPs: 1598.5937
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #132: GFLOPs: 1582.8088. Time: 5.0721 us. Best GFLOPs: 1598.5937
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #133: GFLOPs: 1949.2280. Time: 4.1186 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #134: GFLOPs: 1948.9427. Time: 4.1192 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #135: GFLOPs: 1594.5311. Time: 5.0348 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #136: GFLOPs: 1589.0033. Time: 5.0523 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #137: GFLOPs: 1589.8428. Time: 5.0497 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #138: GFLOPs: 1358.3156. Time: 5.9104 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #139: GFLOPs: 1411.7487. Time: 5.6867 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #140: GFLOPs: 1830.0049. Time: 4.3870 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #141: GFLOPs: 1472.6222. Time: 5.4516 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #142: GFLOPs: 1541.9832. Time: 5.2064 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #143: GFLOPs: 1814.1504. Time: 4.4253 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #144: GFLOPs: 1512.9303. Time: 5.3064 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #145: GFLOPs: 1543.9050. Time: 5.1999 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #146: GFLOPs: 1472.4594. Time: 5.4522 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #147: GFLOPs: 1823.9924. Time: 4.4014 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #148: GFLOPs: 1818.0440. Time: 4.4158 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #149: GFLOPs: 1477.4405. Time: 5.4338 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #150: GFLOPs: 1529.4230. Time: 5.2491 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #151: GFLOPs: 1424.1259. Time: 5.6373 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #152: GFLOPs: 1493.5343. Time: 5.3753 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #153: GFLOPs: 1700.0505. Time: 4.7223 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #154: GFLOPs: 1475.2549. Time: 5.4419 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #155: GFLOPs: 1485.0246. Time: 5.4061 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #156: GFLOPs: 1578.4521. Time: 5.0861 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #157: GFLOPs: 1503.9654. Time: 5.3380 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #158: GFLOPs: 1480.1388. Time: 5.4239 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #159: GFLOPs: 1309.0436. Time: 6.1328 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #160: GFLOPs: 1584.1595. Time: 5.0678 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #161: GFLOPs: 1584.1619. Time: 5.0678 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #162: GFLOPs: 1518.0150. Time: 5.2886 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #163: GFLOPs: 1517.7354. Time: 5.2896 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #164: GFLOPs: 1561.2655. Time: 5.1421 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #165: GFLOPs: 1358.7945. Time: 5.9083 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #166: GFLOPs: 1554.7141. Time: 5.1638 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #167: GFLOPs: 1401.7946. Time: 5.7271 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #168: GFLOPs: 1476.9719. Time: 5.4356 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #169: GFLOPs: 1477.0015. Time: 5.4354 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #170: GFLOPs: 1500.9157. Time: 5.3488 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #171: GFLOPs: 1504.1089. Time: 5.3375 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #172: GFLOPs: 1495.5454. Time: 5.3680 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #173: GFLOPs: 1872.3029. Time: 4.2879 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #174: GFLOPs: 1517.5882. Time: 5.2901 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #175: GFLOPs: 1510.2999. Time: 5.3156 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #176: GFLOPs: 1471.8470. Time: 5.4545 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #177: GFLOPs: 1561.7034. Time: 5.1406 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #178: GFLOPs: 1479.3064. Time: 5.4270 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #179: GFLOPs: 1565.9790. Time: 5.1266 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #180: GFLOPs: 1564.9339. Time: 5.1300 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #181: GFLOPs: 1611.9467. Time: 4.9804 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #182: GFLOPs: 1485.5261. Time: 5.4043 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #183: GFLOPs: 1455.5727. Time: 5.5155 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #184: GFLOPs: 1449.7475. Time: 5.5376 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #185: GFLOPs: 1597.2043. Time: 5.0264 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #186: GFLOPs: 1628.8982. Time: 4.9286 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #187: GFLOPs: 1155.3440. Time: 6.9487 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #188: GFLOPs: 1111.3946. Time: 7.2235 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #189: GFLOPs: 1509.9363. Time: 5.3169 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #190: GFLOPs: 206.0566. Time: 38.9609 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #191: GFLOPs: 916.3637. Time: 8.7609 us. Best GFLOPs: 1949.2280
2024-03-21 21:54:48 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_conv2d_add_nn_relu_1] Trial #192: GFLOPs: 264.3703. Time: 30.3671 us. Best GFLOPs: 1949.2280
