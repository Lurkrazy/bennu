2024-03-21 13:42:27 [INFO] [task_scheduler.cc:160] Initializing Task #104: "fused_nn_conv2d_add_nn_relu_51"
2024-03-21 13:42:27 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1152), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1152), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(1152), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(1152), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(1152), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:27 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:27 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1152), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1152), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1152), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1152), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(12), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1152), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(1152), rc_0 * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1152), rc_0 * T.int64(96) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 8, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 24, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:27 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1152), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1152), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1152), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1152), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(12), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1152), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(1152), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1152), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 8, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 24, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:27 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(1152), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(1152), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(1152), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(1152), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(12), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(384)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(1152), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(4))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(4) // T.int64(2))
                                    v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax0_ax1_ax2_ax3_fused % T.int64(2))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12288)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), ax0_ax1_ax2_ax3_fused // T.int64(96))
                                    v1 = T.axis.spatial(T.int64(1152), rc_0_ry_0_rx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused % T.int64(96))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(1152), rc_0_ry_0_rx_0_fused * T.int64(96) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(2), T.int64(2)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_2_ff_2_yy_2_xx_2_fused * T.int64(32) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(2) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 4, 8, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 24, 4])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 14:37:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 14:37:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 14:37:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0503b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f3b6d768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f6784918)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f42bea28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f2f76668)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f776b228)]: 487 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3b6ded8)]: 0 failure(s)
2024-03-21 14:37:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0503b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f3b6d768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f6784918)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f42bea28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f2f76668)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f776b228)]: 970 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3b6ded8)]: 0 failure(s)
2024-03-21 14:37:16 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2024-03-21 14:37:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0503b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f3b6d768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f6784918)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f42bea28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f2f76668)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f776b228)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3b6ded8)]: 0 failure(s)
2024-03-21 14:37:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0503b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f3b6d768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f6784918)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f42bea28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f2f76668)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f776b228)]: 107 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3b6ded8)]: 0 failure(s)
2024-03-21 14:37:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0503b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f3b6d768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f6784918)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f42bea28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f2f76668)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f776b228)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3b6ded8)]: 0 failure(s)
2024-03-21 14:37:22 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f0503b38)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f3b6d768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f6784918)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f42bea28)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f2f76668)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f776b228)]: 71 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f3b6ded8)]: 0 failure(s)
2024-03-21 14:37:22 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9978  0.9973  0.9965  0.9964  0.9956  0.9953  0.9953  0.9951  0.9948  0.9939  0.9935  0.9934  0.9933  0.9929  0.9926
[17 : 32]:	0.9923  0.9919  0.9915  0.9901  0.9898  0.9893  0.9891  0.9885  0.9880  0.9873  0.9867  0.9863  0.9854  0.9848  0.9847  0.9838
[33 : 48]:	0.9831  0.9828  0.9819  0.9814  0.9811  0.9806  0.9802  0.9800  0.9797  0.9792  0.9790  0.9784  0.9743  0.9741  0.9741  0.9739
[49 : 64]:	0.9731  0.9730  0.9729  0.9710  0.9709  0.9707  0.9705  0.9701  0.9689  0.9687  0.9685  0.9674  0.9673  0.9671  0.9667  0.9658
2024-03-21 14:37:22 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 14:37:22 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #1: GFLOPs: 217.6014. Time: 265.8665 us. Best GFLOPs: 217.6014
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #2: GFLOPs: 1709.3651. Time: 33.8447 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #3: GFLOPs: 100.6898. Time: 574.5660 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #4: GFLOPs: 1336.9590. Time: 43.2720 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #5: GFLOPs: 52.7101. Time: 1097.5678 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #6: GFLOPs: 16.5114. Time: 3503.8102 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #7: GFLOPs: 453.1604. Time: 127.6655 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #8: GFLOPs: 180.2246. Time: 321.0047 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #9: GFLOPs: 216.7656. Time: 266.8916 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #10: GFLOPs: 323.1385. Time: 179.0345 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #11: GFLOPs: 409.1449. Time: 141.3996 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #12: GFLOPs: 8.9770. Time: 6444.6082 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #13: GFLOPs: 5.4719. Time: 10572.7996 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #14: GFLOPs: 180.3218. Time: 320.8316 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #15: GFLOPs: 112.7399. Time: 513.1540 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #16: GFLOPs: 102.6214. Time: 563.7514 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #17: GFLOPs: 508.2855. Time: 113.8197 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #18: GFLOPs: 1596.8713. Time: 36.2289 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #19: GFLOPs: 369.6700. Time: 156.4988 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #20: GFLOPs: 583.7117. Time: 99.1122 us. Best GFLOPs: 1709.3651
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #21: GFLOPs: 2203.8536. Time: 26.2508 us. Best GFLOPs: 2203.8536
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #22: GFLOPs: 1443.5207. Time: 40.0777 us. Best GFLOPs: 2203.8536
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #23: GFLOPs: 748.1140. Time: 77.3317 us. Best GFLOPs: 2203.8536
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #24: GFLOPs: 645.7821. Time: 89.5858 us. Best GFLOPs: 2203.8536
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #25: GFLOPs: 141.0676. Time: 410.1078 us. Best GFLOPs: 2203.8536
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #26: GFLOPs: 43.5981. Time: 1326.9602 us. Best GFLOPs: 2203.8536
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #27: GFLOPs: 2708.3986. Time: 21.3606 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #28: GFLOPs: 216.1628. Time: 267.6359 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #29: GFLOPs: 7.8860. Time: 7336.1440 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #30: GFLOPs: 400.8364. Time: 144.3305 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #31: GFLOPs: 142.5778. Time: 405.7639 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #32: GFLOPs: 1054.5085. Time: 54.8625 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #33: GFLOPs: 366.1763. Time: 157.9920 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #34: GFLOPs: 81.5340. Time: 709.5556 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #35: GFLOPs: 227.7989. Time: 253.9649 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #36: GFLOPs: 618.6647. Time: 93.5126 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #37: GFLOPs: 929.2029. Time: 62.2608 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #38: GFLOPs: 67.1263. Time: 861.8521 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #39: GFLOPs: 768.5160. Time: 75.2788 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #40: GFLOPs: 2216.7348. Time: 26.0983 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #41: GFLOPs: 471.0666. Time: 122.8126 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #42: GFLOPs: 361.5831. Time: 159.9990 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #43: GFLOPs: 364.1238. Time: 158.8826 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #44: GFLOPs: 499.6622. Time: 115.7841 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #45: GFLOPs: 175.5377. Time: 329.5755 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #46: GFLOPs: 482.5593. Time: 119.8877 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #47: GFLOPs: 22.0879. Time: 2619.2081 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #48: GFLOPs: 406.1418. Time: 142.4451 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #49: GFLOPs: 466.6726. Time: 123.9690 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #50: GFLOPs: 554.5864. Time: 104.3172 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #51: GFLOPs: 201.3008. Time: 287.3954 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #52: GFLOPs: 114.8735. Time: 503.6227 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #53: GFLOPs: 23.4779. Time: 2464.1435 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #54: GFLOPs: 382.0747. Time: 151.4179 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #55: GFLOPs: 461.1618. Time: 125.4504 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #56: GFLOPs: 8.5900. Time: 6734.9161 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #57: GFLOPs: 20.9555. Time: 2760.7558 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #58: GFLOPs: 539.5252. Time: 107.2293 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #59: GFLOPs: 240.3990. Time: 240.6538 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #60: GFLOPs: 208.9795. Time: 276.8354 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #61: GFLOPs: 412.7137. Time: 140.1769 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #62: GFLOPs: 27.3953. Time: 2111.7854 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #63: GFLOPs: 85.3865. Time: 677.5420 us. Best GFLOPs: 2708.3986
2024-03-21 15:48:33 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #64: GFLOPs: 22.9719. Time: 2518.4255 us. Best GFLOPs: 2708.3986
