2024-03-21 10:38:30 [INFO] [task_scheduler.cc:160] Initializing Task #124: "fused_nn_conv2d_add_nn_relu_61"
2024-03-21 10:38:30 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(320), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(320), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 10:38:30 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:30 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(10), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3136)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(320), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(320), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(320), rc_0 * T.int64(32) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 4, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[10, 1, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 10:38:30 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(10), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3136)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 4, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[10, 1, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 10:38:30 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(320), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(320), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(320), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(10), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(3136)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(98))
                                    v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(98) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(2048)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(7)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + xx_3 * T.int64(7) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(320), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(32) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(7)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(64) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused * T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 4, 2, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[10, 1, 32])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 11:40:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:40:24 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:40:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd82ab3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6016fd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd587a5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4a0e358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd2ccd678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd65e8c58)]: 486 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd6016f08)]: 0 failure(s)
2024-03-21 11:40:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd82ab3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6016fd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd587a5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4a0e358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd2ccd678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd65e8c58)]: 978 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd6016f08)]: 0 failure(s)
2024-03-21 11:40:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd82ab3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6016fd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd587a5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4a0e358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd2ccd678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd65e8c58)]: 1462 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd6016f08)]: 0 failure(s)
2024-03-21 11:40:26 [INFO] [evolutionary_search.cc:723] Sampled 74 candidate(s)
2024-03-21 11:40:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd82ab3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6016fd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd587a5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4a0e358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd2ccd678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd65e8c58)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd6016f08)]: 0 failure(s)
2024-03-21 11:40:28 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd82ab3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6016fd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd587a5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4a0e358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd2ccd678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd65e8c58)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd6016f08)]: 0 failure(s)
2024-03-21 11:40:30 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd82ab3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6016fd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd587a5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4a0e358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd2ccd678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd65e8c58)]: 75 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd6016f08)]: 0 failure(s)
2024-03-21 11:40:31 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd82ab3d8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd6016fd8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd587a5b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd4a0e358)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd2ccd678)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd65e8c58)]: 73 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd6016f08)]: 0 failure(s)
2024-03-21 11:40:31 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9991  0.9983  0.9982  0.9953  0.9952  0.9945  0.9943  0.9939  0.9935  0.9925  0.9924  0.9923  0.9917  0.9913  0.9911
[17 : 32]:	0.9906  0.9891  0.9867  0.9864  0.9863  0.9861  0.9853  0.9852  0.9839  0.9836  0.9834  0.9831  0.9829  0.9824  0.9817  0.9812
[33 : 48]:	0.9805  0.9801  0.9800  0.9796  0.9776  0.9751  0.9749  0.9745  0.9738  0.9725  0.9721  0.9713  0.9704  0.9704  0.9704  0.9699
[49 : 64]:	0.9694  0.9694  0.9681  0.9674  0.9669  0.9666  0.9666  0.9665  0.9633  0.9633  0.9626  0.9619  0.9611  0.9610  0.9608  0.9584
2024-03-21 11:40:31 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:40:31 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #1: GFLOPs: 172.0881. Time: 93.5945 us. Best GFLOPs: 172.0881
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #2: GFLOPs: 70.3718. Time: 228.8770 us. Best GFLOPs: 172.0881
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #3: GFLOPs: 136.4580. Time: 118.0326 us. Best GFLOPs: 172.0881
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #4: GFLOPs: 206.0053. Time: 78.1849 us. Best GFLOPs: 206.0053
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #5: GFLOPs: 171.7976. Time: 93.7528 us. Best GFLOPs: 206.0053
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #6: GFLOPs: 65.9602. Time: 244.1852 us. Best GFLOPs: 206.0053
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #7: GFLOPs: 134.8481. Time: 119.4417 us. Best GFLOPs: 206.0053
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #8: GFLOPs: 148.0674. Time: 108.7782 us. Best GFLOPs: 206.0053
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #9: GFLOPs: 122.2162. Time: 131.7869 us. Best GFLOPs: 206.0053
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #10: GFLOPs: 369.2431. Time: 43.6203 us. Best GFLOPs: 369.2431
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #11: GFLOPs: 125.8280. Time: 128.0041 us. Best GFLOPs: 369.2431
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #12: GFLOPs: 152.6706. Time: 105.4983 us. Best GFLOPs: 369.2431
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #13: GFLOPs: 18.2618. Time: 881.9790 us. Best GFLOPs: 369.2431
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #14: GFLOPs: 100.2104. Time: 160.7268 us. Best GFLOPs: 369.2431
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #15: GFLOPs: 230.3767. Time: 69.9137 us. Best GFLOPs: 369.2431
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #16: GFLOPs: 597.0317. Time: 26.9776 us. Best GFLOPs: 597.0317
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #17: GFLOPs: 219.4956. Time: 73.3796 us. Best GFLOPs: 597.0317
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #18: GFLOPs: 7.1153. Time: 2263.6313 us. Best GFLOPs: 597.0317
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #19: GFLOPs: 165.4718. Time: 97.3368 us. Best GFLOPs: 597.0317
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #20: GFLOPs: 789.0455. Time: 20.4126 us. Best GFLOPs: 789.0455
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #21: GFLOPs: 2333.8224. Time: 6.9013 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #22: GFLOPs: 1411.8955. Time: 11.4077 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #23: GFLOPs: 727.1703. Time: 22.1496 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #24: GFLOPs: 247.4547. Time: 65.0887 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #25: GFLOPs: 591.8591. Time: 27.2134 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #26: GFLOPs: 772.1879. Time: 20.8583 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #27: GFLOPs: 802.0310. Time: 20.0821 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #28: GFLOPs: 497.4446. Time: 32.3785 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #29: GFLOPs: 337.1132. Time: 47.7777 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #30: GFLOPs: 1509.8912. Time: 10.6673 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #31: GFLOPs: 148.5215. Time: 108.4456 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #32: GFLOPs: 72.0065. Time: 223.6812 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #33: GFLOPs: 508.8692. Time: 31.6515 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #34: GFLOPs: 102.9038. Time: 156.5200 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #35: GFLOPs: 200.2266. Time: 80.4413 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #36: GFLOPs: 233.2172. Time: 69.0622 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #37: GFLOPs: 40.8369. Time: 394.4103 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #38: GFLOPs: 255.3741. Time: 63.0702 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #39: GFLOPs: 181.8032. Time: 88.5930 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #40: GFLOPs: 31.4522. Time: 512.0943 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #41: GFLOPs: 300.8159. Time: 53.5427 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #42: GFLOPs: 334.8910. Time: 48.0947 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #43: GFLOPs: 469.2896. Time: 34.3210 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #44: GFLOPs: 119.7976. Time: 134.4476 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #45: GFLOPs: 34.0550. Time: 472.9559 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #46: GFLOPs: 356.7847. Time: 45.1435 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #47: GFLOPs: 967.4373. Time: 16.6486 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #48: GFLOPs: 255.5499. Time: 63.0268 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #49: GFLOPs: 604.9539. Time: 26.6243 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #50: GFLOPs: 289.5872. Time: 55.6188 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #51: GFLOPs: 133.6692. Time: 120.4952 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #52: GFLOPs: 307.8468. Time: 52.3198 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #53: GFLOPs: 18.0023. Time: 894.6926 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #54: GFLOPs: 396.6626. Time: 40.6050 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #55: GFLOPs: 547.0282. Time: 29.4436 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #56: GFLOPs: 896.0303. Time: 17.9754 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #57: GFLOPs: 551.7566. Time: 29.1913 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #58: GFLOPs: 9.6886. Time: 1662.4251 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #59: GFLOPs: 466.5080. Time: 34.5257 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #60: GFLOPs: 145.6036. Time: 110.6188 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #61: GFLOPs: 354.3627. Time: 45.4520 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #62: GFLOPs: 287.3430. Time: 56.0532 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #63: GFLOPs: 54.7301. Time: 294.2897 us. Best GFLOPs: 2333.8224
2024-03-21 12:22:46 [INFO] [task_scheduler.cc:131] [Task #124: fused_nn_conv2d_add_nn_relu_61] Trial #64: GFLOPs: 136.3094. Time: 118.1613 us. Best GFLOPs: 2333.8224
