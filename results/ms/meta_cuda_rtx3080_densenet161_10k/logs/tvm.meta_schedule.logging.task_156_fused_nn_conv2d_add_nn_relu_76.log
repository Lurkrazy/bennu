2024-03-21 07:30:26 [INFO] [task_scheduler.cc:160] Initializing Task #156: "fused_nn_conv2d_add_nn_relu_76"
2024-03-21 07:30:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(144), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(144), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56), T.int64(144), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:26 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(144), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(144), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(12), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(144), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(144), rc_0 * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(28), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(48) + ff_3 * T.int64(24) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(144), rc_0 * T.int64(12) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(8), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(48) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 2, 2, 24])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 8, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 28, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 4, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:26 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(144), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(144), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(12), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(144), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(144), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(28), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(48) + ff_3 * T.int64(24) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(144), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(8), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(48) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 2, 2, 24])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 8, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 28, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 4, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:26 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(144), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(192), T.int64(144), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(144), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(144), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(12), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(144), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused // T.int64(3136))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(3136) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1152)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + ax0_ax1_ax2_ax3_fused // T.int64(12))
                                    v1 = T.axis.spatial(T.int64(144), rc_0_ry_0_rx_0_fused * T.int64(12) + ax0_ax1_ax2_ax3_fused % T.int64(12))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(8), T.int64(28), T.int64(3), T.int64(1), T.int64(1), T.int64(1), T.int64(24), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(48) + ff_3 * T.int64(24) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(144), rc_0_ry_0_rx_0_fused * T.int64(12) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(8), T.int64(28)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(96) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(48) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 2, 2, 24])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 7, 8, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 1, 28, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[12, 4, 3])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:55:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:55:31 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:55:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eed1bee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec366d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f59d2698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5308a98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e9ee9848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f07aa458)]: 490 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec365d8)]: 0 failure(s)
2024-03-21 08:55:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eed1bee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec366d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f59d2698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5308a98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e9ee9848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f07aa458)]: 976 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec365d8)]: 0 failure(s)
2024-03-21 08:55:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eed1bee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec366d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f59d2698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5308a98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e9ee9848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f07aa458)]: 1456 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec365d8)]: 0 failure(s)
2024-03-21 08:55:34 [INFO] [evolutionary_search.cc:723] Sampled 80 candidate(s)
2024-03-21 08:55:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eed1bee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec366d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f59d2698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5308a98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e9ee9848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f07aa458)]: 120 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec365d8)]: 0 failure(s)
2024-03-21 08:55:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eed1bee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec366d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f59d2698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5308a98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e9ee9848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f07aa458)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec365d8)]: 0 failure(s)
2024-03-21 08:55:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eed1bee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec366d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f59d2698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5308a98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e9ee9848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f07aa458)]: 103 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec365d8)]: 0 failure(s)
2024-03-21 08:55:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eed1bee8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8eec366d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f59d2698)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f5308a98)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8e9ee9848)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f07aa458)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8eec365d8)]: 0 failure(s)
2024-03-21 08:55:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9986  0.9984  0.9969  0.9965  0.9958  0.9952  0.9951  0.9951  0.9942  0.9939  0.9915  0.9910  0.9902  0.9887  0.9881
[17 : 32]:	0.9878  0.9871  0.9870  0.9865  0.9859  0.9854  0.9853  0.9829  0.9829  0.9819  0.9818  0.9809  0.9802  0.9788  0.9782  0.9773
[33 : 48]:	0.9772  0.9762  0.9760  0.9750  0.9739  0.9736  0.9731  0.9730  0.9730  0.9723  0.9713  0.9696  0.9693  0.9685  0.9667  0.9665
[49 : 64]:	0.9659  0.9657  0.9638  0.9636  0.9633  0.9624  0.9623  0.9614  0.9611  0.9606  0.9603  0.9602  0.9596  0.9588  0.9570  0.9556
2024-03-21 08:55:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:55:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #1: GFLOPs: 1877.1461. Time: 93.0202 us. Best GFLOPs: 1877.1461
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #2: GFLOPs: 5581.7454. Time: 31.2828 us. Best GFLOPs: 5581.7454
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #3: GFLOPs: 151.6681. Time: 1151.2805 us. Best GFLOPs: 5581.7454
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #4: GFLOPs: 131.4626. Time: 1328.2295 us. Best GFLOPs: 5581.7454
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #5: GFLOPs: 2629.7325. Time: 66.3993 us. Best GFLOPs: 5581.7454
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #6: GFLOPs: 3174.7836. Time: 54.9998 us. Best GFLOPs: 5581.7454
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #7: GFLOPs: 27.6596. Time: 6312.8957 us. Best GFLOPs: 5581.7454
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #8: GFLOPs: 2895.3597. Time: 60.3077 us. Best GFLOPs: 5581.7454
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #9: GFLOPs: 6232.0365. Time: 28.0185 us. Best GFLOPs: 6232.0365
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #10: GFLOPs: 7504.9771. Time: 23.2662 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #11: GFLOPs: 1027.6355. Time: 169.9168 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #12: GFLOPs: 57.3416. Time: 3045.1267 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #13: GFLOPs: 3629.6147. Time: 48.1077 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #14: GFLOPs: 4842.5094. Time: 36.0583 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #15: GFLOPs: 182.7654. Time: 955.3914 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #16: GFLOPs: 5753.6695. Time: 30.3480 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #17: GFLOPs: 309.7924. Time: 563.6435 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #18: GFLOPs: 144.2816. Time: 1210.2200 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #19: GFLOPs: 6163.3190. Time: 28.3309 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #20: GFLOPs: 737.0003. Time: 236.9232 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #21: GFLOPs: 136.0866. Time: 1283.0983 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #22: GFLOPs: 302.3270. Time: 577.5616 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #23: GFLOPs: 174.3434. Time: 1001.5433 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #24: GFLOPs: 4978.6882. Time: 35.0720 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #25: GFLOPs: 7161.8512. Time: 24.3809 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #26: GFLOPs: 95.0376. Time: 1837.2980 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #27: GFLOPs: 3617.7248. Time: 48.2658 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #28: GFLOPs: 2207.0133. Time: 79.1171 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #29: GFLOPs: 6907.8929. Time: 25.2772 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #30: GFLOPs: 3229.4630. Time: 54.0686 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #31: GFLOPs: 335.8226. Time: 519.9546 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #32: GFLOPs: 3499.5487. Time: 49.8957 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #33: GFLOPs: 3589.5863. Time: 48.6442 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #34: GFLOPs: 3025.9107. Time: 57.7058 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #35: GFLOPs: 1877.7151. Time: 92.9920 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #36: GFLOPs: 303.8912. Time: 574.5888 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #37: GFLOPs: 4572.7297. Time: 38.1856 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #38: GFLOPs: 119.3064. Time: 1463.5631 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #39: GFLOPs: 508.0584. Time: 343.6859 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #40: GFLOPs: 313.3025. Time: 557.3287 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #41: GFLOPs: 188.6355. Time: 925.6607 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #42: GFLOPs: 57.8080. Time: 3020.5590 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #43: GFLOPs: 4227.7870. Time: 41.3012 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #44: GFLOPs: 3590.7197. Time: 48.6288 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #45: GFLOPs: 437.3196. Time: 399.2789 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #46: GFLOPs: 3493.1483. Time: 49.9871 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #47: GFLOPs: 693.7770. Time: 251.6839 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #48: GFLOPs: 1037.3932. Time: 168.3185 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #49: GFLOPs: 616.9824. Time: 283.0105 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #50: GFLOPs: 279.5321. Time: 624.6599 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #51: GFLOPs: 4310.7277. Time: 40.5065 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #52: GFLOPs: 540.9857. Time: 322.7673 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #53: GFLOPs: 185.1163. Time: 943.2584 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #54: GFLOPs: 2874.5947. Time: 60.7433 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #55: GFLOPs: 5477.9912. Time: 31.8753 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #56: GFLOPs: 3344.5348. Time: 52.2083 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #57: GFLOPs: 2331.8597. Time: 74.8812 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #58: GFLOPs: 2960.4781. Time: 58.9812 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #59: GFLOPs: 101.4887. Time: 1720.5110 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #60: GFLOPs: 2475.9355. Time: 70.5238 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #61: GFLOPs: 3176.5308. Time: 54.9696 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #62: GFLOPs: 1345.4112. Time: 129.7837 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #63: GFLOPs: 124.4004. Time: 1403.6333 us. Best GFLOPs: 7504.9771
2024-03-21 09:12:05 [INFO] [task_scheduler.cc:131] [Task #156: fused_nn_conv2d_add_nn_relu_76] Trial #64: GFLOPs: 145.4964. Time: 1200.1158 us. Best GFLOPs: 7504.9771
