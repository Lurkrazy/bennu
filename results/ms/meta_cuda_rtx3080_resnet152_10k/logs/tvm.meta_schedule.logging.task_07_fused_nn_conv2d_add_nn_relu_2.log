2024-03-22 04:15:24 [INFO] [task_scheduler.cc:160] Initializing Task #7: "fused_nn_conv2d_add_nn_relu_2"
2024-03-22 04:15:24 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-22 04:15:24 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-22 04:15:24 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(57344)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(224) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused % T.int64(256))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(256) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 1, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 256, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-22 04:15:24 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(57344)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(224) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused % T.int64(256))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 1, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 256, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-22 04:15:24 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(56), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(57344)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused // T.int64(224))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(224) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused % T.int64(256))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + yy_3 * T.int64(4) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(256), rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(4), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 2, 1, 2, 4])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 14, 1, 4])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[14, 1, 1, 2, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 256, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-22 04:22:45 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 04:22:45 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-22 04:22:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 491 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 04:22:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 976 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 04:22:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 1458 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 04:22:47 [INFO] [evolutionary_search.cc:723] Sampled 78 candidate(s)
2024-03-22 04:22:48 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 137 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 04:22:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 102 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 04:22:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 97 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 04:22:53 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 116 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 04:22:53 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9984  0.9979  0.9978  0.9976  0.9975  0.9971  0.9968  0.9964  0.9956  0.9936  0.9916  0.9906  0.9900  0.9898  0.9897
[17 : 32]:	0.9889  0.9883  0.9879  0.9864  0.9846  0.9844  0.9843  0.9838  0.9830  0.9818  0.9818  0.9814  0.9801  0.9795  0.9792  0.9781
[33 : 48]:	0.9778  0.9771  0.9768  0.9767  0.9760  0.9753  0.9728  0.9723  0.9706  0.9705  0.9683  0.9683  0.9679  0.9667  0.9664  0.9664
[49 : 64]:	0.9659  0.9646  0.9645  0.9644  0.9642  0.9642  0.9633  0.9632  0.9631  0.9631  0.9626  0.9622  0.9619  0.9615  0.9615  0.9588
2024-03-22 04:22:53 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 04:22:53 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #1: GFLOPs: 83.4051. Time: 1236.8777 us. Best GFLOPs: 83.4051
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #2: GFLOPs: 3233.2894. Time: 31.9062 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #3: GFLOPs: 1757.5574. Time: 58.6962 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #4: GFLOPs: 714.2821. Time: 144.4273 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #5: GFLOPs: 2335.8723. Time: 44.1642 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #6: GFLOPs: 113.3646. Time: 910.0009 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #7: GFLOPs: 2700.2663. Time: 38.2043 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #8: GFLOPs: 2171.8009. Time: 47.5006 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #9: GFLOPs: 113.2609. Time: 910.8342 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #10: GFLOPs: 2382.8211. Time: 43.2940 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #11: GFLOPs: 98.9273. Time: 1042.8046 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #12: GFLOPs: 1007.8589. Time: 102.3574 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #13: GFLOPs: 353.5375. Time: 291.7989 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #14: GFLOPs: 1445.6283. Time: 71.3613 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #15: GFLOPs: 210.5373. Time: 489.9933 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #16: GFLOPs: 140.6670. Time: 733.3764 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #17: GFLOPs: 2773.3409. Time: 37.1977 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #18: GFLOPs: 685.7399. Time: 150.4387 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #19: GFLOPs: 2921.0130. Time: 35.3172 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #20: GFLOPs: 2180.2215. Time: 47.3171 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #21: GFLOPs: 3086.5986. Time: 33.4225 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #22: GFLOPs: 2665.8534. Time: 38.6975 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #23: GFLOPs: 126.9250. Time: 812.7781 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #24: GFLOPs: 1072.6367. Time: 96.1760 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #25: GFLOPs: 83.2230. Time: 1239.5836 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #26: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(14), T.int64(7)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + yy_3_init * T.int64(14) + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + xx_3_init * T.int64(7) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(49)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1568))
                                    v2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1568) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(2)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(7)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + yy_3 * T.int64(14) + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + xx_3 * T.int64(7) + xx_4)
                                v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(14), T.int64(28)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) * T.int64(2) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 32, 2, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 2, 1, 14])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[2, 1, 1, 4, 7])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 2, 1])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115 = sch.split(loop=l113, factors=[None, 64], preserve_unit_iters=True)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b116 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b116, ann_key="meta_schedule.unroll_explicit")
b117, b118, b119, b120 = sch.get_child_blocks(b116)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b117)
l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b118)
l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b119)
sch.annotate(block_or_loop=l133, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l133, ann_key="pragma_unroll_explicit", ann_val=1)
l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b120)
b158 = sch.get_block(name="conv2d_nchw", func_name="main")
l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176 = sch.get_loops(block=b158)
b177 = sch.decompose_reduction(block=b158, loop=l162)
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #27: GFLOPs: 2576.5606. Time: 40.0386 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #28: GFLOPs: 1931.4422. Time: 53.4118 us. Best GFLOPs: 3233.2894
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #29: GFLOPs: 4203.8169. Time: 24.5400 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #30: GFLOPs: 390.2000. Time: 264.3820 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #31: GFLOPs: 459.9599. Time: 224.2845 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #32: GFLOPs: 2614.6566. Time: 39.4552 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #33: GFLOPs: 2731.4037. Time: 37.7688 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #34: GFLOPs: 2920.7943. Time: 35.3198 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #35: GFLOPs: 853.3861. Time: 120.8853 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:121] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #36: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(64), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(64), T.int64(56), T.int64(56)), scope="local")
        pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(256), T.int64(56), T.int64(56)), scope="shared")
        p1_shared = T.alloc_buffer((T.int64(64), T.int64(256), T.int64(1), T.int64(1)), scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(32) + ff_3_init * T.int64(32) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + xx_3_init * T.int64(2) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0_ry_0_rx_0_fused in T.serial(T.int64(128), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(98)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(1568))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(1568) // T.int64(56))
                                    v3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(56))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in range(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) // T.int64(2))
                                    v1 = T.axis.spatial(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) % T.int64(2))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(32), T.int64(1), T.int64(2)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(32) + ff_3 * T.int64(32) + ff_4)
                                v_yy = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + xx_3 * T.int64(2) + xx_4)
                                v_rc = T.axis.reduce(T.int64(256), rc_0_ry_0_rx_0_fused * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(32), T.int64(7), T.int64(2)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(16) * T.int64(32) + ax1)
                            v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(16) // T.int64(4) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(4) * T.int64(2) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                            T.writes(T_relu[v0, v1, v2, v3])
                            T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 2, 1, 32])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[2, 1, 4, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 4, 1, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[128, 1, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
sch.enter_postproc()
sch.unannotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch")
l102, l103, l104, l105, l106 = sch.get_loops(block=b74)
l107, l108 = sch.split(loop=l106, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113 = sch.get_loops(block=b87)
l114, l115 = sch.split(loop=l113, factors=[None, 32], preserve_unit_iters=True)
sch.bind(loop=l115, thread_axis="threadIdx.x")
b116 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b116, ann_key="meta_schedule.unroll_explicit")
b117, b118, b119, b120 = sch.get_child_blocks(b116)
l121, l122, l123, l124, l125, l126 = sch.get_loops(block=b117)
l127, l128, l129, l130, l131, l132 = sch.get_loops(block=b118)
l133, l134, l135, l136, l137, l138, l139, l140, l141, l142, l143, l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b119)
sch.annotate(block_or_loop=l133, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l133, ann_key="pragma_unroll_explicit", ann_val=1)
l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b120)
b158 = sch.get_block(name="conv2d_nchw", func_name="main")
l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176 = sch.get_loops(block=b158)
b177 = sch.decompose_reduction(block=b158, loop=l162)
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #37: GFLOPs: 2284.1617. Time: 45.1640 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #38: GFLOPs: 2147.3336. Time: 48.0418 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #39: GFLOPs: 770.4524. Time: 133.8978 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #40: GFLOPs: 604.2264. Time: 170.7338 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #41: GFLOPs: 1992.3437. Time: 51.7791 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #42: GFLOPs: 1337.1576. Time: 77.1501 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #43: GFLOPs: 2299.3806. Time: 44.8651 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #44: GFLOPs: 1700.2740. Time: 60.6737 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #45: GFLOPs: 622.5359. Time: 165.7123 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #46: GFLOPs: 673.9484. Time: 153.0709 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #47: GFLOPs: 2387.6707. Time: 43.2061 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #48: GFLOPs: 2670.2992. Time: 38.6331 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #49: GFLOPs: 160.6385. Time: 642.1989 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #50: GFLOPs: 13.2396. Time: 7791.9311 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #51: GFLOPs: 14.8808. Time: 6932.5480 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #52: GFLOPs: 2808.4749. Time: 36.7323 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #53: GFLOPs: 361.1952. Time: 285.6125 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #54: GFLOPs: 29.0055. Time: 3556.6346 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #55: GFLOPs: 2737.6197. Time: 37.6830 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #56: GFLOPs: 2527.3387. Time: 40.8184 us. Best GFLOPs: 4203.8169
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #57: GFLOPs: 4212.5257. Time: 24.4893 us. Best GFLOPs: 4212.5257
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #58: GFLOPs: 3613.3096. Time: 28.5505 us. Best GFLOPs: 4212.5257
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #59: GFLOPs: 714.3239. Time: 144.4189 us. Best GFLOPs: 4212.5257
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #60: GFLOPs: 2113.9839. Time: 48.7997 us. Best GFLOPs: 4212.5257
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #61: GFLOPs: 160.9000. Time: 641.1553 us. Best GFLOPs: 4212.5257
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #62: GFLOPs: 48.6285. Time: 2121.4280 us. Best GFLOPs: 4212.5257
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #63: GFLOPs: 1125.1339. Time: 91.6885 us. Best GFLOPs: 4212.5257
2024-03-22 04:47:05 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #64: GFLOPs: 99.2995. Time: 1038.8955 us. Best GFLOPs: 4212.5257
2024-03-22 05:40:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-22 05:40:49 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2024-03-22 05:40:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 425 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 05:40:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 860 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 05:40:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 1289 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 05:40:51 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2024-03-22 05:40:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 101 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 05:40:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 05:40:58 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 05:41:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x64ac543a8608)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x64ac53cfee98)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x64ac677a5e18)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x64ac60a04378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x64ac62229e68)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x64ac4c8d6cd8)]: 80 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x64ac53cfed98)]: 0 failure(s)
2024-03-22 05:41:01 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.2507  1.2248  1.1944  1.1865  1.1754  1.1490  1.1466  1.1383  1.1266  1.1204  1.1139  1.1112  1.1031  1.0855  1.0850  1.0826
[17 : 32]:	1.0769  1.0729  1.0664  1.0610  1.0496  1.0373  1.0373  1.0320  1.0220  1.0100  1.0095  1.0088  1.0084  1.0082  1.0075  1.0061
[33 : 48]:	1.0057  1.0008  0.9823  0.9822  0.9818  0.9815  0.9802  0.9791  0.9777  0.9760  0.9753  0.9716  0.9693  0.9682  0.9656  0.9646
[49 : 64]:	0.9641  0.9627  0.9619  0.9612  0.9602  0.9600  0.9599  0.9570  0.9556  0.9538  0.9537  0.9537  0.9535  0.9534  0.9525  0.9515
2024-03-22 05:41:01 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-22 05:41:01 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #65: GFLOPs: 2870.6785. Time: 35.9364 us. Best GFLOPs: 4212.5257
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #66: GFLOPs: 1907.2285. Time: 54.0899 us. Best GFLOPs: 4212.5257
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #67: GFLOPs: 1961.3899. Time: 52.5963 us. Best GFLOPs: 4212.5257
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #68: GFLOPs: 1961.2638. Time: 52.5997 us. Best GFLOPs: 4212.5257
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #69: GFLOPs: 1944.4371. Time: 53.0549 us. Best GFLOPs: 4212.5257
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #70: GFLOPs: 3374.1614. Time: 30.5741 us. Best GFLOPs: 4212.5257
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #71: GFLOPs: 5763.3164. Time: 17.8997 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #72: GFLOPs: 3651.0241. Time: 28.2556 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #73: GFLOPs: 310.5417. Time: 332.1997 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #74: GFLOPs: 5066.2233. Time: 20.3627 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #75: GFLOPs: 310.1383. Time: 332.6318 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #76: GFLOPs: 1960.7945. Time: 52.6123 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #77: GFLOPs: 4571.2274. Time: 22.5676 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #78: GFLOPs: 4851.1494. Time: 21.2654 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #79: GFLOPs: 5554.2394. Time: 18.5735 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #80: GFLOPs: 5568.7674. Time: 18.5251 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #81: GFLOPs: 2837.7481. Time: 36.3534 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #82: GFLOPs: 5480.6155. Time: 18.8230 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #83: GFLOPs: 4609.8120. Time: 22.3788 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #84: GFLOPs: 1754.5376. Time: 58.7972 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #85: GFLOPs: 3093.6333. Time: 33.3465 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #86: GFLOPs: 978.6047. Time: 105.4173 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #87: GFLOPs: 984.0680. Time: 104.8320 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #88: GFLOPs: 3886.7754. Time: 26.5418 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #89: GFLOPs: 4847.9593. Time: 21.2794 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #90: GFLOPs: 4689.6660. Time: 21.9977 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #91: GFLOPs: 3416.6841. Time: 30.1936 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #92: GFLOPs: 3167.5683. Time: 32.5682 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #93: GFLOPs: 2066.8622. Time: 49.9123 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #94: GFLOPs: 4348.7450. Time: 23.7222 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #95: GFLOPs: 4324.0402. Time: 23.8577 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #96: GFLOPs: 3424.2754. Time: 30.1266 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #97: GFLOPs: 5198.8415. Time: 19.8432 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #98: GFLOPs: 3209.3337. Time: 32.1443 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #99: GFLOPs: 5193.0035. Time: 19.8655 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #100: GFLOPs: 3160.4772. Time: 32.6412 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #101: GFLOPs: 5700.5814. Time: 18.0967 us. Best GFLOPs: 5763.3164
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #102: GFLOPs: 5915.8850. Time: 17.4381 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #103: GFLOPs: 3127.7373. Time: 32.9829 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #104: GFLOPs: 3299.5367. Time: 31.2656 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #105: GFLOPs: 2965.3225. Time: 34.7894 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #106: GFLOPs: 4581.8112. Time: 22.5155 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #107: GFLOPs: 3449.1858. Time: 29.9090 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #108: GFLOPs: 5545.4311. Time: 18.6030 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #109: GFLOPs: 3094.7347. Time: 33.3346 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #110: GFLOPs: 4154.9486. Time: 24.8287 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #111: GFLOPs: 5574.2104. Time: 18.5070 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #112: GFLOPs: 1758.1412. Time: 58.6767 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #113: GFLOPs: 4887.9736. Time: 21.1052 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #114: GFLOPs: 4200.7893. Time: 24.5577 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #115: GFLOPs: 3173.6192. Time: 32.5061 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #116: GFLOPs: 2407.7233. Time: 42.8462 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #117: GFLOPs: 3878.5882. Time: 26.5978 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #118: GFLOPs: 1737.3239. Time: 59.3797 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #119: GFLOPs: 3854.3666. Time: 26.7649 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #120: GFLOPs: 2329.9306. Time: 44.2768 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #121: GFLOPs: 3090.4466. Time: 33.3809 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #122: GFLOPs: 3448.2406. Time: 29.9172 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #123: GFLOPs: 4210.0946. Time: 24.5035 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #124: GFLOPs: 3209.7002. Time: 32.1407 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #125: GFLOPs: 4095.0034. Time: 25.1921 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #126: GFLOPs: 237.2878. Time: 434.7541 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #127: GFLOPs: 262.8588. Time: 392.4611 us. Best GFLOPs: 5915.8850
2024-03-22 05:41:51 [INFO] [task_scheduler.cc:131] [Task #7: fused_nn_conv2d_add_nn_relu_2] Trial #128: GFLOPs: 3205.5344. Time: 32.1824 us. Best GFLOPs: 5915.8850
