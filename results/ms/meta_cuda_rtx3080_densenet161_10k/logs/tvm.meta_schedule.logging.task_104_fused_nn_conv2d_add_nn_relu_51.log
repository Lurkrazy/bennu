2024-03-21 07:30:23 [INFO] [task_scheduler.cc:160] Initializing Task #104: "fused_nn_conv2d_add_nn_relu_51"
2024-03-21 07:30:23 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(768), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(768), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14), T.int64(768), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(192), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 07:30:23 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 07:30:23 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(768), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(768), rc_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9216)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(768), rc_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused % T.int64(192))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(768), rc_0 * T.int64(192) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 6, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 96, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 07:30:23 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(768), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(192) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9216)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(192) + ax0_ax1_ax2_ax3_fused % T.int64(192))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(192) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 6, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 96, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 07:30:23 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(192), T.int64(768), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(192), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(768), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(192), T.int64(768), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(28), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(37632)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(192) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(9216)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(192))
                                    v1 = T.axis.spatial(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(192) + ax0_ax1_ax2_ax3_fused % T.int64(192))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(96), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(8) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(768), rc_0_ry_0_rx_0_fused * T.int64(192) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(192), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(8) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 1, 6, 4, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 14, 1, 1, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 2, 7, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 96, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 08:22:34 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 08:22:34 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 08:22:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eaaa2a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ebac6ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f019ee48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f17f1d08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f3292958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f597b9b8)]: 488 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8efd2a8e8)]: 0 failure(s)
2024-03-21 08:22:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eaaa2a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ebac6ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f019ee48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f17f1d08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f3292958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f597b9b8)]: 971 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8efd2a8e8)]: 0 failure(s)
2024-03-21 08:22:35 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2024-03-21 08:22:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eaaa2a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ebac6ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f019ee48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f17f1d08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f3292958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f597b9b8)]: 113 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8efd2a8e8)]: 0 failure(s)
2024-03-21 08:22:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eaaa2a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ebac6ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f019ee48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f17f1d08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f3292958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f597b9b8)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8efd2a8e8)]: 0 failure(s)
2024-03-21 08:22:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eaaa2a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ebac6ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f019ee48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f17f1d08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f3292958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f597b9b8)]: 98 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8efd2a8e8)]: 0 failure(s)
2024-03-21 08:22:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x61c8eaaa2a78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x61c8ebac6ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x61c8f019ee48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x61c8f17f1d08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x61c8f3292958)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x61c8f597b9b8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x61c8efd2a8e8)]: 0 failure(s)
2024-03-21 08:22:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9994  0.9987  0.9976  0.9971  0.9962  0.9948  0.9945  0.9924  0.9897  0.9895  0.9892  0.9890  0.9883  0.9882  0.9860
[17 : 32]:	0.9856  0.9849  0.9848  0.9837  0.9822  0.9817  0.9808  0.9800  0.9798  0.9787  0.9778  0.9774  0.9771  0.9767  0.9761  0.9760
[33 : 48]:	0.9756  0.9732  0.9726  0.9726  0.9718  0.9712  0.9707  0.9691  0.9678  0.9677  0.9667  0.9666  0.9656  0.9653  0.9652  0.9647
[49 : 64]:	0.9630  0.9623  0.9609  0.9607  0.9605  0.9605  0.9599  0.9582  0.9577  0.9575  0.9575  0.9574  0.9571  0.9551  0.9535  0.9531
2024-03-21 08:22:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 08:22:41 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #1: GFLOPs: 63.4026. Time: 912.8646 us. Best GFLOPs: 63.4026
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #2: GFLOPs: 121.8012. Time: 475.1843 us. Best GFLOPs: 121.8012
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #3: GFLOPs: 11.3385. Time: 5104.5376 us. Best GFLOPs: 121.8012
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #4: GFLOPs: 435.9226. Time: 132.7713 us. Best GFLOPs: 435.9226
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #5: GFLOPs: 182.7715. Time: 316.6688 us. Best GFLOPs: 435.9226
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #6: GFLOPs: 248.3673. Time: 233.0340 us. Best GFLOPs: 435.9226
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #7: GFLOPs: 13.5705. Time: 4265.0025 us. Best GFLOPs: 435.9226
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #8: GFLOPs: 311.5372. Time: 185.7820 us. Best GFLOPs: 435.9226
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #9: GFLOPs: 170.3665. Time: 339.7266 us. Best GFLOPs: 435.9226
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #10: GFLOPs: 573.7699. Time: 100.8732 us. Best GFLOPs: 573.7699
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #11: GFLOPs: 2820.2097. Time: 20.5226 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #12: GFLOPs: 2072.7854. Time: 27.9228 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #13: GFLOPs: 2050.0141. Time: 28.2330 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #14: GFLOPs: 2813.5146. Time: 20.5714 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #15: GFLOPs: 125.5856. Time: 460.8649 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #16: GFLOPs: 221.7909. Time: 260.9576 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #17: GFLOPs: 912.0140. Time: 63.4618 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #18: GFLOPs: 2068.3350. Time: 27.9829 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #19: GFLOPs: 26.5812. Time: 2177.4025 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #20: GFLOPs: 14.7144. Time: 3933.4203 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #21: GFLOPs: 83.1080. Time: 696.4196 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #22: GFLOPs: 761.5526. Time: 76.0000 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #23: GFLOPs: 105.7795. Time: 547.1573 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #24: GFLOPs: 520.2443. Time: 111.2516 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #25: GFLOPs: 468.2671. Time: 123.6004 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #26: GFLOPs: 243.9369. Time: 237.2664 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #27: GFLOPs: 505.5888. Time: 114.4765 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #28: GFLOPs: 841.8761. Time: 68.7489 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #29: GFLOPs: 522.1753. Time: 110.8402 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #30: GFLOPs: 82.8882. Time: 698.2660 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #31: GFLOPs: 334.4872. Time: 173.0351 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #32: GFLOPs: 171.6669. Time: 337.1531 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #33: GFLOPs: 614.1165. Time: 94.2460 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #34: GFLOPs: 176.9953. Time: 327.0031 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #35: GFLOPs: 440.8818. Time: 131.2779 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #36: GFLOPs: 951.9072. Time: 60.8022 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #37: GFLOPs: 160.6673. Time: 360.2351 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #38: GFLOPs: 139.5070. Time: 414.8755 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #39: GFLOPs: 311.7891. Time: 185.6320 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #40: GFLOPs: 211.7421. Time: 273.3420 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #41: GFLOPs: 685.6921. Time: 84.4082 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #42: GFLOPs: 217.8702. Time: 265.6536 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #43: GFLOPs: 269.8046. Time: 214.5183 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #44: GFLOPs: 10.6561. Time: 5431.4559 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #45: GFLOPs: 814.5169. Time: 71.0581 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #46: GFLOPs: 32.0161. Time: 1807.7766 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #47: GFLOPs: 32.9097. Time: 1758.6931 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #48: GFLOPs: 226.4247. Time: 255.6170 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #49: GFLOPs: 102.7561. Time: 563.2565 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #50: GFLOPs: 32.6307. Time: 1773.7297 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #51: GFLOPs: 17.2688. Time: 3351.5861 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #52: GFLOPs: 792.9353. Time: 72.9921 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #53: GFLOPs: 315.6280. Time: 183.3741 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #54: GFLOPs: 177.6672. Time: 325.7665 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #55: GFLOPs: 293.2981. Time: 197.3351 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #56: GFLOPs: 1628.4665. Time: 35.5414 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #57: GFLOPs: 212.7679. Time: 272.0242 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #58: GFLOPs: 22.0570. Time: 2624.0252 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #59: GFLOPs: 510.0631. Time: 113.4723 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #60: GFLOPs: 1468.2748. Time: 39.4191 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #61: GFLOPs: 225.5796. Time: 256.5747 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #62: GFLOPs: 114.3917. Time: 505.9635 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #63: GFLOPs: 228.7463. Time: 253.0227 us. Best GFLOPs: 2820.2097
2024-03-21 09:11:01 [INFO] [task_scheduler.cc:131] [Task #104: fused_nn_conv2d_add_nn_relu_51] Trial #64: GFLOPs: 1642.9670. Time: 35.2277 us. Best GFLOPs: 2820.2097
