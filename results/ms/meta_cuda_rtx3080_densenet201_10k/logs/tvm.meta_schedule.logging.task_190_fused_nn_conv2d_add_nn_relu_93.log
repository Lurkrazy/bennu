2024-03-21 13:42:32 [INFO] [task_scheduler.cc:160] Initializing Task #190: "fused_nn_conv2d_add_nn_relu_93"
2024-03-21 13:42:32 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(192), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56), T.int64(192), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(56), T.int64(56)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 13:42:32 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 13:42:32 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(21504)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1536)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(192), rc_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0 * T.int64(48) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(8)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 8, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 4, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 24, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 13:42:32 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(21504)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1536)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(8)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 8, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 4, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 24, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 13:42:32 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), "float32"), p1: T.Buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(56), T.int64(56)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(192), T.int64(56), T.int64(56)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(192), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(56), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(4), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(21504)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(448))
                                    v2 = T.axis.spatial(T.int64(56), ax0_ax1_ax2_ax3_fused % T.int64(448) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(1536)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(48))
                                    v1 = T.axis.spatial(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused % T.int64(48))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(24), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(4), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(2)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + xx_3 * T.int64(2) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(192), rc_0_ry_0_rx_0_fused * T.int64(48) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(8), T.int64(8)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(7) * T.int64(32) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(7) * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                                v2 = T.axis.spatial(T.int64(56), nn_1_ff_1_yy_1_xx_1_fused % T.int64(7) * T.int64(8) + ax2)
                                v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(7) * T.int64(8) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[4, 8, 4, 1, 1])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 7, 1, 4, 2])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[7, 1, 1, 4, 2])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[4, 24, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 15:28:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 15:28:35 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 15:28:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f97c5b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f82bb058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0864058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f71a7f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f82ebc88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f77cb4a8)]: 490 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f61890a8)]: 0 failure(s)
2024-03-21 15:28:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f97c5b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f82bb058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0864058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f71a7f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f82ebc88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f77cb4a8)]: 976 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f61890a8)]: 0 failure(s)
2024-03-21 15:28:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f97c5b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f82bb058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0864058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f71a7f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f82ebc88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f77cb4a8)]: 1467 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f61890a8)]: 0 failure(s)
2024-03-21 15:28:38 [INFO] [evolutionary_search.cc:723] Sampled 69 candidate(s)
2024-03-21 15:28:39 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f97c5b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f82bb058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0864058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f71a7f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f82ebc88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f77cb4a8)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f61890a8)]: 0 failure(s)
2024-03-21 15:28:41 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f97c5b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f82bb058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0864058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f71a7f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f82ebc88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f77cb4a8)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f61890a8)]: 0 failure(s)
2024-03-21 15:28:42 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f97c5b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f82bb058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0864058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f71a7f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f82ebc88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f77cb4a8)]: 122 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f61890a8)]: 0 failure(s)
2024-03-21 15:28:44 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5ac2f97c5b78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5ac2f82bb058)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5ac2f0864058)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5ac2f71a7f58)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5ac2f82ebc88)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5ac2f77cb4a8)]: 110 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5ac2f61890a8)]: 0 failure(s)
2024-03-21 15:28:44 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9989  0.9976  0.9975  0.9967  0.9951  0.9936  0.9934  0.9924  0.9923  0.9919  0.9905  0.9905  0.9904  0.9903  0.9884
[17 : 32]:	0.9871  0.9865  0.9864  0.9855  0.9849  0.9829  0.9826  0.9825  0.9810  0.9808  0.9807  0.9806  0.9783  0.9770  0.9759  0.9726
[33 : 48]:	0.9724  0.9724  0.9716  0.9706  0.9704  0.9697  0.9696  0.9695  0.9691  0.9687  0.9686  0.9677  0.9676  0.9671  0.9671  0.9631
[49 : 64]:	0.9628  0.9624  0.9607  0.9596  0.9590  0.9583  0.9574  0.9567  0.9566  0.9564  0.9559  0.9550  0.9544  0.9539  0.9538  0.9538
2024-03-21 15:28:44 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 15:28:44 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #1: GFLOPs: 457.6262. Time: 338.5809 us. Best GFLOPs: 457.6262
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #2: GFLOPs: 146.3336. Time: 1058.8376 us. Best GFLOPs: 457.6262
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #3: GFLOPs: 3739.9148. Time: 41.4297 us. Best GFLOPs: 3739.9148
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #4: GFLOPs: 190.3490. Time: 813.9967 us. Best GFLOPs: 3739.9148
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #5: GFLOPs: 22.7800. Time: 6801.7471 us. Best GFLOPs: 3739.9148
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #6: GFLOPs: 4900.4841. Time: 31.6180 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #7: GFLOPs: 211.0150. Time: 734.2772 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #8: GFLOPs: 204.2833. Time: 758.4737 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #9: GFLOPs: 1474.5445. Time: 105.0789 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #10: GFLOPs: 48.6955. Time: 3181.8881 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #11: GFLOPs: 885.1873. Time: 175.0403 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #12: GFLOPs: 173.6330. Time: 892.3622 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #13: GFLOPs: 22.6127. Time: 6852.0619 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #14: GFLOPs: 552.0622. Time: 280.6631 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #15: GFLOPs: 85.9762. Time: 1802.1668 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #16: GFLOPs: 535.0615. Time: 289.5807 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #17: GFLOPs: 108.7276. Time: 1425.0618 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #18: GFLOPs: 4785.4354. Time: 32.3781 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #19: GFLOPs: 3.8193. Time: 40568.4913 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #20: GFLOPs: 1062.3402. Time: 145.8511 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #21: GFLOPs: 2027.6757. Time: 76.4143 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #22: GFLOPs: 40.8111. Time: 3796.6057 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #23: GFLOPs: 1996.6932. Time: 77.6000 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #24: GFLOPs: 2415.3806. Time: 64.1487 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #25: GFLOPs: 2020.3334. Time: 76.6920 us. Best GFLOPs: 4900.4841
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #26: GFLOPs: 6332.1723. Time: 24.4692 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #27: GFLOPs: 4231.2073. Time: 36.6192 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #28: GFLOPs: 43.7855. Time: 3538.6968 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #29: GFLOPs: 137.4020. Time: 1127.6657 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #30: GFLOPs: 6031.7746. Time: 25.6879 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #31: GFLOPs: 6022.1028. Time: 25.7291 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #32: GFLOPs: 40.1134. Time: 3862.6401 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #33: GFLOPs: 185.3249. Time: 836.0640 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #34: GFLOPs: 276.6442. Time: 560.0822 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #35: GFLOPs: 3107.5010. Time: 49.8611 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #36: GFLOPs: 507.5652. Time: 305.2681 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #37: GFLOPs: 5931.9290. Time: 26.1203 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #38: GFLOPs: 128.5121. Time: 1205.6724 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #39: GFLOPs: 2297.3110. Time: 67.4456 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #40: GFLOPs: 203.2637. Time: 762.2782 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #41: GFLOPs: 266.5003. Time: 581.4008 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #42: GFLOPs: 2629.6296. Time: 58.9222 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #43: GFLOPs: 2438.1711. Time: 63.5491 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #44: GFLOPs: 144.8230. Time: 1069.8820 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #45: GFLOPs: 1452.5781. Time: 106.6679 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #46: GFLOPs: 57.1531. Time: 2711.0262 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #47: GFLOPs: 682.2734. Time: 227.0988 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #48: GFLOPs: 164.3922. Time: 942.5232 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #49: GFLOPs: 2811.5762. Time: 55.1091 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #50: GFLOPs: 1729.3409. Time: 89.5968 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #51: GFLOPs: 43.6643. Time: 3548.5132 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #52: GFLOPs: 4072.1736. Time: 38.0493 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #53: GFLOPs: 130.3609. Time: 1188.5738 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #54: GFLOPs: 123.7006. Time: 1252.5688 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #55: GFLOPs: 221.5539. Time: 699.3490 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #56: GFLOPs: 1639.1994. Time: 94.5239 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #57: GFLOPs: 2048.4861. Time: 75.6380 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #58: GFLOPs: 4205.4479. Time: 36.8435 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #59: GFLOPs: 120.0547. Time: 1290.6075 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #60: GFLOPs: 26.6499. Time: 5814.0445 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #61: GFLOPs: 4760.4422. Time: 32.5481 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #62: GFLOPs: 22.2819. Time: 6953.7791 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #63: GFLOPs: 156.5959. Time: 989.4478 us. Best GFLOPs: 6332.1723
2024-03-21 15:50:25 [INFO] [task_scheduler.cc:131] [Task #190: fused_nn_conv2d_add_nn_relu_93] Trial #64: GFLOPs: 2634.6749. Time: 58.8093 us. Best GFLOPs: 6332.1723
