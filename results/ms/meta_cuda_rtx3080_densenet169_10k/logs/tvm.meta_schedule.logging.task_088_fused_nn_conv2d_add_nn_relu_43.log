2024-03-21 10:38:28 [INFO] [task_scheduler.cc:160] Initializing Task #88: "fused_nn_conv2d_add_nn_relu_43"
2024-03-21 10:38:28 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(896), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(896), T.int64(14), T.int64(14)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(896), T.int64(14), T.int64(14)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14), T.int64(896), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(14), T.int64(14)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 10:38:28 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 10:38:28 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(896), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(896), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(896), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(175616)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(896), ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(57344)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(896))
                                    v1 = T.axis.spatial(T.int64(896), ax0_ax1_ax2_ax3_fused % T.int64(896))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(896), rc_0 * T.int64(896) + rc_1 * T.int64(14) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 1, 8, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 14, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 64, 14])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 10:38:28 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(896), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(896), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(896), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(175616)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(896), ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(57344)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(896))
                                    v1 = T.axis.spatial(T.int64(896), ax0_ax1_ax2_ax3_fused % T.int64(896))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(896), rc_1 * T.int64(14) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 1, 8, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 14, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 64, 14])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 10:38:28 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(896), T.int64(14), T.int64(14)), "float32"), p1: T.Buffer((T.int64(128), T.int64(896), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(14), T.int64(14)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(896), T.int64(14), T.int64(14)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(896), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(1), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(175616)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(896), ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(14))
                                    v3 = T.axis.spatial(T.int64(14), ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(57344)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(896))
                                    v1 = T.axis.spatial(T.int64(896), ax0_ax1_ax2_ax3_fused % T.int64(896))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(64), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(896), rc_1 * T.int64(14) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(28) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) // T.int64(14) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(14), nn_1_ff_1_yy_1_xx_1_fused % T.int64(14) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 4, 1, 8, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 2, 1, 7, 1])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 14, 1, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 64, 14])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 11:21:21 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 11:21:21 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 11:21:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd7a35a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5d57358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd71b0c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd3cdac48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd4e29d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1723398)]: 490 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d10558)]: 0 failure(s)
2024-03-21 11:21:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd7a35a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5d57358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd71b0c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd3cdac48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd4e29d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1723398)]: 977 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d10558)]: 0 failure(s)
2024-03-21 11:21:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd7a35a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5d57358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd71b0c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd3cdac48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd4e29d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1723398)]: 1464 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d10558)]: 0 failure(s)
2024-03-21 11:21:23 [INFO] [evolutionary_search.cc:723] Sampled 72 candidate(s)
2024-03-21 11:21:24 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd7a35a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5d57358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd71b0c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd3cdac48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd4e29d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1723398)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d10558)]: 0 failure(s)
2024-03-21 11:21:25 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd7a35a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5d57358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd71b0c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd3cdac48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd4e29d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1723398)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d10558)]: 0 failure(s)
2024-03-21 11:21:27 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd7a35a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5d57358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd71b0c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd3cdac48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd4e29d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1723398)]: 96 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d10558)]: 0 failure(s)
2024-03-21 11:21:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x578cd7a35a88)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x578cd5d57358)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x578cd71b0c28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x578cd3cdac48)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x578cd4e29d48)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x578cd1723398)]: 89 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x578cd7d10558)]: 0 failure(s)
2024-03-21 11:21:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9999  0.9997  0.9992  0.9985  0.9983  0.9968  0.9964  0.9952  0.9942  0.9930  0.9922  0.9903  0.9897  0.9894  0.9893
[17 : 32]:	0.9886  0.9882  0.9882  0.9876  0.9869  0.9867  0.9864  0.9856  0.9831  0.9830  0.9815  0.9803  0.9794  0.9793  0.9785  0.9784
[33 : 48]:	0.9779  0.9777  0.9757  0.9743  0.9742  0.9718  0.9718  0.9717  0.9710  0.9709  0.9696  0.9695  0.9689  0.9686  0.9685  0.9682
[49 : 64]:	0.9667  0.9664  0.9633  0.9630  0.9626  0.9614  0.9611  0.9608  0.9608  0.9604  0.9593  0.9592  0.9587  0.9583  0.9569  0.9560
2024-03-21 11:21:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 11:21:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #1: GFLOPs: 1559.3353. Time: 28.8635 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #2: GFLOPs: 637.4173. Time: 70.6097 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #3: GFLOPs: 19.5185. Time: 2305.9084 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #4: GFLOPs: 389.8496. Time: 115.4493 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #5: GFLOPs: 41.7357. Time: 1078.4024 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #6: GFLOPs: 470.7326. Time: 95.6124 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #7: GFLOPs: 308.8329. Time: 145.7353 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #8: GFLOPs: 479.5868. Time: 93.8472 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #9: GFLOPs: 429.9400. Time: 104.6841 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #10: GFLOPs: 15.9395. Time: 2823.6764 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #11: GFLOPs: 237.5975. Time: 189.4291 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #12: GFLOPs: 291.6013. Time: 154.3473 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #13: GFLOPs: 755.3365. Time: 59.5865 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #14: GFLOPs: 8.9365. Time: 5036.4368 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #15: GFLOPs: 394.1570. Time: 114.1877 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #16: GFLOPs: 237.2530. Time: 189.7041 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #17: GFLOPs: 50.1517. Time: 897.4355 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #18: GFLOPs: 477.4600. Time: 94.2652 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #19: GFLOPs: 572.8618. Time: 78.5667 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #20: GFLOPs: 544.6010. Time: 82.6438 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #21: GFLOPs: 419.3445. Time: 107.3291 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #22: GFLOPs: 283.5044. Time: 158.7554 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #23: GFLOPs: 314.0483. Time: 143.3151 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #24: GFLOPs: 330.7648. Time: 136.0721 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #25: GFLOPs: 370.4355. Time: 121.4999 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #26: GFLOPs: 766.8800. Time: 58.6896 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #27: GFLOPs: 139.5200. Time: 322.5908 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #28: GFLOPs: 282.7379. Time: 159.1858 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #29: GFLOPs: 136.4680. Time: 329.8053 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #30: GFLOPs: 295.9631. Time: 152.0726 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #31: GFLOPs: 496.5648. Time: 90.6385 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #32: GFLOPs: 14.4893. Time: 3106.2823 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #33: GFLOPs: 126.8654. Time: 354.7686 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #34: GFLOPs: 1176.4417. Time: 38.2576 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #35: GFLOPs: 828.6677. Time: 54.3135 us. Best GFLOPs: 1559.3353
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #36: GFLOPs: 1941.3087. Time: 23.1843 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #37: GFLOPs: 368.8666. Time: 122.0167 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #38: GFLOPs: 776.7592. Time: 57.9431 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #39: GFLOPs: 57.4045. Time: 784.0480 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #40: GFLOPs: 63.7130. Time: 706.4158 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #41: GFLOPs: 464.6867. Time: 96.8564 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #42: GFLOPs: 176.2483. Time: 255.3663 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #43: GFLOPs: 115.2972. Time: 390.3640 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #44: GFLOPs: 271.8528. Time: 165.5597 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #45: GFLOPs: 533.2341. Time: 84.4055 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #46: GFLOPs: 423.5770. Time: 106.2567 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #47: GFLOPs: 94.8736. Time: 474.3983 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #48: GFLOPs: 1728.1210. Time: 26.0444 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #49: GFLOPs: 942.1342. Time: 47.7723 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #50: GFLOPs: 421.6603. Time: 106.7396 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #51: GFLOPs: 163.3484. Time: 275.5330 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #52: GFLOPs: 295.6869. Time: 152.2146 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #53: GFLOPs: 312.9585. Time: 143.8142 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #54: GFLOPs: 8.4869. Time: 5303.1881 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #55: GFLOPs: 180.7822. Time: 248.9618 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #56: GFLOPs: 279.3777. Time: 161.1004 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #57: GFLOPs: 252.6373. Time: 178.1521 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #58: GFLOPs: 782.8980. Time: 57.4888 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #59: GFLOPs: 550.9382. Time: 81.6931 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #60: GFLOPs: 909.1635. Time: 49.5047 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #61: GFLOPs: 246.8437. Time: 182.3335 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #62: GFLOPs: 176.4903. Time: 255.0161 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #63: GFLOPs: 534.7694. Time: 84.1631 us. Best GFLOPs: 1941.3087
2024-03-21 12:22:11 [INFO] [task_scheduler.cc:131] [Task #88: fused_nn_conv2d_add_nn_relu_43] Trial #64: GFLOPs: 217.2592. Time: 207.1621 us. Best GFLOPs: 1941.3087
