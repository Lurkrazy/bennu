2024-03-20 22:52:36 [INFO] [task_scheduler.cc:160] Initializing Task #105: "fused_nn_conv2d_add_nn_relu_51"
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28), T.int64(128), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(128), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12544)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(128), rc_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0 * T.int64(64) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 1, 8, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 4, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12544)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 1, 8, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 4, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 22:52:36 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32"), p1: T.Buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(128), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(128), T.int64(28), T.int64(28)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(128), T.int64(128), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(7), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(2), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(12544)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(196))
                                    v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + ax0_ax1_ax2_ax3_fused % T.int64(196) // T.int64(28))
                                    v3 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(4096)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(64))
                                    v1 = T.axis.spatial(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + ax0_ax1_ax2_ax3_fused % T.int64(64))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(7), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + yy_3 * T.int64(7) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(128), rc_0_ry_0_rx_0_fused * T.int64(64) + rc_1 * T.int64(16) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(7), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(128), nn_0_ff_0_yy_0_xx_0_fused // T.int64(4) * T.int64(64) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(4) * T.int64(7) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(4) + nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[2, 1, 1, 8, 8])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[4, 1, 1, 1, 7])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 7, 4, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[2, 4, 16])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-20 23:48:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-20 23:48:25 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-20 23:48:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1453508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2f1b818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6c41728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a13a42b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a50b28f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a6d22f88)]: 470 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a4015d48)]: 0 failure(s)
2024-03-20 23:48:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1453508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2f1b818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6c41728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a13a42b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a50b28f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a6d22f88)]: 959 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a4015d48)]: 0 failure(s)
2024-03-20 23:48:27 [INFO] [evolutionary_search.cc:723] Sampled 65 candidate(s)
2024-03-20 23:48:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1453508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2f1b818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6c41728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a13a42b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a50b28f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a6d22f88)]: 117 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a4015d48)]: 0 failure(s)
2024-03-20 23:48:29 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1453508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2f1b818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6c41728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a13a42b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a50b28f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a6d22f88)]: 100 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a4015d48)]: 0 failure(s)
2024-03-20 23:48:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1453508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2f1b818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6c41728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a13a42b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a50b28f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a6d22f88)]: 88 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a4015d48)]: 0 failure(s)
2024-03-20 23:48:32 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5729a1453508)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5729a2f1b818)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5729a6c41728)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5729a13a42b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5729a50b28f8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5729a6d22f88)]: 77 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5729a4015d48)]: 0 failure(s)
2024-03-20 23:48:32 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9990  0.9986  0.9981  0.9980  0.9966  0.9959  0.9941  0.9934  0.9928  0.9912  0.9905  0.9901  0.9896  0.9895  0.9885
[17 : 32]:	0.9883  0.9856  0.9851  0.9850  0.9846  0.9843  0.9838  0.9831  0.9827  0.9816  0.9808  0.9807  0.9803  0.9800  0.9792  0.9782
[33 : 48]:	0.9780  0.9778  0.9755  0.9745  0.9742  0.9740  0.9735  0.9728  0.9706  0.9697  0.9691  0.9687  0.9681  0.9673  0.9670  0.9668
[49 : 64]:	0.9660  0.9659  0.9648  0.9646  0.9645  0.9638  0.9635  0.9631  0.9621  0.9609  0.9597  0.9590  0.9585  0.9582  0.9581  0.9561
2024-03-20 23:48:32 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-20 23:48:32 [INFO] [evolutionary_search.cc:730] Sending 62 candidates(s) for measurement
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #1: GFLOPs: 717.7374. Time: 36.0728 us. Best GFLOPs: 717.7374
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #2: GFLOPs: 16.7088. Time: 1549.5326 us. Best GFLOPs: 717.7374
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #3: GFLOPs: 934.3676. Time: 27.7095 us. Best GFLOPs: 934.3676
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #4: GFLOPs: 32.5927. Time: 794.3741 us. Best GFLOPs: 934.3676
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #5: GFLOPs: 2174.8925. Time: 11.9044 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #6: GFLOPs: 373.7347. Time: 69.2759 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #7: GFLOPs: 755.3323. Time: 34.2774 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #8: GFLOPs: 30.1463. Time: 858.8390 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #9: GFLOPs: 1717.7084. Time: 15.0729 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #10: GFLOPs: 46.3702. Time: 558.3504 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #11: GFLOPs: 520.7392. Time: 49.7193 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #12: GFLOPs: 721.6625. Time: 35.8766 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #13: GFLOPs: 55.5272. Time: 466.2724 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #14: GFLOPs: 17.4084. Time: 1487.2560 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #15: GFLOPs: 596.6789. Time: 43.3915 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #16: GFLOPs: 1251.5289. Time: 20.6873 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #17: GFLOPs: 716.3885. Time: 36.1407 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #18: GFLOPs: 585.0338. Time: 44.2552 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #19: GFLOPs: 1261.1523. Time: 20.5295 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #20: GFLOPs: 1006.3883. Time: 25.7265 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #21: GFLOPs: 71.3055. Time: 363.0970 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #22: GFLOPs: 492.2967. Time: 52.5919 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #23: GFLOPs: 26.0918. Time: 992.2966 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #24: GFLOPs: 26.7992. Time: 966.1046 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #25: GFLOPs: 308.4086. Time: 83.9497 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #26: GFLOPs: 162.3306. Time: 159.4943 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #27: GFLOPs: 985.6706. Time: 26.2672 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #28: GFLOPs: 56.8584. Time: 455.3564 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #29: GFLOPs: 289.3063. Time: 89.4928 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #30: GFLOPs: 1086.2213. Time: 23.8357 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #31: GFLOPs: 225.2508. Time: 114.9422 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #32: GFLOPs: 15.1915. Time: 1704.3009 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #33: GFLOPs: 730.9559. Time: 35.4205 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #34: GFLOPs: 522.3621. Time: 49.5649 us. Best GFLOPs: 2174.8925
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #35: GFLOPs: 3158.2287. Time: 8.1979 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #36: GFLOPs: 34.7197. Time: 745.7095 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #37: GFLOPs: 1132.5178. Time: 22.8613 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #38: GFLOPs: 1704.4900. Time: 15.1898 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #39: GFLOPs: 1239.5261. Time: 20.8877 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #40: GFLOPs: 1292.5851. Time: 20.0303 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #41: GFLOPs: 2001.7989. Time: 12.9338 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #42: GFLOPs: 313.3156. Time: 82.6349 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #43: GFLOPs: 42.7098. Time: 606.2038 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #44: GFLOPs: 86.4847. Time: 299.3687 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #45: GFLOPs: 279.0448. Time: 92.7837 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #46: GFLOPs: 916.3351. Time: 28.2547 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #47: GFLOPs: 70.6852. Time: 366.2832 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #48: GFLOPs: 193.3245. Time: 133.9241 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #49: GFLOPs: 2178.9306. Time: 11.8824 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #50: GFLOPs: 34.4067. Time: 752.4937 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #51: GFLOPs: 1230.7938. Time: 21.0359 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #52: GFLOPs: 942.3690. Time: 27.4742 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #53: GFLOPs: 379.2973. Time: 68.2599 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #54: GFLOPs: 42.0642. Time: 615.5067 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #55: GFLOPs: 384.3177. Time: 67.3683 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #56: GFLOPs: 25.8652. Time: 1000.9907 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #57: GFLOPs: 24.2887. Time: 1065.9622 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #58: GFLOPs: 1930.1247. Time: 13.4141 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #59: GFLOPs: 960.6419. Time: 26.9516 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #60: GFLOPs: 117.5377. Time: 220.2767 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #61: GFLOPs: 153.5107. Time: 168.6581 us. Best GFLOPs: 3158.2287
2024-03-21 00:12:52 [INFO] [task_scheduler.cc:131] [Task #105: fused_nn_conv2d_add_nn_relu_51] Trial #62: GFLOPs: 2837.9200. Time: 9.1232 us. Best GFLOPs: 3158.2287
