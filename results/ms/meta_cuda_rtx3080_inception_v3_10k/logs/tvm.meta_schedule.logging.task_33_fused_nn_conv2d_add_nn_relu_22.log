2024-03-21 16:45:31 [INFO] [task_scheduler.cc:160] Initializing Task #33: "fused_nn_conv2d_add_nn_relu_22"
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        # with T.block("root"):
        pad_temp = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(25), T.int64(25)))
        conv2d_nchw = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25)))
        T_add = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25)))
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(288), T.int64(25), T.int64(25)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25), T.int64(288), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25)):
            with T.block("T_add"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + p2[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(48), T.int64(25), T.int64(25)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:164] Total 3 design space(s) generated
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(25), T.int64(25)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(25), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(5), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(9), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(20000)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(625))
                                    v2 = T.axis.spatial(T.int64(25), ax0_ax1_ax2_ax3_fused % T.int64(625) // T.int64(25))
                                    v3 = T.axis.spatial(T.int64(25), ax0_ax1_ax2_ax3_fused % T.int64(25))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(288), rc_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused * T.int64(6) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused // T.int64(5) * T.int64(5) + yy_3 * T.int64(5) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused % T.int64(5) * T.int64(5) + nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0 * T.int64(32) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_0 + ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_0 + rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(5), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused // T.int64(5) * T.int64(5) + ax2)
                                v3 = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused % T.int64(5) * T.int64(5) + nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 1, 3, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 5, 1, 1, 5])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 5, 5, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[9, 16, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v100 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v100)
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(25), T.int64(25)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(25), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(5), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 2]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(20000)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(625))
                                    v2 = T.axis.spatial(T.int64(25), ax0_ax1_ax2_ax3_fused % T.int64(625) // T.int64(25))
                                    v3 = T.axis.spatial(T.int64(25), ax0_ax1_ax2_ax3_fused % T.int64(25))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused * T.int64(6) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused // T.int64(5) * T.int64(5) + yy_3 * T.int64(5) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused % T.int64(5) * T.int64(5) + nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(5), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused // T.int64(5) * T.int64(5) + ax2)
                                v3 = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused % T.int64(5) * T.int64(5) + nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 1, 3, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 5, 1, 1, 5])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 5, 5, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[9, 16, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 16:45:31 [INFO] [task_scheduler.cc:170] Design space #2:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer((T.int64(1), T.int64(288), T.int64(25), T.int64(25)), "float32"), p1: T.Buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1)), "float32"), p2: T.Buffer((T.int64(1), T.int64(48), T.int64(1), T.int64(1)), "float32"), T_relu: T.Buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25)), "float32")):
        T.func_attr({"tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            conv2d_nchw_local = T.alloc_buffer((T.int64(1), T.int64(48), T.int64(25), T.int64(25)), scope="local")
            pad_temp_shared = T.alloc_buffer((T.int64(1), T.int64(288), T.int64(25), T.int64(25)), scope="shared")
            p1_shared = T.alloc_buffer((T.int64(48), T.int64(288), T.int64(1), T.int64(1)), scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(25), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(5), thread="threadIdx.x"):
                        for rc_0_ry_0_rx_0_fused in T.serial(T.int64(9), annotations={"software_pipeline_async_stages": [0], "software_pipeline_order": [0, 1, 2], "software_pipeline_stage": [0, 0, 3]}):
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(20000)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused // T.int64(625))
                                    v2 = T.axis.spatial(T.int64(25), ax0_ax1_ax2_ax3_fused % T.int64(625) // T.int64(25))
                                    v3 = T.axis.spatial(T.int64(25), ax0_ax1_ax2_ax3_fused % T.int64(25))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in range(T.int64(192)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused * T.int64(6) + ax0_ax1_ax2_ax3_fused // T.int64(32))
                                    v1 = T.axis.spatial(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(32) + ax0_ax1_ax2_ax3_fused % T.int64(32))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(16), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(5), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused * T.int64(6) + ff_3 * T.int64(2) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused // T.int64(5) * T.int64(5) + yy_3 * T.int64(5) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused % T.int64(5) * T.int64(5) + nn_2_ff_2_yy_2_xx_2_fused + xx_3 + xx_4)
                                    v_rc = T.axis.reduce(T.int64(288), rc_0_ry_0_rx_0_fused * T.int64(32) + rc_1 * T.int64(2) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_1 + ry_2)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 32, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(5), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(48), nn_0_ff_0_yy_0_xx_0_fused * T.int64(6) + ax1)
                                v2 = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused // T.int64(5) * T.int64(5) + ax2)
                                v3 = T.axis.spatial(T.int64(25), nn_1_ff_1_yy_1_xx_1_fused % T.int64(5) * T.int64(5) + nn_2_ff_2_yy_2_xx_2_fused + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3], p2[v0, v1, T.int64(0), T.int64(0)])
                                T.writes(T_relu[v0, v1, v2, v3])
                                T_relu[v0, v1, v2, v3] = T.max(conv2d_nchw_local[v0, v1, v2, v3] + p2[v0, v1, T.int64(0), T.int64(0)], T.float32(0))
b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_add", func_name="main")
b3 = sch.get_block(name="T_relu", func_name="main")
b4 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l5, l6, l7, l8, l9, l10, l11 = sch.get_loops(block=b1)
v12, v13, v14, v15, v16 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l17, l18, l19, l20, l21 = sch.split(loop=l5, factors=[v12, v13, v14, v15, v16], preserve_unit_iters=True)
v22, v23, v24, v25, v26 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[8, 1, 1, 3, 2])
l27, l28, l29, l30, l31 = sch.split(loop=l6, factors=[v22, v23, v24, v25, v26], preserve_unit_iters=True)
v32, v33, v34, v35, v36 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 5, 1, 1, 5])
l37, l38, l39, l40, l41 = sch.split(loop=l7, factors=[v32, v33, v34, v35, v36], preserve_unit_iters=True)
v42, v43, v44, v45, v46 = sch.sample_perfect_tile(loop=l8, n=5, max_innermost_factor=64, decision=[1, 5, 5, 1, 1])
l47, l48, l49, l50, l51 = sch.split(loop=l8, factors=[v42, v43, v44, v45, v46], preserve_unit_iters=True)
v52, v53, v54 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[9, 16, 2])
l55, l56, l57 = sch.split(loop=l9, factors=[v52, v53, v54], preserve_unit_iters=True)
v58, v59, v60 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l61, l62, l63 = sch.split(loop=l10, factors=[v58, v59, v60], preserve_unit_iters=True)
v64, v65, v66 = sch.sample_perfect_tile(loop=l11, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l67, l68, l69 = sch.split(loop=l11, factors=[v64, v65, v66], preserve_unit_iters=True)
sch.reorder(l17, l27, l37, l47, l18, l28, l38, l48, l19, l29, l39, l49, l55, l61, l67, l56, l62, l68, l20, l30, l40, l50, l57, l63, l69, l21, l31, l41, l51)
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="blockIdx.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="vthread.x")
l72 = sch.fuse(l19, l29, l39, l49, preserve_unit_iters=True)
sch.bind(loop=l72, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b73 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b73, loop=l72, preserve_unit_loops=True, index=-1)
b74 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b74, loop=l67, preserve_unit_loops=True, index=-1)
l75, l76, l77, l78, l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b74)
l85 = sch.fuse(l81, l82, l83, l84, preserve_unit_iters=True)
v86 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b74, ann_key="meta_schedule.cooperative_fetch", ann_val=v86)
b87 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b87, loop=l67, preserve_unit_loops=True, index=-1)
l88, l89, l90, l91, l92, l93, l94, l95, l96, l97 = sch.get_loops(block=b87)
l98 = sch.fuse(l94, l95, l96, l97, preserve_unit_iters=True)
v99 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b87, ann_key="meta_schedule.cooperative_fetch", ann_val=v99)
l100 = sch.fuse(l55, l61, l67, preserve_unit_iters=True)
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_stage", ann_val=[0, 0, 3])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_order", ann_val=[0, 1, 2])
sch.annotate(block_or_loop=l100, ann_key="software_pipeline_async_stages", ann_val=[0])
sch.reverse_compute_inline(block=b3)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v101 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b4, ann_key="meta_schedule.unroll_explicit", ann_val=v101)
2024-03-21 17:10:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2024-03-21 17:10:40 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2024-03-21 17:10:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c6f8368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b379778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd89278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071cf90de8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e0f8888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd25fa8)]: 482 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b379678)]: 0 failure(s)
2024-03-21 17:10:42 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c6f8368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b379778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd89278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071cf90de8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e0f8888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd25fa8)]: 969 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b379678)]: 0 failure(s)
2024-03-21 17:10:42 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2024-03-21 17:10:43 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c6f8368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b379778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd89278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071cf90de8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e0f8888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd25fa8)]: 144 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b379678)]: 0 failure(s)
2024-03-21 17:10:45 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c6f8368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b379778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd89278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071cf90de8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e0f8888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd25fa8)]: 154 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b379678)]: 0 failure(s)
2024-03-21 17:10:46 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c6f8368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b379778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd89278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071cf90de8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e0f8888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd25fa8)]: 141 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b379678)]: 0 failure(s)
2024-03-21 17:10:48 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5b071c6f8368)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5b071b379778)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5b071bd89278)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5b071cf90de8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5b071e0f8888)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5b071bd25fa8)]: 151 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5b071b379678)]: 0 failure(s)
2024-03-21 17:10:48 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9991  0.9980  0.9974  0.9967  0.9962  0.9939  0.9934  0.9933  0.9932  0.9930  0.9919  0.9917  0.9917  0.9911  0.9910  0.9893
[17 : 32]:	0.9885  0.9881  0.9874  0.9874  0.9873  0.9867  0.9854  0.9844  0.9840  0.9836  0.9819  0.9819  0.9816  0.9808  0.9804  0.9804
[33 : 48]:	0.9800  0.9797  0.9781  0.9774  0.9773  0.9770  0.9767  0.9750  0.9749  0.9748  0.9743  0.9727  0.9715  0.9710  0.9709  0.9697
[49 : 64]:	0.9693  0.9684  0.9674  0.9674  0.9661  0.9655  0.9637  0.9637  0.9636  0.9630  0.9623  0.9623  0.9613  0.9608  0.9600  0.9596
2024-03-21 17:10:48 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2024-03-21 17:10:48 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #1: GFLOPs: 216.0320. Time: 80.2659 us. Best GFLOPs: 216.0320
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #2: GFLOPs: 624.3783. Time: 27.7716 us. Best GFLOPs: 624.3783
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #3: GFLOPs: 358.7714. Time: 48.3316 us. Best GFLOPs: 624.3783
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #4: GFLOPs: 491.7489. Time: 35.2619 us. Best GFLOPs: 624.3783
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #5: GFLOPs: 575.0510. Time: 30.1538 us. Best GFLOPs: 624.3783
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #6: GFLOPs: 781.2264. Time: 22.1959 us. Best GFLOPs: 781.2264
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #7: GFLOPs: 591.0035. Time: 29.3399 us. Best GFLOPs: 781.2264
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #8: GFLOPs: 708.7452. Time: 24.4658 us. Best GFLOPs: 781.2264
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #9: GFLOPs: 428.0377. Time: 40.5105 us. Best GFLOPs: 781.2264
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #10: GFLOPs: 233.4685. Time: 74.2713 us. Best GFLOPs: 781.2264
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #11: GFLOPs: 215.6294. Time: 80.4158 us. Best GFLOPs: 781.2264
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #12: GFLOPs: 217.3648. Time: 79.7737 us. Best GFLOPs: 781.2264
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #13: GFLOPs: 15.1176. Time: 1147.0069 us. Best GFLOPs: 781.2264
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #14: GFLOPs: 442.8075. Time: 39.1592 us. Best GFLOPs: 781.2264
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #15: GFLOPs: 515.9544. Time: 33.6076 us. Best GFLOPs: 781.2264
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #16: GFLOPs: 1579.8839. Time: 10.9755 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #17: GFLOPs: 10.0021. Time: 1733.6303 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #18: GFLOPs: 389.8327. Time: 44.4806 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #19: GFLOPs: 288.3013. Time: 60.1454 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #20: GFLOPs: 625.2600. Time: 27.7325 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #21: GFLOPs: 302.9377. Time: 57.2395 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #22: GFLOPs: 46.4550. Time: 373.2646 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #23: GFLOPs: 903.2409. Time: 19.1975 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #24: GFLOPs: 348.9270. Time: 49.6952 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #25: GFLOPs: 108.4213. Time: 159.9316 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #26: GFLOPs: 1376.3001. Time: 12.5990 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #27: GFLOPs: 11.9292. Time: 1453.5755 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #28: GFLOPs: 48.4010. Time: 358.2569 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #29: GFLOPs: 757.4060. Time: 22.8939 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #30: GFLOPs: 414.9675. Time: 41.7864 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #31: GFLOPs: 446.2612. Time: 38.8562 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #32: GFLOPs: 173.2786. Time: 100.0701 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #33: GFLOPs: 859.2780. Time: 20.1797 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #34: GFLOPs: 205.8481. Time: 84.2369 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #35: GFLOPs: 1510.3856. Time: 11.4805 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #36: GFLOPs: 489.0581. Time: 35.4559 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #37: GFLOPs: 704.9024. Time: 24.5991 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #38: GFLOPs: 481.3758. Time: 36.0217 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #39: GFLOPs: 778.7410. Time: 22.2667 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #40: GFLOPs: 857.4130. Time: 20.2236 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #41: GFLOPs: 589.8769. Time: 29.3960 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #42: GFLOPs: 372.1879. Time: 46.5894 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #43: GFLOPs: 897.4428. Time: 19.3216 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #44: GFLOPs: 700.4332. Time: 24.7561 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #45: GFLOPs: 274.0209. Time: 63.2799 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #46: GFLOPs: 268.4941. Time: 64.5824 us. Best GFLOPs: 1579.8839
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #47: GFLOPs: 1606.9505. Time: 10.7906 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #48: GFLOPs: 665.8564. Time: 26.0416 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #49: GFLOPs: 228.9458. Time: 75.7385 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #50: GFLOPs: 275.6576. Time: 62.9041 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #51: GFLOPs: 330.4180. Time: 52.4790 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #52: GFLOPs: 319.0114. Time: 54.3554 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #53: GFLOPs: 116.0983. Time: 149.3562 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #54: GFLOPs: 183.0348. Time: 94.7361 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #55: GFLOPs: 631.4597. Time: 27.4602 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #56: GFLOPs: 470.5367. Time: 36.8515 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #57: GFLOPs: 212.8685. Time: 81.4588 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #58: GFLOPs: 322.6574. Time: 53.7412 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #59: GFLOPs: 409.2455. Time: 42.3707 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #60: GFLOPs: 774.5339. Time: 22.3877 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #61: GFLOPs: 243.7257. Time: 71.1456 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #62: GFLOPs: 795.4614. Time: 21.7987 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #63: GFLOPs: 87.2088. Time: 198.8332 us. Best GFLOPs: 1606.9505
2024-03-21 17:36:14 [INFO] [task_scheduler.cc:131] [Task #33: fused_nn_conv2d_add_nn_relu_22] Trial #64: GFLOPs: 31.6397. Time: 548.0455 us. Best GFLOPs: 1606.9505
